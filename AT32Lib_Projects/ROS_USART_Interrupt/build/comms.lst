ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"comms.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.UART2_Init,"ax",%progbits
  17              		.align	1
  18              		.global	UART2_Init
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	UART2_Init:
  25              	.LFB123:
  26              		.file 1 "Src/comms.c"
   1:Src/comms.c   **** /**
   2:Src/comms.c   ****  * comms.c: All USART setup functions
   3:Src/comms.c   ****  **/
   4:Src/comms.c   **** 
   5:Src/comms.c   **** /* Includes ------------------------------------------------------------------*/
   6:Src/comms.c   **** #include "comms.h"
   7:Src/comms.c   **** 
   8:Src/comms.c   **** /* Private variables ---------------------------------------------------------*/
   9:Src/comms.c   **** uint8_t TxBuffer[] = "\n\rUSART Hyperterminal Interrupts Example: USART-Hyperterminal\
  10:Src/comms.c   ****  communication using Interrupt\n\r";
  11:Src/comms.c   **** uint8_t RxBuffer[RxBufferSize];
  12:Src/comms.c   **** uint8_t NbrOfDataToTransfer = TxBufferSize;
  13:Src/comms.c   **** uint8_t NbrOfDataToRead = RxBufferSize;
  14:Src/comms.c   **** uint8_t TxCounter = 0; 
  15:Src/comms.c   **** uint16_t RxCounter = 0;
  16:Src/comms.c   **** 
  17:Src/comms.c   **** void UART2_Init()
  18:Src/comms.c   **** {
  27              		.loc 1 18 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 24
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 30B5     		push	{r4, r5, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 12
  34              		.cfi_offset 4, -12
  35              		.cfi_offset 5, -8
  36              		.cfi_offset 14, -4
  37 0002 87B0     		sub	sp, sp, #28
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 40
  19:Src/comms.c   ****     /* ------ CLOCK CONFIGURATION ------*/
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s 			page 2


  20:Src/comms.c   ****     /* Enable GPIOA clock as we need TX pin PA2 and Rx pin PA3 enabled */
  21:Src/comms.c   ****     RCC_APB2PeriphClockCmd(RCC_APB2PERIPH_GPIOA, ENABLE);
  40              		.loc 1 21 0
  41 0004 0121     		movs	r1, #1
  42 0006 0420     		movs	r0, #4
  43 0008 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
  44              	.LVL0:
  22:Src/comms.c   **** 
  23:Src/comms.c   ****     /* Enable USART2 Clock */
  24:Src/comms.c   ****     RCC_APB1PeriphClockCmd(RCC_APB1PERIPH_USART2, ENABLE); 
  45              		.loc 1 24 0
  46 000c 0121     		movs	r1, #1
  47 000e 4FF40030 		mov	r0, #131072
  48 0012 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
  49              	.LVL1:
  25:Src/comms.c   **** 
  26:Src/comms.c   **** 
  27:Src/comms.c   ****     /*------ GPIO CONFIGURATION ------*/
  28:Src/comms.c   ****     GPIO_InitType GPIO_InitStructure;
  29:Src/comms.c   **** 
  30:Src/comms.c   ****     /* Configure USART2 Rx as input floating */
  31:Src/comms.c   ****     GPIO_InitStructure.GPIO_Pins = GPIO_Pins_3;
  50              		.loc 1 31 0
  51 0016 0823     		movs	r3, #8
  52 0018 ADF81430 		strh	r3, [sp, #20]	@ movhi
  32:Src/comms.c   ****     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  53              		.loc 1 32 0
  54 001c 0425     		movs	r5, #4
  55 001e 8DF81750 		strb	r5, [sp, #23]
  33:Src/comms.c   ****     GPIO_Init(GPIOA, &GPIO_InitStructure);
  56              		.loc 1 33 0
  57 0022 254C     		ldr	r4, .L3
  58 0024 05A9     		add	r1, sp, #20
  59 0026 2046     		mov	r0, r4
  60 0028 FFF7FEFF 		bl	GPIO_Init
  61              	.LVL2:
  34:Src/comms.c   **** 
  35:Src/comms.c   ****     /* Configure USART2 Tx as alternate function push-pull */
  36:Src/comms.c   ****     GPIO_InitStructure.GPIO_Pins = GPIO_Pins_2;
  62              		.loc 1 36 0
  63 002c ADF81450 		strh	r5, [sp, #20]	@ movhi
  37:Src/comms.c   ****     GPIO_InitStructure.GPIO_MaxSpeed = GPIO_MaxSpeed_50MHz;
  64              		.loc 1 37 0
  65 0030 0223     		movs	r3, #2
  66 0032 8DF81630 		strb	r3, [sp, #22]
  38:Src/comms.c   ****     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  67              		.loc 1 38 0
  68 0036 1823     		movs	r3, #24
  69 0038 8DF81730 		strb	r3, [sp, #23]
  39:Src/comms.c   ****     GPIO_Init(GPIOA, &GPIO_InitStructure);
  70              		.loc 1 39 0
  71 003c 05A9     		add	r1, sp, #20
  72 003e 2046     		mov	r0, r4
  73 0040 FFF7FEFF 		bl	GPIO_Init
  74              	.LVL3:
  40:Src/comms.c   **** 
  41:Src/comms.c   **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s 			page 3


  42:Src/comms.c   ****     /*------ NVIC CONFIGURATION ------*/
  43:Src/comms.c   ****     
  44:Src/comms.c   ****     /* Configure the NVIC Preemption Priority Bits */  
  45:Src/comms.c   ****     NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
  75              		.loc 1 45 0
  76 0044 4FF4E060 		mov	r0, #1792
  77 0048 FFF7FEFF 		bl	NVIC_PriorityGroupConfig
  78              	.LVL4:
  46:Src/comms.c   ****     
  47:Src/comms.c   ****     /* Enable the USART2 Interrupt */
  48:Src/comms.c   ****     NVIC_InitType NVIC_InitStructure;
  49:Src/comms.c   **** 
  50:Src/comms.c   ****     NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
  79              		.loc 1 50 0
  80 004c 2623     		movs	r3, #38
  81 004e 8DF81030 		strb	r3, [sp, #16]
  51:Src/comms.c   ****     NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  82              		.loc 1 51 0
  83 0052 0024     		movs	r4, #0
  84 0054 8DF81140 		strb	r4, [sp, #17]
  52:Src/comms.c   ****     NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  85              		.loc 1 52 0
  86 0058 8DF81240 		strb	r4, [sp, #18]
  53:Src/comms.c   ****     NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  87              		.loc 1 53 0
  88 005c 0125     		movs	r5, #1
  89 005e 8DF81350 		strb	r5, [sp, #19]
  54:Src/comms.c   ****     NVIC_Init(&NVIC_InitStructure);
  90              		.loc 1 54 0
  91 0062 04A8     		add	r0, sp, #16
  92 0064 FFF7FEFF 		bl	NVIC_Init
  93              	.LVL5:
  55:Src/comms.c   **** 
  56:Src/comms.c   **** 
  57:Src/comms.c   ****     /*------ BAUD AND OTHER CONFIGURATION ------*/
  58:Src/comms.c   ****     USART_InitType USART_InitStructure;
  59:Src/comms.c   **** 
  60:Src/comms.c   ****     USART_StructInit(&USART_InitStructure);
  94              		.loc 1 60 0
  95 0068 6846     		mov	r0, sp
  96 006a FFF7FEFF 		bl	USART_StructInit
  97              	.LVL6:
  61:Src/comms.c   ****     USART_InitStructure.USART_BaudRate = BAUD_RATE;
  98              		.loc 1 61 0
  99 006e 4FF4E133 		mov	r3, #115200
 100 0072 0093     		str	r3, [sp]
  62:Src/comms.c   ****     USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 101              		.loc 1 62 0
 102 0074 ADF80440 		strh	r4, [sp, #4]	@ movhi
  63:Src/comms.c   ****     USART_InitStructure.USART_StopBits = USART_StopBits_1;
 103              		.loc 1 63 0
 104 0078 ADF80640 		strh	r4, [sp, #6]	@ movhi
  64:Src/comms.c   ****     USART_InitStructure.USART_Parity = USART_Parity_No;
 105              		.loc 1 64 0
 106 007c ADF80840 		strh	r4, [sp, #8]	@ movhi
  65:Src/comms.c   ****     USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 107              		.loc 1 65 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s 			page 4


 108 0080 ADF80C40 		strh	r4, [sp, #12]	@ movhi
  66:Src/comms.c   ****     USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 109              		.loc 1 66 0
 110 0084 0C23     		movs	r3, #12
 111 0086 ADF80A30 		strh	r3, [sp, #10]	@ movhi
  67:Src/comms.c   ****     USART_Init(USART2, &USART_InitStructure);
 112              		.loc 1 67 0
 113 008a 0C4C     		ldr	r4, .L3+4
 114 008c 6946     		mov	r1, sp
 115 008e 2046     		mov	r0, r4
 116 0090 FFF7FEFF 		bl	USART_Init
 117              	.LVL7:
  68:Src/comms.c   **** 
  69:Src/comms.c   ****     /*------ ENABLE USART2 ------*/
  70:Src/comms.c   **** 
  71:Src/comms.c   ****     /* Enable USART2 Receive and Transmit interrupts */
  72:Src/comms.c   ****     USART_INTConfig(USART2, USART_INT_RDNE, ENABLE);
 118              		.loc 1 72 0
 119 0094 2A46     		mov	r2, r5
 120 0096 40F22551 		movw	r1, #1317
 121 009a 2046     		mov	r0, r4
 122 009c FFF7FEFF 		bl	USART_INTConfig
 123              	.LVL8:
  73:Src/comms.c   ****     USART_INTConfig(USART2, USART_INT_TDE, ENABLE);
 124              		.loc 1 73 0
 125 00a0 2A46     		mov	r2, r5
 126 00a2 40F22771 		movw	r1, #1831
 127 00a6 2046     		mov	r0, r4
 128 00a8 FFF7FEFF 		bl	USART_INTConfig
 129              	.LVL9:
  74:Src/comms.c   **** 
  75:Src/comms.c   ****     /* Enable the USART2 Peripheral */
  76:Src/comms.c   ****     USART_Cmd(USART2, ENABLE);
 130              		.loc 1 76 0
 131 00ac 2946     		mov	r1, r5
 132 00ae 2046     		mov	r0, r4
 133 00b0 FFF7FEFF 		bl	USART_Cmd
 134              	.LVL10:
  77:Src/comms.c   **** }
 135              		.loc 1 77 0
 136 00b4 07B0     		add	sp, sp, #28
 137              	.LCFI2:
 138              		.cfi_def_cfa_offset 12
 139              		@ sp needed
 140 00b6 30BD     		pop	{r4, r5, pc}
 141              	.L4:
 142              		.align	2
 143              	.L3:
 144 00b8 00080140 		.word	1073809408
 145 00bc 00440040 		.word	1073759232
 146              		.cfi_endproc
 147              	.LFE123:
 149              		.section	.text.USART2_IRQHandler,"ax",%progbits
 150              		.align	1
 151              		.global	USART2_IRQHandler
 152              		.syntax unified
 153              		.thumb
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s 			page 5


 154              		.thumb_func
 155              		.fpu fpv4-sp-d16
 157              	USART2_IRQHandler:
 158              	.LFB124:
  78:Src/comms.c   **** 
  79:Src/comms.c   **** /**
  80:Src/comms.c   ****   * @brief  This function handles USART1 global interrupt request.
  81:Src/comms.c   ****   * @param  None
  82:Src/comms.c   ****   * @retval None
  83:Src/comms.c   ****   */
  84:Src/comms.c   **** void USART2_IRQHandler(void)
  85:Src/comms.c   **** {
 159              		.loc 1 85 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 0
 162              		@ frame_needed = 0, uses_anonymous_args = 0
 163 0000 10B5     		push	{r4, lr}
 164              	.LCFI3:
 165              		.cfi_def_cfa_offset 8
 166              		.cfi_offset 4, -8
 167              		.cfi_offset 14, -4
  86:Src/comms.c   ****   if(USART_GetITStatus(USART2, USART_INT_RDNE) != RESET)
 168              		.loc 1 86 0
 169 0002 40F22551 		movw	r1, #1317
 170 0006 1C48     		ldr	r0, .L11
 171 0008 FFF7FEFF 		bl	USART_GetITStatus
 172              	.LVL11:
 173 000c 30B9     		cbnz	r0, .L9
 174              	.L6:
  87:Src/comms.c   ****   {
  88:Src/comms.c   ****     /* Read one byte from the receive data register */
  89:Src/comms.c   ****     RxBuffer[RxCounter++] = (USART_ReceiveData(USART2) & 0x7F);
  90:Src/comms.c   **** 
  91:Src/comms.c   ****     if(RxCounter == NbrOfDataToRead)
  92:Src/comms.c   ****     {
  93:Src/comms.c   ****       /* Disable the USART Receive interrupt */
  94:Src/comms.c   ****       USART_INTConfig(USART2, USART_INT_RDNE, DISABLE);
  95:Src/comms.c   ****     }
  96:Src/comms.c   ****   }
  97:Src/comms.c   **** 
  98:Src/comms.c   ****   if(USART_GetITStatus(USART2, USART_INT_TDE) != RESET)
 175              		.loc 1 98 0
 176 000e 40F22771 		movw	r1, #1831
 177 0012 1948     		ldr	r0, .L11
 178 0014 FFF7FEFF 		bl	USART_GetITStatus
 179              	.LVL12:
 180 0018 B8B9     		cbnz	r0, .L10
 181              	.L5:
  99:Src/comms.c   ****   {   
 100:Src/comms.c   ****     /* Write one byte to the transmit data register */
 101:Src/comms.c   ****     USART_SendData(USART2, TxBuffer[TxCounter++]);
 102:Src/comms.c   **** 
 103:Src/comms.c   ****     if(TxCounter == NbrOfDataToTransfer)
 104:Src/comms.c   ****     {
 105:Src/comms.c   ****       /* Disable the USART Transmit interrupt */
 106:Src/comms.c   ****       USART_INTConfig(USART2, USART_INT_TDE, DISABLE);
 107:Src/comms.c   ****       TxCounter = 0;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s 			page 6


 108:Src/comms.c   ****     }
 109:Src/comms.c   ****   }
 110:Src/comms.c   **** }...
 182              		.loc 1 110 0
 183 001a 10BD     		pop	{r4, pc}
 184              	.L9:
  89:Src/comms.c   ****     RxBuffer[RxCounter++] = (USART_ReceiveData(USART2) & 0x7F);
 185              		.loc 1 89 0
 186 001c 1648     		ldr	r0, .L11
 187 001e FFF7FEFF 		bl	USART_ReceiveData
 188              	.LVL13:
 189 0022 1649     		ldr	r1, .L11+4
 190 0024 0A88     		ldrh	r2, [r1]
 191 0026 531C     		adds	r3, r2, #1
 192 0028 9BB2     		uxth	r3, r3
 193 002a 0B80     		strh	r3, [r1]	@ movhi
 194 002c 00F07F00 		and	r0, r0, #127
 195 0030 1349     		ldr	r1, .L11+8
 196 0032 8854     		strb	r0, [r1, r2]
  91:Src/comms.c   ****     if(RxCounter == NbrOfDataToRead)
 197              		.loc 1 91 0
 198 0034 134A     		ldr	r2, .L11+12
 199 0036 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 200 0038 9342     		cmp	r3, r2
 201 003a E8D1     		bne	.L6
  94:Src/comms.c   ****       USART_INTConfig(USART2, USART_INT_RDNE, DISABLE);
 202              		.loc 1 94 0
 203 003c 0022     		movs	r2, #0
 204 003e 40F22551 		movw	r1, #1317
 205 0042 0D48     		ldr	r0, .L11
 206 0044 FFF7FEFF 		bl	USART_INTConfig
 207              	.LVL14:
 208 0048 E1E7     		b	.L6
 209              	.L10:
 101:Src/comms.c   ****     USART_SendData(USART2, TxBuffer[TxCounter++]);
 210              		.loc 1 101 0
 211 004a 0F4C     		ldr	r4, .L11+16
 212 004c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 213 004e 5A1C     		adds	r2, r3, #1
 214 0050 2270     		strb	r2, [r4]
 215 0052 0E4A     		ldr	r2, .L11+20
 216 0054 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 217 0056 0848     		ldr	r0, .L11
 218 0058 FFF7FEFF 		bl	USART_SendData
 219              	.LVL15:
 103:Src/comms.c   ****     if(TxCounter == NbrOfDataToTransfer)
 220              		.loc 1 103 0
 221 005c 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 222 005e 0C4B     		ldr	r3, .L11+24
 223 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 224 0062 9A42     		cmp	r2, r3
 225 0064 D9D1     		bne	.L5
 106:Src/comms.c   ****       USART_INTConfig(USART2, USART_INT_TDE, DISABLE);
 226              		.loc 1 106 0
 227 0066 0022     		movs	r2, #0
 228 0068 40F22771 		movw	r1, #1831
 229 006c 0248     		ldr	r0, .L11
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s 			page 7


 230 006e FFF7FEFF 		bl	USART_INTConfig
 231              	.LVL16:
 107:Src/comms.c   ****       TxCounter = 0;
 232              		.loc 1 107 0
 233 0072 0022     		movs	r2, #0
 234 0074 2270     		strb	r2, [r4]
 235              		.loc 1 110 0
 236 0076 D0E7     		b	.L5
 237              	.L12:
 238              		.align	2
 239              	.L11:
 240 0078 00440040 		.word	1073759232
 241 007c 00000000 		.word	.LANCHOR0
 242 0080 00000000 		.word	RxBuffer
 243 0084 00000000 		.word	.LANCHOR1
 244 0088 00000000 		.word	.LANCHOR2
 245 008c 00000000 		.word	.LANCHOR3
 246 0090 00000000 		.word	.LANCHOR4
 247              		.cfi_endproc
 248              	.LFE124:
 250              		.global	RxCounter
 251              		.global	TxCounter
 252              		.global	NbrOfDataToRead
 253              		.global	NbrOfDataToTransfer
 254              		.comm	RxBuffer,32,4
 255              		.global	TxBuffer
 256              		.section	.bss.RxCounter,"aw",%nobits
 257              		.align	1
 258              		.set	.LANCHOR0,. + 0
 261              	RxCounter:
 262 0000 0000     		.space	2
 263              		.section	.bss.TxCounter,"aw",%nobits
 264              		.set	.LANCHOR2,. + 0
 267              	TxCounter:
 268 0000 00       		.space	1
 269              		.section	.data.NbrOfDataToRead,"aw",%progbits
 270              		.set	.LANCHOR1,. + 0
 273              	NbrOfDataToRead:
 274 0000 20       		.byte	32
 275              		.section	.data.NbrOfDataToTransfer,"aw",%progbits
 276              		.set	.LANCHOR4,. + 0
 279              	NbrOfDataToTransfer:
 280 0000 5D       		.byte	93
 281              		.section	.data.TxBuffer,"aw",%progbits
 282              		.align	2
 283              		.set	.LANCHOR3,. + 0
 286              	TxBuffer:
 287 0000 0A0D5553 		.ascii	"\012\015USART Hyperterminal Interrupts Example: USA"
 287      41525420 
 287      48797065 
 287      72746572 
 287      6D696E61 
 288 002d 52542D48 		.ascii	"RT-Hyperterminal communication using Interrupt\012\015"
 288      79706572 
 288      7465726D 
 288      696E616C 
 288      20636F6D 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s 			page 8


 289 005d 00       		.ascii	"\000"
 290              		.text
 291              	.Letext0:
 292              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 293              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 294              		.file 4 "../Libraries/CMSIS/CM4/CoreSupport/core_cm4.h"
 295              		.file 5 "../Libraries/CMSIS/CM4/DeviceSupport/system_at32f4xx.h"
 296              		.file 6 "../Libraries/CMSIS/CM4/DeviceSupport/at32f4xx.h"
 297              		.file 7 "../Libraries/AT32F4xx_StdPeriph_Driver/inc/at32f4xx_gpio.h"
 298              		.file 8 "../Libraries/AT32F4xx_StdPeriph_Driver/inc/at32f4xx_usart.h"
 299              		.file 9 "../Libraries/AT32F4xx_StdPeriph_Driver/inc/misc.h"
 300              		.file 10 "../Libraries/AT32F4xx_StdPeriph_Driver/inc/at32f4xx_rcc.h"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 comms.c
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s:17     .text.UART2_Init:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s:24     .text.UART2_Init:0000000000000000 UART2_Init
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s:144    .text.UART2_Init:00000000000000b8 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s:150    .text.USART2_IRQHandler:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s:157    .text.USART2_IRQHandler:0000000000000000 USART2_IRQHandler
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s:240    .text.USART2_IRQHandler:0000000000000078 $d
                            *COM*:0000000000000020 RxBuffer
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s:261    .bss.RxCounter:0000000000000000 RxCounter
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s:267    .bss.TxCounter:0000000000000000 TxCounter
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s:273    .data.NbrOfDataToRead:0000000000000000 NbrOfDataToRead
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s:279    .data.NbrOfDataToTransfer:0000000000000000 NbrOfDataToTransfer
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s:286    .data.TxBuffer:0000000000000000 TxBuffer
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s:257    .bss.RxCounter:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s:268    .bss.TxCounter:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccGbijEq.s:282    .data.TxBuffer:0000000000000000 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphClockCmd
RCC_APB1PeriphClockCmd
GPIO_Init
NVIC_PriorityGroupConfig
NVIC_Init
USART_StructInit
USART_Init
USART_INTConfig
USART_Cmd
USART_GetITStatus
USART_ReceiveData
USART_SendData
