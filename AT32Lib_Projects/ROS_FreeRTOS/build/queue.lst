ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"queue.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.prvIsQueueFull,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv4-sp-d16
  23              	prvIsQueueFull:
  24              	.LFB154:
  25              		.file 1 "../Middlewares/FreeRTOS//Source/queue.c"
   1:../Middlewares/FreeRTOS//Source/queue.c **** /*
   2:../Middlewares/FreeRTOS//Source/queue.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/queue.c ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/queue.c **** 
   5:../Middlewares/FreeRTOS//Source/queue.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/queue.c **** 
   7:../Middlewares/FreeRTOS//Source/queue.c ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/queue.c **** 
   9:../Middlewares/FreeRTOS//Source/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/queue.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/queue.c **** 
  13:../Middlewares/FreeRTOS//Source/queue.c ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/queue.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Middlewares/FreeRTOS//Source/queue.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/queue.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/queue.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/queue.c ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/queue.c **** 
  20:../Middlewares/FreeRTOS//Source/queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/queue.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/queue.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/queue.c ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/queue.c **** 
  25:../Middlewares/FreeRTOS//Source/queue.c ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/queue.c ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/queue.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/queue.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/queue.c ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/queue.c ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/queue.c ****      *                                                                       *
  32:../Middlewares/FreeRTOS//Source/queue.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Middlewares/FreeRTOS//Source/queue.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 2


  34:../Middlewares/FreeRTOS//Source/queue.c ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/queue.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/queue.c ****      *                                                                       *
  37:../Middlewares/FreeRTOS//Source/queue.c ****     ***************************************************************************
  38:../Middlewares/FreeRTOS//Source/queue.c **** 
  39:../Middlewares/FreeRTOS//Source/queue.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/queue.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/queue.c ****     defined configASSERT()?
  42:../Middlewares/FreeRTOS//Source/queue.c **** 
  43:../Middlewares/FreeRTOS//Source/queue.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Middlewares/FreeRTOS//Source/queue.c ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/queue.c ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/queue.c **** 
  47:../Middlewares/FreeRTOS//Source/queue.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/queue.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/queue.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Middlewares/FreeRTOS//Source/queue.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/queue.c **** 
  52:../Middlewares/FreeRTOS//Source/queue.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/queue.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/queue.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/queue.c **** 
  56:../Middlewares/FreeRTOS//Source/queue.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Middlewares/FreeRTOS//Source/queue.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/queue.c **** 
  59:../Middlewares/FreeRTOS//Source/queue.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/queue.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/queue.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/queue.c **** 
  63:../Middlewares/FreeRTOS//Source/queue.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/queue.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/queue.c ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/queue.c **** 
  67:../Middlewares/FreeRTOS//Source/queue.c ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/queue.c **** */
  69:../Middlewares/FreeRTOS//Source/queue.c **** 
  70:../Middlewares/FreeRTOS//Source/queue.c **** #include <stdlib.h>
  71:../Middlewares/FreeRTOS//Source/queue.c **** #include <string.h>
  72:../Middlewares/FreeRTOS//Source/queue.c **** 
  73:../Middlewares/FreeRTOS//Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:../Middlewares/FreeRTOS//Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:../Middlewares/FreeRTOS//Source/queue.c **** task.h is included from an application file. */
  76:../Middlewares/FreeRTOS//Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:../Middlewares/FreeRTOS//Source/queue.c **** 
  78:../Middlewares/FreeRTOS//Source/queue.c **** #include "FreeRTOS.h"
  79:../Middlewares/FreeRTOS//Source/queue.c **** #include "task.h"
  80:../Middlewares/FreeRTOS//Source/queue.c **** #include "queue.h"
  81:../Middlewares/FreeRTOS//Source/queue.c **** 
  82:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  83:../Middlewares/FreeRTOS//Source/queue.c **** 	#include "croutine.h"
  84:../Middlewares/FreeRTOS//Source/queue.c **** #endif
  85:../Middlewares/FreeRTOS//Source/queue.c **** 
  86:../Middlewares/FreeRTOS//Source/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  87:../Middlewares/FreeRTOS//Source/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  88:../Middlewares/FreeRTOS//Source/queue.c **** header files above, but not in this file, in order to generate the correct
  89:../Middlewares/FreeRTOS//Source/queue.c **** privileged Vs unprivileged linkage and placement. */
  90:../Middlewares/FreeRTOS//Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 3


  91:../Middlewares/FreeRTOS//Source/queue.c **** 
  92:../Middlewares/FreeRTOS//Source/queue.c **** 
  93:../Middlewares/FreeRTOS//Source/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  94:../Middlewares/FreeRTOS//Source/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  95:../Middlewares/FreeRTOS//Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  96:../Middlewares/FreeRTOS//Source/queue.c **** 
  97:../Middlewares/FreeRTOS//Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  98:../Middlewares/FreeRTOS//Source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  99:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
 100:../Middlewares/FreeRTOS//Source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
 101:../Middlewares/FreeRTOS//Source/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
 102:../Middlewares/FreeRTOS//Source/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
 103:../Middlewares/FreeRTOS//Source/queue.c **** the code is maintained despite this dual use of two structure members.  An
 104:../Middlewares/FreeRTOS//Source/queue.c **** alternative implementation would be to use a union, but use of a union is
 105:../Middlewares/FreeRTOS//Source/queue.c **** against the coding standard (although an exception to the standard has been
 106:../Middlewares/FreeRTOS//Source/queue.c **** permitted where the dual use also significantly changes the type of the
 107:../Middlewares/FreeRTOS//Source/queue.c **** structure member). */
 108:../Middlewares/FreeRTOS//Source/queue.c **** #define pxMutexHolder					pcTail
 109:../Middlewares/FreeRTOS//Source/queue.c **** #define uxQueueType						pcHead
 110:../Middlewares/FreeRTOS//Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
 111:../Middlewares/FreeRTOS//Source/queue.c **** 
 112:../Middlewares/FreeRTOS//Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
 113:../Middlewares/FreeRTOS//Source/queue.c **** zero. */
 114:../Middlewares/FreeRTOS//Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
 115:../Middlewares/FreeRTOS//Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
 116:../Middlewares/FreeRTOS//Source/queue.c **** 
 117:../Middlewares/FreeRTOS//Source/queue.c **** #if( configUSE_PREEMPTION == 0 )
 118:../Middlewares/FreeRTOS//Source/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 119:../Middlewares/FreeRTOS//Source/queue.c **** 	performed just because a higher priority task has been woken. */
 120:../Middlewares/FreeRTOS//Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
 121:../Middlewares/FreeRTOS//Source/queue.c **** #else
 122:../Middlewares/FreeRTOS//Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 123:../Middlewares/FreeRTOS//Source/queue.c **** #endif
 124:../Middlewares/FreeRTOS//Source/queue.c **** 
 125:../Middlewares/FreeRTOS//Source/queue.c **** /*
 126:../Middlewares/FreeRTOS//Source/queue.c ****  * Definition of the queue used by the scheduler.
 127:../Middlewares/FreeRTOS//Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
 128:../Middlewares/FreeRTOS//Source/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
 129:../Middlewares/FreeRTOS//Source/queue.c ****  */
 130:../Middlewares/FreeRTOS//Source/queue.c **** typedef struct QueueDefinition
 131:../Middlewares/FreeRTOS//Source/queue.c **** {
 132:../Middlewares/FreeRTOS//Source/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 133:../Middlewares/FreeRTOS//Source/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
 134:../Middlewares/FreeRTOS//Source/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 135:../Middlewares/FreeRTOS//Source/queue.c **** 
 136:../Middlewares/FreeRTOS//Source/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
 137:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 138:../Middlewares/FreeRTOS//Source/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
 139:../Middlewares/FreeRTOS//Source/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
 140:../Middlewares/FreeRTOS//Source/queue.c **** 	} u;
 141:../Middlewares/FreeRTOS//Source/queue.c **** 
 142:../Middlewares/FreeRTOS//Source/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 143:../Middlewares/FreeRTOS//Source/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 144:../Middlewares/FreeRTOS//Source/queue.c **** 
 145:../Middlewares/FreeRTOS//Source/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 146:../Middlewares/FreeRTOS//Source/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 147:../Middlewares/FreeRTOS//Source/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 4


 148:../Middlewares/FreeRTOS//Source/queue.c **** 
 149:../Middlewares/FreeRTOS//Source/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 150:../Middlewares/FreeRTOS//Source/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 151:../Middlewares/FreeRTOS//Source/queue.c **** 
 152:../Middlewares/FreeRTOS//Source/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 153:../Middlewares/FreeRTOS//Source/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 154:../Middlewares/FreeRTOS//Source/queue.c **** 	#endif
 155:../Middlewares/FreeRTOS//Source/queue.c **** 
 156:../Middlewares/FreeRTOS//Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 157:../Middlewares/FreeRTOS//Source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 158:../Middlewares/FreeRTOS//Source/queue.c **** 	#endif
 159:../Middlewares/FreeRTOS//Source/queue.c **** 
 160:../Middlewares/FreeRTOS//Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 161:../Middlewares/FreeRTOS//Source/queue.c **** 		UBaseType_t uxQueueNumber;
 162:../Middlewares/FreeRTOS//Source/queue.c **** 		uint8_t ucQueueType;
 163:../Middlewares/FreeRTOS//Source/queue.c **** 	#endif
 164:../Middlewares/FreeRTOS//Source/queue.c **** 
 165:../Middlewares/FreeRTOS//Source/queue.c **** } xQUEUE;
 166:../Middlewares/FreeRTOS//Source/queue.c **** 
 167:../Middlewares/FreeRTOS//Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 168:../Middlewares/FreeRTOS//Source/queue.c **** name below to enable the use of older kernel aware debuggers. */
 169:../Middlewares/FreeRTOS//Source/queue.c **** typedef xQUEUE Queue_t;
 170:../Middlewares/FreeRTOS//Source/queue.c **** 
 171:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 172:../Middlewares/FreeRTOS//Source/queue.c **** 
 173:../Middlewares/FreeRTOS//Source/queue.c **** /*
 174:../Middlewares/FreeRTOS//Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 175:../Middlewares/FreeRTOS//Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 176:../Middlewares/FreeRTOS//Source/queue.c ****  */
 177:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 178:../Middlewares/FreeRTOS//Source/queue.c **** 
 179:../Middlewares/FreeRTOS//Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 180:../Middlewares/FreeRTOS//Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 181:../Middlewares/FreeRTOS//Source/queue.c **** 	more user friendly. */
 182:../Middlewares/FreeRTOS//Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 183:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 184:../Middlewares/FreeRTOS//Source/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 185:../Middlewares/FreeRTOS//Source/queue.c **** 		QueueHandle_t xHandle;
 186:../Middlewares/FreeRTOS//Source/queue.c **** 	} xQueueRegistryItem;
 187:../Middlewares/FreeRTOS//Source/queue.c **** 
 188:../Middlewares/FreeRTOS//Source/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 189:../Middlewares/FreeRTOS//Source/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 190:../Middlewares/FreeRTOS//Source/queue.c **** 	debuggers. */
 191:../Middlewares/FreeRTOS//Source/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 192:../Middlewares/FreeRTOS//Source/queue.c **** 
 193:../Middlewares/FreeRTOS//Source/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 194:../Middlewares/FreeRTOS//Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 195:../Middlewares/FreeRTOS//Source/queue.c **** 	array position being vacant. */
 196:../Middlewares/FreeRTOS//Source/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 197:../Middlewares/FreeRTOS//Source/queue.c **** 
 198:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 199:../Middlewares/FreeRTOS//Source/queue.c **** 
 200:../Middlewares/FreeRTOS//Source/queue.c **** /*
 201:../Middlewares/FreeRTOS//Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 202:../Middlewares/FreeRTOS//Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 203:../Middlewares/FreeRTOS//Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 204:../Middlewares/FreeRTOS//Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 5


 205:../Middlewares/FreeRTOS//Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 206:../Middlewares/FreeRTOS//Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 207:../Middlewares/FreeRTOS//Source/queue.c ****  */
 208:../Middlewares/FreeRTOS//Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 209:../Middlewares/FreeRTOS//Source/queue.c **** 
 210:../Middlewares/FreeRTOS//Source/queue.c **** /*
 211:../Middlewares/FreeRTOS//Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 212:../Middlewares/FreeRTOS//Source/queue.c ****  *
 213:../Middlewares/FreeRTOS//Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 214:../Middlewares/FreeRTOS//Source/queue.c ****  */
 215:../Middlewares/FreeRTOS//Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 216:../Middlewares/FreeRTOS//Source/queue.c **** 
 217:../Middlewares/FreeRTOS//Source/queue.c **** /*
 218:../Middlewares/FreeRTOS//Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 219:../Middlewares/FreeRTOS//Source/queue.c ****  *
 220:../Middlewares/FreeRTOS//Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 221:../Middlewares/FreeRTOS//Source/queue.c ****  */
 222:../Middlewares/FreeRTOS//Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 223:../Middlewares/FreeRTOS//Source/queue.c **** 
 224:../Middlewares/FreeRTOS//Source/queue.c **** /*
 225:../Middlewares/FreeRTOS//Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 226:../Middlewares/FreeRTOS//Source/queue.c ****  * back of the queue.
 227:../Middlewares/FreeRTOS//Source/queue.c ****  */
 228:../Middlewares/FreeRTOS//Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 229:../Middlewares/FreeRTOS//Source/queue.c **** 
 230:../Middlewares/FreeRTOS//Source/queue.c **** /*
 231:../Middlewares/FreeRTOS//Source/queue.c ****  * Copies an item out of a queue.
 232:../Middlewares/FreeRTOS//Source/queue.c ****  */
 233:../Middlewares/FreeRTOS//Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 234:../Middlewares/FreeRTOS//Source/queue.c **** 
 235:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 236:../Middlewares/FreeRTOS//Source/queue.c **** 	/*
 237:../Middlewares/FreeRTOS//Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 238:../Middlewares/FreeRTOS//Source/queue.c **** 	 * the queue set that the queue contains data.
 239:../Middlewares/FreeRTOS//Source/queue.c **** 	 */
 240:../Middlewares/FreeRTOS//Source/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 241:../Middlewares/FreeRTOS//Source/queue.c **** #endif
 242:../Middlewares/FreeRTOS//Source/queue.c **** 
 243:../Middlewares/FreeRTOS//Source/queue.c **** /*
 244:../Middlewares/FreeRTOS//Source/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 245:../Middlewares/FreeRTOS//Source/queue.c ****  * dynamically to fill in the structure's members.
 246:../Middlewares/FreeRTOS//Source/queue.c ****  */
 247:../Middlewares/FreeRTOS//Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 248:../Middlewares/FreeRTOS//Source/queue.c **** 
 249:../Middlewares/FreeRTOS//Source/queue.c **** /*
 250:../Middlewares/FreeRTOS//Source/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 251:../Middlewares/FreeRTOS//Source/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 252:../Middlewares/FreeRTOS//Source/queue.c ****  * as a mutex.
 253:../Middlewares/FreeRTOS//Source/queue.c ****  */
 254:../Middlewares/FreeRTOS//Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 255:../Middlewares/FreeRTOS//Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 256:../Middlewares/FreeRTOS//Source/queue.c **** #endif
 257:../Middlewares/FreeRTOS//Source/queue.c **** 
 258:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 259:../Middlewares/FreeRTOS//Source/queue.c **** 
 260:../Middlewares/FreeRTOS//Source/queue.c **** /*
 261:../Middlewares/FreeRTOS//Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 6


 262:../Middlewares/FreeRTOS//Source/queue.c ****  * accessing the queue event lists.
 263:../Middlewares/FreeRTOS//Source/queue.c ****  */
 264:../Middlewares/FreeRTOS//Source/queue.c **** #define prvLockQueue( pxQueue )								\
 265:../Middlewares/FreeRTOS//Source/queue.c **** 	taskENTER_CRITICAL();									\
 266:../Middlewares/FreeRTOS//Source/queue.c **** 	{														\
 267:../Middlewares/FreeRTOS//Source/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 268:../Middlewares/FreeRTOS//Source/queue.c **** 		{													\
 269:../Middlewares/FreeRTOS//Source/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 270:../Middlewares/FreeRTOS//Source/queue.c **** 		}													\
 271:../Middlewares/FreeRTOS//Source/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 272:../Middlewares/FreeRTOS//Source/queue.c **** 		{													\
 273:../Middlewares/FreeRTOS//Source/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 274:../Middlewares/FreeRTOS//Source/queue.c **** 		}													\
 275:../Middlewares/FreeRTOS//Source/queue.c **** 	}														\
 276:../Middlewares/FreeRTOS//Source/queue.c **** 	taskEXIT_CRITICAL()
 277:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 278:../Middlewares/FreeRTOS//Source/queue.c **** 
 279:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 280:../Middlewares/FreeRTOS//Source/queue.c **** {
 281:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 282:../Middlewares/FreeRTOS//Source/queue.c **** 
 283:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue );
 284:../Middlewares/FreeRTOS//Source/queue.c **** 
 285:../Middlewares/FreeRTOS//Source/queue.c **** 	taskENTER_CRITICAL();
 286:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 287:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 288:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 289:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 290:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 291:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 292:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 293:../Middlewares/FreeRTOS//Source/queue.c **** 
 294:../Middlewares/FreeRTOS//Source/queue.c **** 		if( xNewQueue == pdFALSE )
 295:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 296:../Middlewares/FreeRTOS//Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 297:../Middlewares/FreeRTOS//Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 298:../Middlewares/FreeRTOS//Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 299:../Middlewares/FreeRTOS//Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 300:../Middlewares/FreeRTOS//Source/queue.c **** 			it will be possible to write to it. */
 301:../Middlewares/FreeRTOS//Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 302:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 303:../Middlewares/FreeRTOS//Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 304:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 305:../Middlewares/FreeRTOS//Source/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 306:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 307:../Middlewares/FreeRTOS//Source/queue.c **** 				else
 308:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 309:../Middlewares/FreeRTOS//Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 310:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 311:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 312:../Middlewares/FreeRTOS//Source/queue.c **** 			else
 313:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 314:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 315:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 316:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 317:../Middlewares/FreeRTOS//Source/queue.c **** 		else
 318:../Middlewares/FreeRTOS//Source/queue.c **** 		{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 7


 319:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 320:../Middlewares/FreeRTOS//Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 321:../Middlewares/FreeRTOS//Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 322:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 323:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 324:../Middlewares/FreeRTOS//Source/queue.c **** 	taskEXIT_CRITICAL();
 325:../Middlewares/FreeRTOS//Source/queue.c **** 
 326:../Middlewares/FreeRTOS//Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 327:../Middlewares/FreeRTOS//Source/queue.c **** 	versions. */
 328:../Middlewares/FreeRTOS//Source/queue.c **** 	return pdPASS;
 329:../Middlewares/FreeRTOS//Source/queue.c **** }
 330:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 331:../Middlewares/FreeRTOS//Source/queue.c **** 
 332:../Middlewares/FreeRTOS//Source/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 333:../Middlewares/FreeRTOS//Source/queue.c **** 
 334:../Middlewares/FreeRTOS//Source/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 335:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 336:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t *pxNewQueue;
 337:../Middlewares/FreeRTOS//Source/queue.c **** 
 338:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 339:../Middlewares/FreeRTOS//Source/queue.c **** 
 340:../Middlewares/FreeRTOS//Source/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 341:../Middlewares/FreeRTOS//Source/queue.c **** 		supplied. */
 342:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 343:../Middlewares/FreeRTOS//Source/queue.c **** 
 344:../Middlewares/FreeRTOS//Source/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 345:../Middlewares/FreeRTOS//Source/queue.c **** 		should not be provided if the item size is 0. */
 346:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 347:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 348:../Middlewares/FreeRTOS//Source/queue.c **** 
 349:../Middlewares/FreeRTOS//Source/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 350:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 351:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 352:../Middlewares/FreeRTOS//Source/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 353:../Middlewares/FreeRTOS//Source/queue.c **** 			the real queue and semaphore structures. */
 354:../Middlewares/FreeRTOS//Source/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 355:../Middlewares/FreeRTOS//Source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 356:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 357:../Middlewares/FreeRTOS//Source/queue.c **** 		#endif /* configASSERT_DEFINED */
 358:../Middlewares/FreeRTOS//Source/queue.c **** 
 359:../Middlewares/FreeRTOS//Source/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 360:../Middlewares/FreeRTOS//Source/queue.c **** 		The address of a statically allocated storage area was also passed in
 361:../Middlewares/FreeRTOS//Source/queue.c **** 		but is already set. */
 362:../Middlewares/FreeRTOS//Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 363:../Middlewares/FreeRTOS//Source/queue.c **** 
 364:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxNewQueue != NULL )
 365:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 366:../Middlewares/FreeRTOS//Source/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 368:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 369:../Middlewares/FreeRTOS//Source/queue.c **** 				note this queue was allocated statically in case the queue is
 370:../Middlewares/FreeRTOS//Source/queue.c **** 				later deleted. */
 371:../Middlewares/FreeRTOS//Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 372:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 373:../Middlewares/FreeRTOS//Source/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 374:../Middlewares/FreeRTOS//Source/queue.c **** 
 375:../Middlewares/FreeRTOS//Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 8


 376:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 377:../Middlewares/FreeRTOS//Source/queue.c **** 
 378:../Middlewares/FreeRTOS//Source/queue.c **** 		return pxNewQueue;
 379:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 380:../Middlewares/FreeRTOS//Source/queue.c **** 
 381:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 382:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 383:../Middlewares/FreeRTOS//Source/queue.c **** 
 384:../Middlewares/FreeRTOS//Source/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 385:../Middlewares/FreeRTOS//Source/queue.c **** 
 386:../Middlewares/FreeRTOS//Source/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 387:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 388:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t *pxNewQueue;
 389:../Middlewares/FreeRTOS//Source/queue.c **** 	size_t xQueueSizeInBytes;
 390:../Middlewares/FreeRTOS//Source/queue.c **** 	uint8_t *pucQueueStorage;
 391:../Middlewares/FreeRTOS//Source/queue.c **** 
 392:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 393:../Middlewares/FreeRTOS//Source/queue.c **** 
 394:../Middlewares/FreeRTOS//Source/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 395:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 396:../Middlewares/FreeRTOS//Source/queue.c **** 			/* There is not going to be a queue storage area. */
 397:../Middlewares/FreeRTOS//Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 398:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 399:../Middlewares/FreeRTOS//Source/queue.c **** 		else
 400:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 401:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 402:../Middlewares/FreeRTOS//Source/queue.c **** 			can be in the queue at any time. */
 403:../Middlewares/FreeRTOS//Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 404:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 405:../Middlewares/FreeRTOS//Source/queue.c **** 
 406:../Middlewares/FreeRTOS//Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 407:../Middlewares/FreeRTOS//Source/queue.c **** 
 408:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxNewQueue != NULL )
 409:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 410:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 411:../Middlewares/FreeRTOS//Source/queue.c **** 			storage area. */
 412:../Middlewares/FreeRTOS//Source/queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 413:../Middlewares/FreeRTOS//Source/queue.c **** 
 414:../Middlewares/FreeRTOS//Source/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 416:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Queues can be created either statically or dynamically, so
 417:../Middlewares/FreeRTOS//Source/queue.c **** 				note this task was created dynamically in case it is later
 418:../Middlewares/FreeRTOS//Source/queue.c **** 				deleted. */
 419:../Middlewares/FreeRTOS//Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 420:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 421:../Middlewares/FreeRTOS//Source/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 422:../Middlewares/FreeRTOS//Source/queue.c **** 
 423:../Middlewares/FreeRTOS//Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 424:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 425:../Middlewares/FreeRTOS//Source/queue.c **** 
 426:../Middlewares/FreeRTOS//Source/queue.c **** 		return pxNewQueue;
 427:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 428:../Middlewares/FreeRTOS//Source/queue.c **** 
 429:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 430:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 431:../Middlewares/FreeRTOS//Source/queue.c **** 
 432:../Middlewares/FreeRTOS//Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 9


 433:../Middlewares/FreeRTOS//Source/queue.c **** {
 434:../Middlewares/FreeRTOS//Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 435:../Middlewares/FreeRTOS//Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 436:../Middlewares/FreeRTOS//Source/queue.c **** 	( void ) ucQueueType;
 437:../Middlewares/FreeRTOS//Source/queue.c **** 
 438:../Middlewares/FreeRTOS//Source/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 439:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 440:../Middlewares/FreeRTOS//Source/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 441:../Middlewares/FreeRTOS//Source/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 442:../Middlewares/FreeRTOS//Source/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 443:../Middlewares/FreeRTOS//Source/queue.c **** 		value that is known to be within the memory map. */
 444:../Middlewares/FreeRTOS//Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 445:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 446:../Middlewares/FreeRTOS//Source/queue.c **** 	else
 447:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 448:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Set the head to the start of the queue storage area. */
 449:../Middlewares/FreeRTOS//Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 450:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 451:../Middlewares/FreeRTOS//Source/queue.c **** 
 452:../Middlewares/FreeRTOS//Source/queue.c **** 	/* Initialise the queue members as described where the queue type is
 453:../Middlewares/FreeRTOS//Source/queue.c **** 	defined. */
 454:../Middlewares/FreeRTOS//Source/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 455:../Middlewares/FreeRTOS//Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 456:../Middlewares/FreeRTOS//Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 457:../Middlewares/FreeRTOS//Source/queue.c **** 
 458:../Middlewares/FreeRTOS//Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 459:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 460:../Middlewares/FreeRTOS//Source/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 461:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 462:../Middlewares/FreeRTOS//Source/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 463:../Middlewares/FreeRTOS//Source/queue.c **** 
 464:../Middlewares/FreeRTOS//Source/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 465:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 466:../Middlewares/FreeRTOS//Source/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 467:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 468:../Middlewares/FreeRTOS//Source/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 469:../Middlewares/FreeRTOS//Source/queue.c **** 
 470:../Middlewares/FreeRTOS//Source/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 471:../Middlewares/FreeRTOS//Source/queue.c **** }
 472:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 473:../Middlewares/FreeRTOS//Source/queue.c **** 
 474:../Middlewares/FreeRTOS//Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 475:../Middlewares/FreeRTOS//Source/queue.c **** 
 476:../Middlewares/FreeRTOS//Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 477:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 478:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxNewQueue != NULL )
 479:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 480:../Middlewares/FreeRTOS//Source/queue.c **** 			/* The queue create function will set all the queue structure members
 481:../Middlewares/FreeRTOS//Source/queue.c **** 			correctly for a generic queue, but this function is creating a
 482:../Middlewares/FreeRTOS//Source/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 483:../Middlewares/FreeRTOS//Source/queue.c **** 			in particular the information required for priority inheritance. */
 484:../Middlewares/FreeRTOS//Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 485:../Middlewares/FreeRTOS//Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 486:../Middlewares/FreeRTOS//Source/queue.c **** 
 487:../Middlewares/FreeRTOS//Source/queue.c **** 			/* In case this is a recursive mutex. */
 488:../Middlewares/FreeRTOS//Source/queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
 489:../Middlewares/FreeRTOS//Source/queue.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 10


 490:../Middlewares/FreeRTOS//Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 491:../Middlewares/FreeRTOS//Source/queue.c **** 
 492:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 493:../Middlewares/FreeRTOS//Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 494:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 495:../Middlewares/FreeRTOS//Source/queue.c **** 		else
 496:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 497:../Middlewares/FreeRTOS//Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 498:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 499:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 500:../Middlewares/FreeRTOS//Source/queue.c **** 
 501:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_MUTEXES */
 502:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 503:../Middlewares/FreeRTOS//Source/queue.c **** 
 504:../Middlewares/FreeRTOS//Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 505:../Middlewares/FreeRTOS//Source/queue.c **** 
 506:../Middlewares/FreeRTOS//Source/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 507:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 508:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t *pxNewQueue;
 509:../Middlewares/FreeRTOS//Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 510:../Middlewares/FreeRTOS//Source/queue.c **** 
 511:../Middlewares/FreeRTOS//Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 512:../Middlewares/FreeRTOS//Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 513:../Middlewares/FreeRTOS//Source/queue.c **** 
 514:../Middlewares/FreeRTOS//Source/queue.c **** 		return pxNewQueue;
 515:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 516:../Middlewares/FreeRTOS//Source/queue.c **** 
 517:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_MUTEXES */
 518:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 519:../Middlewares/FreeRTOS//Source/queue.c **** 
 520:../Middlewares/FreeRTOS//Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 521:../Middlewares/FreeRTOS//Source/queue.c **** 
 522:../Middlewares/FreeRTOS//Source/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 523:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 524:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t *pxNewQueue;
 525:../Middlewares/FreeRTOS//Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 526:../Middlewares/FreeRTOS//Source/queue.c **** 
 527:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 528:../Middlewares/FreeRTOS//Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 529:../Middlewares/FreeRTOS//Source/queue.c **** 		( void ) ucQueueType;
 530:../Middlewares/FreeRTOS//Source/queue.c **** 
 531:../Middlewares/FreeRTOS//Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 532:../Middlewares/FreeRTOS//Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 533:../Middlewares/FreeRTOS//Source/queue.c **** 
 534:../Middlewares/FreeRTOS//Source/queue.c **** 		return pxNewQueue;
 535:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 536:../Middlewares/FreeRTOS//Source/queue.c **** 
 537:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_MUTEXES */
 538:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 539:../Middlewares/FreeRTOS//Source/queue.c **** 
 540:../Middlewares/FreeRTOS//Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 541:../Middlewares/FreeRTOS//Source/queue.c **** 
 542:../Middlewares/FreeRTOS//Source/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 543:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 544:../Middlewares/FreeRTOS//Source/queue.c **** 	void *pxReturn;
 545:../Middlewares/FreeRTOS//Source/queue.c **** 
 546:../Middlewares/FreeRTOS//Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 11


 547:../Middlewares/FreeRTOS//Source/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 548:../Middlewares/FreeRTOS//Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 549:../Middlewares/FreeRTOS//Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 550:../Middlewares/FreeRTOS//Source/queue.c **** 		following critical section exiting and the function returning. */
 551:../Middlewares/FreeRTOS//Source/queue.c **** 		taskENTER_CRITICAL();
 552:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 553:../Middlewares/FreeRTOS//Source/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 554:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 555:../Middlewares/FreeRTOS//Source/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 556:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 557:../Middlewares/FreeRTOS//Source/queue.c **** 			else
 558:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 559:../Middlewares/FreeRTOS//Source/queue.c **** 				pxReturn = NULL;
 560:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 561:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 562:../Middlewares/FreeRTOS//Source/queue.c **** 		taskEXIT_CRITICAL();
 563:../Middlewares/FreeRTOS//Source/queue.c **** 
 564:../Middlewares/FreeRTOS//Source/queue.c **** 		return pxReturn;
 565:../Middlewares/FreeRTOS//Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 566:../Middlewares/FreeRTOS//Source/queue.c **** 
 567:../Middlewares/FreeRTOS//Source/queue.c **** #endif
 568:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 569:../Middlewares/FreeRTOS//Source/queue.c **** 
 570:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 571:../Middlewares/FreeRTOS//Source/queue.c **** 
 572:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 573:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 574:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xReturn;
 575:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 576:../Middlewares/FreeRTOS//Source/queue.c **** 
 577:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( pxMutex );
 578:../Middlewares/FreeRTOS//Source/queue.c **** 
 579:../Middlewares/FreeRTOS//Source/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 580:../Middlewares/FreeRTOS//Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 581:../Middlewares/FreeRTOS//Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 582:../Middlewares/FreeRTOS//Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 583:../Middlewares/FreeRTOS//Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 584:../Middlewares/FreeRTOS//Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 585:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 586:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 587:../Middlewares/FreeRTOS//Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 588:../Middlewares/FreeRTOS//Source/queue.c **** 
 589:../Middlewares/FreeRTOS//Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 590:../Middlewares/FreeRTOS//Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 591:../Middlewares/FreeRTOS//Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 592:../Middlewares/FreeRTOS//Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 593:../Middlewares/FreeRTOS//Source/queue.c **** 			uxRecursiveCallCount member. */
 594:../Middlewares/FreeRTOS//Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 595:../Middlewares/FreeRTOS//Source/queue.c **** 
 596:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Has the recursive call count unwound to 0? */
 597:../Middlewares/FreeRTOS//Source/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 598:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 599:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 600:../Middlewares/FreeRTOS//Source/queue.c **** 				task that might be waiting to access the mutex. */
 601:../Middlewares/FreeRTOS//Source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 602:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 603:../Middlewares/FreeRTOS//Source/queue.c **** 			else
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 12


 604:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 605:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 606:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 607:../Middlewares/FreeRTOS//Source/queue.c **** 
 608:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdPASS;
 609:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 610:../Middlewares/FreeRTOS//Source/queue.c **** 		else
 611:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 612:../Middlewares/FreeRTOS//Source/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 613:../Middlewares/FreeRTOS//Source/queue.c **** 			holder. */
 614:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdFAIL;
 615:../Middlewares/FreeRTOS//Source/queue.c **** 
 616:../Middlewares/FreeRTOS//Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 617:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 618:../Middlewares/FreeRTOS//Source/queue.c **** 
 619:../Middlewares/FreeRTOS//Source/queue.c **** 		return xReturn;
 620:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 621:../Middlewares/FreeRTOS//Source/queue.c **** 
 622:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 623:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 624:../Middlewares/FreeRTOS//Source/queue.c **** 
 625:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 626:../Middlewares/FreeRTOS//Source/queue.c **** 
 627:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 628:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 629:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xReturn;
 630:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 631:../Middlewares/FreeRTOS//Source/queue.c **** 
 632:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( pxMutex );
 633:../Middlewares/FreeRTOS//Source/queue.c **** 
 634:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 635:../Middlewares/FreeRTOS//Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 636:../Middlewares/FreeRTOS//Source/queue.c **** 
 637:../Middlewares/FreeRTOS//Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 638:../Middlewares/FreeRTOS//Source/queue.c **** 
 639:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 640:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 641:../Middlewares/FreeRTOS//Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 642:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdPASS;
 643:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 644:../Middlewares/FreeRTOS//Source/queue.c **** 		else
 645:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 646:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 647:../Middlewares/FreeRTOS//Source/queue.c **** 
 648:../Middlewares/FreeRTOS//Source/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 649:../Middlewares/FreeRTOS//Source/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 650:../Middlewares/FreeRTOS//Source/queue.c **** 			before reaching here. */
 651:../Middlewares/FreeRTOS//Source/queue.c **** 			if( xReturn != pdFAIL )
 652:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 653:../Middlewares/FreeRTOS//Source/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 654:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 655:../Middlewares/FreeRTOS//Source/queue.c **** 			else
 656:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 657:../Middlewares/FreeRTOS//Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 658:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 659:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 660:../Middlewares/FreeRTOS//Source/queue.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 13


 661:../Middlewares/FreeRTOS//Source/queue.c **** 		return xReturn;
 662:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 663:../Middlewares/FreeRTOS//Source/queue.c **** 
 664:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 665:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 666:../Middlewares/FreeRTOS//Source/queue.c **** 
 667:../Middlewares/FreeRTOS//Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 668:../Middlewares/FreeRTOS//Source/queue.c **** 
 669:../Middlewares/FreeRTOS//Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 670:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 671:../Middlewares/FreeRTOS//Source/queue.c **** 	QueueHandle_t xHandle;
 672:../Middlewares/FreeRTOS//Source/queue.c **** 
 673:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 674:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 675:../Middlewares/FreeRTOS//Source/queue.c **** 
 676:../Middlewares/FreeRTOS//Source/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 677:../Middlewares/FreeRTOS//Source/queue.c **** 
 678:../Middlewares/FreeRTOS//Source/queue.c **** 		if( xHandle != NULL )
 679:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 680:../Middlewares/FreeRTOS//Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 681:../Middlewares/FreeRTOS//Source/queue.c **** 
 682:../Middlewares/FreeRTOS//Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 683:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 684:../Middlewares/FreeRTOS//Source/queue.c **** 		else
 685:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 686:../Middlewares/FreeRTOS//Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 687:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 688:../Middlewares/FreeRTOS//Source/queue.c **** 
 689:../Middlewares/FreeRTOS//Source/queue.c **** 		return xHandle;
 690:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 691:../Middlewares/FreeRTOS//Source/queue.c **** 
 692:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 693:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 694:../Middlewares/FreeRTOS//Source/queue.c **** 
 695:../Middlewares/FreeRTOS//Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 696:../Middlewares/FreeRTOS//Source/queue.c **** 
 697:../Middlewares/FreeRTOS//Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 698:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 699:../Middlewares/FreeRTOS//Source/queue.c **** 	QueueHandle_t xHandle;
 700:../Middlewares/FreeRTOS//Source/queue.c **** 
 701:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 702:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 703:../Middlewares/FreeRTOS//Source/queue.c **** 
 704:../Middlewares/FreeRTOS//Source/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 705:../Middlewares/FreeRTOS//Source/queue.c **** 
 706:../Middlewares/FreeRTOS//Source/queue.c **** 		if( xHandle != NULL )
 707:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 708:../Middlewares/FreeRTOS//Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 709:../Middlewares/FreeRTOS//Source/queue.c **** 
 710:../Middlewares/FreeRTOS//Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 711:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 712:../Middlewares/FreeRTOS//Source/queue.c **** 		else
 713:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 714:../Middlewares/FreeRTOS//Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 715:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 716:../Middlewares/FreeRTOS//Source/queue.c **** 
 717:../Middlewares/FreeRTOS//Source/queue.c **** 		return xHandle;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 14


 718:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 719:../Middlewares/FreeRTOS//Source/queue.c **** 
 720:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 721:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 722:../Middlewares/FreeRTOS//Source/queue.c **** 
 723:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 724:../Middlewares/FreeRTOS//Source/queue.c **** {
 725:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 726:../Middlewares/FreeRTOS//Source/queue.c **** TimeOut_t xTimeOut;
 727:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 728:../Middlewares/FreeRTOS//Source/queue.c **** 
 729:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue );
 730:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 731:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 732:../Middlewares/FreeRTOS//Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 733:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 734:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 735:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 736:../Middlewares/FreeRTOS//Source/queue.c **** 	#endif
 737:../Middlewares/FreeRTOS//Source/queue.c **** 
 738:../Middlewares/FreeRTOS//Source/queue.c **** 
 739:../Middlewares/FreeRTOS//Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 740:../Middlewares/FreeRTOS//Source/queue.c **** 	statements within the function itself.  This is done in the interest
 741:../Middlewares/FreeRTOS//Source/queue.c **** 	of execution time efficiency. */
 742:../Middlewares/FreeRTOS//Source/queue.c **** 	for( ;; )
 743:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 744:../Middlewares/FreeRTOS//Source/queue.c **** 		taskENTER_CRITICAL();
 745:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 746:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 747:../Middlewares/FreeRTOS//Source/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 748:../Middlewares/FreeRTOS//Source/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 749:../Middlewares/FreeRTOS//Source/queue.c **** 			queue is full. */
 750:../Middlewares/FreeRTOS//Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 751:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 752:../Middlewares/FreeRTOS//Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 753:../Middlewares/FreeRTOS//Source/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 754:../Middlewares/FreeRTOS//Source/queue.c **** 
 755:../Middlewares/FreeRTOS//Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 756:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 757:../Middlewares/FreeRTOS//Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 758:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 759:../Middlewares/FreeRTOS//Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 760:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 761:../Middlewares/FreeRTOS//Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 762:../Middlewares/FreeRTOS//Source/queue.c **** 							to the queue set caused a higher priority task to
 763:../Middlewares/FreeRTOS//Source/queue.c **** 							unblock. A context switch is required. */
 764:../Middlewares/FreeRTOS//Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 765:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 766:../Middlewares/FreeRTOS//Source/queue.c **** 						else
 767:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 768:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 769:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 770:../Middlewares/FreeRTOS//Source/queue.c **** 					}
 771:../Middlewares/FreeRTOS//Source/queue.c **** 					else
 772:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 773:../Middlewares/FreeRTOS//Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
 774:../Middlewares/FreeRTOS//Source/queue.c **** 						queue then unblock it now. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 15


 775:../Middlewares/FreeRTOS//Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 776:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 777:../Middlewares/FreeRTOS//Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 778:../Middlewares/FreeRTOS//Source/queue.c **** 							{
 779:../Middlewares/FreeRTOS//Source/queue.c **** 								/* The unblocked task has a priority higher than
 780:../Middlewares/FreeRTOS//Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 781:../Middlewares/FreeRTOS//Source/queue.c **** 								do this from within the critical section - the
 782:../Middlewares/FreeRTOS//Source/queue.c **** 								kernel takes care of that. */
 783:../Middlewares/FreeRTOS//Source/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 784:../Middlewares/FreeRTOS//Source/queue.c **** 							}
 785:../Middlewares/FreeRTOS//Source/queue.c **** 							else
 786:../Middlewares/FreeRTOS//Source/queue.c **** 							{
 787:../Middlewares/FreeRTOS//Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 788:../Middlewares/FreeRTOS//Source/queue.c **** 							}
 789:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 790:../Middlewares/FreeRTOS//Source/queue.c **** 						else if( xYieldRequired != pdFALSE )
 791:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 792:../Middlewares/FreeRTOS//Source/queue.c **** 							/* This path is a special case that will only get
 793:../Middlewares/FreeRTOS//Source/queue.c **** 							executed if the task was holding multiple mutexes
 794:../Middlewares/FreeRTOS//Source/queue.c **** 							and the mutexes were given back in an order that is
 795:../Middlewares/FreeRTOS//Source/queue.c **** 							different to that in which they were taken. */
 796:../Middlewares/FreeRTOS//Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 797:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 798:../Middlewares/FreeRTOS//Source/queue.c **** 						else
 799:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 800:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 801:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 802:../Middlewares/FreeRTOS//Source/queue.c **** 					}
 803:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 804:../Middlewares/FreeRTOS//Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 805:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 806:../Middlewares/FreeRTOS//Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 807:../Middlewares/FreeRTOS//Source/queue.c **** 					queue then unblock it now. */
 808:../Middlewares/FreeRTOS//Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 809:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 810:../Middlewares/FreeRTOS//Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 811:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 812:../Middlewares/FreeRTOS//Source/queue.c **** 							/* The unblocked task has a priority higher than
 813:../Middlewares/FreeRTOS//Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 814:../Middlewares/FreeRTOS//Source/queue.c **** 							this from within the critical section - the kernel
 815:../Middlewares/FreeRTOS//Source/queue.c **** 							takes care of that. */
 816:../Middlewares/FreeRTOS//Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 817:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 818:../Middlewares/FreeRTOS//Source/queue.c **** 						else
 819:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 820:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 821:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 822:../Middlewares/FreeRTOS//Source/queue.c **** 					}
 823:../Middlewares/FreeRTOS//Source/queue.c **** 					else if( xYieldRequired != pdFALSE )
 824:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 825:../Middlewares/FreeRTOS//Source/queue.c **** 						/* This path is a special case that will only get
 826:../Middlewares/FreeRTOS//Source/queue.c **** 						executed if the task was holding multiple mutexes and
 827:../Middlewares/FreeRTOS//Source/queue.c **** 						the mutexes were given back in an order that is
 828:../Middlewares/FreeRTOS//Source/queue.c **** 						different to that in which they were taken. */
 829:../Middlewares/FreeRTOS//Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 830:../Middlewares/FreeRTOS//Source/queue.c **** 					}
 831:../Middlewares/FreeRTOS//Source/queue.c **** 					else
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 16


 832:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 833:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 834:../Middlewares/FreeRTOS//Source/queue.c **** 					}
 835:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 836:../Middlewares/FreeRTOS//Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 837:../Middlewares/FreeRTOS//Source/queue.c **** 
 838:../Middlewares/FreeRTOS//Source/queue.c **** 				taskEXIT_CRITICAL();
 839:../Middlewares/FreeRTOS//Source/queue.c **** 				return pdPASS;
 840:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 841:../Middlewares/FreeRTOS//Source/queue.c **** 			else
 842:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 843:../Middlewares/FreeRTOS//Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 844:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 845:../Middlewares/FreeRTOS//Source/queue.c **** 					/* The queue was full and no block time is specified (or
 846:../Middlewares/FreeRTOS//Source/queue.c **** 					the block time has expired) so leave now. */
 847:../Middlewares/FreeRTOS//Source/queue.c **** 					taskEXIT_CRITICAL();
 848:../Middlewares/FreeRTOS//Source/queue.c **** 
 849:../Middlewares/FreeRTOS//Source/queue.c **** 					/* Return to the original privilege level before exiting
 850:../Middlewares/FreeRTOS//Source/queue.c **** 					the function. */
 851:../Middlewares/FreeRTOS//Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 852:../Middlewares/FreeRTOS//Source/queue.c **** 					return errQUEUE_FULL;
 853:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 854:../Middlewares/FreeRTOS//Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 855:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 856:../Middlewares/FreeRTOS//Source/queue.c **** 					/* The queue was full and a block time was specified so
 857:../Middlewares/FreeRTOS//Source/queue.c **** 					configure the timeout structure. */
 858:../Middlewares/FreeRTOS//Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 859:../Middlewares/FreeRTOS//Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 860:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 861:../Middlewares/FreeRTOS//Source/queue.c **** 				else
 862:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 863:../Middlewares/FreeRTOS//Source/queue.c **** 					/* Entry time was already set. */
 864:../Middlewares/FreeRTOS//Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 865:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 866:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 867:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 868:../Middlewares/FreeRTOS//Source/queue.c **** 		taskEXIT_CRITICAL();
 869:../Middlewares/FreeRTOS//Source/queue.c **** 
 870:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 871:../Middlewares/FreeRTOS//Source/queue.c **** 		now the critical section has been exited. */
 872:../Middlewares/FreeRTOS//Source/queue.c **** 
 873:../Middlewares/FreeRTOS//Source/queue.c **** 		vTaskSuspendAll();
 874:../Middlewares/FreeRTOS//Source/queue.c **** 		prvLockQueue( pxQueue );
 875:../Middlewares/FreeRTOS//Source/queue.c **** 
 876:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 877:../Middlewares/FreeRTOS//Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 878:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 879:../Middlewares/FreeRTOS//Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 880:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 881:../Middlewares/FreeRTOS//Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 882:../Middlewares/FreeRTOS//Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 883:../Middlewares/FreeRTOS//Source/queue.c **** 
 884:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 885:../Middlewares/FreeRTOS//Source/queue.c **** 				event list.  It is possible	that interrupts occurring now
 886:../Middlewares/FreeRTOS//Source/queue.c **** 				remove this task from the event	list again - but as the
 887:../Middlewares/FreeRTOS//Source/queue.c **** 				scheduler is suspended the task will go onto the pending
 888:../Middlewares/FreeRTOS//Source/queue.c **** 				ready last instead of the actual ready list. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 17


 889:../Middlewares/FreeRTOS//Source/queue.c **** 				prvUnlockQueue( pxQueue );
 890:../Middlewares/FreeRTOS//Source/queue.c **** 
 891:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 892:../Middlewares/FreeRTOS//Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 893:../Middlewares/FreeRTOS//Source/queue.c **** 				task is already in a ready list before it yields - in which
 894:../Middlewares/FreeRTOS//Source/queue.c **** 				case the yield will not cause a context switch unless there
 895:../Middlewares/FreeRTOS//Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 896:../Middlewares/FreeRTOS//Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 897:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 898:../Middlewares/FreeRTOS//Source/queue.c **** 					portYIELD_WITHIN_API();
 899:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 900:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 901:../Middlewares/FreeRTOS//Source/queue.c **** 			else
 902:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 903:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Try again. */
 904:../Middlewares/FreeRTOS//Source/queue.c **** 				prvUnlockQueue( pxQueue );
 905:../Middlewares/FreeRTOS//Source/queue.c **** 				( void ) xTaskResumeAll();
 906:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 907:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 908:../Middlewares/FreeRTOS//Source/queue.c **** 		else
 909:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 910:../Middlewares/FreeRTOS//Source/queue.c **** 			/* The timeout has expired. */
 911:../Middlewares/FreeRTOS//Source/queue.c **** 			prvUnlockQueue( pxQueue );
 912:../Middlewares/FreeRTOS//Source/queue.c **** 			( void ) xTaskResumeAll();
 913:../Middlewares/FreeRTOS//Source/queue.c **** 
 914:../Middlewares/FreeRTOS//Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 915:../Middlewares/FreeRTOS//Source/queue.c **** 			return errQUEUE_FULL;
 916:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 917:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 918:../Middlewares/FreeRTOS//Source/queue.c **** }
 919:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 920:../Middlewares/FreeRTOS//Source/queue.c **** 
 921:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 922:../Middlewares/FreeRTOS//Source/queue.c **** {
 923:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
 924:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
 925:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 926:../Middlewares/FreeRTOS//Source/queue.c **** 
 927:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue );
 928:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 929:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 930:../Middlewares/FreeRTOS//Source/queue.c **** 
 931:../Middlewares/FreeRTOS//Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 932:../Middlewares/FreeRTOS//Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 933:../Middlewares/FreeRTOS//Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 934:../Middlewares/FreeRTOS//Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 935:../Middlewares/FreeRTOS//Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 936:../Middlewares/FreeRTOS//Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 937:../Middlewares/FreeRTOS//Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 938:../Middlewares/FreeRTOS//Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
 939:../Middlewares/FreeRTOS//Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 940:../Middlewares/FreeRTOS//Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 941:../Middlewares/FreeRTOS//Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 942:../Middlewares/FreeRTOS//Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 943:../Middlewares/FreeRTOS//Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 944:../Middlewares/FreeRTOS//Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 945:../Middlewares/FreeRTOS//Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 18


 946:../Middlewares/FreeRTOS//Source/queue.c **** 
 947:../Middlewares/FreeRTOS//Source/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 948:../Middlewares/FreeRTOS//Source/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 949:../Middlewares/FreeRTOS//Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 950:../Middlewares/FreeRTOS//Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 951:../Middlewares/FreeRTOS//Source/queue.c **** 	post). */
 952:../Middlewares/FreeRTOS//Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 953:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 954:../Middlewares/FreeRTOS//Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 955:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 956:../Middlewares/FreeRTOS//Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 957:../Middlewares/FreeRTOS//Source/queue.c **** 
 958:../Middlewares/FreeRTOS//Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 959:../Middlewares/FreeRTOS//Source/queue.c **** 
 960:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 961:../Middlewares/FreeRTOS//Source/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 962:../Middlewares/FreeRTOS//Source/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 963:../Middlewares/FreeRTOS//Source/queue.c **** 			called here even though the disinherit function does not check if
 964:../Middlewares/FreeRTOS//Source/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 965:../Middlewares/FreeRTOS//Source/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 966:../Middlewares/FreeRTOS//Source/queue.c **** 
 967:../Middlewares/FreeRTOS//Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 968:../Middlewares/FreeRTOS//Source/queue.c **** 			be done when the queue is unlocked later. */
 969:../Middlewares/FreeRTOS//Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 970:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 971:../Middlewares/FreeRTOS//Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 972:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 973:../Middlewares/FreeRTOS//Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 974:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 975:../Middlewares/FreeRTOS//Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 976:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 977:../Middlewares/FreeRTOS//Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 978:../Middlewares/FreeRTOS//Source/queue.c **** 							to the queue set caused a higher priority task to
 979:../Middlewares/FreeRTOS//Source/queue.c **** 							unblock.  A context switch is required. */
 980:../Middlewares/FreeRTOS//Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 981:../Middlewares/FreeRTOS//Source/queue.c **** 							{
 982:../Middlewares/FreeRTOS//Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 983:../Middlewares/FreeRTOS//Source/queue.c **** 							}
 984:../Middlewares/FreeRTOS//Source/queue.c **** 							else
 985:../Middlewares/FreeRTOS//Source/queue.c **** 							{
 986:../Middlewares/FreeRTOS//Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 987:../Middlewares/FreeRTOS//Source/queue.c **** 							}
 988:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 989:../Middlewares/FreeRTOS//Source/queue.c **** 						else
 990:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 991:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 992:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 993:../Middlewares/FreeRTOS//Source/queue.c **** 					}
 994:../Middlewares/FreeRTOS//Source/queue.c **** 					else
 995:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 996:../Middlewares/FreeRTOS//Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 997:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 998:../Middlewares/FreeRTOS//Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 999:../Middlewares/FreeRTOS//Source/queue.c **** 							{
1000:../Middlewares/FreeRTOS//Source/queue.c **** 								/* The task waiting has a higher priority so
1001:../Middlewares/FreeRTOS//Source/queue.c **** 								record that a context switch is required. */
1002:../Middlewares/FreeRTOS//Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 19


1003:../Middlewares/FreeRTOS//Source/queue.c **** 								{
1004:../Middlewares/FreeRTOS//Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1005:../Middlewares/FreeRTOS//Source/queue.c **** 								}
1006:../Middlewares/FreeRTOS//Source/queue.c **** 								else
1007:../Middlewares/FreeRTOS//Source/queue.c **** 								{
1008:../Middlewares/FreeRTOS//Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1009:../Middlewares/FreeRTOS//Source/queue.c **** 								}
1010:../Middlewares/FreeRTOS//Source/queue.c **** 							}
1011:../Middlewares/FreeRTOS//Source/queue.c **** 							else
1012:../Middlewares/FreeRTOS//Source/queue.c **** 							{
1013:../Middlewares/FreeRTOS//Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1014:../Middlewares/FreeRTOS//Source/queue.c **** 							}
1015:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1016:../Middlewares/FreeRTOS//Source/queue.c **** 						else
1017:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1018:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1019:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1020:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1021:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1022:../Middlewares/FreeRTOS//Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1023:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1024:../Middlewares/FreeRTOS//Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1025:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1026:../Middlewares/FreeRTOS//Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1027:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1028:../Middlewares/FreeRTOS//Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1029:../Middlewares/FreeRTOS//Source/queue.c **** 							context	switch is required. */
1030:../Middlewares/FreeRTOS//Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1031:../Middlewares/FreeRTOS//Source/queue.c **** 							{
1032:../Middlewares/FreeRTOS//Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1033:../Middlewares/FreeRTOS//Source/queue.c **** 							}
1034:../Middlewares/FreeRTOS//Source/queue.c **** 							else
1035:../Middlewares/FreeRTOS//Source/queue.c **** 							{
1036:../Middlewares/FreeRTOS//Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1037:../Middlewares/FreeRTOS//Source/queue.c **** 							}
1038:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1039:../Middlewares/FreeRTOS//Source/queue.c **** 						else
1040:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1041:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1042:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1043:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1044:../Middlewares/FreeRTOS//Source/queue.c **** 					else
1045:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1046:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1047:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1048:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1049:../Middlewares/FreeRTOS//Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1050:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1051:../Middlewares/FreeRTOS//Source/queue.c **** 			else
1052:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1053:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1054:../Middlewares/FreeRTOS//Source/queue.c **** 				knows that data was posted while it was locked. */
1055:../Middlewares/FreeRTOS//Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1056:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1057:../Middlewares/FreeRTOS//Source/queue.c **** 
1058:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdPASS;
1059:../Middlewares/FreeRTOS//Source/queue.c **** 		}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 20


1060:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1061:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1062:../Middlewares/FreeRTOS//Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1063:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = errQUEUE_FULL;
1064:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1065:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1066:../Middlewares/FreeRTOS//Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1067:../Middlewares/FreeRTOS//Source/queue.c **** 
1068:../Middlewares/FreeRTOS//Source/queue.c **** 	return xReturn;
1069:../Middlewares/FreeRTOS//Source/queue.c **** }
1070:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1071:../Middlewares/FreeRTOS//Source/queue.c **** 
1072:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1073:../Middlewares/FreeRTOS//Source/queue.c **** {
1074:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
1075:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1076:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1077:../Middlewares/FreeRTOS//Source/queue.c **** 
1078:../Middlewares/FreeRTOS//Source/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1079:../Middlewares/FreeRTOS//Source/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1080:../Middlewares/FreeRTOS//Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1081:../Middlewares/FreeRTOS//Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1082:../Middlewares/FreeRTOS//Source/queue.c **** 	post). */
1083:../Middlewares/FreeRTOS//Source/queue.c **** 
1084:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue );
1085:../Middlewares/FreeRTOS//Source/queue.c **** 
1086:../Middlewares/FreeRTOS//Source/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1087:../Middlewares/FreeRTOS//Source/queue.c **** 	if the item size is not 0. */
1088:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1089:../Middlewares/FreeRTOS//Source/queue.c **** 
1090:../Middlewares/FreeRTOS//Source/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1091:../Middlewares/FreeRTOS//Source/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1092:../Middlewares/FreeRTOS//Source/queue.c **** 	interrupts, only tasks. */
1093:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
1094:../Middlewares/FreeRTOS//Source/queue.c **** 
1095:../Middlewares/FreeRTOS//Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1096:../Middlewares/FreeRTOS//Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1097:../Middlewares/FreeRTOS//Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1098:../Middlewares/FreeRTOS//Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1099:../Middlewares/FreeRTOS//Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1100:../Middlewares/FreeRTOS//Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1101:../Middlewares/FreeRTOS//Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1102:../Middlewares/FreeRTOS//Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1103:../Middlewares/FreeRTOS//Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1104:../Middlewares/FreeRTOS//Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1105:../Middlewares/FreeRTOS//Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1106:../Middlewares/FreeRTOS//Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1107:../Middlewares/FreeRTOS//Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1108:../Middlewares/FreeRTOS//Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1109:../Middlewares/FreeRTOS//Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1110:../Middlewares/FreeRTOS//Source/queue.c **** 
1111:../Middlewares/FreeRTOS//Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1112:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1113:../Middlewares/FreeRTOS//Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1114:../Middlewares/FreeRTOS//Source/queue.c **** 
1115:../Middlewares/FreeRTOS//Source/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1116:../Middlewares/FreeRTOS//Source/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 21


1117:../Middlewares/FreeRTOS//Source/queue.c **** 		space'. */
1118:../Middlewares/FreeRTOS//Source/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1119:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1120:../Middlewares/FreeRTOS//Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1121:../Middlewares/FreeRTOS//Source/queue.c **** 
1122:../Middlewares/FreeRTOS//Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1123:../Middlewares/FreeRTOS//Source/queue.c **** 
1124:../Middlewares/FreeRTOS//Source/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1125:../Middlewares/FreeRTOS//Source/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1126:../Middlewares/FreeRTOS//Source/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1127:../Middlewares/FreeRTOS//Source/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1128:../Middlewares/FreeRTOS//Source/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1129:../Middlewares/FreeRTOS//Source/queue.c **** 			messages (semaphores) available. */
1130:../Middlewares/FreeRTOS//Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
1131:../Middlewares/FreeRTOS//Source/queue.c **** 
1132:../Middlewares/FreeRTOS//Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1133:../Middlewares/FreeRTOS//Source/queue.c **** 			be done when the queue is unlocked later. */
1134:../Middlewares/FreeRTOS//Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
1135:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1136:../Middlewares/FreeRTOS//Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1137:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1138:../Middlewares/FreeRTOS//Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1139:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1140:../Middlewares/FreeRTOS//Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1141:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1142:../Middlewares/FreeRTOS//Source/queue.c **** 							/* The semaphore is a member of a queue set, and
1143:../Middlewares/FreeRTOS//Source/queue.c **** 							posting	to the queue set caused a higher priority
1144:../Middlewares/FreeRTOS//Source/queue.c **** 							task to	unblock.  A context switch is required. */
1145:../Middlewares/FreeRTOS//Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1146:../Middlewares/FreeRTOS//Source/queue.c **** 							{
1147:../Middlewares/FreeRTOS//Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1148:../Middlewares/FreeRTOS//Source/queue.c **** 							}
1149:../Middlewares/FreeRTOS//Source/queue.c **** 							else
1150:../Middlewares/FreeRTOS//Source/queue.c **** 							{
1151:../Middlewares/FreeRTOS//Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1152:../Middlewares/FreeRTOS//Source/queue.c **** 							}
1153:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1154:../Middlewares/FreeRTOS//Source/queue.c **** 						else
1155:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1156:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1157:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1158:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1159:../Middlewares/FreeRTOS//Source/queue.c **** 					else
1160:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1161:../Middlewares/FreeRTOS//Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1162:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1163:../Middlewares/FreeRTOS//Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1164:../Middlewares/FreeRTOS//Source/queue.c **** 							{
1165:../Middlewares/FreeRTOS//Source/queue.c **** 								/* The task waiting has a higher priority so
1166:../Middlewares/FreeRTOS//Source/queue.c **** 								record that a context switch is required. */
1167:../Middlewares/FreeRTOS//Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1168:../Middlewares/FreeRTOS//Source/queue.c **** 								{
1169:../Middlewares/FreeRTOS//Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1170:../Middlewares/FreeRTOS//Source/queue.c **** 								}
1171:../Middlewares/FreeRTOS//Source/queue.c **** 								else
1172:../Middlewares/FreeRTOS//Source/queue.c **** 								{
1173:../Middlewares/FreeRTOS//Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 22


1174:../Middlewares/FreeRTOS//Source/queue.c **** 								}
1175:../Middlewares/FreeRTOS//Source/queue.c **** 							}
1176:../Middlewares/FreeRTOS//Source/queue.c **** 							else
1177:../Middlewares/FreeRTOS//Source/queue.c **** 							{
1178:../Middlewares/FreeRTOS//Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1179:../Middlewares/FreeRTOS//Source/queue.c **** 							}
1180:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1181:../Middlewares/FreeRTOS//Source/queue.c **** 						else
1182:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1183:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1184:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1185:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1186:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1187:../Middlewares/FreeRTOS//Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1188:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1189:../Middlewares/FreeRTOS//Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1190:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1191:../Middlewares/FreeRTOS//Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1192:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1193:../Middlewares/FreeRTOS//Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1194:../Middlewares/FreeRTOS//Source/queue.c **** 							context	switch is required. */
1195:../Middlewares/FreeRTOS//Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1196:../Middlewares/FreeRTOS//Source/queue.c **** 							{
1197:../Middlewares/FreeRTOS//Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1198:../Middlewares/FreeRTOS//Source/queue.c **** 							}
1199:../Middlewares/FreeRTOS//Source/queue.c **** 							else
1200:../Middlewares/FreeRTOS//Source/queue.c **** 							{
1201:../Middlewares/FreeRTOS//Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1202:../Middlewares/FreeRTOS//Source/queue.c **** 							}
1203:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1204:../Middlewares/FreeRTOS//Source/queue.c **** 						else
1205:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1206:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1207:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1208:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1209:../Middlewares/FreeRTOS//Source/queue.c **** 					else
1210:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1211:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1212:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1213:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1214:../Middlewares/FreeRTOS//Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1215:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1216:../Middlewares/FreeRTOS//Source/queue.c **** 			else
1217:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1218:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1219:../Middlewares/FreeRTOS//Source/queue.c **** 				knows that data was posted while it was locked. */
1220:../Middlewares/FreeRTOS//Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1221:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1222:../Middlewares/FreeRTOS//Source/queue.c **** 
1223:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdPASS;
1224:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1225:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1226:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1227:../Middlewares/FreeRTOS//Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1228:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = errQUEUE_FULL;
1229:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1230:../Middlewares/FreeRTOS//Source/queue.c **** 	}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 23


1231:../Middlewares/FreeRTOS//Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1232:../Middlewares/FreeRTOS//Source/queue.c **** 
1233:../Middlewares/FreeRTOS//Source/queue.c **** 	return xReturn;
1234:../Middlewares/FreeRTOS//Source/queue.c **** }
1235:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1236:../Middlewares/FreeRTOS//Source/queue.c **** 
1237:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWa
1238:../Middlewares/FreeRTOS//Source/queue.c **** {
1239:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1240:../Middlewares/FreeRTOS//Source/queue.c **** TimeOut_t xTimeOut;
1241:../Middlewares/FreeRTOS//Source/queue.c **** int8_t *pcOriginalReadPosition;
1242:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1243:../Middlewares/FreeRTOS//Source/queue.c **** 
1244:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue );
1245:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1246:../Middlewares/FreeRTOS//Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1247:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1248:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1249:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1250:../Middlewares/FreeRTOS//Source/queue.c **** 	#endif
1251:../Middlewares/FreeRTOS//Source/queue.c **** 
1252:../Middlewares/FreeRTOS//Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1253:../Middlewares/FreeRTOS//Source/queue.c **** 	statements within the function itself.  This is done in the interest
1254:../Middlewares/FreeRTOS//Source/queue.c **** 	of execution time efficiency. */
1255:../Middlewares/FreeRTOS//Source/queue.c **** 
1256:../Middlewares/FreeRTOS//Source/queue.c **** 	for( ;; )
1257:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1258:../Middlewares/FreeRTOS//Source/queue.c **** 		taskENTER_CRITICAL();
1259:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1260:../Middlewares/FreeRTOS//Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1261:../Middlewares/FreeRTOS//Source/queue.c **** 
1262:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1263:../Middlewares/FreeRTOS//Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1264:../Middlewares/FreeRTOS//Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1265:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1266:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Remember the read position in case the queue is only being
1267:../Middlewares/FreeRTOS//Source/queue.c **** 				peeked. */
1268:../Middlewares/FreeRTOS//Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1269:../Middlewares/FreeRTOS//Source/queue.c **** 
1270:../Middlewares/FreeRTOS//Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1271:../Middlewares/FreeRTOS//Source/queue.c **** 
1272:../Middlewares/FreeRTOS//Source/queue.c **** 				if( xJustPeeking == pdFALSE )
1273:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1274:../Middlewares/FreeRTOS//Source/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
1275:../Middlewares/FreeRTOS//Source/queue.c **** 
1276:../Middlewares/FreeRTOS//Source/queue.c **** 					/* Actually removing data, not just peeking. */
1277:../Middlewares/FreeRTOS//Source/queue.c **** 					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
1278:../Middlewares/FreeRTOS//Source/queue.c **** 
1279:../Middlewares/FreeRTOS//Source/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
1280:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1281:../Middlewares/FreeRTOS//Source/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1282:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1283:../Middlewares/FreeRTOS//Source/queue.c **** 							/* Record the information required to implement
1284:../Middlewares/FreeRTOS//Source/queue.c **** 							priority inheritance should it become necessary. */
1285:../Middlewares/FreeRTOS//Source/queue.c **** 							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is 
1286:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1287:../Middlewares/FreeRTOS//Source/queue.c **** 						else
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 24


1288:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1289:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1290:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1291:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1292:../Middlewares/FreeRTOS//Source/queue.c **** 					#endif /* configUSE_MUTEXES */
1293:../Middlewares/FreeRTOS//Source/queue.c **** 
1294:../Middlewares/FreeRTOS//Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1295:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1296:../Middlewares/FreeRTOS//Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1297:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1298:../Middlewares/FreeRTOS//Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1299:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1300:../Middlewares/FreeRTOS//Source/queue.c **** 						else
1301:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1302:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1303:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1304:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1305:../Middlewares/FreeRTOS//Source/queue.c **** 					else
1306:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1307:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1308:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1309:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1310:../Middlewares/FreeRTOS//Source/queue.c **** 				else
1311:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1312:../Middlewares/FreeRTOS//Source/queue.c **** 					traceQUEUE_PEEK( pxQueue );
1313:../Middlewares/FreeRTOS//Source/queue.c **** 
1314:../Middlewares/FreeRTOS//Source/queue.c **** 					/* The data is not being removed, so reset the read
1315:../Middlewares/FreeRTOS//Source/queue.c **** 					pointer. */
1316:../Middlewares/FreeRTOS//Source/queue.c **** 					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1317:../Middlewares/FreeRTOS//Source/queue.c **** 
1318:../Middlewares/FreeRTOS//Source/queue.c **** 					/* The data is being left in the queue, so see if there are
1319:../Middlewares/FreeRTOS//Source/queue.c **** 					any other tasks waiting for the data. */
1320:../Middlewares/FreeRTOS//Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1321:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1322:../Middlewares/FreeRTOS//Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1323:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1324:../Middlewares/FreeRTOS//Source/queue.c **** 							/* The task waiting has a higher priority than this task. */
1325:../Middlewares/FreeRTOS//Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1326:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1327:../Middlewares/FreeRTOS//Source/queue.c **** 						else
1328:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1329:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1330:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1331:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1332:../Middlewares/FreeRTOS//Source/queue.c **** 					else
1333:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1334:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1335:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1336:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1337:../Middlewares/FreeRTOS//Source/queue.c **** 
1338:../Middlewares/FreeRTOS//Source/queue.c **** 				taskEXIT_CRITICAL();
1339:../Middlewares/FreeRTOS//Source/queue.c **** 				return pdPASS;
1340:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1341:../Middlewares/FreeRTOS//Source/queue.c **** 			else
1342:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1343:../Middlewares/FreeRTOS//Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1344:../Middlewares/FreeRTOS//Source/queue.c **** 				{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 25


1345:../Middlewares/FreeRTOS//Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1346:../Middlewares/FreeRTOS//Source/queue.c **** 					the block time has expired) so leave now. */
1347:../Middlewares/FreeRTOS//Source/queue.c **** 					taskEXIT_CRITICAL();
1348:../Middlewares/FreeRTOS//Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1349:../Middlewares/FreeRTOS//Source/queue.c **** 					return errQUEUE_EMPTY;
1350:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1351:../Middlewares/FreeRTOS//Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1352:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1353:../Middlewares/FreeRTOS//Source/queue.c **** 					/* The queue was empty and a block time was specified so
1354:../Middlewares/FreeRTOS//Source/queue.c **** 					configure the timeout structure. */
1355:../Middlewares/FreeRTOS//Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
1356:../Middlewares/FreeRTOS//Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1357:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1358:../Middlewares/FreeRTOS//Source/queue.c **** 				else
1359:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1360:../Middlewares/FreeRTOS//Source/queue.c **** 					/* Entry time was already set. */
1361:../Middlewares/FreeRTOS//Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1362:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1363:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1364:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1365:../Middlewares/FreeRTOS//Source/queue.c **** 		taskEXIT_CRITICAL();
1366:../Middlewares/FreeRTOS//Source/queue.c **** 
1367:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1368:../Middlewares/FreeRTOS//Source/queue.c **** 		now the critical section has been exited. */
1369:../Middlewares/FreeRTOS//Source/queue.c **** 
1370:../Middlewares/FreeRTOS//Source/queue.c **** 		vTaskSuspendAll();
1371:../Middlewares/FreeRTOS//Source/queue.c **** 		prvLockQueue( pxQueue );
1372:../Middlewares/FreeRTOS//Source/queue.c **** 
1373:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1374:../Middlewares/FreeRTOS//Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1375:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1376:../Middlewares/FreeRTOS//Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1377:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1378:../Middlewares/FreeRTOS//Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1379:../Middlewares/FreeRTOS//Source/queue.c **** 
1380:../Middlewares/FreeRTOS//Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1381:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1382:../Middlewares/FreeRTOS//Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1383:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1384:../Middlewares/FreeRTOS//Source/queue.c **** 						taskENTER_CRITICAL();
1385:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1386:../Middlewares/FreeRTOS//Source/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1387:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1388:../Middlewares/FreeRTOS//Source/queue.c **** 						taskEXIT_CRITICAL();
1389:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1390:../Middlewares/FreeRTOS//Source/queue.c **** 					else
1391:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1392:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1393:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1394:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1395:../Middlewares/FreeRTOS//Source/queue.c **** 				#endif
1396:../Middlewares/FreeRTOS//Source/queue.c **** 
1397:../Middlewares/FreeRTOS//Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1398:../Middlewares/FreeRTOS//Source/queue.c **** 				prvUnlockQueue( pxQueue );
1399:../Middlewares/FreeRTOS//Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1400:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1401:../Middlewares/FreeRTOS//Source/queue.c **** 					portYIELD_WITHIN_API();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 26


1402:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1403:../Middlewares/FreeRTOS//Source/queue.c **** 				else
1404:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1405:../Middlewares/FreeRTOS//Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1406:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1407:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1408:../Middlewares/FreeRTOS//Source/queue.c **** 			else
1409:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1410:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Try again. */
1411:../Middlewares/FreeRTOS//Source/queue.c **** 				prvUnlockQueue( pxQueue );
1412:../Middlewares/FreeRTOS//Source/queue.c **** 				( void ) xTaskResumeAll();
1413:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1414:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1415:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1416:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1417:../Middlewares/FreeRTOS//Source/queue.c **** 			prvUnlockQueue( pxQueue );
1418:../Middlewares/FreeRTOS//Source/queue.c **** 			( void ) xTaskResumeAll();
1419:../Middlewares/FreeRTOS//Source/queue.c **** 
1420:../Middlewares/FreeRTOS//Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1421:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1422:../Middlewares/FreeRTOS//Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1423:../Middlewares/FreeRTOS//Source/queue.c **** 				return errQUEUE_EMPTY;
1424:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1425:../Middlewares/FreeRTOS//Source/queue.c **** 			else
1426:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1427:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1428:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1429:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1430:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1431:../Middlewares/FreeRTOS//Source/queue.c **** }
1432:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1433:../Middlewares/FreeRTOS//Source/queue.c **** 
1434:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1435:../Middlewares/FreeRTOS//Source/queue.c **** {
1436:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
1437:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1438:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1439:../Middlewares/FreeRTOS//Source/queue.c **** 
1440:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue );
1441:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1442:../Middlewares/FreeRTOS//Source/queue.c **** 
1443:../Middlewares/FreeRTOS//Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1444:../Middlewares/FreeRTOS//Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1445:../Middlewares/FreeRTOS//Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1446:../Middlewares/FreeRTOS//Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1447:../Middlewares/FreeRTOS//Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1448:../Middlewares/FreeRTOS//Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1449:../Middlewares/FreeRTOS//Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1450:../Middlewares/FreeRTOS//Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1451:../Middlewares/FreeRTOS//Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1452:../Middlewares/FreeRTOS//Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1453:../Middlewares/FreeRTOS//Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1454:../Middlewares/FreeRTOS//Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1455:../Middlewares/FreeRTOS//Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1456:../Middlewares/FreeRTOS//Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1457:../Middlewares/FreeRTOS//Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1458:../Middlewares/FreeRTOS//Source/queue.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 27


1459:../Middlewares/FreeRTOS//Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1460:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1461:../Middlewares/FreeRTOS//Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1462:../Middlewares/FreeRTOS//Source/queue.c **** 
1463:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1464:../Middlewares/FreeRTOS//Source/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1465:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1466:../Middlewares/FreeRTOS//Source/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1467:../Middlewares/FreeRTOS//Source/queue.c **** 
1468:../Middlewares/FreeRTOS//Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1469:../Middlewares/FreeRTOS//Source/queue.c **** 
1470:../Middlewares/FreeRTOS//Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1471:../Middlewares/FreeRTOS//Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
1472:../Middlewares/FreeRTOS//Source/queue.c **** 
1473:../Middlewares/FreeRTOS//Source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1474:../Middlewares/FreeRTOS//Source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1475:../Middlewares/FreeRTOS//Source/queue.c **** 			will know that an ISR has removed data while the queue was
1476:../Middlewares/FreeRTOS//Source/queue.c **** 			locked. */
1477:../Middlewares/FreeRTOS//Source/queue.c **** 			if( cRxLock == queueUNLOCKED )
1478:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1479:../Middlewares/FreeRTOS//Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1480:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1481:../Middlewares/FreeRTOS//Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1482:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1483:../Middlewares/FreeRTOS//Source/queue.c **** 						/* The task waiting has a higher priority than us so
1484:../Middlewares/FreeRTOS//Source/queue.c **** 						force a context switch. */
1485:../Middlewares/FreeRTOS//Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1486:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1487:../Middlewares/FreeRTOS//Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1488:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1489:../Middlewares/FreeRTOS//Source/queue.c **** 						else
1490:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1491:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1492:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1493:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1494:../Middlewares/FreeRTOS//Source/queue.c **** 					else
1495:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1496:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1497:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1498:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1499:../Middlewares/FreeRTOS//Source/queue.c **** 				else
1500:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1501:../Middlewares/FreeRTOS//Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1502:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1503:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1504:../Middlewares/FreeRTOS//Source/queue.c **** 			else
1505:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1506:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1507:../Middlewares/FreeRTOS//Source/queue.c **** 				knows that data was removed while it was locked. */
1508:../Middlewares/FreeRTOS//Source/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1509:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1510:../Middlewares/FreeRTOS//Source/queue.c **** 
1511:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdPASS;
1512:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1513:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1514:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1515:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdFAIL;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 28


1516:../Middlewares/FreeRTOS//Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1517:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1518:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1519:../Middlewares/FreeRTOS//Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1520:../Middlewares/FreeRTOS//Source/queue.c **** 
1521:../Middlewares/FreeRTOS//Source/queue.c **** 	return xReturn;
1522:../Middlewares/FreeRTOS//Source/queue.c **** }
1523:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1524:../Middlewares/FreeRTOS//Source/queue.c **** 
1525:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1526:../Middlewares/FreeRTOS//Source/queue.c **** {
1527:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
1528:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1529:../Middlewares/FreeRTOS//Source/queue.c **** int8_t *pcOriginalReadPosition;
1530:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1531:../Middlewares/FreeRTOS//Source/queue.c **** 
1532:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue );
1533:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1534:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1535:../Middlewares/FreeRTOS//Source/queue.c **** 
1536:../Middlewares/FreeRTOS//Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1537:../Middlewares/FreeRTOS//Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1538:../Middlewares/FreeRTOS//Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1539:../Middlewares/FreeRTOS//Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1540:../Middlewares/FreeRTOS//Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1541:../Middlewares/FreeRTOS//Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1542:../Middlewares/FreeRTOS//Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1543:../Middlewares/FreeRTOS//Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1544:../Middlewares/FreeRTOS//Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1545:../Middlewares/FreeRTOS//Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1546:../Middlewares/FreeRTOS//Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1547:../Middlewares/FreeRTOS//Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1548:../Middlewares/FreeRTOS//Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1549:../Middlewares/FreeRTOS//Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1550:../Middlewares/FreeRTOS//Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1551:../Middlewares/FreeRTOS//Source/queue.c **** 
1552:../Middlewares/FreeRTOS//Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1553:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1554:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1555:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1556:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1557:../Middlewares/FreeRTOS//Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1558:../Middlewares/FreeRTOS//Source/queue.c **** 
1559:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1560:../Middlewares/FreeRTOS//Source/queue.c **** 			actually being removed from the queue. */
1561:../Middlewares/FreeRTOS//Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1562:../Middlewares/FreeRTOS//Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1563:../Middlewares/FreeRTOS//Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1564:../Middlewares/FreeRTOS//Source/queue.c **** 
1565:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdPASS;
1566:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1567:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1568:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1569:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdFAIL;
1570:../Middlewares/FreeRTOS//Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1571:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1572:../Middlewares/FreeRTOS//Source/queue.c **** 	}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 29


1573:../Middlewares/FreeRTOS//Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1574:../Middlewares/FreeRTOS//Source/queue.c **** 
1575:../Middlewares/FreeRTOS//Source/queue.c **** 	return xReturn;
1576:../Middlewares/FreeRTOS//Source/queue.c **** }
1577:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1578:../Middlewares/FreeRTOS//Source/queue.c **** 
1579:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1580:../Middlewares/FreeRTOS//Source/queue.c **** {
1581:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxReturn;
1582:../Middlewares/FreeRTOS//Source/queue.c **** 
1583:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( xQueue );
1584:../Middlewares/FreeRTOS//Source/queue.c **** 
1585:../Middlewares/FreeRTOS//Source/queue.c **** 	taskENTER_CRITICAL();
1586:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1587:../Middlewares/FreeRTOS//Source/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1588:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1589:../Middlewares/FreeRTOS//Source/queue.c **** 	taskEXIT_CRITICAL();
1590:../Middlewares/FreeRTOS//Source/queue.c **** 
1591:../Middlewares/FreeRTOS//Source/queue.c **** 	return uxReturn;
1592:../Middlewares/FreeRTOS//Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1593:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1594:../Middlewares/FreeRTOS//Source/queue.c **** 
1595:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1596:../Middlewares/FreeRTOS//Source/queue.c **** {
1597:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxReturn;
1598:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t *pxQueue;
1599:../Middlewares/FreeRTOS//Source/queue.c **** 
1600:../Middlewares/FreeRTOS//Source/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
1601:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue );
1602:../Middlewares/FreeRTOS//Source/queue.c **** 
1603:../Middlewares/FreeRTOS//Source/queue.c **** 	taskENTER_CRITICAL();
1604:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1605:../Middlewares/FreeRTOS//Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1606:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1607:../Middlewares/FreeRTOS//Source/queue.c **** 	taskEXIT_CRITICAL();
1608:../Middlewares/FreeRTOS//Source/queue.c **** 
1609:../Middlewares/FreeRTOS//Source/queue.c **** 	return uxReturn;
1610:../Middlewares/FreeRTOS//Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1611:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1612:../Middlewares/FreeRTOS//Source/queue.c **** 
1613:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1614:../Middlewares/FreeRTOS//Source/queue.c **** {
1615:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxReturn;
1616:../Middlewares/FreeRTOS//Source/queue.c **** 
1617:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( xQueue );
1618:../Middlewares/FreeRTOS//Source/queue.c **** 
1619:../Middlewares/FreeRTOS//Source/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1620:../Middlewares/FreeRTOS//Source/queue.c **** 
1621:../Middlewares/FreeRTOS//Source/queue.c **** 	return uxReturn;
1622:../Middlewares/FreeRTOS//Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1623:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1624:../Middlewares/FreeRTOS//Source/queue.c **** 
1625:../Middlewares/FreeRTOS//Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1626:../Middlewares/FreeRTOS//Source/queue.c **** {
1627:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1628:../Middlewares/FreeRTOS//Source/queue.c **** 
1629:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 30


1630:../Middlewares/FreeRTOS//Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1631:../Middlewares/FreeRTOS//Source/queue.c **** 
1632:../Middlewares/FreeRTOS//Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1633:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1634:../Middlewares/FreeRTOS//Source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1635:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1636:../Middlewares/FreeRTOS//Source/queue.c **** 	#endif
1637:../Middlewares/FreeRTOS//Source/queue.c **** 
1638:../Middlewares/FreeRTOS//Source/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1639:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1640:../Middlewares/FreeRTOS//Source/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1641:../Middlewares/FreeRTOS//Source/queue.c **** 		again. */
1642:../Middlewares/FreeRTOS//Source/queue.c **** 		vPortFree( pxQueue );
1643:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1644:../Middlewares/FreeRTOS//Source/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1645:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1646:../Middlewares/FreeRTOS//Source/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1647:../Middlewares/FreeRTOS//Source/queue.c **** 		check before attempting to free the memory. */
1648:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1649:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1650:../Middlewares/FreeRTOS//Source/queue.c **** 			vPortFree( pxQueue );
1651:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1652:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1653:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1654:../Middlewares/FreeRTOS//Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1655:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1656:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1657:../Middlewares/FreeRTOS//Source/queue.c **** 	#else
1658:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1659:../Middlewares/FreeRTOS//Source/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1660:../Middlewares/FreeRTOS//Source/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1661:../Middlewares/FreeRTOS//Source/queue.c **** 		( void ) pxQueue;
1662:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1663:../Middlewares/FreeRTOS//Source/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1664:../Middlewares/FreeRTOS//Source/queue.c **** }
1665:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1666:../Middlewares/FreeRTOS//Source/queue.c **** 
1667:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1668:../Middlewares/FreeRTOS//Source/queue.c **** 
1669:../Middlewares/FreeRTOS//Source/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1670:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1671:../Middlewares/FreeRTOS//Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
1672:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1673:../Middlewares/FreeRTOS//Source/queue.c **** 
1674:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1675:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1676:../Middlewares/FreeRTOS//Source/queue.c **** 
1677:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1678:../Middlewares/FreeRTOS//Source/queue.c **** 
1679:../Middlewares/FreeRTOS//Source/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1680:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1681:../Middlewares/FreeRTOS//Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
1682:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1683:../Middlewares/FreeRTOS//Source/queue.c **** 
1684:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1685:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1686:../Middlewares/FreeRTOS//Source/queue.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 31


1687:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1688:../Middlewares/FreeRTOS//Source/queue.c **** 
1689:../Middlewares/FreeRTOS//Source/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
1690:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1691:../Middlewares/FreeRTOS//Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
1692:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1693:../Middlewares/FreeRTOS//Source/queue.c **** 
1694:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1695:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1696:../Middlewares/FreeRTOS//Source/queue.c **** 
1697:../Middlewares/FreeRTOS//Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
1698:../Middlewares/FreeRTOS//Source/queue.c **** {
1699:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn = pdFALSE;
1700:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxMessagesWaiting;
1701:../Middlewares/FreeRTOS//Source/queue.c **** 
1702:../Middlewares/FreeRTOS//Source/queue.c **** 	/* This function is called from a critical section. */
1703:../Middlewares/FreeRTOS//Source/queue.c **** 
1704:../Middlewares/FreeRTOS//Source/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1705:../Middlewares/FreeRTOS//Source/queue.c **** 
1706:../Middlewares/FreeRTOS//Source/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1707:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1708:../Middlewares/FreeRTOS//Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1709:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1710:../Middlewares/FreeRTOS//Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1711:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1712:../Middlewares/FreeRTOS//Source/queue.c **** 				/* The mutex is no longer being held. */
1713:../Middlewares/FreeRTOS//Source/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1714:../Middlewares/FreeRTOS//Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
1715:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1716:../Middlewares/FreeRTOS//Source/queue.c **** 			else
1717:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1718:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1719:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1720:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1721:../Middlewares/FreeRTOS//Source/queue.c **** 		#endif /* configUSE_MUTEXES */
1722:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1723:../Middlewares/FreeRTOS//Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
1724:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1725:../Middlewares/FreeRTOS//Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
1726:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1727:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
1728:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1729:../Middlewares/FreeRTOS//Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
1730:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1731:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1732:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1733:../Middlewares/FreeRTOS//Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1734:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1735:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1736:../Middlewares/FreeRTOS//Source/queue.c **** 	else
1737:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1738:../Middlewares/FreeRTOS//Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
1739:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1740:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
1741:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1742:../Middlewares/FreeRTOS//Source/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1743:../Middlewares/FreeRTOS//Source/queue.c **** 		}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 32


1744:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1745:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1746:../Middlewares/FreeRTOS//Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1747:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1748:../Middlewares/FreeRTOS//Source/queue.c **** 
1749:../Middlewares/FreeRTOS//Source/queue.c **** 		if( xPosition == queueOVERWRITE )
1750:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1751:../Middlewares/FreeRTOS//Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1752:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1753:../Middlewares/FreeRTOS//Source/queue.c **** 				/* An item is not being added but overwritten, so subtract
1754:../Middlewares/FreeRTOS//Source/queue.c **** 				one from the recorded number of items in the queue so when
1755:../Middlewares/FreeRTOS//Source/queue.c **** 				one is added again below the number of recorded items remains
1756:../Middlewares/FreeRTOS//Source/queue.c **** 				correct. */
1757:../Middlewares/FreeRTOS//Source/queue.c **** 				--uxMessagesWaiting;
1758:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1759:../Middlewares/FreeRTOS//Source/queue.c **** 			else
1760:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1761:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1762:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1763:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1764:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1765:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1766:../Middlewares/FreeRTOS//Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1767:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1768:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1769:../Middlewares/FreeRTOS//Source/queue.c **** 
1770:../Middlewares/FreeRTOS//Source/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
1771:../Middlewares/FreeRTOS//Source/queue.c **** 
1772:../Middlewares/FreeRTOS//Source/queue.c **** 	return xReturn;
1773:../Middlewares/FreeRTOS//Source/queue.c **** }
1774:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1775:../Middlewares/FreeRTOS//Source/queue.c **** 
1776:../Middlewares/FreeRTOS//Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
1777:../Middlewares/FreeRTOS//Source/queue.c **** {
1778:../Middlewares/FreeRTOS//Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1779:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1780:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1781:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
1782:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1783:../Middlewares/FreeRTOS//Source/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1784:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1785:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1786:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1787:../Middlewares/FreeRTOS//Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1788:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1789:../Middlewares/FreeRTOS//Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
1790:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1791:../Middlewares/FreeRTOS//Source/queue.c **** }
1792:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1793:../Middlewares/FreeRTOS//Source/queue.c **** 
1794:../Middlewares/FreeRTOS//Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
1795:../Middlewares/FreeRTOS//Source/queue.c **** {
1796:../Middlewares/FreeRTOS//Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1797:../Middlewares/FreeRTOS//Source/queue.c **** 
1798:../Middlewares/FreeRTOS//Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
1799:../Middlewares/FreeRTOS//Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
1800:../Middlewares/FreeRTOS//Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 33


1801:../Middlewares/FreeRTOS//Source/queue.c **** 	updated. */
1802:../Middlewares/FreeRTOS//Source/queue.c **** 	taskENTER_CRITICAL();
1803:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1804:../Middlewares/FreeRTOS//Source/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
1805:../Middlewares/FreeRTOS//Source/queue.c **** 
1806:../Middlewares/FreeRTOS//Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
1807:../Middlewares/FreeRTOS//Source/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
1808:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1809:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1810:../Middlewares/FreeRTOS//Source/queue.c **** 			blocked waiting for data to become available? */
1811:../Middlewares/FreeRTOS//Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
1812:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1813:../Middlewares/FreeRTOS//Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
1814:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1815:../Middlewares/FreeRTOS//Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1816:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1817:../Middlewares/FreeRTOS//Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
1818:../Middlewares/FreeRTOS//Source/queue.c **** 						the queue set caused a higher priority task to unblock.
1819:../Middlewares/FreeRTOS//Source/queue.c **** 						A context switch is required. */
1820:../Middlewares/FreeRTOS//Source/queue.c **** 						vTaskMissedYield();
1821:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1822:../Middlewares/FreeRTOS//Source/queue.c **** 					else
1823:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1824:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1825:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1826:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1827:../Middlewares/FreeRTOS//Source/queue.c **** 				else
1828:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1829:../Middlewares/FreeRTOS//Source/queue.c **** 					/* Tasks that are removed from the event list will get
1830:../Middlewares/FreeRTOS//Source/queue.c **** 					added to the pending ready list as the scheduler is still
1831:../Middlewares/FreeRTOS//Source/queue.c **** 					suspended. */
1832:../Middlewares/FreeRTOS//Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1833:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1834:../Middlewares/FreeRTOS//Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1835:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1836:../Middlewares/FreeRTOS//Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1837:../Middlewares/FreeRTOS//Source/queue.c **** 							context	switch is required. */
1838:../Middlewares/FreeRTOS//Source/queue.c **** 							vTaskMissedYield();
1839:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1840:../Middlewares/FreeRTOS//Source/queue.c **** 						else
1841:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1842:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1843:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1844:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1845:../Middlewares/FreeRTOS//Source/queue.c **** 					else
1846:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1847:../Middlewares/FreeRTOS//Source/queue.c **** 						break;
1848:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1849:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1850:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1851:../Middlewares/FreeRTOS//Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
1852:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1853:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
1854:../Middlewares/FreeRTOS//Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
1855:../Middlewares/FreeRTOS//Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1856:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1857:../Middlewares/FreeRTOS//Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 34


1858:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1859:../Middlewares/FreeRTOS//Source/queue.c **** 						/* The task waiting has a higher priority so record that
1860:../Middlewares/FreeRTOS//Source/queue.c **** 						a context switch is required. */
1861:../Middlewares/FreeRTOS//Source/queue.c **** 						vTaskMissedYield();
1862:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1863:../Middlewares/FreeRTOS//Source/queue.c **** 					else
1864:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1865:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1866:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1867:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1868:../Middlewares/FreeRTOS//Source/queue.c **** 				else
1869:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1870:../Middlewares/FreeRTOS//Source/queue.c **** 					break;
1871:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1872:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1873:../Middlewares/FreeRTOS//Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
1874:../Middlewares/FreeRTOS//Source/queue.c **** 
1875:../Middlewares/FreeRTOS//Source/queue.c **** 			--cTxLock;
1876:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1877:../Middlewares/FreeRTOS//Source/queue.c **** 
1878:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
1879:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1880:../Middlewares/FreeRTOS//Source/queue.c **** 	taskEXIT_CRITICAL();
1881:../Middlewares/FreeRTOS//Source/queue.c **** 
1882:../Middlewares/FreeRTOS//Source/queue.c **** 	/* Do the same for the Rx lock. */
1883:../Middlewares/FreeRTOS//Source/queue.c **** 	taskENTER_CRITICAL();
1884:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1885:../Middlewares/FreeRTOS//Source/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
1886:../Middlewares/FreeRTOS//Source/queue.c **** 
1887:../Middlewares/FreeRTOS//Source/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
1888:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1889:../Middlewares/FreeRTOS//Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1890:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1891:../Middlewares/FreeRTOS//Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1892:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1893:../Middlewares/FreeRTOS//Source/queue.c **** 					vTaskMissedYield();
1894:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1895:../Middlewares/FreeRTOS//Source/queue.c **** 				else
1896:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1897:../Middlewares/FreeRTOS//Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1898:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1899:../Middlewares/FreeRTOS//Source/queue.c **** 
1900:../Middlewares/FreeRTOS//Source/queue.c **** 				--cRxLock;
1901:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1902:../Middlewares/FreeRTOS//Source/queue.c **** 			else
1903:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1904:../Middlewares/FreeRTOS//Source/queue.c **** 				break;
1905:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1906:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1907:../Middlewares/FreeRTOS//Source/queue.c **** 
1908:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
1909:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1910:../Middlewares/FreeRTOS//Source/queue.c **** 	taskEXIT_CRITICAL();
1911:../Middlewares/FreeRTOS//Source/queue.c **** }
1912:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1913:../Middlewares/FreeRTOS//Source/queue.c **** 
1914:../Middlewares/FreeRTOS//Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 35


1915:../Middlewares/FreeRTOS//Source/queue.c **** {
1916:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
1917:../Middlewares/FreeRTOS//Source/queue.c **** 
1918:../Middlewares/FreeRTOS//Source/queue.c **** 	taskENTER_CRITICAL();
1919:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1920:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1921:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1922:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdTRUE;
1923:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1924:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1925:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1926:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdFALSE;
1927:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1928:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1929:../Middlewares/FreeRTOS//Source/queue.c **** 	taskEXIT_CRITICAL();
1930:../Middlewares/FreeRTOS//Source/queue.c **** 
1931:../Middlewares/FreeRTOS//Source/queue.c **** 	return xReturn;
1932:../Middlewares/FreeRTOS//Source/queue.c **** }
1933:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1934:../Middlewares/FreeRTOS//Source/queue.c **** 
1935:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
1936:../Middlewares/FreeRTOS//Source/queue.c **** {
1937:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
1938:../Middlewares/FreeRTOS//Source/queue.c **** 
1939:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( xQueue );
1940:../Middlewares/FreeRTOS//Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
1941:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1942:../Middlewares/FreeRTOS//Source/queue.c **** 		xReturn = pdTRUE;
1943:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1944:../Middlewares/FreeRTOS//Source/queue.c **** 	else
1945:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1946:../Middlewares/FreeRTOS//Source/queue.c **** 		xReturn = pdFALSE;
1947:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1948:../Middlewares/FreeRTOS//Source/queue.c **** 
1949:../Middlewares/FreeRTOS//Source/queue.c **** 	return xReturn;
1950:../Middlewares/FreeRTOS//Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
1951:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1952:../Middlewares/FreeRTOS//Source/queue.c **** 
1953:../Middlewares/FreeRTOS//Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
1954:../Middlewares/FreeRTOS//Source/queue.c **** {
  26              		.loc 1 1954 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 10B5     		push	{r4, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  36 0002 0446     		mov	r4, r0
1955:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
1956:../Middlewares/FreeRTOS//Source/queue.c **** 
1957:../Middlewares/FreeRTOS//Source/queue.c **** 	taskENTER_CRITICAL();
  37              		.loc 1 1957 0
  38 0004 FFF7FEFF 		bl	vPortEnterCritical
  39              	.LVL1:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 36


1958:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1959:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  40              		.loc 1 1959 0
  41 0008 A26B     		ldr	r2, [r4, #56]
  42 000a E36B     		ldr	r3, [r4, #60]
  43 000c 9A42     		cmp	r2, r3
  44 000e 04D0     		beq	.L5
1960:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1961:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdTRUE;
1962:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1963:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1964:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1965:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdFALSE;
  45              		.loc 1 1965 0
  46 0010 0024     		movs	r4, #0
  47              	.LVL2:
  48              	.L2:
1966:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1967:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1968:../Middlewares/FreeRTOS//Source/queue.c **** 	taskEXIT_CRITICAL();
  49              		.loc 1 1968 0
  50 0012 FFF7FEFF 		bl	vPortExitCritical
  51              	.LVL3:
1969:../Middlewares/FreeRTOS//Source/queue.c **** 
1970:../Middlewares/FreeRTOS//Source/queue.c **** 	return xReturn;
1971:../Middlewares/FreeRTOS//Source/queue.c **** }
  52              		.loc 1 1971 0
  53 0016 2046     		mov	r0, r4
  54 0018 10BD     		pop	{r4, pc}
  55              	.LVL4:
  56              	.L5:
1961:../Middlewares/FreeRTOS//Source/queue.c **** 		}
  57              		.loc 1 1961 0
  58 001a 0124     		movs	r4, #1
  59              	.LVL5:
  60 001c F9E7     		b	.L2
  61              		.cfi_endproc
  62              	.LFE154:
  64              		.section	.text.prvIsQueueEmpty,"ax",%progbits
  65              		.align	1
  66              		.syntax unified
  67              		.thumb
  68              		.thumb_func
  69              		.fpu fpv4-sp-d16
  71              	prvIsQueueEmpty:
  72              	.LFB152:
1915:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
  73              		.loc 1 1915 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              	.LVL6:
  78 0000 10B5     		push	{r4, lr}
  79              	.LCFI1:
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 4, -8
  82              		.cfi_offset 14, -4
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 37


  83 0002 0446     		mov	r4, r0
1918:../Middlewares/FreeRTOS//Source/queue.c **** 	{
  84              		.loc 1 1918 0
  85 0004 FFF7FEFF 		bl	vPortEnterCritical
  86              	.LVL7:
1920:../Middlewares/FreeRTOS//Source/queue.c **** 		{
  87              		.loc 1 1920 0
  88 0008 A36B     		ldr	r3, [r4, #56]
  89 000a 23B1     		cbz	r3, .L10
1926:../Middlewares/FreeRTOS//Source/queue.c **** 		}
  90              		.loc 1 1926 0
  91 000c 0024     		movs	r4, #0
  92              	.LVL8:
  93              	.L7:
1929:../Middlewares/FreeRTOS//Source/queue.c **** 
  94              		.loc 1 1929 0
  95 000e FFF7FEFF 		bl	vPortExitCritical
  96              	.LVL9:
1932:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
  97              		.loc 1 1932 0
  98 0012 2046     		mov	r0, r4
  99 0014 10BD     		pop	{r4, pc}
 100              	.LVL10:
 101              	.L10:
1922:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 102              		.loc 1 1922 0
 103 0016 0124     		movs	r4, #1
 104              	.LVL11:
 105 0018 F9E7     		b	.L7
 106              		.cfi_endproc
 107              	.LFE152:
 109              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 110              		.align	1
 111              		.syntax unified
 112              		.thumb
 113              		.thumb_func
 114              		.fpu fpv4-sp-d16
 116              	prvCopyDataToQueue:
 117              	.LFB149:
1698:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn = pdFALSE;
 118              		.loc 1 1698 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              	.LVL12:
 123 0000 70B5     		push	{r4, r5, r6, lr}
 124              	.LCFI2:
 125              		.cfi_def_cfa_offset 16
 126              		.cfi_offset 4, -16
 127              		.cfi_offset 5, -12
 128              		.cfi_offset 6, -8
 129              		.cfi_offset 14, -4
 130 0002 0446     		mov	r4, r0
 131 0004 1646     		mov	r6, r2
 132              	.LVL13:
1704:../Middlewares/FreeRTOS//Source/queue.c **** 
 133              		.loc 1 1704 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 38


 134 0006 856B     		ldr	r5, [r0, #56]
 135              	.LVL14:
1706:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 136              		.loc 1 1706 0
 137 0008 026C     		ldr	r2, [r0, #64]
 138              	.LVL15:
 139 000a 5AB9     		cbnz	r2, .L12
1710:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 140              		.loc 1 1710 0
 141 000c 0368     		ldr	r3, [r0]
 142 000e 1BB1     		cbz	r3, .L21
1699:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxMessagesWaiting;
 143              		.loc 1 1699 0
 144 0010 0020     		movs	r0, #0
 145              	.LVL16:
 146              	.L13:
1770:../Middlewares/FreeRTOS//Source/queue.c **** 
 147              		.loc 1 1770 0
 148 0012 0135     		adds	r5, r5, #1
 149              	.LVL17:
 150 0014 A563     		str	r5, [r4, #56]
1773:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 151              		.loc 1 1773 0
 152 0016 70BD     		pop	{r4, r5, r6, pc}
 153              	.LVL18:
 154              	.L21:
1713:../Middlewares/FreeRTOS//Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 155              		.loc 1 1713 0
 156 0018 4068     		ldr	r0, [r0, #4]
 157              	.LVL19:
 158 001a FFF7FEFF 		bl	xTaskPriorityDisinherit
 159              	.LVL20:
1714:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 160              		.loc 1 1714 0
 161 001e 0023     		movs	r3, #0
 162 0020 6360     		str	r3, [r4, #4]
 163 0022 F6E7     		b	.L13
 164              	.LVL21:
 165              	.L12:
1723:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 166              		.loc 1 1723 0
 167 0024 6EB9     		cbnz	r6, .L14
1725:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 168              		.loc 1 1725 0
 169 0026 8068     		ldr	r0, [r0, #8]
 170              	.LVL22:
 171 0028 FFF7FEFF 		bl	memcpy
 172              	.LVL23:
1726:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 173              		.loc 1 1726 0
 174 002c 226C     		ldr	r2, [r4, #64]
 175 002e A368     		ldr	r3, [r4, #8]
 176 0030 1344     		add	r3, r3, r2
 177 0032 A360     		str	r3, [r4, #8]
1727:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 178              		.loc 1 1727 0
 179 0034 6268     		ldr	r2, [r4, #4]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 39


 180 0036 9342     		cmp	r3, r2
 181 0038 19D3     		bcc	.L17
1729:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 182              		.loc 1 1729 0
 183 003a 2368     		ldr	r3, [r4]
 184 003c A360     		str	r3, [r4, #8]
1699:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxMessagesWaiting;
 185              		.loc 1 1699 0
 186 003e 0020     		movs	r0, #0
 187 0040 E7E7     		b	.L13
 188              	.LVL24:
 189              	.L14:
1738:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 190              		.loc 1 1738 0
 191 0042 C068     		ldr	r0, [r0, #12]
 192              	.LVL25:
 193 0044 FFF7FEFF 		bl	memcpy
 194              	.LVL26:
1739:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 195              		.loc 1 1739 0
 196 0048 226C     		ldr	r2, [r4, #64]
 197 004a 5242     		negs	r2, r2
 198 004c E368     		ldr	r3, [r4, #12]
 199 004e 1344     		add	r3, r3, r2
 200 0050 E360     		str	r3, [r4, #12]
1740:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 201              		.loc 1 1740 0
 202 0052 2168     		ldr	r1, [r4]
 203 0054 8B42     		cmp	r3, r1
 204 0056 02D2     		bcs	.L15
1742:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 205              		.loc 1 1742 0
 206 0058 6368     		ldr	r3, [r4, #4]
 207 005a 1A44     		add	r2, r2, r3
 208 005c E260     		str	r2, [r4, #12]
 209              	.L15:
1749:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 210              		.loc 1 1749 0
 211 005e 022E     		cmp	r6, #2
 212 0060 01D0     		beq	.L22
1699:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxMessagesWaiting;
 213              		.loc 1 1699 0
 214 0062 0020     		movs	r0, #0
 215 0064 D5E7     		b	.L13
 216              	.L22:
1751:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 217              		.loc 1 1751 0
 218 0066 25B1     		cbz	r5, .L19
1757:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 219              		.loc 1 1757 0
 220 0068 013D     		subs	r5, r5, #1
 221              	.LVL27:
1699:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxMessagesWaiting;
 222              		.loc 1 1699 0
 223 006a 0020     		movs	r0, #0
 224 006c D1E7     		b	.L13
 225              	.L17:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 40


 226 006e 0020     		movs	r0, #0
 227 0070 CFE7     		b	.L13
 228              	.L19:
 229 0072 0020     		movs	r0, #0
 230 0074 CDE7     		b	.L13
 231              		.cfi_endproc
 232              	.LFE149:
 234              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 235              		.align	1
 236              		.syntax unified
 237              		.thumb
 238              		.thumb_func
 239              		.fpu fpv4-sp-d16
 241              	prvCopyDataFromQueue:
 242              	.LFB150:
1777:../Middlewares/FreeRTOS//Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 243              		.loc 1 1777 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 0
 246              		@ frame_needed = 0, uses_anonymous_args = 0
 247              	.LVL28:
1778:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 248              		.loc 1 1778 0
 249 0000 026C     		ldr	r2, [r0, #64]
 250 0002 72B1     		cbz	r2, .L27
1777:../Middlewares/FreeRTOS//Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 251              		.loc 1 1777 0
 252 0004 10B5     		push	{r4, lr}
 253              	.LCFI3:
 254              		.cfi_def_cfa_offset 8
 255              		.cfi_offset 4, -8
 256              		.cfi_offset 14, -4
1780:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 257              		.loc 1 1780 0
 258 0006 C368     		ldr	r3, [r0, #12]
 259 0008 1344     		add	r3, r3, r2
 260 000a C360     		str	r3, [r0, #12]
1781:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 261              		.loc 1 1781 0
 262 000c 4468     		ldr	r4, [r0, #4]
 263 000e A342     		cmp	r3, r4
 264 0010 01D3     		bcc	.L25
1783:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 265              		.loc 1 1783 0
 266 0012 0368     		ldr	r3, [r0]
 267 0014 C360     		str	r3, [r0, #12]
 268              	.L25:
 269 0016 0C46     		mov	r4, r1
1789:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 270              		.loc 1 1789 0
 271 0018 C168     		ldr	r1, [r0, #12]
 272              	.LVL29:
 273 001a 2046     		mov	r0, r4
 274              	.LVL30:
 275 001c FFF7FEFF 		bl	memcpy
 276              	.LVL31:
1791:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 41


 277              		.loc 1 1791 0
 278 0020 10BD     		pop	{r4, pc}
 279              	.LVL32:
 280              	.L27:
 281              	.LCFI4:
 282              		.cfi_def_cfa_offset 0
 283              		.cfi_restore 4
 284              		.cfi_restore 14
 285 0022 7047     		bx	lr
 286              		.cfi_endproc
 287              	.LFE150:
 289              		.section	.text.prvUnlockQueue,"ax",%progbits
 290              		.align	1
 291              		.syntax unified
 292              		.thumb
 293              		.thumb_func
 294              		.fpu fpv4-sp-d16
 296              	prvUnlockQueue:
 297              	.LFB151:
1795:../Middlewares/FreeRTOS//Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 298              		.loc 1 1795 0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302              	.LVL33:
 303 0000 38B5     		push	{r3, r4, r5, lr}
 304              	.LCFI5:
 305              		.cfi_def_cfa_offset 16
 306              		.cfi_offset 3, -16
 307              		.cfi_offset 4, -12
 308              		.cfi_offset 5, -8
 309              		.cfi_offset 14, -4
 310 0002 0546     		mov	r5, r0
1802:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 311              		.loc 1 1802 0
 312 0004 FFF7FEFF 		bl	vPortEnterCritical
 313              	.LVL34:
 314              	.LBB84:
1804:../Middlewares/FreeRTOS//Source/queue.c **** 
 315              		.loc 1 1804 0
 316 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 317 000c 64B2     		sxtb	r4, r4
 318              	.LVL35:
1807:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 319              		.loc 1 1807 0
 320 000e 03E0     		b	.L31
 321              	.L40:
1861:../Middlewares/FreeRTOS//Source/queue.c **** 					}
 322              		.loc 1 1861 0
 323 0010 FFF7FEFF 		bl	vTaskMissedYield
 324              	.LVL36:
 325              	.L33:
1875:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 326              		.loc 1 1875 0
 327 0014 013C     		subs	r4, r4, #1
 328              	.LVL37:
 329 0016 64B2     		sxtb	r4, r4
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 42


 330              	.LVL38:
 331              	.L31:
1807:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 332              		.loc 1 1807 0
 333 0018 002C     		cmp	r4, #0
 334 001a 08DD     		ble	.L32
1855:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 335              		.loc 1 1855 0
 336 001c 6B6A     		ldr	r3, [r5, #36]
 337 001e 33B1     		cbz	r3, .L32
1857:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 338              		.loc 1 1857 0
 339 0020 05F12400 		add	r0, r5, #36
 340 0024 FFF7FEFF 		bl	xTaskRemoveFromEventList
 341              	.LVL39:
 342 0028 0028     		cmp	r0, #0
 343 002a F3D0     		beq	.L33
 344 002c F0E7     		b	.L40
 345              	.L32:
1878:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 346              		.loc 1 1878 0
 347 002e FF23     		movs	r3, #255
 348 0030 85F84530 		strb	r3, [r5, #69]
 349              	.LBE84:
1880:../Middlewares/FreeRTOS//Source/queue.c **** 
 350              		.loc 1 1880 0
 351 0034 FFF7FEFF 		bl	vPortExitCritical
 352              	.LVL40:
1883:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 353              		.loc 1 1883 0
 354 0038 FFF7FEFF 		bl	vPortEnterCritical
 355              	.LVL41:
 356              	.LBB85:
1885:../Middlewares/FreeRTOS//Source/queue.c **** 
 357              		.loc 1 1885 0
 358 003c 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 359              	.LVL42:
 360 0040 64B2     		sxtb	r4, r4
 361              	.LVL43:
1887:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 362              		.loc 1 1887 0
 363 0042 03E0     		b	.L35
 364              	.L41:
1893:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 365              		.loc 1 1893 0
 366 0044 FFF7FEFF 		bl	vTaskMissedYield
 367              	.LVL44:
 368              	.L37:
1900:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 369              		.loc 1 1900 0
 370 0048 013C     		subs	r4, r4, #1
 371              	.LVL45:
 372 004a 64B2     		sxtb	r4, r4
 373              	.LVL46:
 374              	.L35:
1887:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 375              		.loc 1 1887 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 43


 376 004c 002C     		cmp	r4, #0
 377 004e 08DD     		ble	.L36
1889:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 378              		.loc 1 1889 0
 379 0050 2B69     		ldr	r3, [r5, #16]
 380 0052 33B1     		cbz	r3, .L36
1891:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 381              		.loc 1 1891 0
 382 0054 05F11000 		add	r0, r5, #16
 383 0058 FFF7FEFF 		bl	xTaskRemoveFromEventList
 384              	.LVL47:
 385 005c 0028     		cmp	r0, #0
 386 005e F3D0     		beq	.L37
 387 0060 F0E7     		b	.L41
 388              	.L36:
1908:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 389              		.loc 1 1908 0
 390 0062 FF23     		movs	r3, #255
 391 0064 85F84430 		strb	r3, [r5, #68]
 392              	.LBE85:
1910:../Middlewares/FreeRTOS//Source/queue.c **** }
 393              		.loc 1 1910 0
 394 0068 FFF7FEFF 		bl	vPortExitCritical
 395              	.LVL48:
1911:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 396              		.loc 1 1911 0
 397 006c 38BD     		pop	{r3, r4, r5, pc}
 398              		.cfi_endproc
 399              	.LFE151:
 401              		.section	.text.xQueueGenericReset,"ax",%progbits
 402              		.align	1
 403              		.global	xQueueGenericReset
 404              		.syntax unified
 405              		.thumb
 406              		.thumb_func
 407              		.fpu fpv4-sp-d16
 409              	xQueueGenericReset:
 410              	.LFB128:
 280:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 411              		.loc 1 280 0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415              	.LVL49:
 416 0000 38B5     		push	{r3, r4, r5, lr}
 417              	.LCFI6:
 418              		.cfi_def_cfa_offset 16
 419              		.cfi_offset 3, -16
 420              		.cfi_offset 4, -12
 421              		.cfi_offset 5, -8
 422              		.cfi_offset 14, -4
 423              	.LVL50:
 283:../Middlewares/FreeRTOS//Source/queue.c **** 
 424              		.loc 1 283 0
 425 0002 40B9     		cbnz	r0, .L43
 426              	.LBB86:
 427              	.LBB87:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 44


 428              		.file 2 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 45


  57:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 46


 114:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 47


 171:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 48


 228:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 429              		.loc 2 237 0
 430              		.syntax unified
 431              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 432 0004 4FF01003 			mov r3, #16												
 433 0008 83F31188 		msr basepri, r3											
 434 000c BFF36F8F 		isb														
 435 0010 BFF34F8F 		dsb														
 436              	
 437              	@ 0 "" 2
 438              	.LVL51:
 439              		.thumb
 440              		.syntax unified
 441              	.L44:
 442 0014 FEE7     		b	.L44
 443              	.L43:
 444 0016 0446     		mov	r4, r0
 445 0018 0D46     		mov	r5, r1
 446              	.LBE87:
 447              	.LBE86:
 285:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 448              		.loc 1 285 0
 449 001a FFF7FEFF 		bl	vPortEnterCritical
 450              	.LVL52:
 287:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 451              		.loc 1 287 0
 452 001e 2168     		ldr	r1, [r4]
 453 0020 E26B     		ldr	r2, [r4, #60]
 454 0022 236C     		ldr	r3, [r4, #64]
 455 0024 03FB0210 		mla	r0, r3, r2, r1
 456 0028 6060     		str	r0, [r4, #4]
 288:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 457              		.loc 1 288 0
 458 002a 0020     		movs	r0, #0
 459 002c A063     		str	r0, [r4, #56]
 289:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 460              		.loc 1 289 0
 461 002e A160     		str	r1, [r4, #8]
 290:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 462              		.loc 1 290 0
 463 0030 013A     		subs	r2, r2, #1
 464 0032 02FB0313 		mla	r3, r2, r3, r1
 465 0036 E360     		str	r3, [r4, #12]
 291:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 466              		.loc 1 291 0
 467 0038 FF23     		movs	r3, #255
 468 003a 84F84430 		strb	r3, [r4, #68]
 292:../Middlewares/FreeRTOS//Source/queue.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 49


 469              		.loc 1 292 0
 470 003e 84F84530 		strb	r3, [r4, #69]
 294:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 471              		.loc 1 294 0
 472 0042 A5B9     		cbnz	r5, .L45
 301:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 473              		.loc 1 301 0
 474 0044 2369     		ldr	r3, [r4, #16]
 475 0046 1BB9     		cbnz	r3, .L48
 476              	.L46:
 324:../Middlewares/FreeRTOS//Source/queue.c **** 
 477              		.loc 1 324 0
 478 0048 FFF7FEFF 		bl	vPortExitCritical
 479              	.LVL53:
 329:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 480              		.loc 1 329 0
 481 004c 0120     		movs	r0, #1
 482 004e 38BD     		pop	{r3, r4, r5, pc}
 483              	.LVL54:
 484              	.L48:
 303:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 485              		.loc 1 303 0
 486 0050 04F11000 		add	r0, r4, #16
 487 0054 FFF7FEFF 		bl	xTaskRemoveFromEventList
 488              	.LVL55:
 489 0058 0028     		cmp	r0, #0
 490 005a F5D0     		beq	.L46
 305:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 491              		.loc 1 305 0
 492 005c 084B     		ldr	r3, .L49
 493 005e 4FF08052 		mov	r2, #268435456
 494 0062 1A60     		str	r2, [r3]
 495              		.syntax unified
 496              	@ 305 "../Middlewares/FreeRTOS//Source/queue.c" 1
 497 0064 BFF34F8F 		dsb
 498              	@ 0 "" 2
 499              	@ 305 "../Middlewares/FreeRTOS//Source/queue.c" 1
 500 0068 BFF36F8F 		isb
 501              	@ 0 "" 2
 502              		.thumb
 503              		.syntax unified
 504 006c ECE7     		b	.L46
 505              	.L45:
 320:../Middlewares/FreeRTOS//Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 506              		.loc 1 320 0
 507 006e 04F11000 		add	r0, r4, #16
 508 0072 FFF7FEFF 		bl	vListInitialise
 509              	.LVL56:
 321:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 510              		.loc 1 321 0
 511 0076 04F12400 		add	r0, r4, #36
 512 007a FFF7FEFF 		bl	vListInitialise
 513              	.LVL57:
 514 007e E3E7     		b	.L46
 515              	.L50:
 516              		.align	2
 517              	.L49:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 50


 518 0080 04ED00E0 		.word	-536810236
 519              		.cfi_endproc
 520              	.LFE128:
 522              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 523              		.align	1
 524              		.syntax unified
 525              		.thumb
 526              		.thumb_func
 527              		.fpu fpv4-sp-d16
 529              	prvInitialiseNewQueue:
 530              	.LFB130:
 433:../Middlewares/FreeRTOS//Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 531              		.loc 1 433 0
 532              		.cfi_startproc
 533              		@ args = 4, pretend = 0, frame = 0
 534              		@ frame_needed = 0, uses_anonymous_args = 0
 535              	.LVL58:
 536 0000 38B5     		push	{r3, r4, r5, lr}
 537              	.LCFI7:
 538              		.cfi_def_cfa_offset 16
 539              		.cfi_offset 3, -16
 540              		.cfi_offset 4, -12
 541              		.cfi_offset 5, -8
 542              		.cfi_offset 14, -4
 543 0002 1D46     		mov	r5, r3
 544 0004 049C     		ldr	r4, [sp, #16]
 438:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 545              		.loc 1 438 0
 546 0006 0B46     		mov	r3, r1
 547              	.LVL59:
 548 0008 49B1     		cbz	r1, .L55
 449:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 549              		.loc 1 449 0
 550 000a 2260     		str	r2, [r4]
 551              	.L53:
 454:../Middlewares/FreeRTOS//Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 552              		.loc 1 454 0
 553 000c E063     		str	r0, [r4, #60]
 455:../Middlewares/FreeRTOS//Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 554              		.loc 1 455 0
 555 000e 2364     		str	r3, [r4, #64]
 456:../Middlewares/FreeRTOS//Source/queue.c **** 
 556              		.loc 1 456 0
 557 0010 0121     		movs	r1, #1
 558              	.LVL60:
 559 0012 2046     		mov	r0, r4
 560              	.LVL61:
 561 0014 FFF7FEFF 		bl	xQueueGenericReset
 562              	.LVL62:
 460:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 563              		.loc 1 460 0
 564 0018 84F84C50 		strb	r5, [r4, #76]
 471:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 565              		.loc 1 471 0
 566 001c 38BD     		pop	{r3, r4, r5, pc}
 567              	.LVL63:
 568              	.L55:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 51


 444:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 569              		.loc 1 444 0
 570 001e 2460     		str	r4, [r4]
 571 0020 F4E7     		b	.L53
 572              		.cfi_endproc
 573              	.LFE130:
 575              		.section	.text.xQueueGenericCreate,"ax",%progbits
 576              		.align	1
 577              		.global	xQueueGenericCreate
 578              		.syntax unified
 579              		.thumb
 580              		.thumb_func
 581              		.fpu fpv4-sp-d16
 583              	xQueueGenericCreate:
 584              	.LFB129:
 387:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t *pxNewQueue;
 585              		.loc 1 387 0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 0
 588              		@ frame_needed = 0, uses_anonymous_args = 0
 589              	.LVL64:
 392:../Middlewares/FreeRTOS//Source/queue.c **** 
 590              		.loc 1 392 0
 591 0000 40B9     		cbnz	r0, .L57
 592              	.LBB88:
 593              	.LBB89:
 594              		.loc 2 237 0
 595              		.syntax unified
 596              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 597 0002 4FF01003 			mov r3, #16												
 598 0006 83F31188 		msr basepri, r3											
 599 000a BFF36F8F 		isb														
 600 000e BFF34F8F 		dsb														
 601              	
 602              	@ 0 "" 2
 603              	.LVL65:
 604              		.thumb
 605              		.syntax unified
 606              	.L58:
 607 0012 FEE7     		b	.L58
 608              	.L57:
 609              	.LBE89:
 610              	.LBE88:
 387:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t *pxNewQueue;
 611              		.loc 1 387 0
 612 0014 F0B5     		push	{r4, r5, r6, r7, lr}
 613              	.LCFI8:
 614              		.cfi_def_cfa_offset 20
 615              		.cfi_offset 4, -20
 616              		.cfi_offset 5, -16
 617              		.cfi_offset 6, -12
 618              		.cfi_offset 7, -8
 619              		.cfi_offset 14, -4
 620 0016 83B0     		sub	sp, sp, #12
 621              	.LCFI9:
 622              		.cfi_def_cfa_offset 32
 623 0018 0546     		mov	r5, r0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 52


 394:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 624              		.loc 1 394 0
 625 001a 11B1     		cbz	r1, .L61
 403:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 626              		.loc 1 403 0
 627 001c 01FB00F0 		mul	r0, r1, r0
 628              	.LVL66:
 629 0020 00E0     		b	.L59
 630              	.LVL67:
 631              	.L61:
 397:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 632              		.loc 1 397 0
 633 0022 0020     		movs	r0, #0
 634              	.LVL68:
 635              	.L59:
 636 0024 1746     		mov	r7, r2
 637 0026 0C46     		mov	r4, r1
 638              	.LVL69:
 406:../Middlewares/FreeRTOS//Source/queue.c **** 
 639              		.loc 1 406 0
 640 0028 5030     		adds	r0, r0, #80
 641              	.LVL70:
 642 002a FFF7FEFF 		bl	pvPortMalloc
 643              	.LVL71:
 408:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 644              		.loc 1 408 0
 645 002e 0646     		mov	r6, r0
 646 0030 38B1     		cbz	r0, .L56
 647              	.LVL72:
 423:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 648              		.loc 1 423 0
 649 0032 0090     		str	r0, [sp]
 650 0034 3B46     		mov	r3, r7
 651 0036 00F15002 		add	r2, r0, #80
 652              	.LVL73:
 653 003a 2146     		mov	r1, r4
 654 003c 2846     		mov	r0, r5
 655              	.LVL74:
 656 003e FFF7FEFF 		bl	prvInitialiseNewQueue
 657              	.LVL75:
 658              	.L56:
 427:../Middlewares/FreeRTOS//Source/queue.c **** 
 659              		.loc 1 427 0
 660 0042 3046     		mov	r0, r6
 661 0044 03B0     		add	sp, sp, #12
 662              	.LCFI10:
 663              		.cfi_def_cfa_offset 20
 664              		@ sp needed
 665 0046 F0BD     		pop	{r4, r5, r6, r7, pc}
 666              		.cfi_endproc
 667              	.LFE129:
 669              		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 670              		.align	1
 671              		.global	xQueueCreateCountingSemaphore
 672              		.syntax unified
 673              		.thumb
 674              		.thumb_func
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 53


 675              		.fpu fpv4-sp-d16
 677              	xQueueCreateCountingSemaphore:
 678              	.LFB135:
 698:../Middlewares/FreeRTOS//Source/queue.c **** 	QueueHandle_t xHandle;
 679              		.loc 1 698 0
 680              		.cfi_startproc
 681              		@ args = 0, pretend = 0, frame = 0
 682              		@ frame_needed = 0, uses_anonymous_args = 0
 683              	.LVL76:
 701:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 684              		.loc 1 701 0
 685 0000 40B9     		cbnz	r0, .L65
 686              	.LBB90:
 687              	.LBB91:
 688              		.loc 2 237 0
 689              		.syntax unified
 690              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 691 0002 4FF01003 			mov r3, #16												
 692 0006 83F31188 		msr basepri, r3											
 693 000a BFF36F8F 		isb														
 694 000e BFF34F8F 		dsb														
 695              	
 696              	@ 0 "" 2
 697              	.LVL77:
 698              		.thumb
 699              		.syntax unified
 700              	.L66:
 701 0012 FEE7     		b	.L66
 702              	.L65:
 703              	.LBE91:
 704              	.LBE90:
 702:../Middlewares/FreeRTOS//Source/queue.c **** 
 705              		.loc 1 702 0
 706 0014 8842     		cmp	r0, r1
 707 0016 08D2     		bcs	.L67
 708              	.LBB92:
 709              	.LBB93:
 710              		.loc 2 237 0
 711              		.syntax unified
 712              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 713 0018 4FF01003 			mov r3, #16												
 714 001c 83F31188 		msr basepri, r3											
 715 0020 BFF36F8F 		isb														
 716 0024 BFF34F8F 		dsb														
 717              	
 718              	@ 0 "" 2
 719              	.LVL78:
 720              		.thumb
 721              		.syntax unified
 722              	.L68:
 723 0028 FEE7     		b	.L68
 724              	.L67:
 725              	.LBE93:
 726              	.LBE92:
 698:../Middlewares/FreeRTOS//Source/queue.c **** 	QueueHandle_t xHandle;
 727              		.loc 1 698 0
 728 002a 10B5     		push	{r4, lr}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 54


 729              	.LCFI11:
 730              		.cfi_def_cfa_offset 8
 731              		.cfi_offset 4, -8
 732              		.cfi_offset 14, -4
 733 002c 0C46     		mov	r4, r1
 704:../Middlewares/FreeRTOS//Source/queue.c **** 
 734              		.loc 1 704 0
 735 002e 0222     		movs	r2, #2
 736 0030 0021     		movs	r1, #0
 737              	.LVL79:
 738 0032 FFF7FEFF 		bl	xQueueGenericCreate
 739              	.LVL80:
 706:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 740              		.loc 1 706 0
 741 0036 0346     		mov	r3, r0
 742 0038 00B1     		cbz	r0, .L64
 708:../Middlewares/FreeRTOS//Source/queue.c **** 
 743              		.loc 1 708 0
 744 003a 8463     		str	r4, [r0, #56]
 745              	.L64:
 718:../Middlewares/FreeRTOS//Source/queue.c **** 
 746              		.loc 1 718 0
 747 003c 1846     		mov	r0, r3
 748              	.LVL81:
 749 003e 10BD     		pop	{r4, pc}
 750              		.cfi_endproc
 751              	.LFE135:
 753              		.section	.text.xQueueGenericSend,"ax",%progbits
 754              		.align	1
 755              		.global	xQueueGenericSend
 756              		.syntax unified
 757              		.thumb
 758              		.thumb_func
 759              		.fpu fpv4-sp-d16
 761              	xQueueGenericSend:
 762              	.LFB136:
 724:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 763              		.loc 1 724 0
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 16
 766              		@ frame_needed = 0, uses_anonymous_args = 0
 767              	.LVL82:
 768 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 769              	.LCFI12:
 770              		.cfi_def_cfa_offset 20
 771              		.cfi_offset 4, -20
 772              		.cfi_offset 5, -16
 773              		.cfi_offset 6, -12
 774              		.cfi_offset 7, -8
 775              		.cfi_offset 14, -4
 776 0002 85B0     		sub	sp, sp, #20
 777              	.LCFI13:
 778              		.cfi_def_cfa_offset 40
 779 0004 0192     		str	r2, [sp, #4]
 780              	.LVL83:
 729:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 781              		.loc 1 729 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 55


 782 0006 60B1     		cbz	r0, .L97
 783 0008 0446     		mov	r4, r0
 730:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 784              		.loc 1 730 0
 785 000a 99B9     		cbnz	r1, .L75
 730:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 786              		.loc 1 730 0 is_stmt 0 discriminator 2
 787 000c 026C     		ldr	r2, [r0, #64]
 788              	.LVL84:
 789 000e 8AB1     		cbz	r2, .L75
 790              	.LBB94:
 791              	.LBB95:
 792              		.loc 2 237 0 is_stmt 1
 793              		.syntax unified
 794              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 795 0010 4FF01003 			mov r3, #16												
 796 0014 83F31188 		msr basepri, r3											
 797 0018 BFF36F8F 		isb														
 798 001c BFF34F8F 		dsb														
 799              	
 800              	@ 0 "" 2
 801              	.LVL85:
 802              		.thumb
 803              		.syntax unified
 804              	.L76:
 805 0020 FEE7     		b	.L76
 806              	.LVL86:
 807              	.L97:
 808              	.LBE95:
 809              	.LBE94:
 810              	.LBB96:
 811              	.LBB97:
 812              		.syntax unified
 813              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 814 0022 4FF01003 			mov r3, #16												
 815 0026 83F31188 		msr basepri, r3											
 816 002a BFF36F8F 		isb														
 817 002e BFF34F8F 		dsb														
 818              	
 819              	@ 0 "" 2
 820              	.LVL87:
 821              		.thumb
 822              		.syntax unified
 823              	.L74:
 824 0032 FEE7     		b	.L74
 825              	.LVL88:
 826              	.L75:
 827              	.LBE97:
 828              	.LBE96:
 731:../Middlewares/FreeRTOS//Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 829              		.loc 1 731 0
 830 0034 022B     		cmp	r3, #2
 831 0036 0BD1     		bne	.L77
 731:../Middlewares/FreeRTOS//Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 832              		.loc 1 731 0 is_stmt 0 discriminator 2
 833 0038 E26B     		ldr	r2, [r4, #60]
 834 003a 012A     		cmp	r2, #1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 56


 835 003c 08D0     		beq	.L77
 836              	.LBB98:
 837              	.LBB99:
 838              		.loc 2 237 0 is_stmt 1
 839              		.syntax unified
 840              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 841 003e 4FF01003 			mov r3, #16												
 842 0042 83F31188 		msr basepri, r3											
 843 0046 BFF36F8F 		isb														
 844 004a BFF34F8F 		dsb														
 845              	
 846              	@ 0 "" 2
 847              	.LVL89:
 848              		.thumb
 849              		.syntax unified
 850              	.L78:
 851 004e FEE7     		b	.L78
 852              	.LVL90:
 853              	.L77:
 854 0050 1E46     		mov	r6, r3
 855 0052 0F46     		mov	r7, r1
 856              	.LBE99:
 857              	.LBE98:
 734:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 858              		.loc 1 734 0
 859 0054 FFF7FEFF 		bl	xTaskGetSchedulerState
 860              	.LVL91:
 861 0058 50B9     		cbnz	r0, .L94
 734:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 862              		.loc 1 734 0 is_stmt 0 discriminator 2
 863 005a 019B     		ldr	r3, [sp, #4]
 864 005c 53B1     		cbz	r3, .L95
 865              	.LBB100:
 866              	.LBB101:
 867              		.loc 2 237 0 is_stmt 1
 868              		.syntax unified
 869              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 870 005e 4FF01003 			mov r3, #16												
 871 0062 83F31188 		msr basepri, r3											
 872 0066 BFF36F8F 		isb														
 873 006a BFF34F8F 		dsb														
 874              	
 875              	@ 0 "" 2
 876              	.LVL92:
 877              		.thumb
 878              		.syntax unified
 879              	.L80:
 880 006e FEE7     		b	.L80
 881              	.L94:
 882              	.LBE101:
 883              	.LBE100:
 884 0070 0025     		movs	r5, #0
 885 0072 3AE0     		b	.L81
 886              	.L95:
 887 0074 0025     		movs	r5, #0
 888 0076 38E0     		b	.L81
 889              	.LVL93:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 57


 890              	.L82:
 753:../Middlewares/FreeRTOS//Source/queue.c **** 
 891              		.loc 1 753 0
 892 0078 3246     		mov	r2, r6
 893 007a 3946     		mov	r1, r7
 894 007c 2046     		mov	r0, r4
 895 007e FFF7FEFF 		bl	prvCopyDataToQueue
 896              	.LVL94:
 808:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 897              		.loc 1 808 0
 898 0082 636A     		ldr	r3, [r4, #36]
 899 0084 4BB9     		cbnz	r3, .L98
 823:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 900              		.loc 1 823 0
 901 0086 A8B1     		cbz	r0, .L85
 829:../Middlewares/FreeRTOS//Source/queue.c **** 					}
 902              		.loc 1 829 0
 903 0088 3B4B     		ldr	r3, .L103
 904 008a 4FF08052 		mov	r2, #268435456
 905 008e 1A60     		str	r2, [r3]
 906              		.syntax unified
 907              	@ 829 "../Middlewares/FreeRTOS//Source/queue.c" 1
 908 0090 BFF34F8F 		dsb
 909              	@ 0 "" 2
 910              	@ 829 "../Middlewares/FreeRTOS//Source/queue.c" 1
 911 0094 BFF36F8F 		isb
 912              	@ 0 "" 2
 913              		.thumb
 914              		.syntax unified
 915 0098 0CE0     		b	.L85
 916              	.L98:
 810:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 917              		.loc 1 810 0
 918 009a 04F12400 		add	r0, r4, #36
 919              	.LVL95:
 920 009e FFF7FEFF 		bl	xTaskRemoveFromEventList
 921              	.LVL96:
 922 00a2 38B1     		cbz	r0, .L85
 816:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 923              		.loc 1 816 0
 924 00a4 344B     		ldr	r3, .L103
 925 00a6 4FF08052 		mov	r2, #268435456
 926 00aa 1A60     		str	r2, [r3]
 927              		.syntax unified
 928              	@ 816 "../Middlewares/FreeRTOS//Source/queue.c" 1
 929 00ac BFF34F8F 		dsb
 930              	@ 0 "" 2
 931              	@ 816 "../Middlewares/FreeRTOS//Source/queue.c" 1
 932 00b0 BFF36F8F 		isb
 933              	@ 0 "" 2
 934              		.thumb
 935              		.syntax unified
 936              	.L85:
 838:../Middlewares/FreeRTOS//Source/queue.c **** 				return pdPASS;
 937              		.loc 1 838 0
 938 00b4 FFF7FEFF 		bl	vPortExitCritical
 939              	.LVL97:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 58


 839:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 940              		.loc 1 839 0
 941 00b8 0120     		movs	r0, #1
 942              	.L72:
 918:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 943              		.loc 1 918 0
 944 00ba 05B0     		add	sp, sp, #20
 945              	.LCFI14:
 946              		.cfi_remember_state
 947              		.cfi_def_cfa_offset 20
 948              		@ sp needed
 949 00bc F0BD     		pop	{r4, r5, r6, r7, pc}
 950              	.LVL98:
 951              	.L99:
 952              	.LCFI15:
 953              		.cfi_restore_state
 847:../Middlewares/FreeRTOS//Source/queue.c **** 
 954              		.loc 1 847 0
 955 00be FFF7FEFF 		bl	vPortExitCritical
 956              	.LVL99:
 852:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 957              		.loc 1 852 0
 958 00c2 0020     		movs	r0, #0
 959 00c4 F9E7     		b	.L72
 960              	.L100:
 858:../Middlewares/FreeRTOS//Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 961              		.loc 1 858 0
 962 00c6 02A8     		add	r0, sp, #8
 963 00c8 FFF7FEFF 		bl	vTaskSetTimeOutState
 964              	.LVL100:
 859:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 965              		.loc 1 859 0
 966 00cc 0125     		movs	r5, #1
 967 00ce 19E0     		b	.L88
 968              	.LVL101:
 969              	.L101:
 874:../Middlewares/FreeRTOS//Source/queue.c **** 
 970              		.loc 1 874 0 discriminator 1
 971 00d0 0023     		movs	r3, #0
 972 00d2 84F84430 		strb	r3, [r4, #68]
 973 00d6 21E0     		b	.L89
 974              	.L102:
 874:../Middlewares/FreeRTOS//Source/queue.c **** 
 975              		.loc 1 874 0 is_stmt 0 discriminator 4
 976 00d8 0023     		movs	r3, #0
 977 00da 84F84530 		strb	r3, [r4, #69]
 978 00de 23E0     		b	.L90
 979              	.L92:
 904:../Middlewares/FreeRTOS//Source/queue.c **** 				( void ) xTaskResumeAll();
 980              		.loc 1 904 0 is_stmt 1
 981 00e0 2046     		mov	r0, r4
 982 00e2 FFF7FEFF 		bl	prvUnlockQueue
 983              	.LVL102:
 905:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 984              		.loc 1 905 0
 985 00e6 FFF7FEFF 		bl	xTaskResumeAll
 986              	.LVL103:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 59


 987              	.L81:
 744:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 988              		.loc 1 744 0
 989 00ea FFF7FEFF 		bl	vPortEnterCritical
 990              	.LVL104:
 750:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 991              		.loc 1 750 0
 992 00ee A26B     		ldr	r2, [r4, #56]
 993 00f0 E36B     		ldr	r3, [r4, #60]
 994 00f2 9A42     		cmp	r2, r3
 995 00f4 C0D3     		bcc	.L82
 750:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 996              		.loc 1 750 0 is_stmt 0 discriminator 1
 997 00f6 022E     		cmp	r6, #2
 998 00f8 BED0     		beq	.L82
 843:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 999              		.loc 1 843 0 is_stmt 1
 1000 00fa 019B     		ldr	r3, [sp, #4]
 1001 00fc 002B     		cmp	r3, #0
 1002 00fe DED0     		beq	.L99
 854:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 1003              		.loc 1 854 0
 1004 0100 002D     		cmp	r5, #0
 1005 0102 E0D0     		beq	.L100
 1006              	.LVL105:
 1007              	.L88:
 868:../Middlewares/FreeRTOS//Source/queue.c **** 
 1008              		.loc 1 868 0
 1009 0104 FFF7FEFF 		bl	vPortExitCritical
 1010              	.LVL106:
 873:../Middlewares/FreeRTOS//Source/queue.c **** 		prvLockQueue( pxQueue );
 1011              		.loc 1 873 0
 1012 0108 FFF7FEFF 		bl	vTaskSuspendAll
 1013              	.LVL107:
 874:../Middlewares/FreeRTOS//Source/queue.c **** 
 1014              		.loc 1 874 0
 1015 010c FFF7FEFF 		bl	vPortEnterCritical
 1016              	.LVL108:
 1017 0110 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1018 0114 5BB2     		sxtb	r3, r3
 1019 0116 B3F1FF3F 		cmp	r3, #-1
 1020 011a D9D0     		beq	.L101
 1021              	.L89:
 874:../Middlewares/FreeRTOS//Source/queue.c **** 
 1022              		.loc 1 874 0 is_stmt 0 discriminator 3
 1023 011c 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1024 0120 5BB2     		sxtb	r3, r3
 1025 0122 B3F1FF3F 		cmp	r3, #-1
 1026 0126 D7D0     		beq	.L102
 1027              	.L90:
 874:../Middlewares/FreeRTOS//Source/queue.c **** 
 1028              		.loc 1 874 0 discriminator 6
 1029 0128 FFF7FEFF 		bl	vPortExitCritical
 1030              	.LVL109:
 877:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 1031              		.loc 1 877 0 is_stmt 1 discriminator 6
 1032 012c 01A9     		add	r1, sp, #4
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 60


 1033 012e 02A8     		add	r0, sp, #8
 1034 0130 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1035              	.LVL110:
 1036 0134 C8B9     		cbnz	r0, .L91
 879:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 1037              		.loc 1 879 0
 1038 0136 2046     		mov	r0, r4
 1039 0138 FFF7FEFF 		bl	prvIsQueueFull
 1040              	.LVL111:
 1041 013c 0028     		cmp	r0, #0
 1042 013e CFD0     		beq	.L92
 882:../Middlewares/FreeRTOS//Source/queue.c **** 
 1043              		.loc 1 882 0
 1044 0140 0199     		ldr	r1, [sp, #4]
 1045 0142 04F11000 		add	r0, r4, #16
 1046 0146 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1047              	.LVL112:
 889:../Middlewares/FreeRTOS//Source/queue.c **** 
 1048              		.loc 1 889 0
 1049 014a 2046     		mov	r0, r4
 1050 014c FFF7FEFF 		bl	prvUnlockQueue
 1051              	.LVL113:
 896:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 1052              		.loc 1 896 0
 1053 0150 FFF7FEFF 		bl	xTaskResumeAll
 1054              	.LVL114:
 1055 0154 0028     		cmp	r0, #0
 1056 0156 C8D1     		bne	.L81
 898:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 1057              		.loc 1 898 0
 1058 0158 074B     		ldr	r3, .L103
 1059 015a 4FF08052 		mov	r2, #268435456
 1060 015e 1A60     		str	r2, [r3]
 1061              		.syntax unified
 1062              	@ 898 "../Middlewares/FreeRTOS//Source/queue.c" 1
 1063 0160 BFF34F8F 		dsb
 1064              	@ 0 "" 2
 1065              	@ 898 "../Middlewares/FreeRTOS//Source/queue.c" 1
 1066 0164 BFF36F8F 		isb
 1067              	@ 0 "" 2
 1068              		.thumb
 1069              		.syntax unified
 1070 0168 BFE7     		b	.L81
 1071              	.L91:
 911:../Middlewares/FreeRTOS//Source/queue.c **** 			( void ) xTaskResumeAll();
 1072              		.loc 1 911 0
 1073 016a 2046     		mov	r0, r4
 1074 016c FFF7FEFF 		bl	prvUnlockQueue
 1075              	.LVL115:
 912:../Middlewares/FreeRTOS//Source/queue.c **** 
 1076              		.loc 1 912 0
 1077 0170 FFF7FEFF 		bl	xTaskResumeAll
 1078              	.LVL116:
 915:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 1079              		.loc 1 915 0
 1080 0174 0020     		movs	r0, #0
 1081 0176 A0E7     		b	.L72
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 61


 1082              	.L104:
 1083              		.align	2
 1084              	.L103:
 1085 0178 04ED00E0 		.word	-536810236
 1086              		.cfi_endproc
 1087              	.LFE136:
 1089              		.section	.text.prvInitialiseMutex,"ax",%progbits
 1090              		.align	1
 1091              		.syntax unified
 1092              		.thumb
 1093              		.thumb_func
 1094              		.fpu fpv4-sp-d16
 1096              	prvInitialiseMutex:
 1097              	.LFB131:
 477:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxNewQueue != NULL )
 1098              		.loc 1 477 0
 1099              		.cfi_startproc
 1100              		@ args = 0, pretend = 0, frame = 0
 1101              		@ frame_needed = 0, uses_anonymous_args = 0
 1102              	.LVL117:
 478:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 1103              		.loc 1 478 0
 1104 0000 48B1     		cbz	r0, .L108
 477:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxNewQueue != NULL )
 1105              		.loc 1 477 0
 1106 0002 08B5     		push	{r3, lr}
 1107              	.LCFI16:
 1108              		.cfi_def_cfa_offset 8
 1109              		.cfi_offset 3, -8
 1110              		.cfi_offset 14, -4
 484:../Middlewares/FreeRTOS//Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1111              		.loc 1 484 0
 1112 0004 0021     		movs	r1, #0
 1113 0006 4160     		str	r1, [r0, #4]
 485:../Middlewares/FreeRTOS//Source/queue.c **** 
 1114              		.loc 1 485 0
 1115 0008 0160     		str	r1, [r0]
 488:../Middlewares/FreeRTOS//Source/queue.c **** 
 1116              		.loc 1 488 0
 1117 000a C160     		str	r1, [r0, #12]
 493:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 1118              		.loc 1 493 0
 1119 000c 0B46     		mov	r3, r1
 1120 000e 0A46     		mov	r2, r1
 1121 0010 FFF7FEFF 		bl	xQueueGenericSend
 1122              	.LVL118:
 499:../Middlewares/FreeRTOS//Source/queue.c **** 
 1123              		.loc 1 499 0
 1124 0014 08BD     		pop	{r3, pc}
 1125              	.LVL119:
 1126              	.L108:
 1127              	.LCFI17:
 1128              		.cfi_def_cfa_offset 0
 1129              		.cfi_restore 3
 1130              		.cfi_restore 14
 1131 0016 7047     		bx	lr
 1132              		.cfi_endproc
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 62


 1133              	.LFE131:
 1135              		.section	.text.xQueueCreateMutex,"ax",%progbits
 1136              		.align	1
 1137              		.global	xQueueCreateMutex
 1138              		.syntax unified
 1139              		.thumb
 1140              		.thumb_func
 1141              		.fpu fpv4-sp-d16
 1143              	xQueueCreateMutex:
 1144              	.LFB132:
 507:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t *pxNewQueue;
 1145              		.loc 1 507 0
 1146              		.cfi_startproc
 1147              		@ args = 0, pretend = 0, frame = 0
 1148              		@ frame_needed = 0, uses_anonymous_args = 0
 1149              	.LVL120:
 1150 0000 10B5     		push	{r4, lr}
 1151              	.LCFI18:
 1152              		.cfi_def_cfa_offset 8
 1153              		.cfi_offset 4, -8
 1154              		.cfi_offset 14, -4
 1155              	.LVL121:
 511:../Middlewares/FreeRTOS//Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 1156              		.loc 1 511 0
 1157 0002 0246     		mov	r2, r0
 1158 0004 0021     		movs	r1, #0
 1159 0006 0120     		movs	r0, #1
 1160              	.LVL122:
 1161 0008 FFF7FEFF 		bl	xQueueGenericCreate
 1162              	.LVL123:
 1163 000c 0446     		mov	r4, r0
 1164              	.LVL124:
 512:../Middlewares/FreeRTOS//Source/queue.c **** 
 1165              		.loc 1 512 0
 1166 000e FFF7FEFF 		bl	prvInitialiseMutex
 1167              	.LVL125:
 515:../Middlewares/FreeRTOS//Source/queue.c **** 
 1168              		.loc 1 515 0
 1169 0012 2046     		mov	r0, r4
 1170 0014 10BD     		pop	{r4, pc}
 1171              		.cfi_endproc
 1172              	.LFE132:
 1174              		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 1175              		.align	1
 1176              		.global	xQueueGiveMutexRecursive
 1177              		.syntax unified
 1178              		.thumb
 1179              		.thumb_func
 1180              		.fpu fpv4-sp-d16
 1182              	xQueueGiveMutexRecursive:
 1183              	.LFB133:
 573:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xReturn;
 1184              		.loc 1 573 0
 1185              		.cfi_startproc
 1186              		@ args = 0, pretend = 0, frame = 0
 1187              		@ frame_needed = 0, uses_anonymous_args = 0
 1188              	.LVL126:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 63


 1189 0000 38B5     		push	{r3, r4, r5, lr}
 1190              	.LCFI19:
 1191              		.cfi_def_cfa_offset 16
 1192              		.cfi_offset 3, -16
 1193              		.cfi_offset 4, -12
 1194              		.cfi_offset 5, -8
 1195              		.cfi_offset 14, -4
 1196              	.LVL127:
 577:../Middlewares/FreeRTOS//Source/queue.c **** 
 1197              		.loc 1 577 0
 1198 0002 40B9     		cbnz	r0, .L114
 1199              	.LBB102:
 1200              	.LBB103:
 1201              		.loc 2 237 0
 1202              		.syntax unified
 1203              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1204 0004 4FF01003 			mov r3, #16												
 1205 0008 83F31188 		msr basepri, r3											
 1206 000c BFF36F8F 		isb														
 1207 0010 BFF34F8F 		dsb														
 1208              	
 1209              	@ 0 "" 2
 1210              	.LVL128:
 1211              		.thumb
 1212              		.syntax unified
 1213              	.L115:
 1214 0014 FEE7     		b	.L115
 1215              	.L114:
 1216 0016 0446     		mov	r4, r0
 1217              	.LBE103:
 1218              	.LBE102:
 585:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 1219              		.loc 1 585 0
 1220 0018 4568     		ldr	r5, [r0, #4]
 1221 001a FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 1222              	.LVL129:
 1223 001e 8542     		cmp	r5, r0
 1224 0020 01D0     		beq	.L120
 614:../Middlewares/FreeRTOS//Source/queue.c **** 
 1225              		.loc 1 614 0
 1226 0022 0020     		movs	r0, #0
 1227              	.L113:
 620:../Middlewares/FreeRTOS//Source/queue.c **** 
 1228              		.loc 1 620 0
 1229 0024 38BD     		pop	{r3, r4, r5, pc}
 1230              	.LVL130:
 1231              	.L120:
 594:../Middlewares/FreeRTOS//Source/queue.c **** 
 1232              		.loc 1 594 0
 1233 0026 E368     		ldr	r3, [r4, #12]
 1234 0028 013B     		subs	r3, r3, #1
 1235 002a E360     		str	r3, [r4, #12]
 597:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 1236              		.loc 1 597 0
 1237 002c 33B9     		cbnz	r3, .L118
 601:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 1238              		.loc 1 601 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 64


 1239 002e 1A46     		mov	r2, r3
 1240 0030 1946     		mov	r1, r3
 1241 0032 2046     		mov	r0, r4
 1242 0034 FFF7FEFF 		bl	xQueueGenericSend
 1243              	.LVL131:
 608:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 1244              		.loc 1 608 0
 1245 0038 0120     		movs	r0, #1
 1246 003a F3E7     		b	.L113
 1247              	.L118:
 1248 003c 0120     		movs	r0, #1
 1249              	.LVL132:
 619:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 1250              		.loc 1 619 0
 1251 003e F1E7     		b	.L113
 1252              		.cfi_endproc
 1253              	.LFE133:
 1255              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1256              		.align	1
 1257              		.global	xQueueGenericSendFromISR
 1258              		.syntax unified
 1259              		.thumb
 1260              		.thumb_func
 1261              		.fpu fpv4-sp-d16
 1263              	xQueueGenericSendFromISR:
 1264              	.LFB137:
 922:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
 1265              		.loc 1 922 0
 1266              		.cfi_startproc
 1267              		@ args = 0, pretend = 0, frame = 0
 1268              		@ frame_needed = 0, uses_anonymous_args = 0
 1269              	.LVL133:
 1270 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1271              	.LCFI20:
 1272              		.cfi_def_cfa_offset 32
 1273              		.cfi_offset 3, -32
 1274              		.cfi_offset 4, -28
 1275              		.cfi_offset 5, -24
 1276              		.cfi_offset 6, -20
 1277              		.cfi_offset 7, -16
 1278              		.cfi_offset 8, -12
 1279              		.cfi_offset 9, -8
 1280              		.cfi_offset 14, -4
 1281              	.LVL134:
 927:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1282              		.loc 1 927 0
 1283 0004 60B1     		cbz	r0, .L136
 1284 0006 0446     		mov	r4, r0
 928:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1285              		.loc 1 928 0
 1286 0008 99B9     		cbnz	r1, .L124
 928:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1287              		.loc 1 928 0 is_stmt 0 discriminator 2
 1288 000a 006C     		ldr	r0, [r0, #64]
 1289              	.LVL135:
 1290 000c 88B1     		cbz	r0, .L124
 1291              	.LBB104:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 65


 1292              	.LBB105:
 1293              		.loc 2 237 0 is_stmt 1
 1294              		.syntax unified
 1295              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1296 000e 4FF01003 			mov r3, #16												
 1297 0012 83F31188 		msr basepri, r3											
 1298 0016 BFF36F8F 		isb														
 1299 001a BFF34F8F 		dsb														
 1300              	
 1301              	@ 0 "" 2
 1302              	.LVL136:
 1303              		.thumb
 1304              		.syntax unified
 1305              	.L125:
 1306 001e FEE7     		b	.L125
 1307              	.LVL137:
 1308              	.L136:
 1309              	.LBE105:
 1310              	.LBE104:
 1311              	.LBB106:
 1312              	.LBB107:
 1313              		.syntax unified
 1314              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1315 0020 4FF01003 			mov r3, #16												
 1316 0024 83F31188 		msr basepri, r3											
 1317 0028 BFF36F8F 		isb														
 1318 002c BFF34F8F 		dsb														
 1319              	
 1320              	@ 0 "" 2
 1321              	.LVL138:
 1322              		.thumb
 1323              		.syntax unified
 1324              	.L123:
 1325 0030 FEE7     		b	.L123
 1326              	.LVL139:
 1327              	.L124:
 1328              	.LBE107:
 1329              	.LBE106:
 929:../Middlewares/FreeRTOS//Source/queue.c **** 
 1330              		.loc 1 929 0
 1331 0032 022B     		cmp	r3, #2
 1332 0034 0BD1     		bne	.L126
 929:../Middlewares/FreeRTOS//Source/queue.c **** 
 1333              		.loc 1 929 0 is_stmt 0 discriminator 2
 1334 0036 E06B     		ldr	r0, [r4, #60]
 1335 0038 0128     		cmp	r0, #1
 1336 003a 08D0     		beq	.L126
 1337              	.LBB108:
 1338              	.LBB109:
 1339              		.loc 2 237 0 is_stmt 1
 1340              		.syntax unified
 1341              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1342 003c 4FF01003 			mov r3, #16												
 1343 0040 83F31188 		msr basepri, r3											
 1344 0044 BFF36F8F 		isb														
 1345 0048 BFF34F8F 		dsb														
 1346              	
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 66


 1347              	@ 0 "" 2
 1348              	.LVL140:
 1349              		.thumb
 1350              		.syntax unified
 1351              	.L127:
 1352 004c FEE7     		b	.L127
 1353              	.LVL141:
 1354              	.L126:
 1355 004e 1F46     		mov	r7, r3
 1356 0050 9046     		mov	r8, r2
 1357 0052 8946     		mov	r9, r1
 1358              	.LBE109:
 1359              	.LBE108:
 945:../Middlewares/FreeRTOS//Source/queue.c **** 
 1360              		.loc 1 945 0
 1361 0054 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1362              	.LVL142:
 1363              	.LBB110:
 1364              	.LBB111:
 238:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 245:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1365              		.loc 2 253 0
 1366              		.syntax unified
 1367              	@ 253 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1368 0058 EFF31186 			mrs r6, basepri											
 1369 005c 4FF01003 		mov r3, #16												
 1370 0060 83F31188 		msr basepri, r3											
 1371 0064 BFF36F8F 		isb														
 1372 0068 BFF34F8F 		dsb														
 1373              	
 1374              	@ 0 "" 2
 1375              		.thumb
 1376              		.syntax unified
 1377              	.LBE111:
 1378              	.LBE110:
 954:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 1379              		.loc 1 954 0
 1380 006c A26B     		ldr	r2, [r4, #56]
 1381 006e E36B     		ldr	r3, [r4, #60]
 1382 0070 9A42     		cmp	r2, r3
 1383 0072 03D3     		bcc	.L128
 954:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 1384              		.loc 1 954 0 is_stmt 0 discriminator 1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 67


 1385 0074 022F     		cmp	r7, #2
 1386 0076 01D0     		beq	.L128
1063:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 1387              		.loc 1 1063 0 is_stmt 1
 1388 0078 0020     		movs	r0, #0
 1389 007a 0FE0     		b	.L129
 1390              	.L128:
 1391              	.LBB112:
 956:../Middlewares/FreeRTOS//Source/queue.c **** 
 1392              		.loc 1 956 0
 1393 007c 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2
 1394 0080 6DB2     		sxtb	r5, r5
 1395              	.LVL143:
 965:../Middlewares/FreeRTOS//Source/queue.c **** 
 1396              		.loc 1 965 0
 1397 0082 3A46     		mov	r2, r7
 1398 0084 4946     		mov	r1, r9
 1399 0086 2046     		mov	r0, r4
 1400 0088 FFF7FEFF 		bl	prvCopyDataToQueue
 1401              	.LVL144:
 969:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 1402              		.loc 1 969 0
 1403 008c B5F1FF3F 		cmp	r5, #-1
 1404 0090 08D0     		beq	.L137
1055:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 1405              		.loc 1 1055 0
 1406 0092 6B1C     		adds	r3, r5, #1
 1407 0094 5BB2     		sxtb	r3, r3
 1408 0096 84F84530 		strb	r3, [r4, #69]
1058:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 1409              		.loc 1 1058 0
 1410 009a 0120     		movs	r0, #1
 1411              	.LVL145:
 1412              	.L129:
 1413              	.LBE112:
 1414              	.LBB113:
 1415              	.LBB114:
 254:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 262:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 266:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1416              		.loc 2 271 0
 1417              		.syntax unified
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 68


 1418              	@ 271 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1419 009c 86F31188 			msr basepri, r6	
 1420              	@ 0 "" 2
 1421              	.LVL146:
 1422              		.thumb
 1423              		.syntax unified
 1424              	.LBE114:
 1425              	.LBE113:
1069:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 1426              		.loc 1 1069 0
 1427 00a0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1428              	.LVL147:
 1429              	.L137:
 1430              	.LBB115:
1024:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 1431              		.loc 1 1024 0
 1432 00a4 636A     		ldr	r3, [r4, #36]
 1433 00a6 5BB1     		cbz	r3, .L132
1026:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 1434              		.loc 1 1026 0
 1435 00a8 04F12400 		add	r0, r4, #36
 1436 00ac FFF7FEFF 		bl	xTaskRemoveFromEventList
 1437              	.LVL148:
 1438 00b0 40B1     		cbz	r0, .L133
1030:../Middlewares/FreeRTOS//Source/queue.c **** 							{
 1439              		.loc 1 1030 0
 1440 00b2 B8F1000F 		cmp	r8, #0
 1441 00b6 07D0     		beq	.L134
1032:../Middlewares/FreeRTOS//Source/queue.c **** 							}
 1442              		.loc 1 1032 0
 1443 00b8 0120     		movs	r0, #1
 1444 00ba C8F80000 		str	r0, [r8]
 1445 00be EDE7     		b	.L129
 1446              	.L132:
1058:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 1447              		.loc 1 1058 0
 1448 00c0 0120     		movs	r0, #1
 1449 00c2 EBE7     		b	.L129
 1450              	.L133:
 1451 00c4 0120     		movs	r0, #1
 1452 00c6 E9E7     		b	.L129
 1453              	.L134:
 1454 00c8 0120     		movs	r0, #1
 1455 00ca E7E7     		b	.L129
 1456              	.LBE115:
 1457              		.cfi_endproc
 1458              	.LFE137:
 1460              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1461              		.align	1
 1462              		.global	xQueueGiveFromISR
 1463              		.syntax unified
 1464              		.thumb
 1465              		.thumb_func
 1466              		.fpu fpv4-sp-d16
 1468              	xQueueGiveFromISR:
 1469              	.LFB138:
1073:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 69


 1470              		.loc 1 1073 0
 1471              		.cfi_startproc
 1472              		@ args = 0, pretend = 0, frame = 0
 1473              		@ frame_needed = 0, uses_anonymous_args = 0
 1474              	.LVL149:
1084:../Middlewares/FreeRTOS//Source/queue.c **** 
 1475              		.loc 1 1084 0
 1476 0000 60B1     		cbz	r0, .L153
1073:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
 1477              		.loc 1 1073 0
 1478 0002 70B5     		push	{r4, r5, r6, lr}
 1479              	.LCFI21:
 1480              		.cfi_def_cfa_offset 16
 1481              		.cfi_offset 4, -16
 1482              		.cfi_offset 5, -12
 1483              		.cfi_offset 6, -8
 1484              		.cfi_offset 14, -4
 1485 0004 0446     		mov	r4, r0
1088:../Middlewares/FreeRTOS//Source/queue.c **** 
 1486              		.loc 1 1088 0
 1487 0006 036C     		ldr	r3, [r0, #64]
 1488 0008 8BB1     		cbz	r3, .L141
 1489              	.LBB116:
 1490              	.LBB117:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1491              		.loc 2 237 0
 1492              		.syntax unified
 1493              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1494 000a 4FF01003 			mov r3, #16												
 1495 000e 83F31188 		msr basepri, r3											
 1496 0012 BFF36F8F 		isb														
 1497 0016 BFF34F8F 		dsb														
 1498              	
 1499              	@ 0 "" 2
 1500              	.LVL150:
 1501              		.thumb
 1502              		.syntax unified
 1503              	.L142:
 1504 001a FEE7     		b	.L142
 1505              	.L153:
 1506              	.LCFI22:
 1507              		.cfi_def_cfa_offset 0
 1508              		.cfi_restore 4
 1509              		.cfi_restore 5
 1510              		.cfi_restore 6
 1511              		.cfi_restore 14
 1512              	.LBE117:
 1513              	.LBE116:
 1514              	.LBB118:
 1515              	.LBB119:
 1516              		.syntax unified
 1517              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1518 001c 4FF01003 			mov r3, #16												
 1519 0020 83F31188 		msr basepri, r3											
 1520 0024 BFF36F8F 		isb														
 1521 0028 BFF34F8F 		dsb														
 1522              	
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 70


 1523              	@ 0 "" 2
 1524              	.LVL151:
 1525              		.thumb
 1526              		.syntax unified
 1527              	.L140:
 1528 002c FEE7     		b	.L140
 1529              	.L141:
 1530              	.LCFI23:
 1531              		.cfi_def_cfa_offset 16
 1532              		.cfi_offset 4, -16
 1533              		.cfi_offset 5, -12
 1534              		.cfi_offset 6, -8
 1535              		.cfi_offset 14, -4
 1536              	.LBE119:
 1537              	.LBE118:
1093:../Middlewares/FreeRTOS//Source/queue.c **** 
 1538              		.loc 1 1093 0
 1539 002e 0368     		ldr	r3, [r0]
 1540 0030 2BB3     		cbz	r3, .L154
 1541              	.L143:
 1542 0032 0E46     		mov	r6, r1
1109:../Middlewares/FreeRTOS//Source/queue.c **** 
 1543              		.loc 1 1109 0
 1544 0034 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1545              	.LVL152:
 1546              	.LBB120:
 1547              	.LBB121:
 253:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1548              		.loc 2 253 0
 1549              		.syntax unified
 1550              	@ 253 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1551 0038 EFF31185 			mrs r5, basepri											
 1552 003c 4FF01003 		mov r3, #16												
 1553 0040 83F31188 		msr basepri, r3											
 1554 0044 BFF36F8F 		isb														
 1555 0048 BFF34F8F 		dsb														
 1556              	
 1557              	@ 0 "" 2
 1558              		.thumb
 1559              		.syntax unified
 1560              	.LBE121:
 1561              	.LBE120:
 1562              	.LBB122:
1113:../Middlewares/FreeRTOS//Source/queue.c **** 
 1563              		.loc 1 1113 0
 1564 004c A26B     		ldr	r2, [r4, #56]
 1565              	.LVL153:
1118:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 1566              		.loc 1 1118 0
 1567 004e E36B     		ldr	r3, [r4, #60]
 1568 0050 9342     		cmp	r3, r2
 1569 0052 26D9     		bls	.L147
 1570              	.LBB123:
1120:../Middlewares/FreeRTOS//Source/queue.c **** 
 1571              		.loc 1 1120 0
 1572 0054 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1573 0058 5BB2     		sxtb	r3, r3
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 71


 1574              	.LVL154:
1130:../Middlewares/FreeRTOS//Source/queue.c **** 
 1575              		.loc 1 1130 0
 1576 005a 0132     		adds	r2, r2, #1
 1577              	.LVL155:
 1578 005c A263     		str	r2, [r4, #56]
1134:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 1579              		.loc 1 1134 0
 1580 005e B3F1FF3F 		cmp	r3, #-1
 1581 0062 18D1     		bne	.L146
1189:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 1582              		.loc 1 1189 0
 1583 0064 636A     		ldr	r3, [r4, #36]
 1584              	.LVL156:
 1585 0066 F3B1     		cbz	r3, .L148
1191:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 1586              		.loc 1 1191 0
 1587 0068 04F12400 		add	r0, r4, #36
 1588 006c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1589              	.LVL157:
 1590 0070 D8B1     		cbz	r0, .L149
1195:../Middlewares/FreeRTOS//Source/queue.c **** 							{
 1591              		.loc 1 1195 0
 1592 0072 E6B1     		cbz	r6, .L150
1197:../Middlewares/FreeRTOS//Source/queue.c **** 							}
 1593              		.loc 1 1197 0
 1594 0074 0120     		movs	r0, #1
 1595 0076 3060     		str	r0, [r6]
 1596              	.L145:
 1597              	.LVL158:
 1598              	.LBE123:
 1599              	.LBE122:
 1600              	.LBB126:
 1601              	.LBB127:
 1602              		.loc 2 271 0
 1603              		.syntax unified
 1604              	@ 271 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1605 0078 85F31188 			msr basepri, r5	
 1606              	@ 0 "" 2
 1607              	.LVL159:
 1608              		.thumb
 1609              		.syntax unified
 1610              	.LBE127:
 1611              	.LBE126:
1234:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 1612              		.loc 1 1234 0
 1613 007c 70BD     		pop	{r4, r5, r6, pc}
 1614              	.LVL160:
 1615              	.L154:
1093:../Middlewares/FreeRTOS//Source/queue.c **** 
 1616              		.loc 1 1093 0 discriminator 2
 1617 007e 4368     		ldr	r3, [r0, #4]
 1618 0080 002B     		cmp	r3, #0
 1619 0082 D6D0     		beq	.L143
 1620              	.LBB128:
 1621              	.LBB129:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 72


 1622              		.loc 2 237 0
 1623              		.syntax unified
 1624              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1625 0084 4FF01003 			mov r3, #16												
 1626 0088 83F31188 		msr basepri, r3											
 1627 008c BFF36F8F 		isb														
 1628 0090 BFF34F8F 		dsb														
 1629              	
 1630              	@ 0 "" 2
 1631              	.LVL161:
 1632              		.thumb
 1633              		.syntax unified
 1634              	.L144:
 1635 0094 FEE7     		b	.L144
 1636              	.LVL162:
 1637              	.L146:
 1638              	.LBE129:
 1639              	.LBE128:
 1640              	.LBB130:
 1641              	.LBB124:
1220:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 1642              		.loc 1 1220 0
 1643 0096 0133     		adds	r3, r3, #1
 1644              	.LVL163:
 1645 0098 5BB2     		sxtb	r3, r3
 1646              	.LVL164:
 1647 009a 84F84530 		strb	r3, [r4, #69]
1223:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 1648              		.loc 1 1223 0
 1649 009e 0120     		movs	r0, #1
 1650 00a0 EAE7     		b	.L145
 1651              	.LVL165:
 1652              	.L147:
 1653              	.LBE124:
1228:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 1654              		.loc 1 1228 0
 1655 00a2 0020     		movs	r0, #0
 1656 00a4 E8E7     		b	.L145
 1657              	.LVL166:
 1658              	.L148:
 1659              	.LBB125:
1223:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 1660              		.loc 1 1223 0
 1661 00a6 0120     		movs	r0, #1
 1662 00a8 E6E7     		b	.L145
 1663              	.LVL167:
 1664              	.L149:
 1665 00aa 0120     		movs	r0, #1
 1666 00ac E4E7     		b	.L145
 1667              	.L150:
 1668 00ae 0120     		movs	r0, #1
 1669 00b0 E2E7     		b	.L145
 1670              	.LBE125:
 1671              	.LBE130:
 1672              		.cfi_endproc
 1673              	.LFE138:
 1675              		.section	.text.xQueueGenericReceive,"ax",%progbits
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 73


 1676              		.align	1
 1677              		.global	xQueueGenericReceive
 1678              		.syntax unified
 1679              		.thumb
 1680              		.thumb_func
 1681              		.fpu fpv4-sp-d16
 1683              	xQueueGenericReceive:
 1684              	.LFB139:
1238:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1685              		.loc 1 1238 0
 1686              		.cfi_startproc
 1687              		@ args = 0, pretend = 0, frame = 16
 1688              		@ frame_needed = 0, uses_anonymous_args = 0
 1689              	.LVL168:
 1690 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1691              	.LCFI24:
 1692              		.cfi_def_cfa_offset 24
 1693              		.cfi_offset 4, -24
 1694              		.cfi_offset 5, -20
 1695              		.cfi_offset 6, -16
 1696              		.cfi_offset 7, -12
 1697              		.cfi_offset 8, -8
 1698              		.cfi_offset 14, -4
 1699 0004 84B0     		sub	sp, sp, #16
 1700              	.LCFI25:
 1701              		.cfi_def_cfa_offset 40
 1702 0006 0192     		str	r2, [sp, #4]
 1703              	.LVL169:
1244:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1704              		.loc 1 1244 0
 1705 0008 60B1     		cbz	r0, .L179
 1706 000a 0446     		mov	r4, r0
1245:../Middlewares/FreeRTOS//Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1707              		.loc 1 1245 0
 1708 000c 99B9     		cbnz	r1, .L158
1245:../Middlewares/FreeRTOS//Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1709              		.loc 1 1245 0 is_stmt 0 discriminator 2
 1710 000e 026C     		ldr	r2, [r0, #64]
 1711              	.LVL170:
 1712 0010 8AB1     		cbz	r2, .L158
 1713              	.LBB131:
 1714              	.LBB132:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1715              		.loc 2 237 0 is_stmt 1
 1716              		.syntax unified
 1717              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1718 0012 4FF01003 			mov r3, #16												
 1719 0016 83F31188 		msr basepri, r3											
 1720 001a BFF36F8F 		isb														
 1721 001e BFF34F8F 		dsb														
 1722              	
 1723              	@ 0 "" 2
 1724              	.LVL171:
 1725              		.thumb
 1726              		.syntax unified
 1727              	.L159:
 1728 0022 FEE7     		b	.L159
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 74


 1729              	.LVL172:
 1730              	.L179:
 1731              	.LBE132:
 1732              	.LBE131:
 1733              	.LBB133:
 1734              	.LBB134:
 1735              		.syntax unified
 1736              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1737 0024 4FF01003 			mov r3, #16												
 1738 0028 83F31188 		msr basepri, r3											
 1739 002c BFF36F8F 		isb														
 1740 0030 BFF34F8F 		dsb														
 1741              	
 1742              	@ 0 "" 2
 1743              	.LVL173:
 1744              		.thumb
 1745              		.syntax unified
 1746              	.L157:
 1747 0034 FEE7     		b	.L157
 1748              	.LVL174:
 1749              	.L158:
 1750 0036 1F46     		mov	r7, r3
 1751 0038 8846     		mov	r8, r1
 1752              	.LBE134:
 1753              	.LBE133:
1248:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 1754              		.loc 1 1248 0
 1755 003a FFF7FEFF 		bl	xTaskGetSchedulerState
 1756              	.LVL175:
 1757 003e 50B9     		cbnz	r0, .L176
1248:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 1758              		.loc 1 1248 0 is_stmt 0 discriminator 2
 1759 0040 019B     		ldr	r3, [sp, #4]
 1760 0042 53B1     		cbz	r3, .L177
 1761              	.LBB135:
 1762              	.LBB136:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1763              		.loc 2 237 0 is_stmt 1
 1764              		.syntax unified
 1765              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1766 0044 4FF01003 			mov r3, #16												
 1767 0048 83F31188 		msr basepri, r3											
 1768 004c BFF36F8F 		isb														
 1769 0050 BFF34F8F 		dsb														
 1770              	
 1771              	@ 0 "" 2
 1772              	.LVL176:
 1773              		.thumb
 1774              		.syntax unified
 1775              	.L161:
 1776 0054 FEE7     		b	.L161
 1777              	.L176:
 1778              	.LBE136:
 1779              	.LBE135:
 1780 0056 0026     		movs	r6, #0
 1781 0058 5FE0     		b	.L162
 1782              	.L177:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 75


 1783 005a 0026     		movs	r6, #0
 1784 005c 5DE0     		b	.L162
 1785              	.LVL177:
 1786              	.L181:
 1787              	.LBB137:
1268:../Middlewares/FreeRTOS//Source/queue.c **** 
 1788              		.loc 1 1268 0
 1789 005e E668     		ldr	r6, [r4, #12]
 1790              	.LVL178:
1270:../Middlewares/FreeRTOS//Source/queue.c **** 
 1791              		.loc 1 1270 0
 1792 0060 4146     		mov	r1, r8
 1793 0062 2046     		mov	r0, r4
 1794 0064 FFF7FEFF 		bl	prvCopyDataFromQueue
 1795              	.LVL179:
1272:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 1796              		.loc 1 1272 0
 1797 0068 DFB9     		cbnz	r7, .L164
1277:../Middlewares/FreeRTOS//Source/queue.c **** 
 1798              		.loc 1 1277 0
 1799 006a 013D     		subs	r5, r5, #1
 1800              	.LVL180:
 1801 006c A563     		str	r5, [r4, #56]
1281:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 1802              		.loc 1 1281 0
 1803 006e 2368     		ldr	r3, [r4]
 1804 0070 13B9     		cbnz	r3, .L165
1285:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 1805              		.loc 1 1285 0
 1806 0072 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1807              	.LVL181:
 1808 0076 6060     		str	r0, [r4, #4]
 1809              	.L165:
1294:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 1810              		.loc 1 1294 0
 1811 0078 2369     		ldr	r3, [r4, #16]
 1812 007a 63B1     		cbz	r3, .L166
1296:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 1813              		.loc 1 1296 0
 1814 007c 04F11000 		add	r0, r4, #16
 1815 0080 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1816              	.LVL182:
 1817 0084 38B1     		cbz	r0, .L166
1298:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 1818              		.loc 1 1298 0
 1819 0086 464B     		ldr	r3, .L187
 1820 0088 4FF08052 		mov	r2, #268435456
 1821 008c 1A60     		str	r2, [r3]
 1822              		.syntax unified
 1823              	@ 1298 "../Middlewares/FreeRTOS//Source/queue.c" 1
 1824 008e BFF34F8F 		dsb
 1825              	@ 0 "" 2
 1826              	@ 1298 "../Middlewares/FreeRTOS//Source/queue.c" 1
 1827 0092 BFF36F8F 		isb
 1828              	@ 0 "" 2
 1829              	.LVL183:
 1830              		.thumb
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 76


 1831              		.syntax unified
 1832              	.L166:
1338:../Middlewares/FreeRTOS//Source/queue.c **** 				return pdPASS;
 1833              		.loc 1 1338 0
 1834 0096 FFF7FEFF 		bl	vPortExitCritical
 1835              	.LVL184:
1339:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 1836              		.loc 1 1339 0
 1837 009a 0120     		movs	r0, #1
 1838              	.LVL185:
 1839              	.L155:
 1840              	.LBE137:
1431:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 1841              		.loc 1 1431 0
 1842 009c 04B0     		add	sp, sp, #16
 1843              	.LCFI26:
 1844              		.cfi_remember_state
 1845              		.cfi_def_cfa_offset 24
 1846              		@ sp needed
 1847 009e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1848              	.LVL186:
 1849              	.L164:
 1850              	.LCFI27:
 1851              		.cfi_restore_state
 1852              	.LBB138:
1316:../Middlewares/FreeRTOS//Source/queue.c **** 
 1853              		.loc 1 1316 0
 1854 00a2 E660     		str	r6, [r4, #12]
1320:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 1855              		.loc 1 1320 0
 1856 00a4 636A     		ldr	r3, [r4, #36]
 1857 00a6 002B     		cmp	r3, #0
 1858 00a8 F5D0     		beq	.L166
1322:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 1859              		.loc 1 1322 0
 1860 00aa 04F12400 		add	r0, r4, #36
 1861 00ae FFF7FEFF 		bl	xTaskRemoveFromEventList
 1862              	.LVL187:
 1863 00b2 0028     		cmp	r0, #0
 1864 00b4 EFD0     		beq	.L166
1325:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 1865              		.loc 1 1325 0
 1866 00b6 3A4B     		ldr	r3, .L187
 1867 00b8 4FF08052 		mov	r2, #268435456
 1868 00bc 1A60     		str	r2, [r3]
 1869              		.syntax unified
 1870              	@ 1325 "../Middlewares/FreeRTOS//Source/queue.c" 1
 1871 00be BFF34F8F 		dsb
 1872              	@ 0 "" 2
 1873              	@ 1325 "../Middlewares/FreeRTOS//Source/queue.c" 1
 1874 00c2 BFF36F8F 		isb
 1875              	@ 0 "" 2
 1876              		.thumb
 1877              		.syntax unified
 1878 00c6 E6E7     		b	.L166
 1879              	.LVL188:
 1880              	.L182:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 77


1347:../Middlewares/FreeRTOS//Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1881              		.loc 1 1347 0
 1882 00c8 FFF7FEFF 		bl	vPortExitCritical
 1883              	.LVL189:
1349:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 1884              		.loc 1 1349 0
 1885 00cc 0020     		movs	r0, #0
 1886 00ce E5E7     		b	.L155
 1887              	.L183:
1355:../Middlewares/FreeRTOS//Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1888              		.loc 1 1355 0
 1889 00d0 02A8     		add	r0, sp, #8
 1890 00d2 FFF7FEFF 		bl	vTaskSetTimeOutState
 1891              	.LVL190:
1356:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 1892              		.loc 1 1356 0
 1893 00d6 0126     		movs	r6, #1
 1894 00d8 29E0     		b	.L169
 1895              	.LVL191:
 1896              	.L184:
 1897              	.LBE138:
1371:../Middlewares/FreeRTOS//Source/queue.c **** 
 1898              		.loc 1 1371 0 discriminator 1
 1899 00da 0023     		movs	r3, #0
 1900 00dc 84F84430 		strb	r3, [r4, #68]
 1901 00e0 31E0     		b	.L170
 1902              	.L185:
1371:../Middlewares/FreeRTOS//Source/queue.c **** 
 1903              		.loc 1 1371 0 is_stmt 0 discriminator 4
 1904 00e2 0023     		movs	r3, #0
 1905 00e4 84F84530 		strb	r3, [r4, #69]
 1906 00e8 33E0     		b	.L171
 1907              	.L186:
1384:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 1908              		.loc 1 1384 0 is_stmt 1
 1909 00ea FFF7FEFF 		bl	vPortEnterCritical
 1910              	.LVL192:
1386:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 1911              		.loc 1 1386 0
 1912 00ee 6068     		ldr	r0, [r4, #4]
 1913 00f0 FFF7FEFF 		bl	vTaskPriorityInherit
 1914              	.LVL193:
1388:../Middlewares/FreeRTOS//Source/queue.c **** 					}
 1915              		.loc 1 1388 0
 1916 00f4 FFF7FEFF 		bl	vPortExitCritical
 1917              	.LVL194:
 1918 00f8 3BE0     		b	.L174
 1919              	.L173:
1411:../Middlewares/FreeRTOS//Source/queue.c **** 				( void ) xTaskResumeAll();
 1920              		.loc 1 1411 0
 1921 00fa 2046     		mov	r0, r4
 1922 00fc FFF7FEFF 		bl	prvUnlockQueue
 1923              	.LVL195:
1412:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 1924              		.loc 1 1412 0
 1925 0100 FFF7FEFF 		bl	xTaskResumeAll
 1926              	.LVL196:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 78


 1927 0104 09E0     		b	.L162
 1928              	.L172:
1417:../Middlewares/FreeRTOS//Source/queue.c **** 			( void ) xTaskResumeAll();
 1929              		.loc 1 1417 0
 1930 0106 2046     		mov	r0, r4
 1931 0108 FFF7FEFF 		bl	prvUnlockQueue
 1932              	.LVL197:
1418:../Middlewares/FreeRTOS//Source/queue.c **** 
 1933              		.loc 1 1418 0
 1934 010c FFF7FEFF 		bl	xTaskResumeAll
 1935              	.LVL198:
1420:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 1936              		.loc 1 1420 0
 1937 0110 2046     		mov	r0, r4
 1938 0112 FFF7FEFF 		bl	prvIsQueueEmpty
 1939              	.LVL199:
 1940 0116 0028     		cmp	r0, #0
 1941 0118 40D1     		bne	.L180
 1942              	.LVL200:
 1943              	.L162:
1258:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 1944              		.loc 1 1258 0
 1945 011a FFF7FEFF 		bl	vPortEnterCritical
 1946              	.LVL201:
 1947              	.LBB139:
1260:../Middlewares/FreeRTOS//Source/queue.c **** 
 1948              		.loc 1 1260 0
 1949 011e A56B     		ldr	r5, [r4, #56]
 1950              	.LVL202:
1264:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 1951              		.loc 1 1264 0
 1952 0120 002D     		cmp	r5, #0
 1953 0122 9CD1     		bne	.L181
1343:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 1954              		.loc 1 1343 0
 1955 0124 019B     		ldr	r3, [sp, #4]
 1956 0126 002B     		cmp	r3, #0
 1957 0128 CED0     		beq	.L182
1351:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 1958              		.loc 1 1351 0
 1959 012a 002E     		cmp	r6, #0
 1960 012c D0D0     		beq	.L183
 1961              	.LVL203:
 1962              	.L169:
 1963              	.LBE139:
1365:../Middlewares/FreeRTOS//Source/queue.c **** 
 1964              		.loc 1 1365 0
 1965 012e FFF7FEFF 		bl	vPortExitCritical
 1966              	.LVL204:
1370:../Middlewares/FreeRTOS//Source/queue.c **** 		prvLockQueue( pxQueue );
 1967              		.loc 1 1370 0
 1968 0132 FFF7FEFF 		bl	vTaskSuspendAll
 1969              	.LVL205:
1371:../Middlewares/FreeRTOS//Source/queue.c **** 
 1970              		.loc 1 1371 0
 1971 0136 FFF7FEFF 		bl	vPortEnterCritical
 1972              	.LVL206:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 79


 1973 013a 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1974 013e 5BB2     		sxtb	r3, r3
 1975 0140 B3F1FF3F 		cmp	r3, #-1
 1976 0144 C9D0     		beq	.L184
 1977              	.L170:
1371:../Middlewares/FreeRTOS//Source/queue.c **** 
 1978              		.loc 1 1371 0 is_stmt 0 discriminator 3
 1979 0146 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1980 014a 5BB2     		sxtb	r3, r3
 1981 014c B3F1FF3F 		cmp	r3, #-1
 1982 0150 C7D0     		beq	.L185
 1983              	.L171:
1371:../Middlewares/FreeRTOS//Source/queue.c **** 
 1984              		.loc 1 1371 0 discriminator 6
 1985 0152 FFF7FEFF 		bl	vPortExitCritical
 1986              	.LVL207:
1374:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 1987              		.loc 1 1374 0 is_stmt 1 discriminator 6
 1988 0156 01A9     		add	r1, sp, #4
 1989 0158 02A8     		add	r0, sp, #8
 1990 015a FFF7FEFF 		bl	xTaskCheckForTimeOut
 1991              	.LVL208:
 1992 015e 0028     		cmp	r0, #0
 1993 0160 D1D1     		bne	.L172
1376:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 1994              		.loc 1 1376 0
 1995 0162 2046     		mov	r0, r4
 1996 0164 FFF7FEFF 		bl	prvIsQueueEmpty
 1997              	.LVL209:
 1998 0168 0028     		cmp	r0, #0
 1999 016a C6D0     		beq	.L173
1382:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 2000              		.loc 1 1382 0
 2001 016c 2368     		ldr	r3, [r4]
 2002 016e 002B     		cmp	r3, #0
 2003 0170 BBD0     		beq	.L186
 2004              	.L174:
1397:../Middlewares/FreeRTOS//Source/queue.c **** 				prvUnlockQueue( pxQueue );
 2005              		.loc 1 1397 0
 2006 0172 0199     		ldr	r1, [sp, #4]
 2007 0174 04F12400 		add	r0, r4, #36
 2008 0178 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2009              	.LVL210:
1398:../Middlewares/FreeRTOS//Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2010              		.loc 1 1398 0
 2011 017c 2046     		mov	r0, r4
 2012 017e FFF7FEFF 		bl	prvUnlockQueue
 2013              	.LVL211:
1399:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 2014              		.loc 1 1399 0
 2015 0182 FFF7FEFF 		bl	xTaskResumeAll
 2016              	.LVL212:
 2017 0186 0028     		cmp	r0, #0
 2018 0188 C7D1     		bne	.L162
1401:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 2019              		.loc 1 1401 0
 2020 018a 054B     		ldr	r3, .L187
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 80


 2021 018c 4FF08052 		mov	r2, #268435456
 2022 0190 1A60     		str	r2, [r3]
 2023              		.syntax unified
 2024              	@ 1401 "../Middlewares/FreeRTOS//Source/queue.c" 1
 2025 0192 BFF34F8F 		dsb
 2026              	@ 0 "" 2
 2027              	@ 1401 "../Middlewares/FreeRTOS//Source/queue.c" 1
 2028 0196 BFF36F8F 		isb
 2029              	@ 0 "" 2
 2030              		.thumb
 2031              		.syntax unified
 2032 019a BEE7     		b	.L162
 2033              	.L180:
1423:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 2034              		.loc 1 1423 0
 2035 019c 0020     		movs	r0, #0
 2036 019e 7DE7     		b	.L155
 2037              	.L188:
 2038              		.align	2
 2039              	.L187:
 2040 01a0 04ED00E0 		.word	-536810236
 2041              		.cfi_endproc
 2042              	.LFE139:
 2044              		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 2045              		.align	1
 2046              		.global	xQueueTakeMutexRecursive
 2047              		.syntax unified
 2048              		.thumb
 2049              		.thumb_func
 2050              		.fpu fpv4-sp-d16
 2052              	xQueueTakeMutexRecursive:
 2053              	.LFB134:
 628:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xReturn;
 2054              		.loc 1 628 0
 2055              		.cfi_startproc
 2056              		@ args = 0, pretend = 0, frame = 0
 2057              		@ frame_needed = 0, uses_anonymous_args = 0
 2058              	.LVL213:
 632:../Middlewares/FreeRTOS//Source/queue.c **** 
 2059              		.loc 1 632 0
 2060 0000 40B9     		cbnz	r0, .L190
 2061              	.LBB140:
 2062              	.LBB141:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2063              		.loc 2 237 0
 2064              		.syntax unified
 2065              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2066 0002 4FF01003 			mov r3, #16												
 2067 0006 83F31188 		msr basepri, r3											
 2068 000a BFF36F8F 		isb														
 2069 000e BFF34F8F 		dsb														
 2070              	
 2071              	@ 0 "" 2
 2072              	.LVL214:
 2073              		.thumb
 2074              		.syntax unified
 2075              	.L191:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 81


 2076 0012 FEE7     		b	.L191
 2077              	.L190:
 2078              	.LBE141:
 2079              	.LBE140:
 628:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xReturn;
 2080              		.loc 1 628 0
 2081 0014 70B5     		push	{r4, r5, r6, lr}
 2082              	.LCFI28:
 2083              		.cfi_def_cfa_offset 16
 2084              		.cfi_offset 4, -16
 2085              		.cfi_offset 5, -12
 2086              		.cfi_offset 6, -8
 2087              		.cfi_offset 14, -4
 2088 0016 0446     		mov	r4, r0
 2089 0018 0D46     		mov	r5, r1
 639:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 2090              		.loc 1 639 0
 2091 001a 4668     		ldr	r6, [r0, #4]
 2092 001c FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 2093              	.LVL215:
 2094 0020 8642     		cmp	r6, r0
 2095 0022 0BD0     		beq	.L196
 646:../Middlewares/FreeRTOS//Source/queue.c **** 
 2096              		.loc 1 646 0
 2097 0024 0023     		movs	r3, #0
 2098 0026 2A46     		mov	r2, r5
 2099 0028 1946     		mov	r1, r3
 2100 002a 2046     		mov	r0, r4
 2101 002c FFF7FEFF 		bl	xQueueGenericReceive
 2102              	.LVL216:
 651:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 2103              		.loc 1 651 0
 2104 0030 0246     		mov	r2, r0
 2105 0032 38B1     		cbz	r0, .L189
 653:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 2106              		.loc 1 653 0
 2107 0034 E368     		ldr	r3, [r4, #12]
 2108 0036 0133     		adds	r3, r3, #1
 2109 0038 E360     		str	r3, [r4, #12]
 661:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 2110              		.loc 1 661 0
 2111 003a 03E0     		b	.L189
 2112              	.LVL217:
 2113              	.L196:
 641:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdPASS;
 2114              		.loc 1 641 0
 2115 003c E368     		ldr	r3, [r4, #12]
 2116 003e 0133     		adds	r3, r3, #1
 2117 0040 E360     		str	r3, [r4, #12]
 2118              	.LVL218:
 642:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 2119              		.loc 1 642 0
 2120 0042 0122     		movs	r2, #1
 2121              	.LVL219:
 2122              	.L189:
 662:../Middlewares/FreeRTOS//Source/queue.c **** 
 2123              		.loc 1 662 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 82


 2124 0044 1046     		mov	r0, r2
 2125 0046 70BD     		pop	{r4, r5, r6, pc}
 2126              		.cfi_endproc
 2127              	.LFE134:
 2129              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 2130              		.align	1
 2131              		.global	xQueueReceiveFromISR
 2132              		.syntax unified
 2133              		.thumb
 2134              		.thumb_func
 2135              		.fpu fpv4-sp-d16
 2137              	xQueueReceiveFromISR:
 2138              	.LFB140:
1435:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
 2139              		.loc 1 1435 0
 2140              		.cfi_startproc
 2141              		@ args = 0, pretend = 0, frame = 0
 2142              		@ frame_needed = 0, uses_anonymous_args = 0
 2143              	.LVL220:
 2144 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2145              	.LCFI29:
 2146              		.cfi_def_cfa_offset 32
 2147              		.cfi_offset 3, -32
 2148              		.cfi_offset 4, -28
 2149              		.cfi_offset 5, -24
 2150              		.cfi_offset 6, -20
 2151              		.cfi_offset 7, -16
 2152              		.cfi_offset 8, -12
 2153              		.cfi_offset 9, -8
 2154              		.cfi_offset 14, -4
 2155              	.LVL221:
1440:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2156              		.loc 1 1440 0
 2157 0004 60B1     		cbz	r0, .L209
 2158 0006 0446     		mov	r4, r0
1441:../Middlewares/FreeRTOS//Source/queue.c **** 
 2159              		.loc 1 1441 0
 2160 0008 99B9     		cbnz	r1, .L200
1441:../Middlewares/FreeRTOS//Source/queue.c **** 
 2161              		.loc 1 1441 0 is_stmt 0 discriminator 2
 2162 000a 036C     		ldr	r3, [r0, #64]
 2163 000c 8BB1     		cbz	r3, .L200
 2164              	.LBB142:
 2165              	.LBB143:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2166              		.loc 2 237 0 is_stmt 1
 2167              		.syntax unified
 2168              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2169 000e 4FF01003 			mov r3, #16												
 2170 0012 83F31188 		msr basepri, r3											
 2171 0016 BFF36F8F 		isb														
 2172 001a BFF34F8F 		dsb														
 2173              	
 2174              	@ 0 "" 2
 2175              	.LVL222:
 2176              		.thumb
 2177              		.syntax unified
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 83


 2178              	.L201:
 2179 001e FEE7     		b	.L201
 2180              	.L209:
 2181              	.LBE143:
 2182              	.LBE142:
 2183              	.LBB144:
 2184              	.LBB145:
 2185              		.syntax unified
 2186              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2187 0020 4FF01003 			mov r3, #16												
 2188 0024 83F31188 		msr basepri, r3											
 2189 0028 BFF36F8F 		isb														
 2190 002c BFF34F8F 		dsb														
 2191              	
 2192              	@ 0 "" 2
 2193              	.LVL223:
 2194              		.thumb
 2195              		.syntax unified
 2196              	.L199:
 2197 0030 FEE7     		b	.L199
 2198              	.L200:
 2199 0032 1746     		mov	r7, r2
 2200 0034 8946     		mov	r9, r1
 2201              	.LBE145:
 2202              	.LBE144:
1457:../Middlewares/FreeRTOS//Source/queue.c **** 
 2203              		.loc 1 1457 0
 2204 0036 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2205              	.LVL224:
 2206              	.LBB146:
 2207              	.LBB147:
 253:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2208              		.loc 2 253 0
 2209              		.syntax unified
 2210              	@ 253 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2211 003a EFF31186 			mrs r6, basepri											
 2212 003e 4FF01003 		mov r3, #16												
 2213 0042 83F31188 		msr basepri, r3											
 2214 0046 BFF36F8F 		isb														
 2215 004a BFF34F8F 		dsb														
 2216              	
 2217              	@ 0 "" 2
 2218              		.thumb
 2219              		.syntax unified
 2220              	.LBE147:
 2221              	.LBE146:
 2222              	.LBB148:
1461:../Middlewares/FreeRTOS//Source/queue.c **** 
 2223              		.loc 1 1461 0
 2224 004e D4F83880 		ldr	r8, [r4, #56]
 2225              	.LVL225:
1464:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 2226              		.loc 1 1464 0
 2227 0052 B8F1000F 		cmp	r8, #0
 2228 0056 1DD0     		beq	.L204
 2229              	.LBB149:
1466:../Middlewares/FreeRTOS//Source/queue.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 84


 2230              		.loc 1 1466 0
 2231 0058 94F84450 		ldrb	r5, [r4, #68]	@ zero_extendqisi2
 2232 005c 6DB2     		sxtb	r5, r5
 2233              	.LVL226:
1470:../Middlewares/FreeRTOS//Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 2234              		.loc 1 1470 0
 2235 005e 4946     		mov	r1, r9
 2236 0060 2046     		mov	r0, r4
 2237 0062 FFF7FEFF 		bl	prvCopyDataFromQueue
 2238              	.LVL227:
1471:../Middlewares/FreeRTOS//Source/queue.c **** 
 2239              		.loc 1 1471 0
 2240 0066 08F1FF33 		add	r3, r8, #-1
 2241 006a A363     		str	r3, [r4, #56]
1477:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 2242              		.loc 1 1477 0
 2243 006c B5F1FF3F 		cmp	r5, #-1
 2244 0070 05D0     		beq	.L210
1508:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 2245              		.loc 1 1508 0
 2246 0072 6B1C     		adds	r3, r5, #1
 2247 0074 5BB2     		sxtb	r3, r3
 2248 0076 84F84430 		strb	r3, [r4, #68]
1511:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 2249              		.loc 1 1511 0
 2250 007a 0120     		movs	r0, #1
 2251 007c 0BE0     		b	.L202
 2252              	.L210:
1479:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 2253              		.loc 1 1479 0
 2254 007e 2369     		ldr	r3, [r4, #16]
 2255 0080 6BB1     		cbz	r3, .L205
1481:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 2256              		.loc 1 1481 0
 2257 0082 04F11000 		add	r0, r4, #16
 2258 0086 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2259              	.LVL228:
 2260 008a 50B1     		cbz	r0, .L206
1485:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 2261              		.loc 1 1485 0
 2262 008c 5FB1     		cbz	r7, .L207
1487:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 2263              		.loc 1 1487 0
 2264 008e 0120     		movs	r0, #1
 2265 0090 3860     		str	r0, [r7]
 2266 0092 00E0     		b	.L202
 2267              	.LVL229:
 2268              	.L204:
 2269              	.LBE149:
1515:../Middlewares/FreeRTOS//Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2270              		.loc 1 1515 0
 2271 0094 0020     		movs	r0, #0
 2272              	.L202:
 2273              	.LVL230:
 2274              	.LBE148:
 2275              	.LBB151:
 2276              	.LBB152:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 85


 2277              		.loc 2 271 0
 2278              		.syntax unified
 2279              	@ 271 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2280 0096 86F31188 			msr basepri, r6	
 2281              	@ 0 "" 2
 2282              	.LVL231:
 2283              		.thumb
 2284              		.syntax unified
 2285              	.LBE152:
 2286              	.LBE151:
1522:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 2287              		.loc 1 1522 0
 2288 009a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2289              	.LVL232:
 2290              	.L205:
 2291              	.LBB153:
 2292              	.LBB150:
1511:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 2293              		.loc 1 1511 0
 2294 009e 0120     		movs	r0, #1
 2295 00a0 F9E7     		b	.L202
 2296              	.L206:
 2297 00a2 0120     		movs	r0, #1
 2298 00a4 F7E7     		b	.L202
 2299              	.L207:
 2300 00a6 0120     		movs	r0, #1
 2301 00a8 F5E7     		b	.L202
 2302              	.LBE150:
 2303              	.LBE153:
 2304              		.cfi_endproc
 2305              	.LFE140:
 2307              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2308              		.align	1
 2309              		.global	xQueuePeekFromISR
 2310              		.syntax unified
 2311              		.thumb
 2312              		.thumb_func
 2313              		.fpu fpv4-sp-d16
 2315              	xQueuePeekFromISR:
 2316              	.LFB141:
1526:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
 2317              		.loc 1 1526 0
 2318              		.cfi_startproc
 2319              		@ args = 0, pretend = 0, frame = 0
 2320              		@ frame_needed = 0, uses_anonymous_args = 0
 2321              	.LVL233:
 2322 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2323              	.LCFI30:
 2324              		.cfi_def_cfa_offset 24
 2325              		.cfi_offset 3, -24
 2326              		.cfi_offset 4, -20
 2327              		.cfi_offset 5, -16
 2328              		.cfi_offset 6, -12
 2329              		.cfi_offset 7, -8
 2330              		.cfi_offset 14, -4
 2331              	.LVL234:
1532:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 86


 2332              		.loc 1 1532 0
 2333 0002 60B1     		cbz	r0, .L221
 2334 0004 0446     		mov	r4, r0
1533:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2335              		.loc 1 1533 0
 2336 0006 99B9     		cbnz	r1, .L214
1533:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2337              		.loc 1 1533 0 is_stmt 0 discriminator 2
 2338 0008 036C     		ldr	r3, [r0, #64]
 2339 000a 8BB1     		cbz	r3, .L214
 2340              	.LBB154:
 2341              	.LBB155:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2342              		.loc 2 237 0 is_stmt 1
 2343              		.syntax unified
 2344              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2345 000c 4FF01003 			mov r3, #16												
 2346 0010 83F31188 		msr basepri, r3											
 2347 0014 BFF36F8F 		isb														
 2348 0018 BFF34F8F 		dsb														
 2349              	
 2350              	@ 0 "" 2
 2351              	.LVL235:
 2352              		.thumb
 2353              		.syntax unified
 2354              	.L215:
 2355 001c FEE7     		b	.L215
 2356              	.L221:
 2357              	.LBE155:
 2358              	.LBE154:
 2359              	.LBB156:
 2360              	.LBB157:
 2361              		.syntax unified
 2362              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2363 001e 4FF01003 			mov r3, #16												
 2364 0022 83F31188 		msr basepri, r3											
 2365 0026 BFF36F8F 		isb														
 2366 002a BFF34F8F 		dsb														
 2367              	
 2368              	@ 0 "" 2
 2369              	.LVL236:
 2370              		.thumb
 2371              		.syntax unified
 2372              	.L213:
 2373 002e FEE7     		b	.L213
 2374              	.L214:
 2375              	.LBE157:
 2376              	.LBE156:
1534:../Middlewares/FreeRTOS//Source/queue.c **** 
 2377              		.loc 1 1534 0
 2378 0030 236C     		ldr	r3, [r4, #64]
 2379 0032 43B9     		cbnz	r3, .L216
 2380              	.LBB158:
 2381              	.LBB159:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2382              		.loc 2 237 0
 2383              		.syntax unified
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 87


 2384              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2385 0034 4FF01003 			mov r3, #16												
 2386 0038 83F31188 		msr basepri, r3											
 2387 003c BFF36F8F 		isb														
 2388 0040 BFF34F8F 		dsb														
 2389              	
 2390              	@ 0 "" 2
 2391              	.LVL237:
 2392              		.thumb
 2393              		.syntax unified
 2394              	.L217:
 2395 0044 FEE7     		b	.L217
 2396              	.L216:
 2397 0046 0D46     		mov	r5, r1
 2398              	.LBE159:
 2399              	.LBE158:
1550:../Middlewares/FreeRTOS//Source/queue.c **** 
 2400              		.loc 1 1550 0
 2401 0048 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2402              	.LVL238:
 2403              	.LBB160:
 2404              	.LBB161:
 253:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2405              		.loc 2 253 0
 2406              		.syntax unified
 2407              	@ 253 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2408 004c EFF31186 			mrs r6, basepri											
 2409 0050 4FF01003 		mov r3, #16												
 2410 0054 83F31188 		msr basepri, r3											
 2411 0058 BFF36F8F 		isb														
 2412 005c BFF34F8F 		dsb														
 2413              	
 2414              	@ 0 "" 2
 2415              		.thumb
 2416              		.syntax unified
 2417              	.LBE161:
 2418              	.LBE160:
1555:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 2419              		.loc 1 1555 0
 2420 0060 A36B     		ldr	r3, [r4, #56]
 2421 0062 4BB1     		cbz	r3, .L219
1561:../Middlewares/FreeRTOS//Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2422              		.loc 1 1561 0
 2423 0064 E768     		ldr	r7, [r4, #12]
 2424              	.LVL239:
1562:../Middlewares/FreeRTOS//Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 2425              		.loc 1 1562 0
 2426 0066 2946     		mov	r1, r5
 2427 0068 2046     		mov	r0, r4
 2428 006a FFF7FEFF 		bl	prvCopyDataFromQueue
 2429              	.LVL240:
1563:../Middlewares/FreeRTOS//Source/queue.c **** 
 2430              		.loc 1 1563 0
 2431 006e E760     		str	r7, [r4, #12]
 2432              	.LVL241:
1565:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 2433              		.loc 1 1565 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 88


 2434 0070 0120     		movs	r0, #1
 2435              	.LVL242:
 2436              	.L218:
 2437              	.LBB162:
 2438              	.LBB163:
 2439              		.loc 2 271 0
 2440              		.syntax unified
 2441              	@ 271 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2442 0072 86F31188 			msr basepri, r6	
 2443              	@ 0 "" 2
 2444              	.LVL243:
 2445              		.thumb
 2446              		.syntax unified
 2447              	.LBE163:
 2448              	.LBE162:
1576:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 2449              		.loc 1 1576 0
 2450 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2451              	.LVL244:
 2452              	.L219:
1569:../Middlewares/FreeRTOS//Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2453              		.loc 1 1569 0
 2454 0078 0020     		movs	r0, #0
 2455 007a FAE7     		b	.L218
 2456              		.cfi_endproc
 2457              	.LFE141:
 2459              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2460              		.align	1
 2461              		.global	uxQueueMessagesWaiting
 2462              		.syntax unified
 2463              		.thumb
 2464              		.thumb_func
 2465              		.fpu fpv4-sp-d16
 2467              	uxQueueMessagesWaiting:
 2468              	.LFB142:
1580:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxReturn;
 2469              		.loc 1 1580 0
 2470              		.cfi_startproc
 2471              		@ args = 0, pretend = 0, frame = 0
 2472              		@ frame_needed = 0, uses_anonymous_args = 0
 2473              	.LVL245:
1583:../Middlewares/FreeRTOS//Source/queue.c **** 
 2474              		.loc 1 1583 0
 2475 0000 40B9     		cbnz	r0, .L223
 2476              	.LBB164:
 2477              	.LBB165:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2478              		.loc 2 237 0
 2479              		.syntax unified
 2480              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2481 0002 4FF01003 			mov r3, #16												
 2482 0006 83F31188 		msr basepri, r3											
 2483 000a BFF36F8F 		isb														
 2484 000e BFF34F8F 		dsb														
 2485              	
 2486              	@ 0 "" 2
 2487              	.LVL246:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 89


 2488              		.thumb
 2489              		.syntax unified
 2490              	.L224:
 2491 0012 FEE7     		b	.L224
 2492              	.L223:
 2493              	.LBE165:
 2494              	.LBE164:
1580:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxReturn;
 2495              		.loc 1 1580 0
 2496 0014 10B5     		push	{r4, lr}
 2497              	.LCFI31:
 2498              		.cfi_def_cfa_offset 8
 2499              		.cfi_offset 4, -8
 2500              		.cfi_offset 14, -4
 2501 0016 0446     		mov	r4, r0
1585:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 2502              		.loc 1 1585 0
 2503 0018 FFF7FEFF 		bl	vPortEnterCritical
 2504              	.LVL247:
1587:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 2505              		.loc 1 1587 0
 2506 001c A46B     		ldr	r4, [r4, #56]
 2507              	.LVL248:
1589:../Middlewares/FreeRTOS//Source/queue.c **** 
 2508              		.loc 1 1589 0
 2509 001e FFF7FEFF 		bl	vPortExitCritical
 2510              	.LVL249:
1592:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 2511              		.loc 1 1592 0
 2512 0022 2046     		mov	r0, r4
 2513 0024 10BD     		pop	{r4, pc}
 2514              		.cfi_endproc
 2515              	.LFE142:
 2517              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2518              		.align	1
 2519              		.global	uxQueueSpacesAvailable
 2520              		.syntax unified
 2521              		.thumb
 2522              		.thumb_func
 2523              		.fpu fpv4-sp-d16
 2525              	uxQueueSpacesAvailable:
 2526              	.LFB143:
1596:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxReturn;
 2527              		.loc 1 1596 0
 2528              		.cfi_startproc
 2529              		@ args = 0, pretend = 0, frame = 0
 2530              		@ frame_needed = 0, uses_anonymous_args = 0
 2531              	.LVL250:
1601:../Middlewares/FreeRTOS//Source/queue.c **** 
 2532              		.loc 1 1601 0
 2533 0000 40B9     		cbnz	r0, .L228
 2534              	.LBB166:
 2535              	.LBB167:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2536              		.loc 2 237 0
 2537              		.syntax unified
 2538              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 90


 2539 0002 4FF01003 			mov r3, #16												
 2540 0006 83F31188 		msr basepri, r3											
 2541 000a BFF36F8F 		isb														
 2542 000e BFF34F8F 		dsb														
 2543              	
 2544              	@ 0 "" 2
 2545              	.LVL251:
 2546              		.thumb
 2547              		.syntax unified
 2548              	.L229:
 2549 0012 FEE7     		b	.L229
 2550              	.L228:
 2551              	.LBE167:
 2552              	.LBE166:
1596:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxReturn;
 2553              		.loc 1 1596 0
 2554 0014 10B5     		push	{r4, lr}
 2555              	.LCFI32:
 2556              		.cfi_def_cfa_offset 8
 2557              		.cfi_offset 4, -8
 2558              		.cfi_offset 14, -4
 2559 0016 0446     		mov	r4, r0
1603:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 2560              		.loc 1 1603 0
 2561 0018 FFF7FEFF 		bl	vPortEnterCritical
 2562              	.LVL252:
1605:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 2563              		.loc 1 1605 0
 2564 001c E36B     		ldr	r3, [r4, #60]
 2565 001e A46B     		ldr	r4, [r4, #56]
 2566              	.LVL253:
 2567 0020 1C1B     		subs	r4, r3, r4
 2568              	.LVL254:
1607:../Middlewares/FreeRTOS//Source/queue.c **** 
 2569              		.loc 1 1607 0
 2570 0022 FFF7FEFF 		bl	vPortExitCritical
 2571              	.LVL255:
1610:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 2572              		.loc 1 1610 0
 2573 0026 2046     		mov	r0, r4
 2574 0028 10BD     		pop	{r4, pc}
 2575              		.cfi_endproc
 2576              	.LFE143:
 2578              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2579              		.align	1
 2580              		.global	uxQueueMessagesWaitingFromISR
 2581              		.syntax unified
 2582              		.thumb
 2583              		.thumb_func
 2584              		.fpu fpv4-sp-d16
 2586              	uxQueueMessagesWaitingFromISR:
 2587              	.LFB144:
1614:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxReturn;
 2588              		.loc 1 1614 0
 2589              		.cfi_startproc
 2590              		@ args = 0, pretend = 0, frame = 0
 2591              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 91


 2592              		@ link register save eliminated.
 2593              	.LVL256:
1617:../Middlewares/FreeRTOS//Source/queue.c **** 
 2594              		.loc 1 1617 0
 2595 0000 08B1     		cbz	r0, .L235
1619:../Middlewares/FreeRTOS//Source/queue.c **** 
 2596              		.loc 1 1619 0
 2597 0002 806B     		ldr	r0, [r0, #56]
 2598              	.LVL257:
1622:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 2599              		.loc 1 1622 0
 2600 0004 7047     		bx	lr
 2601              	.LVL258:
 2602              	.L235:
 2603              	.LBB168:
 2604              	.LBB169:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2605              		.loc 2 237 0
 2606              		.syntax unified
 2607              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2608 0006 4FF01003 			mov r3, #16												
 2609 000a 83F31188 		msr basepri, r3											
 2610 000e BFF36F8F 		isb														
 2611 0012 BFF34F8F 		dsb														
 2612              	
 2613              	@ 0 "" 2
 2614              	.LVL259:
 2615              		.thumb
 2616              		.syntax unified
 2617              	.L234:
 2618 0016 FEE7     		b	.L234
 2619              	.LBE169:
 2620              	.LBE168:
 2621              		.cfi_endproc
 2622              	.LFE144:
 2624              		.section	.text.uxQueueGetQueueNumber,"ax",%progbits
 2625              		.align	1
 2626              		.global	uxQueueGetQueueNumber
 2627              		.syntax unified
 2628              		.thumb
 2629              		.thumb_func
 2630              		.fpu fpv4-sp-d16
 2632              	uxQueueGetQueueNumber:
 2633              	.LFB146:
1670:../Middlewares/FreeRTOS//Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 2634              		.loc 1 1670 0
 2635              		.cfi_startproc
 2636              		@ args = 0, pretend = 0, frame = 0
 2637              		@ frame_needed = 0, uses_anonymous_args = 0
 2638              		@ link register save eliminated.
 2639              	.LVL260:
1672:../Middlewares/FreeRTOS//Source/queue.c **** 
 2640              		.loc 1 1672 0
 2641 0000 806C     		ldr	r0, [r0, #72]
 2642              	.LVL261:
 2643 0002 7047     		bx	lr
 2644              		.cfi_endproc
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 92


 2645              	.LFE146:
 2647              		.section	.text.vQueueSetQueueNumber,"ax",%progbits
 2648              		.align	1
 2649              		.global	vQueueSetQueueNumber
 2650              		.syntax unified
 2651              		.thumb
 2652              		.thumb_func
 2653              		.fpu fpv4-sp-d16
 2655              	vQueueSetQueueNumber:
 2656              	.LFB147:
1680:../Middlewares/FreeRTOS//Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 2657              		.loc 1 1680 0
 2658              		.cfi_startproc
 2659              		@ args = 0, pretend = 0, frame = 0
 2660              		@ frame_needed = 0, uses_anonymous_args = 0
 2661              		@ link register save eliminated.
 2662              	.LVL262:
1681:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 2663              		.loc 1 1681 0
 2664 0000 8164     		str	r1, [r0, #72]
1682:../Middlewares/FreeRTOS//Source/queue.c **** 
 2665              		.loc 1 1682 0
 2666 0002 7047     		bx	lr
 2667              		.cfi_endproc
 2668              	.LFE147:
 2670              		.section	.text.ucQueueGetQueueType,"ax",%progbits
 2671              		.align	1
 2672              		.global	ucQueueGetQueueType
 2673              		.syntax unified
 2674              		.thumb
 2675              		.thumb_func
 2676              		.fpu fpv4-sp-d16
 2678              	ucQueueGetQueueType:
 2679              	.LFB148:
1690:../Middlewares/FreeRTOS//Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
 2680              		.loc 1 1690 0
 2681              		.cfi_startproc
 2682              		@ args = 0, pretend = 0, frame = 0
 2683              		@ frame_needed = 0, uses_anonymous_args = 0
 2684              		@ link register save eliminated.
 2685              	.LVL263:
1692:../Middlewares/FreeRTOS//Source/queue.c **** 
 2686              		.loc 1 1692 0
 2687 0000 90F84C00 		ldrb	r0, [r0, #76]	@ zero_extendqisi2
 2688              	.LVL264:
 2689 0004 7047     		bx	lr
 2690              		.cfi_endproc
 2691              	.LFE148:
 2693              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2694              		.align	1
 2695              		.global	xQueueIsQueueEmptyFromISR
 2696              		.syntax unified
 2697              		.thumb
 2698              		.thumb_func
 2699              		.fpu fpv4-sp-d16
 2701              	xQueueIsQueueEmptyFromISR:
 2702              	.LFB153:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 93


1936:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
 2703              		.loc 1 1936 0
 2704              		.cfi_startproc
 2705              		@ args = 0, pretend = 0, frame = 0
 2706              		@ frame_needed = 0, uses_anonymous_args = 0
 2707              		@ link register save eliminated.
 2708              	.LVL265:
1939:../Middlewares/FreeRTOS//Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2709              		.loc 1 1939 0
 2710 0000 18B1     		cbz	r0, .L244
1940:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 2711              		.loc 1 1940 0
 2712 0002 836B     		ldr	r3, [r0, #56]
 2713 0004 53B9     		cbnz	r3, .L243
1942:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 2714              		.loc 1 1942 0
 2715 0006 0120     		movs	r0, #1
 2716              	.LVL266:
 2717 0008 7047     		bx	lr
 2718              	.LVL267:
 2719              	.L244:
 2720              	.LBB170:
 2721              	.LBB171:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2722              		.loc 2 237 0
 2723              		.syntax unified
 2724              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2725 000a 4FF01003 			mov r3, #16												
 2726 000e 83F31188 		msr basepri, r3											
 2727 0012 BFF36F8F 		isb														
 2728 0016 BFF34F8F 		dsb														
 2729              	
 2730              	@ 0 "" 2
 2731              	.LVL268:
 2732              		.thumb
 2733              		.syntax unified
 2734              	.L241:
 2735 001a FEE7     		b	.L241
 2736              	.L243:
 2737              	.LBE171:
 2738              	.LBE170:
1946:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 2739              		.loc 1 1946 0
 2740 001c 0020     		movs	r0, #0
 2741              	.LVL269:
1950:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 2742              		.loc 1 1950 0
 2743 001e 7047     		bx	lr
 2744              		.cfi_endproc
 2745              	.LFE153:
 2747              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2748              		.align	1
 2749              		.global	xQueueIsQueueFullFromISR
 2750              		.syntax unified
 2751              		.thumb
 2752              		.thumb_func
 2753              		.fpu fpv4-sp-d16
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 94


 2755              	xQueueIsQueueFullFromISR:
 2756              	.LFB155:
1972:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1973:../Middlewares/FreeRTOS//Source/queue.c **** 
1974:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
1975:../Middlewares/FreeRTOS//Source/queue.c **** {
 2757              		.loc 1 1975 0
 2758              		.cfi_startproc
 2759              		@ args = 0, pretend = 0, frame = 0
 2760              		@ frame_needed = 0, uses_anonymous_args = 0
 2761              		@ link register save eliminated.
 2762              	.LVL270:
1976:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
1977:../Middlewares/FreeRTOS//Source/queue.c **** 
1978:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( xQueue );
 2763              		.loc 1 1978 0
 2764 0000 28B1     		cbz	r0, .L250
1979:../Middlewares/FreeRTOS//Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 2765              		.loc 1 1979 0
 2766 0002 826B     		ldr	r2, [r0, #56]
 2767 0004 C36B     		ldr	r3, [r0, #60]
 2768 0006 9A42     		cmp	r2, r3
 2769 0008 0AD1     		bne	.L249
1980:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1981:../Middlewares/FreeRTOS//Source/queue.c **** 		xReturn = pdTRUE;
 2770              		.loc 1 1981 0
 2771 000a 0120     		movs	r0, #1
 2772              	.LVL271:
 2773 000c 7047     		bx	lr
 2774              	.LVL272:
 2775              	.L250:
 2776              	.LBB172:
 2777              	.LBB173:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2778              		.loc 2 237 0
 2779              		.syntax unified
 2780              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2781 000e 4FF01003 			mov r3, #16												
 2782 0012 83F31188 		msr basepri, r3											
 2783 0016 BFF36F8F 		isb														
 2784 001a BFF34F8F 		dsb														
 2785              	
 2786              	@ 0 "" 2
 2787              	.LVL273:
 2788              		.thumb
 2789              		.syntax unified
 2790              	.L247:
 2791 001e FEE7     		b	.L247
 2792              	.L249:
 2793              	.LBE173:
 2794              	.LBE172:
1982:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1983:../Middlewares/FreeRTOS//Source/queue.c **** 	else
1984:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1985:../Middlewares/FreeRTOS//Source/queue.c **** 		xReturn = pdFALSE;
 2795              		.loc 1 1985 0
 2796 0020 0020     		movs	r0, #0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 95


 2797              	.LVL274:
1986:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1987:../Middlewares/FreeRTOS//Source/queue.c **** 
1988:../Middlewares/FreeRTOS//Source/queue.c **** 	return xReturn;
1989:../Middlewares/FreeRTOS//Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2798              		.loc 1 1989 0
 2799 0022 7047     		bx	lr
 2800              		.cfi_endproc
 2801              	.LFE155:
 2803              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 2804              		.align	1
 2805              		.global	vQueueAddToRegistry
 2806              		.syntax unified
 2807              		.thumb
 2808              		.thumb_func
 2809              		.fpu fpv4-sp-d16
 2811              	vQueueAddToRegistry:
 2812              	.LFB156:
1990:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1991:../Middlewares/FreeRTOS//Source/queue.c **** 
1992:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
1993:../Middlewares/FreeRTOS//Source/queue.c **** 
1994:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
1995:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1996:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xReturn;
1997:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1998:../Middlewares/FreeRTOS//Source/queue.c **** 
1999:../Middlewares/FreeRTOS//Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2000:../Middlewares/FreeRTOS//Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
2001:../Middlewares/FreeRTOS//Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2002:../Middlewares/FreeRTOS//Source/queue.c **** 		portDISABLE_INTERRUPTS();
2003:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2004:../Middlewares/FreeRTOS//Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2005:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2006:../Middlewares/FreeRTOS//Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
2007:../Middlewares/FreeRTOS//Source/queue.c **** 				posting? */
2008:../Middlewares/FreeRTOS//Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2009:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2010:../Middlewares/FreeRTOS//Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2011:../Middlewares/FreeRTOS//Source/queue.c **** 					return indicating that we need to block. */
2012:../Middlewares/FreeRTOS//Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2013:../Middlewares/FreeRTOS//Source/queue.c **** 					portENABLE_INTERRUPTS();
2014:../Middlewares/FreeRTOS//Source/queue.c **** 					return errQUEUE_BLOCKED;
2015:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2016:../Middlewares/FreeRTOS//Source/queue.c **** 				else
2017:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2018:../Middlewares/FreeRTOS//Source/queue.c **** 					portENABLE_INTERRUPTS();
2019:../Middlewares/FreeRTOS//Source/queue.c **** 					return errQUEUE_FULL;
2020:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2021:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2022:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2023:../Middlewares/FreeRTOS//Source/queue.c **** 		portENABLE_INTERRUPTS();
2024:../Middlewares/FreeRTOS//Source/queue.c **** 
2025:../Middlewares/FreeRTOS//Source/queue.c **** 		portDISABLE_INTERRUPTS();
2026:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2027:../Middlewares/FreeRTOS//Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2028:../Middlewares/FreeRTOS//Source/queue.c **** 			{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 96


2029:../Middlewares/FreeRTOS//Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2030:../Middlewares/FreeRTOS//Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2031:../Middlewares/FreeRTOS//Source/queue.c **** 				xReturn = pdPASS;
2032:../Middlewares/FreeRTOS//Source/queue.c **** 
2033:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2034:../Middlewares/FreeRTOS//Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2035:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2036:../Middlewares/FreeRTOS//Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2037:../Middlewares/FreeRTOS//Source/queue.c **** 					into the ready list as we are within a critical section.
2038:../Middlewares/FreeRTOS//Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2039:../Middlewares/FreeRTOS//Source/queue.c **** 					the event were caused from within an interrupt. */
2040:../Middlewares/FreeRTOS//Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2041:../Middlewares/FreeRTOS//Source/queue.c **** 					{
2042:../Middlewares/FreeRTOS//Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
2043:../Middlewares/FreeRTOS//Source/queue.c **** 						that a yield might be appropriate. */
2044:../Middlewares/FreeRTOS//Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2045:../Middlewares/FreeRTOS//Source/queue.c **** 					}
2046:../Middlewares/FreeRTOS//Source/queue.c **** 					else
2047:../Middlewares/FreeRTOS//Source/queue.c **** 					{
2048:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2049:../Middlewares/FreeRTOS//Source/queue.c **** 					}
2050:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2051:../Middlewares/FreeRTOS//Source/queue.c **** 				else
2052:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2053:../Middlewares/FreeRTOS//Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2054:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2055:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2056:../Middlewares/FreeRTOS//Source/queue.c **** 			else
2057:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2058:../Middlewares/FreeRTOS//Source/queue.c **** 				xReturn = errQUEUE_FULL;
2059:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2060:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2061:../Middlewares/FreeRTOS//Source/queue.c **** 		portENABLE_INTERRUPTS();
2062:../Middlewares/FreeRTOS//Source/queue.c **** 
2063:../Middlewares/FreeRTOS//Source/queue.c **** 		return xReturn;
2064:../Middlewares/FreeRTOS//Source/queue.c **** 	}
2065:../Middlewares/FreeRTOS//Source/queue.c **** 
2066:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2067:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
2068:../Middlewares/FreeRTOS//Source/queue.c **** 
2069:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2070:../Middlewares/FreeRTOS//Source/queue.c **** 
2071:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2072:../Middlewares/FreeRTOS//Source/queue.c **** 	{
2073:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xReturn;
2074:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2075:../Middlewares/FreeRTOS//Source/queue.c **** 
2076:../Middlewares/FreeRTOS//Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2077:../Middlewares/FreeRTOS//Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
2078:../Middlewares/FreeRTOS//Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2079:../Middlewares/FreeRTOS//Source/queue.c **** 		portDISABLE_INTERRUPTS();
2080:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2081:../Middlewares/FreeRTOS//Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2082:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2083:../Middlewares/FreeRTOS//Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2084:../Middlewares/FreeRTOS//Source/queue.c **** 				leave with nothing? */
2085:../Middlewares/FreeRTOS//Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 97


2086:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2087:../Middlewares/FreeRTOS//Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2088:../Middlewares/FreeRTOS//Source/queue.c **** 					indicating that we need to block. */
2089:../Middlewares/FreeRTOS//Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2090:../Middlewares/FreeRTOS//Source/queue.c **** 					portENABLE_INTERRUPTS();
2091:../Middlewares/FreeRTOS//Source/queue.c **** 					return errQUEUE_BLOCKED;
2092:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2093:../Middlewares/FreeRTOS//Source/queue.c **** 				else
2094:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2095:../Middlewares/FreeRTOS//Source/queue.c **** 					portENABLE_INTERRUPTS();
2096:../Middlewares/FreeRTOS//Source/queue.c **** 					return errQUEUE_FULL;
2097:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2098:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2099:../Middlewares/FreeRTOS//Source/queue.c **** 			else
2100:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2101:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2102:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2103:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2104:../Middlewares/FreeRTOS//Source/queue.c **** 		portENABLE_INTERRUPTS();
2105:../Middlewares/FreeRTOS//Source/queue.c **** 
2106:../Middlewares/FreeRTOS//Source/queue.c **** 		portDISABLE_INTERRUPTS();
2107:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2108:../Middlewares/FreeRTOS//Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2109:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2110:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Data is available from the queue. */
2111:../Middlewares/FreeRTOS//Source/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2112:../Middlewares/FreeRTOS//Source/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2113:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2114:../Middlewares/FreeRTOS//Source/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2115:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2116:../Middlewares/FreeRTOS//Source/queue.c **** 				else
2117:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2118:../Middlewares/FreeRTOS//Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2119:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2120:../Middlewares/FreeRTOS//Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2121:../Middlewares/FreeRTOS//Source/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
2122:../Middlewares/FreeRTOS//Source/queue.c **** 
2123:../Middlewares/FreeRTOS//Source/queue.c **** 				xReturn = pdPASS;
2124:../Middlewares/FreeRTOS//Source/queue.c **** 
2125:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2126:../Middlewares/FreeRTOS//Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2127:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2128:../Middlewares/FreeRTOS//Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2129:../Middlewares/FreeRTOS//Source/queue.c **** 					into the ready list as we are within a critical section.
2130:../Middlewares/FreeRTOS//Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2131:../Middlewares/FreeRTOS//Source/queue.c **** 					the event were caused from within an interrupt. */
2132:../Middlewares/FreeRTOS//Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2133:../Middlewares/FreeRTOS//Source/queue.c **** 					{
2134:../Middlewares/FreeRTOS//Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2135:../Middlewares/FreeRTOS//Source/queue.c **** 					}
2136:../Middlewares/FreeRTOS//Source/queue.c **** 					else
2137:../Middlewares/FreeRTOS//Source/queue.c **** 					{
2138:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2139:../Middlewares/FreeRTOS//Source/queue.c **** 					}
2140:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2141:../Middlewares/FreeRTOS//Source/queue.c **** 				else
2142:../Middlewares/FreeRTOS//Source/queue.c **** 				{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 98


2143:../Middlewares/FreeRTOS//Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2144:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2145:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2146:../Middlewares/FreeRTOS//Source/queue.c **** 			else
2147:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2148:../Middlewares/FreeRTOS//Source/queue.c **** 				xReturn = pdFAIL;
2149:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2150:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2151:../Middlewares/FreeRTOS//Source/queue.c **** 		portENABLE_INTERRUPTS();
2152:../Middlewares/FreeRTOS//Source/queue.c **** 
2153:../Middlewares/FreeRTOS//Source/queue.c **** 		return xReturn;
2154:../Middlewares/FreeRTOS//Source/queue.c **** 	}
2155:../Middlewares/FreeRTOS//Source/queue.c **** 
2156:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2157:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
2158:../Middlewares/FreeRTOS//Source/queue.c **** 
2159:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2160:../Middlewares/FreeRTOS//Source/queue.c **** 
2161:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2162:../Middlewares/FreeRTOS//Source/queue.c **** 	{
2163:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2164:../Middlewares/FreeRTOS//Source/queue.c **** 
2165:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2166:../Middlewares/FreeRTOS//Source/queue.c **** 		exit without doing anything. */
2167:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2168:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2169:../Middlewares/FreeRTOS//Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2170:../Middlewares/FreeRTOS//Source/queue.c **** 
2171:../Middlewares/FreeRTOS//Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2172:../Middlewares/FreeRTOS//Source/queue.c **** 			co-routine has not already been woken. */
2173:../Middlewares/FreeRTOS//Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2174:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2175:../Middlewares/FreeRTOS//Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2176:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2177:../Middlewares/FreeRTOS//Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2178:../Middlewares/FreeRTOS//Source/queue.c **** 					{
2179:../Middlewares/FreeRTOS//Source/queue.c **** 						return pdTRUE;
2180:../Middlewares/FreeRTOS//Source/queue.c **** 					}
2181:../Middlewares/FreeRTOS//Source/queue.c **** 					else
2182:../Middlewares/FreeRTOS//Source/queue.c **** 					{
2183:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2184:../Middlewares/FreeRTOS//Source/queue.c **** 					}
2185:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2186:../Middlewares/FreeRTOS//Source/queue.c **** 				else
2187:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2188:../Middlewares/FreeRTOS//Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2189:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2190:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2191:../Middlewares/FreeRTOS//Source/queue.c **** 			else
2192:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2193:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2194:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2195:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2196:../Middlewares/FreeRTOS//Source/queue.c **** 		else
2197:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2198:../Middlewares/FreeRTOS//Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2199:../Middlewares/FreeRTOS//Source/queue.c **** 		}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 99


2200:../Middlewares/FreeRTOS//Source/queue.c **** 
2201:../Middlewares/FreeRTOS//Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
2202:../Middlewares/FreeRTOS//Source/queue.c **** 	}
2203:../Middlewares/FreeRTOS//Source/queue.c **** 
2204:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2205:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
2206:../Middlewares/FreeRTOS//Source/queue.c **** 
2207:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2208:../Middlewares/FreeRTOS//Source/queue.c **** 
2209:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2210:../Middlewares/FreeRTOS//Source/queue.c **** 	{
2211:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xReturn;
2212:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2213:../Middlewares/FreeRTOS//Source/queue.c **** 
2214:../Middlewares/FreeRTOS//Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2215:../Middlewares/FreeRTOS//Source/queue.c **** 		not then just leave without doing anything. */
2216:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2217:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2218:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Copy the data from the queue. */
2219:../Middlewares/FreeRTOS//Source/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2220:../Middlewares/FreeRTOS//Source/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2221:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2222:../Middlewares/FreeRTOS//Source/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2223:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2224:../Middlewares/FreeRTOS//Source/queue.c **** 			else
2225:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2226:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2227:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2228:../Middlewares/FreeRTOS//Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2229:../Middlewares/FreeRTOS//Source/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2230:../Middlewares/FreeRTOS//Source/queue.c **** 
2231:../Middlewares/FreeRTOS//Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2232:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2233:../Middlewares/FreeRTOS//Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2234:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2235:../Middlewares/FreeRTOS//Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2236:../Middlewares/FreeRTOS//Source/queue.c **** 					{
2237:../Middlewares/FreeRTOS//Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2238:../Middlewares/FreeRTOS//Source/queue.c **** 					}
2239:../Middlewares/FreeRTOS//Source/queue.c **** 					else
2240:../Middlewares/FreeRTOS//Source/queue.c **** 					{
2241:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2242:../Middlewares/FreeRTOS//Source/queue.c **** 					}
2243:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2244:../Middlewares/FreeRTOS//Source/queue.c **** 				else
2245:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2246:../Middlewares/FreeRTOS//Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2247:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2248:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2249:../Middlewares/FreeRTOS//Source/queue.c **** 			else
2250:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2251:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2252:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2253:../Middlewares/FreeRTOS//Source/queue.c **** 
2254:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdPASS;
2255:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2256:../Middlewares/FreeRTOS//Source/queue.c **** 		else
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 100


2257:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2258:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdFAIL;
2259:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2260:../Middlewares/FreeRTOS//Source/queue.c **** 
2261:../Middlewares/FreeRTOS//Source/queue.c **** 		return xReturn;
2262:../Middlewares/FreeRTOS//Source/queue.c **** 	}
2263:../Middlewares/FreeRTOS//Source/queue.c **** 
2264:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2265:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
2266:../Middlewares/FreeRTOS//Source/queue.c **** 
2267:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2268:../Middlewares/FreeRTOS//Source/queue.c **** 
2269:../Middlewares/FreeRTOS//Source/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2270:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 2813              		.loc 1 2270 0
 2814              		.cfi_startproc
 2815              		@ args = 0, pretend = 0, frame = 0
 2816              		@ frame_needed = 0, uses_anonymous_args = 0
 2817              		@ link register save eliminated.
 2818              	.LVL275:
2271:../Middlewares/FreeRTOS//Source/queue.c **** 	UBaseType_t ux;
2272:../Middlewares/FreeRTOS//Source/queue.c **** 
2273:../Middlewares/FreeRTOS//Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2274:../Middlewares/FreeRTOS//Source/queue.c **** 		a free slot. */
2275:../Middlewares/FreeRTOS//Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2819              		.loc 1 2275 0
 2820 0000 0023     		movs	r3, #0
 2821              	.LVL276:
 2822              	.L252:
 2823              		.loc 1 2275 0 is_stmt 0 discriminator 1
 2824 0002 072B     		cmp	r3, #7
 2825 0004 0CD8     		bhi	.L256
2276:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2277:../Middlewares/FreeRTOS//Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 2826              		.loc 1 2277 0 is_stmt 1
 2827 0006 074A     		ldr	r2, .L258
 2828 0008 52F83320 		ldr	r2, [r2, r3, lsl #3]
 2829 000c 0AB1     		cbz	r2, .L257
2275:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 2830              		.loc 1 2275 0 discriminator 2
 2831 000e 0133     		adds	r3, r3, #1
 2832              	.LVL277:
 2833 0010 F7E7     		b	.L252
 2834              	.L257:
2278:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2279:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Store the information on this queue. */
2280:../Middlewares/FreeRTOS//Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 2835              		.loc 1 2280 0
 2836 0012 044A     		ldr	r2, .L258
 2837 0014 42F83310 		str	r1, [r2, r3, lsl #3]
2281:../Middlewares/FreeRTOS//Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 2838              		.loc 1 2281 0
 2839 0018 02EBC303 		add	r3, r2, r3, lsl #3
 2840              	.LVL278:
 2841 001c 5860     		str	r0, [r3, #4]
2282:../Middlewares/FreeRTOS//Source/queue.c **** 
2283:../Middlewares/FreeRTOS//Source/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 101


2284:../Middlewares/FreeRTOS//Source/queue.c **** 				break;
 2842              		.loc 1 2284 0
 2843 001e 7047     		bx	lr
 2844              	.LVL279:
 2845              	.L256:
2285:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2286:../Middlewares/FreeRTOS//Source/queue.c **** 			else
2287:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2288:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2289:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2290:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2291:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 2846              		.loc 1 2291 0
 2847 0020 7047     		bx	lr
 2848              	.L259:
 2849 0022 00BF     		.align	2
 2850              	.L258:
 2851 0024 00000000 		.word	xQueueRegistry
 2852              		.cfi_endproc
 2853              	.LFE156:
 2855              		.section	.text.pcQueueGetName,"ax",%progbits
 2856              		.align	1
 2857              		.global	pcQueueGetName
 2858              		.syntax unified
 2859              		.thumb
 2860              		.thumb_func
 2861              		.fpu fpv4-sp-d16
 2863              	pcQueueGetName:
 2864              	.LFB157:
2292:../Middlewares/FreeRTOS//Source/queue.c **** 
2293:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2294:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
2295:../Middlewares/FreeRTOS//Source/queue.c **** 
2296:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2297:../Middlewares/FreeRTOS//Source/queue.c **** 
2298:../Middlewares/FreeRTOS//Source/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2299:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 2865              		.loc 1 2299 0
 2866              		.cfi_startproc
 2867              		@ args = 0, pretend = 0, frame = 0
 2868              		@ frame_needed = 0, uses_anonymous_args = 0
 2869              		@ link register save eliminated.
 2870              	.LVL280:
2300:../Middlewares/FreeRTOS//Source/queue.c **** 	UBaseType_t ux;
2301:../Middlewares/FreeRTOS//Source/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
2302:../Middlewares/FreeRTOS//Source/queue.c **** 
2303:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2304:../Middlewares/FreeRTOS//Source/queue.c **** 		removing entries from the registry while it is being searched. */
2305:../Middlewares/FreeRTOS//Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2871              		.loc 1 2305 0
 2872 0000 0023     		movs	r3, #0
 2873              	.LVL281:
 2874              	.L261:
 2875              		.loc 1 2305 0 is_stmt 0 discriminator 1
 2876 0002 072B     		cmp	r3, #7
 2877 0004 0BD8     		bhi	.L265
2306:../Middlewares/FreeRTOS//Source/queue.c **** 		{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 102


2307:../Middlewares/FreeRTOS//Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2878              		.loc 1 2307 0 is_stmt 1
 2879 0006 074A     		ldr	r2, .L267
 2880 0008 02EBC302 		add	r2, r2, r3, lsl #3
 2881 000c 5268     		ldr	r2, [r2, #4]
 2882 000e 8242     		cmp	r2, r0
 2883 0010 01D0     		beq	.L266
2305:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 2884              		.loc 1 2305 0 discriminator 2
 2885 0012 0133     		adds	r3, r3, #1
 2886              	.LVL282:
 2887 0014 F5E7     		b	.L261
 2888              	.L266:
2308:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2309:../Middlewares/FreeRTOS//Source/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 2889              		.loc 1 2309 0
 2890 0016 034A     		ldr	r2, .L267
 2891 0018 52F83300 		ldr	r0, [r2, r3, lsl #3]
 2892              	.LVL283:
2310:../Middlewares/FreeRTOS//Source/queue.c **** 				break;
 2893              		.loc 1 2310 0
 2894 001c 7047     		bx	lr
 2895              	.LVL284:
 2896              	.L265:
2301:../Middlewares/FreeRTOS//Source/queue.c **** 
 2897              		.loc 1 2301 0
 2898 001e 0020     		movs	r0, #0
 2899              	.LVL285:
2311:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2312:../Middlewares/FreeRTOS//Source/queue.c **** 			else
2313:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2314:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2315:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2316:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2317:../Middlewares/FreeRTOS//Source/queue.c **** 
2318:../Middlewares/FreeRTOS//Source/queue.c **** 		return pcReturn;
2319:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 2900              		.loc 1 2319 0
 2901 0020 7047     		bx	lr
 2902              	.L268:
 2903 0022 00BF     		.align	2
 2904              	.L267:
 2905 0024 00000000 		.word	xQueueRegistry
 2906              		.cfi_endproc
 2907              	.LFE157:
 2909              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 2910              		.align	1
 2911              		.global	vQueueUnregisterQueue
 2912              		.syntax unified
 2913              		.thumb
 2914              		.thumb_func
 2915              		.fpu fpv4-sp-d16
 2917              	vQueueUnregisterQueue:
 2918              	.LFB158:
2320:../Middlewares/FreeRTOS//Source/queue.c **** 
2321:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2322:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 103


2323:../Middlewares/FreeRTOS//Source/queue.c **** 
2324:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2325:../Middlewares/FreeRTOS//Source/queue.c **** 
2326:../Middlewares/FreeRTOS//Source/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2327:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 2919              		.loc 1 2327 0
 2920              		.cfi_startproc
 2921              		@ args = 0, pretend = 0, frame = 0
 2922              		@ frame_needed = 0, uses_anonymous_args = 0
 2923              		@ link register save eliminated.
 2924              	.LVL286:
2328:../Middlewares/FreeRTOS//Source/queue.c **** 	UBaseType_t ux;
2329:../Middlewares/FreeRTOS//Source/queue.c **** 
2330:../Middlewares/FreeRTOS//Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2331:../Middlewares/FreeRTOS//Source/queue.c **** 		registry. */
2332:../Middlewares/FreeRTOS//Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2925              		.loc 1 2332 0
 2926 0000 0023     		movs	r3, #0
 2927              	.LVL287:
 2928              	.L270:
 2929              		.loc 1 2332 0 is_stmt 0 discriminator 1
 2930 0002 072B     		cmp	r3, #7
 2931 0004 0FD8     		bhi	.L274
2333:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2334:../Middlewares/FreeRTOS//Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2932              		.loc 1 2334 0 is_stmt 1
 2933 0006 084A     		ldr	r2, .L276
 2934 0008 02EBC302 		add	r2, r2, r3, lsl #3
 2935 000c 5268     		ldr	r2, [r2, #4]
 2936 000e 8242     		cmp	r2, r0
 2937 0010 01D0     		beq	.L275
2332:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 2938              		.loc 1 2332 0 discriminator 2
 2939 0012 0133     		adds	r3, r3, #1
 2940              	.LVL288:
 2941 0014 F5E7     		b	.L270
 2942              	.L275:
2335:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2336:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2337:../Middlewares/FreeRTOS//Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 2943              		.loc 1 2337 0
 2944 0016 044A     		ldr	r2, .L276
 2945 0018 0021     		movs	r1, #0
 2946 001a 42F83310 		str	r1, [r2, r3, lsl #3]
2338:../Middlewares/FreeRTOS//Source/queue.c **** 
2339:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2340:../Middlewares/FreeRTOS//Source/queue.c **** 				appear in the registry twice if it is added, removed, then
2341:../Middlewares/FreeRTOS//Source/queue.c **** 				added again. */
2342:../Middlewares/FreeRTOS//Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 2947              		.loc 1 2342 0
 2948 001e 02EBC303 		add	r3, r2, r3, lsl #3
 2949              	.LVL289:
 2950 0022 5960     		str	r1, [r3, #4]
2343:../Middlewares/FreeRTOS//Source/queue.c **** 				break;
 2951              		.loc 1 2343 0
 2952 0024 7047     		bx	lr
 2953              	.LVL290:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 104


 2954              	.L274:
2344:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2345:../Middlewares/FreeRTOS//Source/queue.c **** 			else
2346:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2347:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2348:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2349:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2350:../Middlewares/FreeRTOS//Source/queue.c **** 
2351:../Middlewares/FreeRTOS//Source/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2955              		.loc 1 2351 0
 2956 0026 7047     		bx	lr
 2957              	.L277:
 2958              		.align	2
 2959              	.L276:
 2960 0028 00000000 		.word	xQueueRegistry
 2961              		.cfi_endproc
 2962              	.LFE158:
 2964              		.section	.text.vQueueDelete,"ax",%progbits
 2965              		.align	1
 2966              		.global	vQueueDelete
 2967              		.syntax unified
 2968              		.thumb
 2969              		.thumb_func
 2970              		.fpu fpv4-sp-d16
 2972              	vQueueDelete:
 2973              	.LFB145:
1626:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2974              		.loc 1 1626 0
 2975              		.cfi_startproc
 2976              		@ args = 0, pretend = 0, frame = 0
 2977              		@ frame_needed = 0, uses_anonymous_args = 0
 2978              	.LVL291:
1629:../Middlewares/FreeRTOS//Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 2979              		.loc 1 1629 0
 2980 0000 40B9     		cbnz	r0, .L279
 2981              	.LBB174:
 2982              	.LBB175:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2983              		.loc 2 237 0
 2984              		.syntax unified
 2985              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2986 0002 4FF01003 			mov r3, #16												
 2987 0006 83F31188 		msr basepri, r3											
 2988 000a BFF36F8F 		isb														
 2989 000e BFF34F8F 		dsb														
 2990              	
 2991              	@ 0 "" 2
 2992              	.LVL292:
 2993              		.thumb
 2994              		.syntax unified
 2995              	.L280:
 2996 0012 FEE7     		b	.L280
 2997              	.L279:
 2998              	.LBE175:
 2999              	.LBE174:
1626:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 3000              		.loc 1 1626 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 105


 3001 0014 10B5     		push	{r4, lr}
 3002              	.LCFI33:
 3003              		.cfi_def_cfa_offset 8
 3004              		.cfi_offset 4, -8
 3005              		.cfi_offset 14, -4
 3006 0016 0446     		mov	r4, r0
1634:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 3007              		.loc 1 1634 0
 3008 0018 FFF7FEFF 		bl	vQueueUnregisterQueue
 3009              	.LVL293:
1642:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 3010              		.loc 1 1642 0
 3011 001c 2046     		mov	r0, r4
 3012 001e FFF7FEFF 		bl	vPortFree
 3013              	.LVL294:
1664:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 3014              		.loc 1 1664 0
 3015 0022 10BD     		pop	{r4, pc}
 3016              		.cfi_endproc
 3017              	.LFE145:
 3019              		.section	.text.vQueueWaitForMessageRestricted,"ax",%progbits
 3020              		.align	1
 3021              		.global	vQueueWaitForMessageRestricted
 3022              		.syntax unified
 3023              		.thumb
 3024              		.thumb_func
 3025              		.fpu fpv4-sp-d16
 3027              	vQueueWaitForMessageRestricted:
 3028              	.LFB159:
2352:../Middlewares/FreeRTOS//Source/queue.c **** 
2353:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2354:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
2355:../Middlewares/FreeRTOS//Source/queue.c **** 
2356:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_TIMERS == 1 )
2357:../Middlewares/FreeRTOS//Source/queue.c **** 
2358:../Middlewares/FreeRTOS//Source/queue.c **** 	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType
2359:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 3029              		.loc 1 2359 0
 3030              		.cfi_startproc
 3031              		@ args = 0, pretend = 0, frame = 0
 3032              		@ frame_needed = 0, uses_anonymous_args = 0
 3033              	.LVL295:
 3034 0000 70B5     		push	{r4, r5, r6, lr}
 3035              	.LCFI34:
 3036              		.cfi_def_cfa_offset 16
 3037              		.cfi_offset 4, -16
 3038              		.cfi_offset 5, -12
 3039              		.cfi_offset 6, -8
 3040              		.cfi_offset 14, -4
 3041 0002 0446     		mov	r4, r0
 3042 0004 0D46     		mov	r5, r1
 3043 0006 1646     		mov	r6, r2
 3044              	.LVL296:
2360:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2361:../Middlewares/FreeRTOS//Source/queue.c **** 
2362:../Middlewares/FreeRTOS//Source/queue.c **** 		/* This function should not be called by application code hence the
2363:../Middlewares/FreeRTOS//Source/queue.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 106


2364:../Middlewares/FreeRTOS//Source/queue.c **** 		designed for use by kernel code, and has special calling requirements.
2365:../Middlewares/FreeRTOS//Source/queue.c **** 		It can result in vListInsert() being called on a list that can only
2366:../Middlewares/FreeRTOS//Source/queue.c **** 		possibly ever have one item in it, so the list will be fast, but even
2367:../Middlewares/FreeRTOS//Source/queue.c **** 		so it should be called with the scheduler locked and not from a critical
2368:../Middlewares/FreeRTOS//Source/queue.c **** 		section. */
2369:../Middlewares/FreeRTOS//Source/queue.c **** 
2370:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Only do anything if there are no messages in the queue.  This function
2371:../Middlewares/FreeRTOS//Source/queue.c **** 		will not actually cause the task to block, just place it on a blocked
2372:../Middlewares/FreeRTOS//Source/queue.c **** 		list.  It will not block until the scheduler is unlocked - at which
2373:../Middlewares/FreeRTOS//Source/queue.c **** 		time a yield will be performed.  If an item is added to the queue while
2374:../Middlewares/FreeRTOS//Source/queue.c **** 		the queue is locked, and the calling task blocks on the queue, then the
2375:../Middlewares/FreeRTOS//Source/queue.c **** 		calling task will be immediately unblocked when the queue is unlocked. */
2376:../Middlewares/FreeRTOS//Source/queue.c **** 		prvLockQueue( pxQueue );
 3045              		.loc 1 2376 0
 3046 0008 FFF7FEFF 		bl	vPortEnterCritical
 3047              	.LVL297:
 3048 000c 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 3049 0010 5BB2     		sxtb	r3, r3
 3050 0012 B3F1FF3F 		cmp	r3, #-1
 3051 0016 0DD0     		beq	.L288
 3052              	.L284:
 3053              		.loc 1 2376 0 is_stmt 0 discriminator 3
 3054 0018 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 3055 001c 5BB2     		sxtb	r3, r3
 3056 001e B3F1FF3F 		cmp	r3, #-1
 3057 0022 0BD0     		beq	.L289
 3058              	.L285:
 3059              		.loc 1 2376 0 discriminator 6
 3060 0024 FFF7FEFF 		bl	vPortExitCritical
 3061              	.LVL298:
2377:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3062              		.loc 1 2377 0 is_stmt 1 discriminator 6
 3063 0028 A36B     		ldr	r3, [r4, #56]
 3064 002a 5BB1     		cbz	r3, .L290
 3065              	.L286:
2378:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2379:../Middlewares/FreeRTOS//Source/queue.c **** 			/* There is nothing in the queue, block for the specified period. */
2380:../Middlewares/FreeRTOS//Source/queue.c **** 			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefi
2381:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2382:../Middlewares/FreeRTOS//Source/queue.c **** 		else
2383:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2384:../Middlewares/FreeRTOS//Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2385:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2386:../Middlewares/FreeRTOS//Source/queue.c **** 		prvUnlockQueue( pxQueue );
 3066              		.loc 1 2386 0
 3067 002c 2046     		mov	r0, r4
 3068 002e FFF7FEFF 		bl	prvUnlockQueue
 3069              	.LVL299:
2387:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 3070              		.loc 1 2387 0
 3071 0032 70BD     		pop	{r4, r5, r6, pc}
 3072              	.LVL300:
 3073              	.L288:
2376:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3074              		.loc 1 2376 0 discriminator 1
 3075 0034 0023     		movs	r3, #0
 3076 0036 84F84430 		strb	r3, [r4, #68]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 107


 3077 003a EDE7     		b	.L284
 3078              	.L289:
2376:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3079              		.loc 1 2376 0 is_stmt 0 discriminator 4
 3080 003c 0023     		movs	r3, #0
 3081 003e 84F84530 		strb	r3, [r4, #69]
 3082 0042 EFE7     		b	.L285
 3083              	.L290:
2380:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 3084              		.loc 1 2380 0 is_stmt 1
 3085 0044 3246     		mov	r2, r6
 3086 0046 2946     		mov	r1, r5
 3087 0048 04F12400 		add	r0, r4, #36
 3088 004c FFF7FEFF 		bl	vTaskPlaceOnEventListRestricted
 3089              	.LVL301:
 3090 0050 ECE7     		b	.L286
 3091              		.cfi_endproc
 3092              	.LFE159:
 3094              		.comm	xQueueRegistry,64,4
 3095              		.text
 3096              	.Letext0:
 3097              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 3098              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 3099              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 3100              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 3101              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 3102              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 3103              		.file 9 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 3104              		.file 10 "../Libraries/CMSIS/CM4/CoreSupport/core_cm4.h"
 3105              		.file 11 "../Libraries/CMSIS/CM4/DeviceSupport/system_at32f4xx.h"
 3106              		.file 12 "Inc/FreeRTOSConfig.h"
 3107              		.file 13 "../Middlewares/FreeRTOS//Source/include/list.h"
 3108              		.file 14 "../Middlewares/FreeRTOS//Source/include/task.h"
 3109              		.file 15 "../Middlewares/FreeRTOS//Source/include/queue.h"
 3110              		.file 16 "../Middlewares/FreeRTOS//Source/include/portable.h"
 3111              		.file 17 "<built-in>"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 108


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:17     .text.prvIsQueueFull:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:23     .text.prvIsQueueFull:0000000000000000 prvIsQueueFull
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:65     .text.prvIsQueueEmpty:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:71     .text.prvIsQueueEmpty:0000000000000000 prvIsQueueEmpty
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:110    .text.prvCopyDataToQueue:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:116    .text.prvCopyDataToQueue:0000000000000000 prvCopyDataToQueue
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:235    .text.prvCopyDataFromQueue:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:241    .text.prvCopyDataFromQueue:0000000000000000 prvCopyDataFromQueue
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:290    .text.prvUnlockQueue:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:296    .text.prvUnlockQueue:0000000000000000 prvUnlockQueue
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:402    .text.xQueueGenericReset:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:409    .text.xQueueGenericReset:0000000000000000 xQueueGenericReset
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:518    .text.xQueueGenericReset:0000000000000080 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:523    .text.prvInitialiseNewQueue:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:529    .text.prvInitialiseNewQueue:0000000000000000 prvInitialiseNewQueue
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:576    .text.xQueueGenericCreate:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:583    .text.xQueueGenericCreate:0000000000000000 xQueueGenericCreate
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:670    .text.xQueueCreateCountingSemaphore:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:677    .text.xQueueCreateCountingSemaphore:0000000000000000 xQueueCreateCountingSemaphore
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:754    .text.xQueueGenericSend:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:761    .text.xQueueGenericSend:0000000000000000 xQueueGenericSend
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:1085   .text.xQueueGenericSend:0000000000000178 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:1090   .text.prvInitialiseMutex:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:1096   .text.prvInitialiseMutex:0000000000000000 prvInitialiseMutex
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:1136   .text.xQueueCreateMutex:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:1143   .text.xQueueCreateMutex:0000000000000000 xQueueCreateMutex
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:1175   .text.xQueueGiveMutexRecursive:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:1182   .text.xQueueGiveMutexRecursive:0000000000000000 xQueueGiveMutexRecursive
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:1256   .text.xQueueGenericSendFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:1263   .text.xQueueGenericSendFromISR:0000000000000000 xQueueGenericSendFromISR
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:1461   .text.xQueueGiveFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:1468   .text.xQueueGiveFromISR:0000000000000000 xQueueGiveFromISR
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:1676   .text.xQueueGenericReceive:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:1683   .text.xQueueGenericReceive:0000000000000000 xQueueGenericReceive
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2040   .text.xQueueGenericReceive:00000000000001a0 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2045   .text.xQueueTakeMutexRecursive:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2052   .text.xQueueTakeMutexRecursive:0000000000000000 xQueueTakeMutexRecursive
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2130   .text.xQueueReceiveFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2137   .text.xQueueReceiveFromISR:0000000000000000 xQueueReceiveFromISR
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2308   .text.xQueuePeekFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2315   .text.xQueuePeekFromISR:0000000000000000 xQueuePeekFromISR
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2460   .text.uxQueueMessagesWaiting:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2467   .text.uxQueueMessagesWaiting:0000000000000000 uxQueueMessagesWaiting
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2518   .text.uxQueueSpacesAvailable:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2525   .text.uxQueueSpacesAvailable:0000000000000000 uxQueueSpacesAvailable
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2579   .text.uxQueueMessagesWaitingFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2586   .text.uxQueueMessagesWaitingFromISR:0000000000000000 uxQueueMessagesWaitingFromISR
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2625   .text.uxQueueGetQueueNumber:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2632   .text.uxQueueGetQueueNumber:0000000000000000 uxQueueGetQueueNumber
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2648   .text.vQueueSetQueueNumber:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2655   .text.vQueueSetQueueNumber:0000000000000000 vQueueSetQueueNumber
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2671   .text.ucQueueGetQueueType:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2678   .text.ucQueueGetQueueType:0000000000000000 ucQueueGetQueueType
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2694   .text.xQueueIsQueueEmptyFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2701   .text.xQueueIsQueueEmptyFromISR:0000000000000000 xQueueIsQueueEmptyFromISR
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s 			page 109


/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2748   .text.xQueueIsQueueFullFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2755   .text.xQueueIsQueueFullFromISR:0000000000000000 xQueueIsQueueFullFromISR
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2804   .text.vQueueAddToRegistry:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2811   .text.vQueueAddToRegistry:0000000000000000 vQueueAddToRegistry
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2851   .text.vQueueAddToRegistry:0000000000000024 $d
                            *COM*:0000000000000040 xQueueRegistry
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2856   .text.pcQueueGetName:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2863   .text.pcQueueGetName:0000000000000000 pcQueueGetName
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2905   .text.pcQueueGetName:0000000000000024 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2910   .text.vQueueUnregisterQueue:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2917   .text.vQueueUnregisterQueue:0000000000000000 vQueueUnregisterQueue
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2960   .text.vQueueUnregisterQueue:0000000000000028 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2965   .text.vQueueDelete:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:2972   .text.vQueueDelete:0000000000000000 vQueueDelete
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:3020   .text.vQueueWaitForMessageRestricted:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccmYLBCN.s:3027   .text.vQueueWaitForMessageRestricted:0000000000000000 vQueueWaitForMessageRestricted

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
vTaskMissedYield
xTaskRemoveFromEventList
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskSetTimeOutState
xTaskResumeAll
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskGetCurrentTaskHandle
vPortValidateInterruptPriority
pvTaskIncrementMutexHeldCount
vTaskPriorityInherit
vPortFree
vTaskPlaceOnEventListRestricted
