ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"queue.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text._ZL14prvIsQueueFullPK15QueueDefinition,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv4-sp-d16
  23              	_ZL14prvIsQueueFullPK15QueueDefinition:
  24              		.fnstart
  25              	.LFB161:
  26              		.file 1 "../Middlewares/FreeRTOS//Source/queue.c"
   1:../Middlewares/FreeRTOS//Source/queue.c **** /*
   2:../Middlewares/FreeRTOS//Source/queue.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/queue.c ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/queue.c **** 
   5:../Middlewares/FreeRTOS//Source/queue.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/queue.c **** 
   7:../Middlewares/FreeRTOS//Source/queue.c ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/queue.c **** 
   9:../Middlewares/FreeRTOS//Source/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/queue.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/queue.c **** 
  13:../Middlewares/FreeRTOS//Source/queue.c ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/queue.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Middlewares/FreeRTOS//Source/queue.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/queue.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/queue.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/queue.c ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/queue.c **** 
  20:../Middlewares/FreeRTOS//Source/queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/queue.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/queue.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/queue.c ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/queue.c **** 
  25:../Middlewares/FreeRTOS//Source/queue.c ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/queue.c ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/queue.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/queue.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/queue.c ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/queue.c ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/queue.c ****      *                                                                       *
  32:../Middlewares/FreeRTOS//Source/queue.c ****      *    Help yourself get started quickly while simultaneously helping     *
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 2


  33:../Middlewares/FreeRTOS//Source/queue.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Middlewares/FreeRTOS//Source/queue.c ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/queue.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/queue.c ****      *                                                                       *
  37:../Middlewares/FreeRTOS//Source/queue.c ****     ***************************************************************************
  38:../Middlewares/FreeRTOS//Source/queue.c **** 
  39:../Middlewares/FreeRTOS//Source/queue.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/queue.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/queue.c ****     defined configASSERT()?
  42:../Middlewares/FreeRTOS//Source/queue.c **** 
  43:../Middlewares/FreeRTOS//Source/queue.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Middlewares/FreeRTOS//Source/queue.c ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/queue.c ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/queue.c **** 
  47:../Middlewares/FreeRTOS//Source/queue.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/queue.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/queue.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Middlewares/FreeRTOS//Source/queue.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/queue.c **** 
  52:../Middlewares/FreeRTOS//Source/queue.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/queue.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/queue.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/queue.c **** 
  56:../Middlewares/FreeRTOS//Source/queue.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Middlewares/FreeRTOS//Source/queue.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/queue.c **** 
  59:../Middlewares/FreeRTOS//Source/queue.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/queue.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/queue.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/queue.c **** 
  63:../Middlewares/FreeRTOS//Source/queue.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/queue.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/queue.c ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/queue.c **** 
  67:../Middlewares/FreeRTOS//Source/queue.c ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/queue.c **** */
  69:../Middlewares/FreeRTOS//Source/queue.c **** 
  70:../Middlewares/FreeRTOS//Source/queue.c **** #include <stdlib.h>
  71:../Middlewares/FreeRTOS//Source/queue.c **** #include <string.h>
  72:../Middlewares/FreeRTOS//Source/queue.c **** 
  73:../Middlewares/FreeRTOS//Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:../Middlewares/FreeRTOS//Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:../Middlewares/FreeRTOS//Source/queue.c **** task.h is included from an application file. */
  76:../Middlewares/FreeRTOS//Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:../Middlewares/FreeRTOS//Source/queue.c **** 
  78:../Middlewares/FreeRTOS//Source/queue.c **** #include "FreeRTOS.h"
  79:../Middlewares/FreeRTOS//Source/queue.c **** #include "task.h"
  80:../Middlewares/FreeRTOS//Source/queue.c **** #include "queue.h"
  81:../Middlewares/FreeRTOS//Source/queue.c **** 
  82:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  83:../Middlewares/FreeRTOS//Source/queue.c **** 	#include "croutine.h"
  84:../Middlewares/FreeRTOS//Source/queue.c **** #endif
  85:../Middlewares/FreeRTOS//Source/queue.c **** 
  86:../Middlewares/FreeRTOS//Source/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  87:../Middlewares/FreeRTOS//Source/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  88:../Middlewares/FreeRTOS//Source/queue.c **** header files above, but not in this file, in order to generate the correct
  89:../Middlewares/FreeRTOS//Source/queue.c **** privileged Vs unprivileged linkage and placement. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 3


  90:../Middlewares/FreeRTOS//Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  91:../Middlewares/FreeRTOS//Source/queue.c **** 
  92:../Middlewares/FreeRTOS//Source/queue.c **** 
  93:../Middlewares/FreeRTOS//Source/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  94:../Middlewares/FreeRTOS//Source/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  95:../Middlewares/FreeRTOS//Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  96:../Middlewares/FreeRTOS//Source/queue.c **** 
  97:../Middlewares/FreeRTOS//Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  98:../Middlewares/FreeRTOS//Source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  99:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
 100:../Middlewares/FreeRTOS//Source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
 101:../Middlewares/FreeRTOS//Source/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
 102:../Middlewares/FreeRTOS//Source/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
 103:../Middlewares/FreeRTOS//Source/queue.c **** the code is maintained despite this dual use of two structure members.  An
 104:../Middlewares/FreeRTOS//Source/queue.c **** alternative implementation would be to use a union, but use of a union is
 105:../Middlewares/FreeRTOS//Source/queue.c **** against the coding standard (although an exception to the standard has been
 106:../Middlewares/FreeRTOS//Source/queue.c **** permitted where the dual use also significantly changes the type of the
 107:../Middlewares/FreeRTOS//Source/queue.c **** structure member). */
 108:../Middlewares/FreeRTOS//Source/queue.c **** #define pxMutexHolder					pcTail
 109:../Middlewares/FreeRTOS//Source/queue.c **** #define uxQueueType						pcHead
 110:../Middlewares/FreeRTOS//Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
 111:../Middlewares/FreeRTOS//Source/queue.c **** 
 112:../Middlewares/FreeRTOS//Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
 113:../Middlewares/FreeRTOS//Source/queue.c **** zero. */
 114:../Middlewares/FreeRTOS//Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
 115:../Middlewares/FreeRTOS//Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
 116:../Middlewares/FreeRTOS//Source/queue.c **** 
 117:../Middlewares/FreeRTOS//Source/queue.c **** #if( configUSE_PREEMPTION == 0 )
 118:../Middlewares/FreeRTOS//Source/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 119:../Middlewares/FreeRTOS//Source/queue.c **** 	performed just because a higher priority task has been woken. */
 120:../Middlewares/FreeRTOS//Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
 121:../Middlewares/FreeRTOS//Source/queue.c **** #else
 122:../Middlewares/FreeRTOS//Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 123:../Middlewares/FreeRTOS//Source/queue.c **** #endif
 124:../Middlewares/FreeRTOS//Source/queue.c **** 
 125:../Middlewares/FreeRTOS//Source/queue.c **** /*
 126:../Middlewares/FreeRTOS//Source/queue.c ****  * Definition of the queue used by the scheduler.
 127:../Middlewares/FreeRTOS//Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
 128:../Middlewares/FreeRTOS//Source/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
 129:../Middlewares/FreeRTOS//Source/queue.c ****  */
 130:../Middlewares/FreeRTOS//Source/queue.c **** typedef struct QueueDefinition
 131:../Middlewares/FreeRTOS//Source/queue.c **** {
 132:../Middlewares/FreeRTOS//Source/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 133:../Middlewares/FreeRTOS//Source/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
 134:../Middlewares/FreeRTOS//Source/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 135:../Middlewares/FreeRTOS//Source/queue.c **** 
 136:../Middlewares/FreeRTOS//Source/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
 137:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 138:../Middlewares/FreeRTOS//Source/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
 139:../Middlewares/FreeRTOS//Source/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
 140:../Middlewares/FreeRTOS//Source/queue.c **** 	} u;
 141:../Middlewares/FreeRTOS//Source/queue.c **** 
 142:../Middlewares/FreeRTOS//Source/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 143:../Middlewares/FreeRTOS//Source/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 144:../Middlewares/FreeRTOS//Source/queue.c **** 
 145:../Middlewares/FreeRTOS//Source/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 146:../Middlewares/FreeRTOS//Source/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 4


 147:../Middlewares/FreeRTOS//Source/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 148:../Middlewares/FreeRTOS//Source/queue.c **** 
 149:../Middlewares/FreeRTOS//Source/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 150:../Middlewares/FreeRTOS//Source/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 151:../Middlewares/FreeRTOS//Source/queue.c **** 
 152:../Middlewares/FreeRTOS//Source/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 153:../Middlewares/FreeRTOS//Source/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 154:../Middlewares/FreeRTOS//Source/queue.c **** 	#endif
 155:../Middlewares/FreeRTOS//Source/queue.c **** 
 156:../Middlewares/FreeRTOS//Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 157:../Middlewares/FreeRTOS//Source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 158:../Middlewares/FreeRTOS//Source/queue.c **** 	#endif
 159:../Middlewares/FreeRTOS//Source/queue.c **** 
 160:../Middlewares/FreeRTOS//Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 161:../Middlewares/FreeRTOS//Source/queue.c **** 		UBaseType_t uxQueueNumber;
 162:../Middlewares/FreeRTOS//Source/queue.c **** 		uint8_t ucQueueType;
 163:../Middlewares/FreeRTOS//Source/queue.c **** 	#endif
 164:../Middlewares/FreeRTOS//Source/queue.c **** 
 165:../Middlewares/FreeRTOS//Source/queue.c **** } xQUEUE;
 166:../Middlewares/FreeRTOS//Source/queue.c **** 
 167:../Middlewares/FreeRTOS//Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 168:../Middlewares/FreeRTOS//Source/queue.c **** name below to enable the use of older kernel aware debuggers. */
 169:../Middlewares/FreeRTOS//Source/queue.c **** typedef xQUEUE Queue_t;
 170:../Middlewares/FreeRTOS//Source/queue.c **** 
 171:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 172:../Middlewares/FreeRTOS//Source/queue.c **** 
 173:../Middlewares/FreeRTOS//Source/queue.c **** /*
 174:../Middlewares/FreeRTOS//Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 175:../Middlewares/FreeRTOS//Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 176:../Middlewares/FreeRTOS//Source/queue.c ****  */
 177:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 178:../Middlewares/FreeRTOS//Source/queue.c **** 
 179:../Middlewares/FreeRTOS//Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 180:../Middlewares/FreeRTOS//Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 181:../Middlewares/FreeRTOS//Source/queue.c **** 	more user friendly. */
 182:../Middlewares/FreeRTOS//Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 183:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 184:../Middlewares/FreeRTOS//Source/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 185:../Middlewares/FreeRTOS//Source/queue.c **** 		QueueHandle_t xHandle;
 186:../Middlewares/FreeRTOS//Source/queue.c **** 	} xQueueRegistryItem;
 187:../Middlewares/FreeRTOS//Source/queue.c **** 
 188:../Middlewares/FreeRTOS//Source/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 189:../Middlewares/FreeRTOS//Source/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 190:../Middlewares/FreeRTOS//Source/queue.c **** 	debuggers. */
 191:../Middlewares/FreeRTOS//Source/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 192:../Middlewares/FreeRTOS//Source/queue.c **** 
 193:../Middlewares/FreeRTOS//Source/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 194:../Middlewares/FreeRTOS//Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 195:../Middlewares/FreeRTOS//Source/queue.c **** 	array position being vacant. */
 196:../Middlewares/FreeRTOS//Source/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 197:../Middlewares/FreeRTOS//Source/queue.c **** 
 198:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 199:../Middlewares/FreeRTOS//Source/queue.c **** 
 200:../Middlewares/FreeRTOS//Source/queue.c **** /*
 201:../Middlewares/FreeRTOS//Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 202:../Middlewares/FreeRTOS//Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 203:../Middlewares/FreeRTOS//Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 5


 204:../Middlewares/FreeRTOS//Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 205:../Middlewares/FreeRTOS//Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 206:../Middlewares/FreeRTOS//Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 207:../Middlewares/FreeRTOS//Source/queue.c ****  */
 208:../Middlewares/FreeRTOS//Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 209:../Middlewares/FreeRTOS//Source/queue.c **** 
 210:../Middlewares/FreeRTOS//Source/queue.c **** /*
 211:../Middlewares/FreeRTOS//Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 212:../Middlewares/FreeRTOS//Source/queue.c ****  *
 213:../Middlewares/FreeRTOS//Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 214:../Middlewares/FreeRTOS//Source/queue.c ****  */
 215:../Middlewares/FreeRTOS//Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 216:../Middlewares/FreeRTOS//Source/queue.c **** 
 217:../Middlewares/FreeRTOS//Source/queue.c **** /*
 218:../Middlewares/FreeRTOS//Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 219:../Middlewares/FreeRTOS//Source/queue.c ****  *
 220:../Middlewares/FreeRTOS//Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 221:../Middlewares/FreeRTOS//Source/queue.c ****  */
 222:../Middlewares/FreeRTOS//Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 223:../Middlewares/FreeRTOS//Source/queue.c **** 
 224:../Middlewares/FreeRTOS//Source/queue.c **** /*
 225:../Middlewares/FreeRTOS//Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 226:../Middlewares/FreeRTOS//Source/queue.c ****  * back of the queue.
 227:../Middlewares/FreeRTOS//Source/queue.c ****  */
 228:../Middlewares/FreeRTOS//Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 229:../Middlewares/FreeRTOS//Source/queue.c **** 
 230:../Middlewares/FreeRTOS//Source/queue.c **** /*
 231:../Middlewares/FreeRTOS//Source/queue.c ****  * Copies an item out of a queue.
 232:../Middlewares/FreeRTOS//Source/queue.c ****  */
 233:../Middlewares/FreeRTOS//Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 234:../Middlewares/FreeRTOS//Source/queue.c **** 
 235:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 236:../Middlewares/FreeRTOS//Source/queue.c **** 	/*
 237:../Middlewares/FreeRTOS//Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 238:../Middlewares/FreeRTOS//Source/queue.c **** 	 * the queue set that the queue contains data.
 239:../Middlewares/FreeRTOS//Source/queue.c **** 	 */
 240:../Middlewares/FreeRTOS//Source/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 241:../Middlewares/FreeRTOS//Source/queue.c **** #endif
 242:../Middlewares/FreeRTOS//Source/queue.c **** 
 243:../Middlewares/FreeRTOS//Source/queue.c **** /*
 244:../Middlewares/FreeRTOS//Source/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 245:../Middlewares/FreeRTOS//Source/queue.c ****  * dynamically to fill in the structure's members.
 246:../Middlewares/FreeRTOS//Source/queue.c ****  */
 247:../Middlewares/FreeRTOS//Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 248:../Middlewares/FreeRTOS//Source/queue.c **** 
 249:../Middlewares/FreeRTOS//Source/queue.c **** /*
 250:../Middlewares/FreeRTOS//Source/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 251:../Middlewares/FreeRTOS//Source/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 252:../Middlewares/FreeRTOS//Source/queue.c ****  * as a mutex.
 253:../Middlewares/FreeRTOS//Source/queue.c ****  */
 254:../Middlewares/FreeRTOS//Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 255:../Middlewares/FreeRTOS//Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 256:../Middlewares/FreeRTOS//Source/queue.c **** #endif
 257:../Middlewares/FreeRTOS//Source/queue.c **** 
 258:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 259:../Middlewares/FreeRTOS//Source/queue.c **** 
 260:../Middlewares/FreeRTOS//Source/queue.c **** /*
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 6


 261:../Middlewares/FreeRTOS//Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 262:../Middlewares/FreeRTOS//Source/queue.c ****  * accessing the queue event lists.
 263:../Middlewares/FreeRTOS//Source/queue.c ****  */
 264:../Middlewares/FreeRTOS//Source/queue.c **** #define prvLockQueue( pxQueue )								\
 265:../Middlewares/FreeRTOS//Source/queue.c **** 	taskENTER_CRITICAL();									\
 266:../Middlewares/FreeRTOS//Source/queue.c **** 	{														\
 267:../Middlewares/FreeRTOS//Source/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 268:../Middlewares/FreeRTOS//Source/queue.c **** 		{													\
 269:../Middlewares/FreeRTOS//Source/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 270:../Middlewares/FreeRTOS//Source/queue.c **** 		}													\
 271:../Middlewares/FreeRTOS//Source/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 272:../Middlewares/FreeRTOS//Source/queue.c **** 		{													\
 273:../Middlewares/FreeRTOS//Source/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 274:../Middlewares/FreeRTOS//Source/queue.c **** 		}													\
 275:../Middlewares/FreeRTOS//Source/queue.c **** 	}														\
 276:../Middlewares/FreeRTOS//Source/queue.c **** 	taskEXIT_CRITICAL()
 277:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 278:../Middlewares/FreeRTOS//Source/queue.c **** 
 279:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 280:../Middlewares/FreeRTOS//Source/queue.c **** {
 281:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 282:../Middlewares/FreeRTOS//Source/queue.c **** 
 283:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue );
 284:../Middlewares/FreeRTOS//Source/queue.c **** 
 285:../Middlewares/FreeRTOS//Source/queue.c **** 	taskENTER_CRITICAL();
 286:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 287:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 288:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 289:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 290:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 291:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 292:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 293:../Middlewares/FreeRTOS//Source/queue.c **** 
 294:../Middlewares/FreeRTOS//Source/queue.c **** 		if( xNewQueue == pdFALSE )
 295:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 296:../Middlewares/FreeRTOS//Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 297:../Middlewares/FreeRTOS//Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 298:../Middlewares/FreeRTOS//Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 299:../Middlewares/FreeRTOS//Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 300:../Middlewares/FreeRTOS//Source/queue.c **** 			it will be possible to write to it. */
 301:../Middlewares/FreeRTOS//Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 302:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 303:../Middlewares/FreeRTOS//Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 304:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 305:../Middlewares/FreeRTOS//Source/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 306:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 307:../Middlewares/FreeRTOS//Source/queue.c **** 				else
 308:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 309:../Middlewares/FreeRTOS//Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 310:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 311:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 312:../Middlewares/FreeRTOS//Source/queue.c **** 			else
 313:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 314:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 315:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 316:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 317:../Middlewares/FreeRTOS//Source/queue.c **** 		else
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 7


 318:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 319:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 320:../Middlewares/FreeRTOS//Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 321:../Middlewares/FreeRTOS//Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 322:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 323:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 324:../Middlewares/FreeRTOS//Source/queue.c **** 	taskEXIT_CRITICAL();
 325:../Middlewares/FreeRTOS//Source/queue.c **** 
 326:../Middlewares/FreeRTOS//Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 327:../Middlewares/FreeRTOS//Source/queue.c **** 	versions. */
 328:../Middlewares/FreeRTOS//Source/queue.c **** 	return pdPASS;
 329:../Middlewares/FreeRTOS//Source/queue.c **** }
 330:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 331:../Middlewares/FreeRTOS//Source/queue.c **** 
 332:../Middlewares/FreeRTOS//Source/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 333:../Middlewares/FreeRTOS//Source/queue.c **** 
 334:../Middlewares/FreeRTOS//Source/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 335:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 336:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t *pxNewQueue;
 337:../Middlewares/FreeRTOS//Source/queue.c **** 
 338:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 339:../Middlewares/FreeRTOS//Source/queue.c **** 
 340:../Middlewares/FreeRTOS//Source/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 341:../Middlewares/FreeRTOS//Source/queue.c **** 		supplied. */
 342:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 343:../Middlewares/FreeRTOS//Source/queue.c **** 
 344:../Middlewares/FreeRTOS//Source/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 345:../Middlewares/FreeRTOS//Source/queue.c **** 		should not be provided if the item size is 0. */
 346:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 347:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 348:../Middlewares/FreeRTOS//Source/queue.c **** 
 349:../Middlewares/FreeRTOS//Source/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 350:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 351:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 352:../Middlewares/FreeRTOS//Source/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 353:../Middlewares/FreeRTOS//Source/queue.c **** 			the real queue and semaphore structures. */
 354:../Middlewares/FreeRTOS//Source/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 355:../Middlewares/FreeRTOS//Source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 356:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 357:../Middlewares/FreeRTOS//Source/queue.c **** 		#endif /* configASSERT_DEFINED */
 358:../Middlewares/FreeRTOS//Source/queue.c **** 
 359:../Middlewares/FreeRTOS//Source/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 360:../Middlewares/FreeRTOS//Source/queue.c **** 		The address of a statically allocated storage area was also passed in
 361:../Middlewares/FreeRTOS//Source/queue.c **** 		but is already set. */
 362:../Middlewares/FreeRTOS//Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 363:../Middlewares/FreeRTOS//Source/queue.c **** 
 364:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxNewQueue != NULL )
 365:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 366:../Middlewares/FreeRTOS//Source/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 368:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 369:../Middlewares/FreeRTOS//Source/queue.c **** 				note this queue was allocated statically in case the queue is
 370:../Middlewares/FreeRTOS//Source/queue.c **** 				later deleted. */
 371:../Middlewares/FreeRTOS//Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 372:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 373:../Middlewares/FreeRTOS//Source/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 374:../Middlewares/FreeRTOS//Source/queue.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 8


 375:../Middlewares/FreeRTOS//Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 376:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 377:../Middlewares/FreeRTOS//Source/queue.c **** 
 378:../Middlewares/FreeRTOS//Source/queue.c **** 		return pxNewQueue;
 379:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 380:../Middlewares/FreeRTOS//Source/queue.c **** 
 381:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 382:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 383:../Middlewares/FreeRTOS//Source/queue.c **** 
 384:../Middlewares/FreeRTOS//Source/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 385:../Middlewares/FreeRTOS//Source/queue.c **** 
 386:../Middlewares/FreeRTOS//Source/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 387:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 388:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t *pxNewQueue;
 389:../Middlewares/FreeRTOS//Source/queue.c **** 	size_t xQueueSizeInBytes;
 390:../Middlewares/FreeRTOS//Source/queue.c **** 	uint8_t *pucQueueStorage;
 391:../Middlewares/FreeRTOS//Source/queue.c **** 
 392:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 393:../Middlewares/FreeRTOS//Source/queue.c **** 
 394:../Middlewares/FreeRTOS//Source/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 395:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 396:../Middlewares/FreeRTOS//Source/queue.c **** 			/* There is not going to be a queue storage area. */
 397:../Middlewares/FreeRTOS//Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 398:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 399:../Middlewares/FreeRTOS//Source/queue.c **** 		else
 400:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 401:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 402:../Middlewares/FreeRTOS//Source/queue.c **** 			can be in the queue at any time. */
 403:../Middlewares/FreeRTOS//Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 404:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 405:../Middlewares/FreeRTOS//Source/queue.c **** 
 406:../Middlewares/FreeRTOS//Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 407:../Middlewares/FreeRTOS//Source/queue.c **** 
 408:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxNewQueue != NULL )
 409:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 410:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 411:../Middlewares/FreeRTOS//Source/queue.c **** 			storage area. */
 412:../Middlewares/FreeRTOS//Source/queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 413:../Middlewares/FreeRTOS//Source/queue.c **** 
 414:../Middlewares/FreeRTOS//Source/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 416:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Queues can be created either statically or dynamically, so
 417:../Middlewares/FreeRTOS//Source/queue.c **** 				note this task was created dynamically in case it is later
 418:../Middlewares/FreeRTOS//Source/queue.c **** 				deleted. */
 419:../Middlewares/FreeRTOS//Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 420:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 421:../Middlewares/FreeRTOS//Source/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 422:../Middlewares/FreeRTOS//Source/queue.c **** 
 423:../Middlewares/FreeRTOS//Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 424:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 425:../Middlewares/FreeRTOS//Source/queue.c **** 
 426:../Middlewares/FreeRTOS//Source/queue.c **** 		return pxNewQueue;
 427:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 428:../Middlewares/FreeRTOS//Source/queue.c **** 
 429:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 430:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 431:../Middlewares/FreeRTOS//Source/queue.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 9


 432:../Middlewares/FreeRTOS//Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 433:../Middlewares/FreeRTOS//Source/queue.c **** {
 434:../Middlewares/FreeRTOS//Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 435:../Middlewares/FreeRTOS//Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 436:../Middlewares/FreeRTOS//Source/queue.c **** 	( void ) ucQueueType;
 437:../Middlewares/FreeRTOS//Source/queue.c **** 
 438:../Middlewares/FreeRTOS//Source/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 439:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 440:../Middlewares/FreeRTOS//Source/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 441:../Middlewares/FreeRTOS//Source/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 442:../Middlewares/FreeRTOS//Source/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 443:../Middlewares/FreeRTOS//Source/queue.c **** 		value that is known to be within the memory map. */
 444:../Middlewares/FreeRTOS//Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 445:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 446:../Middlewares/FreeRTOS//Source/queue.c **** 	else
 447:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 448:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Set the head to the start of the queue storage area. */
 449:../Middlewares/FreeRTOS//Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 450:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 451:../Middlewares/FreeRTOS//Source/queue.c **** 
 452:../Middlewares/FreeRTOS//Source/queue.c **** 	/* Initialise the queue members as described where the queue type is
 453:../Middlewares/FreeRTOS//Source/queue.c **** 	defined. */
 454:../Middlewares/FreeRTOS//Source/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 455:../Middlewares/FreeRTOS//Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 456:../Middlewares/FreeRTOS//Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 457:../Middlewares/FreeRTOS//Source/queue.c **** 
 458:../Middlewares/FreeRTOS//Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 459:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 460:../Middlewares/FreeRTOS//Source/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 461:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 462:../Middlewares/FreeRTOS//Source/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 463:../Middlewares/FreeRTOS//Source/queue.c **** 
 464:../Middlewares/FreeRTOS//Source/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 465:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 466:../Middlewares/FreeRTOS//Source/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 467:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 468:../Middlewares/FreeRTOS//Source/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 469:../Middlewares/FreeRTOS//Source/queue.c **** 
 470:../Middlewares/FreeRTOS//Source/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 471:../Middlewares/FreeRTOS//Source/queue.c **** }
 472:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 473:../Middlewares/FreeRTOS//Source/queue.c **** 
 474:../Middlewares/FreeRTOS//Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 475:../Middlewares/FreeRTOS//Source/queue.c **** 
 476:../Middlewares/FreeRTOS//Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 477:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 478:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxNewQueue != NULL )
 479:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 480:../Middlewares/FreeRTOS//Source/queue.c **** 			/* The queue create function will set all the queue structure members
 481:../Middlewares/FreeRTOS//Source/queue.c **** 			correctly for a generic queue, but this function is creating a
 482:../Middlewares/FreeRTOS//Source/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 483:../Middlewares/FreeRTOS//Source/queue.c **** 			in particular the information required for priority inheritance. */
 484:../Middlewares/FreeRTOS//Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 485:../Middlewares/FreeRTOS//Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 486:../Middlewares/FreeRTOS//Source/queue.c **** 
 487:../Middlewares/FreeRTOS//Source/queue.c **** 			/* In case this is a recursive mutex. */
 488:../Middlewares/FreeRTOS//Source/queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 10


 489:../Middlewares/FreeRTOS//Source/queue.c **** 
 490:../Middlewares/FreeRTOS//Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 491:../Middlewares/FreeRTOS//Source/queue.c **** 
 492:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 493:../Middlewares/FreeRTOS//Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 494:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 495:../Middlewares/FreeRTOS//Source/queue.c **** 		else
 496:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 497:../Middlewares/FreeRTOS//Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 498:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 499:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 500:../Middlewares/FreeRTOS//Source/queue.c **** 
 501:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_MUTEXES */
 502:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 503:../Middlewares/FreeRTOS//Source/queue.c **** 
 504:../Middlewares/FreeRTOS//Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 505:../Middlewares/FreeRTOS//Source/queue.c **** 
 506:../Middlewares/FreeRTOS//Source/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 507:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 508:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t *pxNewQueue;
 509:../Middlewares/FreeRTOS//Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 510:../Middlewares/FreeRTOS//Source/queue.c **** 
 511:../Middlewares/FreeRTOS//Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 512:../Middlewares/FreeRTOS//Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 513:../Middlewares/FreeRTOS//Source/queue.c **** 
 514:../Middlewares/FreeRTOS//Source/queue.c **** 		return pxNewQueue;
 515:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 516:../Middlewares/FreeRTOS//Source/queue.c **** 
 517:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_MUTEXES */
 518:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 519:../Middlewares/FreeRTOS//Source/queue.c **** 
 520:../Middlewares/FreeRTOS//Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 521:../Middlewares/FreeRTOS//Source/queue.c **** 
 522:../Middlewares/FreeRTOS//Source/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 523:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 524:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t *pxNewQueue;
 525:../Middlewares/FreeRTOS//Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 526:../Middlewares/FreeRTOS//Source/queue.c **** 
 527:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 528:../Middlewares/FreeRTOS//Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 529:../Middlewares/FreeRTOS//Source/queue.c **** 		( void ) ucQueueType;
 530:../Middlewares/FreeRTOS//Source/queue.c **** 
 531:../Middlewares/FreeRTOS//Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 532:../Middlewares/FreeRTOS//Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 533:../Middlewares/FreeRTOS//Source/queue.c **** 
 534:../Middlewares/FreeRTOS//Source/queue.c **** 		return pxNewQueue;
 535:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 536:../Middlewares/FreeRTOS//Source/queue.c **** 
 537:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_MUTEXES */
 538:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 539:../Middlewares/FreeRTOS//Source/queue.c **** 
 540:../Middlewares/FreeRTOS//Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 541:../Middlewares/FreeRTOS//Source/queue.c **** 
 542:../Middlewares/FreeRTOS//Source/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 543:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 544:../Middlewares/FreeRTOS//Source/queue.c **** 	void *pxReturn;
 545:../Middlewares/FreeRTOS//Source/queue.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 11


 546:../Middlewares/FreeRTOS//Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 547:../Middlewares/FreeRTOS//Source/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 548:../Middlewares/FreeRTOS//Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 549:../Middlewares/FreeRTOS//Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 550:../Middlewares/FreeRTOS//Source/queue.c **** 		following critical section exiting and the function returning. */
 551:../Middlewares/FreeRTOS//Source/queue.c **** 		taskENTER_CRITICAL();
 552:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 553:../Middlewares/FreeRTOS//Source/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 554:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 555:../Middlewares/FreeRTOS//Source/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 556:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 557:../Middlewares/FreeRTOS//Source/queue.c **** 			else
 558:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 559:../Middlewares/FreeRTOS//Source/queue.c **** 				pxReturn = NULL;
 560:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 561:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 562:../Middlewares/FreeRTOS//Source/queue.c **** 		taskEXIT_CRITICAL();
 563:../Middlewares/FreeRTOS//Source/queue.c **** 
 564:../Middlewares/FreeRTOS//Source/queue.c **** 		return pxReturn;
 565:../Middlewares/FreeRTOS//Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 566:../Middlewares/FreeRTOS//Source/queue.c **** 
 567:../Middlewares/FreeRTOS//Source/queue.c **** #endif
 568:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 569:../Middlewares/FreeRTOS//Source/queue.c **** 
 570:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 571:../Middlewares/FreeRTOS//Source/queue.c **** 
 572:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 573:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 574:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xReturn;
 575:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 576:../Middlewares/FreeRTOS//Source/queue.c **** 
 577:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( pxMutex );
 578:../Middlewares/FreeRTOS//Source/queue.c **** 
 579:../Middlewares/FreeRTOS//Source/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 580:../Middlewares/FreeRTOS//Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 581:../Middlewares/FreeRTOS//Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 582:../Middlewares/FreeRTOS//Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 583:../Middlewares/FreeRTOS//Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 584:../Middlewares/FreeRTOS//Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 585:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 586:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 587:../Middlewares/FreeRTOS//Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 588:../Middlewares/FreeRTOS//Source/queue.c **** 
 589:../Middlewares/FreeRTOS//Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 590:../Middlewares/FreeRTOS//Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 591:../Middlewares/FreeRTOS//Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 592:../Middlewares/FreeRTOS//Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 593:../Middlewares/FreeRTOS//Source/queue.c **** 			uxRecursiveCallCount member. */
 594:../Middlewares/FreeRTOS//Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 595:../Middlewares/FreeRTOS//Source/queue.c **** 
 596:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Has the recursive call count unwound to 0? */
 597:../Middlewares/FreeRTOS//Source/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 598:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 599:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 600:../Middlewares/FreeRTOS//Source/queue.c **** 				task that might be waiting to access the mutex. */
 601:../Middlewares/FreeRTOS//Source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 602:../Middlewares/FreeRTOS//Source/queue.c **** 			}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 12


 603:../Middlewares/FreeRTOS//Source/queue.c **** 			else
 604:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 605:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 606:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 607:../Middlewares/FreeRTOS//Source/queue.c **** 
 608:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdPASS;
 609:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 610:../Middlewares/FreeRTOS//Source/queue.c **** 		else
 611:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 612:../Middlewares/FreeRTOS//Source/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 613:../Middlewares/FreeRTOS//Source/queue.c **** 			holder. */
 614:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdFAIL;
 615:../Middlewares/FreeRTOS//Source/queue.c **** 
 616:../Middlewares/FreeRTOS//Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 617:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 618:../Middlewares/FreeRTOS//Source/queue.c **** 
 619:../Middlewares/FreeRTOS//Source/queue.c **** 		return xReturn;
 620:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 621:../Middlewares/FreeRTOS//Source/queue.c **** 
 622:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 623:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 624:../Middlewares/FreeRTOS//Source/queue.c **** 
 625:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 626:../Middlewares/FreeRTOS//Source/queue.c **** 
 627:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 628:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 629:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xReturn;
 630:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 631:../Middlewares/FreeRTOS//Source/queue.c **** 
 632:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( pxMutex );
 633:../Middlewares/FreeRTOS//Source/queue.c **** 
 634:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 635:../Middlewares/FreeRTOS//Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 636:../Middlewares/FreeRTOS//Source/queue.c **** 
 637:../Middlewares/FreeRTOS//Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 638:../Middlewares/FreeRTOS//Source/queue.c **** 
 639:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 640:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 641:../Middlewares/FreeRTOS//Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 642:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdPASS;
 643:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 644:../Middlewares/FreeRTOS//Source/queue.c **** 		else
 645:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 646:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 647:../Middlewares/FreeRTOS//Source/queue.c **** 
 648:../Middlewares/FreeRTOS//Source/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 649:../Middlewares/FreeRTOS//Source/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 650:../Middlewares/FreeRTOS//Source/queue.c **** 			before reaching here. */
 651:../Middlewares/FreeRTOS//Source/queue.c **** 			if( xReturn != pdFAIL )
 652:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 653:../Middlewares/FreeRTOS//Source/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 654:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 655:../Middlewares/FreeRTOS//Source/queue.c **** 			else
 656:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 657:../Middlewares/FreeRTOS//Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 658:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 659:../Middlewares/FreeRTOS//Source/queue.c **** 		}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 13


 660:../Middlewares/FreeRTOS//Source/queue.c **** 
 661:../Middlewares/FreeRTOS//Source/queue.c **** 		return xReturn;
 662:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 663:../Middlewares/FreeRTOS//Source/queue.c **** 
 664:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 665:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 666:../Middlewares/FreeRTOS//Source/queue.c **** 
 667:../Middlewares/FreeRTOS//Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 668:../Middlewares/FreeRTOS//Source/queue.c **** 
 669:../Middlewares/FreeRTOS//Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 670:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 671:../Middlewares/FreeRTOS//Source/queue.c **** 	QueueHandle_t xHandle;
 672:../Middlewares/FreeRTOS//Source/queue.c **** 
 673:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 674:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 675:../Middlewares/FreeRTOS//Source/queue.c **** 
 676:../Middlewares/FreeRTOS//Source/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 677:../Middlewares/FreeRTOS//Source/queue.c **** 
 678:../Middlewares/FreeRTOS//Source/queue.c **** 		if( xHandle != NULL )
 679:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 680:../Middlewares/FreeRTOS//Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 681:../Middlewares/FreeRTOS//Source/queue.c **** 
 682:../Middlewares/FreeRTOS//Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 683:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 684:../Middlewares/FreeRTOS//Source/queue.c **** 		else
 685:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 686:../Middlewares/FreeRTOS//Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 687:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 688:../Middlewares/FreeRTOS//Source/queue.c **** 
 689:../Middlewares/FreeRTOS//Source/queue.c **** 		return xHandle;
 690:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 691:../Middlewares/FreeRTOS//Source/queue.c **** 
 692:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 693:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 694:../Middlewares/FreeRTOS//Source/queue.c **** 
 695:../Middlewares/FreeRTOS//Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 696:../Middlewares/FreeRTOS//Source/queue.c **** 
 697:../Middlewares/FreeRTOS//Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 698:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 699:../Middlewares/FreeRTOS//Source/queue.c **** 	QueueHandle_t xHandle;
 700:../Middlewares/FreeRTOS//Source/queue.c **** 
 701:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 702:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 703:../Middlewares/FreeRTOS//Source/queue.c **** 
 704:../Middlewares/FreeRTOS//Source/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 705:../Middlewares/FreeRTOS//Source/queue.c **** 
 706:../Middlewares/FreeRTOS//Source/queue.c **** 		if( xHandle != NULL )
 707:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 708:../Middlewares/FreeRTOS//Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 709:../Middlewares/FreeRTOS//Source/queue.c **** 
 710:../Middlewares/FreeRTOS//Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 711:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 712:../Middlewares/FreeRTOS//Source/queue.c **** 		else
 713:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 714:../Middlewares/FreeRTOS//Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 715:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 716:../Middlewares/FreeRTOS//Source/queue.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 14


 717:../Middlewares/FreeRTOS//Source/queue.c **** 		return xHandle;
 718:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 719:../Middlewares/FreeRTOS//Source/queue.c **** 
 720:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 721:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 722:../Middlewares/FreeRTOS//Source/queue.c **** 
 723:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 724:../Middlewares/FreeRTOS//Source/queue.c **** {
 725:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 726:../Middlewares/FreeRTOS//Source/queue.c **** TimeOut_t xTimeOut;
 727:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 728:../Middlewares/FreeRTOS//Source/queue.c **** 
 729:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue );
 730:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 731:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 732:../Middlewares/FreeRTOS//Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 733:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 734:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 735:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 736:../Middlewares/FreeRTOS//Source/queue.c **** 	#endif
 737:../Middlewares/FreeRTOS//Source/queue.c **** 
 738:../Middlewares/FreeRTOS//Source/queue.c **** 
 739:../Middlewares/FreeRTOS//Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 740:../Middlewares/FreeRTOS//Source/queue.c **** 	statements within the function itself.  This is done in the interest
 741:../Middlewares/FreeRTOS//Source/queue.c **** 	of execution time efficiency. */
 742:../Middlewares/FreeRTOS//Source/queue.c **** 	for( ;; )
 743:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 744:../Middlewares/FreeRTOS//Source/queue.c **** 		taskENTER_CRITICAL();
 745:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 746:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 747:../Middlewares/FreeRTOS//Source/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 748:../Middlewares/FreeRTOS//Source/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 749:../Middlewares/FreeRTOS//Source/queue.c **** 			queue is full. */
 750:../Middlewares/FreeRTOS//Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 751:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 752:../Middlewares/FreeRTOS//Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 753:../Middlewares/FreeRTOS//Source/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 754:../Middlewares/FreeRTOS//Source/queue.c **** 
 755:../Middlewares/FreeRTOS//Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 756:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 757:../Middlewares/FreeRTOS//Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 758:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 759:../Middlewares/FreeRTOS//Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 760:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 761:../Middlewares/FreeRTOS//Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 762:../Middlewares/FreeRTOS//Source/queue.c **** 							to the queue set caused a higher priority task to
 763:../Middlewares/FreeRTOS//Source/queue.c **** 							unblock. A context switch is required. */
 764:../Middlewares/FreeRTOS//Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 765:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 766:../Middlewares/FreeRTOS//Source/queue.c **** 						else
 767:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 768:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 769:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 770:../Middlewares/FreeRTOS//Source/queue.c **** 					}
 771:../Middlewares/FreeRTOS//Source/queue.c **** 					else
 772:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 773:../Middlewares/FreeRTOS//Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 15


 774:../Middlewares/FreeRTOS//Source/queue.c **** 						queue then unblock it now. */
 775:../Middlewares/FreeRTOS//Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 776:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 777:../Middlewares/FreeRTOS//Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 778:../Middlewares/FreeRTOS//Source/queue.c **** 							{
 779:../Middlewares/FreeRTOS//Source/queue.c **** 								/* The unblocked task has a priority higher than
 780:../Middlewares/FreeRTOS//Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 781:../Middlewares/FreeRTOS//Source/queue.c **** 								do this from within the critical section - the
 782:../Middlewares/FreeRTOS//Source/queue.c **** 								kernel takes care of that. */
 783:../Middlewares/FreeRTOS//Source/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 784:../Middlewares/FreeRTOS//Source/queue.c **** 							}
 785:../Middlewares/FreeRTOS//Source/queue.c **** 							else
 786:../Middlewares/FreeRTOS//Source/queue.c **** 							{
 787:../Middlewares/FreeRTOS//Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 788:../Middlewares/FreeRTOS//Source/queue.c **** 							}
 789:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 790:../Middlewares/FreeRTOS//Source/queue.c **** 						else if( xYieldRequired != pdFALSE )
 791:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 792:../Middlewares/FreeRTOS//Source/queue.c **** 							/* This path is a special case that will only get
 793:../Middlewares/FreeRTOS//Source/queue.c **** 							executed if the task was holding multiple mutexes
 794:../Middlewares/FreeRTOS//Source/queue.c **** 							and the mutexes were given back in an order that is
 795:../Middlewares/FreeRTOS//Source/queue.c **** 							different to that in which they were taken. */
 796:../Middlewares/FreeRTOS//Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 797:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 798:../Middlewares/FreeRTOS//Source/queue.c **** 						else
 799:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 800:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 801:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 802:../Middlewares/FreeRTOS//Source/queue.c **** 					}
 803:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 804:../Middlewares/FreeRTOS//Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 805:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 806:../Middlewares/FreeRTOS//Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 807:../Middlewares/FreeRTOS//Source/queue.c **** 					queue then unblock it now. */
 808:../Middlewares/FreeRTOS//Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 809:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 810:../Middlewares/FreeRTOS//Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 811:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 812:../Middlewares/FreeRTOS//Source/queue.c **** 							/* The unblocked task has a priority higher than
 813:../Middlewares/FreeRTOS//Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 814:../Middlewares/FreeRTOS//Source/queue.c **** 							this from within the critical section - the kernel
 815:../Middlewares/FreeRTOS//Source/queue.c **** 							takes care of that. */
 816:../Middlewares/FreeRTOS//Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 817:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 818:../Middlewares/FreeRTOS//Source/queue.c **** 						else
 819:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 820:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 821:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 822:../Middlewares/FreeRTOS//Source/queue.c **** 					}
 823:../Middlewares/FreeRTOS//Source/queue.c **** 					else if( xYieldRequired != pdFALSE )
 824:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 825:../Middlewares/FreeRTOS//Source/queue.c **** 						/* This path is a special case that will only get
 826:../Middlewares/FreeRTOS//Source/queue.c **** 						executed if the task was holding multiple mutexes and
 827:../Middlewares/FreeRTOS//Source/queue.c **** 						the mutexes were given back in an order that is
 828:../Middlewares/FreeRTOS//Source/queue.c **** 						different to that in which they were taken. */
 829:../Middlewares/FreeRTOS//Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 830:../Middlewares/FreeRTOS//Source/queue.c **** 					}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 16


 831:../Middlewares/FreeRTOS//Source/queue.c **** 					else
 832:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 833:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 834:../Middlewares/FreeRTOS//Source/queue.c **** 					}
 835:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 836:../Middlewares/FreeRTOS//Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 837:../Middlewares/FreeRTOS//Source/queue.c **** 
 838:../Middlewares/FreeRTOS//Source/queue.c **** 				taskEXIT_CRITICAL();
 839:../Middlewares/FreeRTOS//Source/queue.c **** 				return pdPASS;
 840:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 841:../Middlewares/FreeRTOS//Source/queue.c **** 			else
 842:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 843:../Middlewares/FreeRTOS//Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 844:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 845:../Middlewares/FreeRTOS//Source/queue.c **** 					/* The queue was full and no block time is specified (or
 846:../Middlewares/FreeRTOS//Source/queue.c **** 					the block time has expired) so leave now. */
 847:../Middlewares/FreeRTOS//Source/queue.c **** 					taskEXIT_CRITICAL();
 848:../Middlewares/FreeRTOS//Source/queue.c **** 
 849:../Middlewares/FreeRTOS//Source/queue.c **** 					/* Return to the original privilege level before exiting
 850:../Middlewares/FreeRTOS//Source/queue.c **** 					the function. */
 851:../Middlewares/FreeRTOS//Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 852:../Middlewares/FreeRTOS//Source/queue.c **** 					return errQUEUE_FULL;
 853:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 854:../Middlewares/FreeRTOS//Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 855:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 856:../Middlewares/FreeRTOS//Source/queue.c **** 					/* The queue was full and a block time was specified so
 857:../Middlewares/FreeRTOS//Source/queue.c **** 					configure the timeout structure. */
 858:../Middlewares/FreeRTOS//Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 859:../Middlewares/FreeRTOS//Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 860:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 861:../Middlewares/FreeRTOS//Source/queue.c **** 				else
 862:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 863:../Middlewares/FreeRTOS//Source/queue.c **** 					/* Entry time was already set. */
 864:../Middlewares/FreeRTOS//Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 865:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 866:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 867:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 868:../Middlewares/FreeRTOS//Source/queue.c **** 		taskEXIT_CRITICAL();
 869:../Middlewares/FreeRTOS//Source/queue.c **** 
 870:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 871:../Middlewares/FreeRTOS//Source/queue.c **** 		now the critical section has been exited. */
 872:../Middlewares/FreeRTOS//Source/queue.c **** 
 873:../Middlewares/FreeRTOS//Source/queue.c **** 		vTaskSuspendAll();
 874:../Middlewares/FreeRTOS//Source/queue.c **** 		prvLockQueue( pxQueue );
 875:../Middlewares/FreeRTOS//Source/queue.c **** 
 876:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 877:../Middlewares/FreeRTOS//Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 878:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 879:../Middlewares/FreeRTOS//Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 880:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 881:../Middlewares/FreeRTOS//Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 882:../Middlewares/FreeRTOS//Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 883:../Middlewares/FreeRTOS//Source/queue.c **** 
 884:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 885:../Middlewares/FreeRTOS//Source/queue.c **** 				event list.  It is possible	that interrupts occurring now
 886:../Middlewares/FreeRTOS//Source/queue.c **** 				remove this task from the event	list again - but as the
 887:../Middlewares/FreeRTOS//Source/queue.c **** 				scheduler is suspended the task will go onto the pending
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 17


 888:../Middlewares/FreeRTOS//Source/queue.c **** 				ready last instead of the actual ready list. */
 889:../Middlewares/FreeRTOS//Source/queue.c **** 				prvUnlockQueue( pxQueue );
 890:../Middlewares/FreeRTOS//Source/queue.c **** 
 891:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 892:../Middlewares/FreeRTOS//Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 893:../Middlewares/FreeRTOS//Source/queue.c **** 				task is already in a ready list before it yields - in which
 894:../Middlewares/FreeRTOS//Source/queue.c **** 				case the yield will not cause a context switch unless there
 895:../Middlewares/FreeRTOS//Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 896:../Middlewares/FreeRTOS//Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 897:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 898:../Middlewares/FreeRTOS//Source/queue.c **** 					portYIELD_WITHIN_API();
 899:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 900:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 901:../Middlewares/FreeRTOS//Source/queue.c **** 			else
 902:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 903:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Try again. */
 904:../Middlewares/FreeRTOS//Source/queue.c **** 				prvUnlockQueue( pxQueue );
 905:../Middlewares/FreeRTOS//Source/queue.c **** 				( void ) xTaskResumeAll();
 906:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 907:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 908:../Middlewares/FreeRTOS//Source/queue.c **** 		else
 909:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 910:../Middlewares/FreeRTOS//Source/queue.c **** 			/* The timeout has expired. */
 911:../Middlewares/FreeRTOS//Source/queue.c **** 			prvUnlockQueue( pxQueue );
 912:../Middlewares/FreeRTOS//Source/queue.c **** 			( void ) xTaskResumeAll();
 913:../Middlewares/FreeRTOS//Source/queue.c **** 
 914:../Middlewares/FreeRTOS//Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 915:../Middlewares/FreeRTOS//Source/queue.c **** 			return errQUEUE_FULL;
 916:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 917:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 918:../Middlewares/FreeRTOS//Source/queue.c **** }
 919:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 920:../Middlewares/FreeRTOS//Source/queue.c **** 
 921:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 922:../Middlewares/FreeRTOS//Source/queue.c **** {
 923:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
 924:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
 925:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 926:../Middlewares/FreeRTOS//Source/queue.c **** 
 927:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue );
 928:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 929:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 930:../Middlewares/FreeRTOS//Source/queue.c **** 
 931:../Middlewares/FreeRTOS//Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 932:../Middlewares/FreeRTOS//Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 933:../Middlewares/FreeRTOS//Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 934:../Middlewares/FreeRTOS//Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 935:../Middlewares/FreeRTOS//Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 936:../Middlewares/FreeRTOS//Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 937:../Middlewares/FreeRTOS//Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 938:../Middlewares/FreeRTOS//Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
 939:../Middlewares/FreeRTOS//Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 940:../Middlewares/FreeRTOS//Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 941:../Middlewares/FreeRTOS//Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 942:../Middlewares/FreeRTOS//Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 943:../Middlewares/FreeRTOS//Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 944:../Middlewares/FreeRTOS//Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 18


 945:../Middlewares/FreeRTOS//Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 946:../Middlewares/FreeRTOS//Source/queue.c **** 
 947:../Middlewares/FreeRTOS//Source/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 948:../Middlewares/FreeRTOS//Source/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 949:../Middlewares/FreeRTOS//Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 950:../Middlewares/FreeRTOS//Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 951:../Middlewares/FreeRTOS//Source/queue.c **** 	post). */
 952:../Middlewares/FreeRTOS//Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 953:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 954:../Middlewares/FreeRTOS//Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 955:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 956:../Middlewares/FreeRTOS//Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 957:../Middlewares/FreeRTOS//Source/queue.c **** 
 958:../Middlewares/FreeRTOS//Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 959:../Middlewares/FreeRTOS//Source/queue.c **** 
 960:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 961:../Middlewares/FreeRTOS//Source/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 962:../Middlewares/FreeRTOS//Source/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 963:../Middlewares/FreeRTOS//Source/queue.c **** 			called here even though the disinherit function does not check if
 964:../Middlewares/FreeRTOS//Source/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 965:../Middlewares/FreeRTOS//Source/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 966:../Middlewares/FreeRTOS//Source/queue.c **** 
 967:../Middlewares/FreeRTOS//Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 968:../Middlewares/FreeRTOS//Source/queue.c **** 			be done when the queue is unlocked later. */
 969:../Middlewares/FreeRTOS//Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 970:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 971:../Middlewares/FreeRTOS//Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 972:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 973:../Middlewares/FreeRTOS//Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 974:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 975:../Middlewares/FreeRTOS//Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 976:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 977:../Middlewares/FreeRTOS//Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 978:../Middlewares/FreeRTOS//Source/queue.c **** 							to the queue set caused a higher priority task to
 979:../Middlewares/FreeRTOS//Source/queue.c **** 							unblock.  A context switch is required. */
 980:../Middlewares/FreeRTOS//Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 981:../Middlewares/FreeRTOS//Source/queue.c **** 							{
 982:../Middlewares/FreeRTOS//Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 983:../Middlewares/FreeRTOS//Source/queue.c **** 							}
 984:../Middlewares/FreeRTOS//Source/queue.c **** 							else
 985:../Middlewares/FreeRTOS//Source/queue.c **** 							{
 986:../Middlewares/FreeRTOS//Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 987:../Middlewares/FreeRTOS//Source/queue.c **** 							}
 988:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 989:../Middlewares/FreeRTOS//Source/queue.c **** 						else
 990:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 991:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 992:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 993:../Middlewares/FreeRTOS//Source/queue.c **** 					}
 994:../Middlewares/FreeRTOS//Source/queue.c **** 					else
 995:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 996:../Middlewares/FreeRTOS//Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 997:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 998:../Middlewares/FreeRTOS//Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 999:../Middlewares/FreeRTOS//Source/queue.c **** 							{
1000:../Middlewares/FreeRTOS//Source/queue.c **** 								/* The task waiting has a higher priority so
1001:../Middlewares/FreeRTOS//Source/queue.c **** 								record that a context switch is required. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 19


1002:../Middlewares/FreeRTOS//Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1003:../Middlewares/FreeRTOS//Source/queue.c **** 								{
1004:../Middlewares/FreeRTOS//Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1005:../Middlewares/FreeRTOS//Source/queue.c **** 								}
1006:../Middlewares/FreeRTOS//Source/queue.c **** 								else
1007:../Middlewares/FreeRTOS//Source/queue.c **** 								{
1008:../Middlewares/FreeRTOS//Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1009:../Middlewares/FreeRTOS//Source/queue.c **** 								}
1010:../Middlewares/FreeRTOS//Source/queue.c **** 							}
1011:../Middlewares/FreeRTOS//Source/queue.c **** 							else
1012:../Middlewares/FreeRTOS//Source/queue.c **** 							{
1013:../Middlewares/FreeRTOS//Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1014:../Middlewares/FreeRTOS//Source/queue.c **** 							}
1015:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1016:../Middlewares/FreeRTOS//Source/queue.c **** 						else
1017:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1018:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1019:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1020:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1021:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1022:../Middlewares/FreeRTOS//Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1023:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1024:../Middlewares/FreeRTOS//Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1025:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1026:../Middlewares/FreeRTOS//Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1027:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1028:../Middlewares/FreeRTOS//Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1029:../Middlewares/FreeRTOS//Source/queue.c **** 							context	switch is required. */
1030:../Middlewares/FreeRTOS//Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1031:../Middlewares/FreeRTOS//Source/queue.c **** 							{
1032:../Middlewares/FreeRTOS//Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1033:../Middlewares/FreeRTOS//Source/queue.c **** 							}
1034:../Middlewares/FreeRTOS//Source/queue.c **** 							else
1035:../Middlewares/FreeRTOS//Source/queue.c **** 							{
1036:../Middlewares/FreeRTOS//Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1037:../Middlewares/FreeRTOS//Source/queue.c **** 							}
1038:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1039:../Middlewares/FreeRTOS//Source/queue.c **** 						else
1040:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1041:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1042:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1043:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1044:../Middlewares/FreeRTOS//Source/queue.c **** 					else
1045:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1046:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1047:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1048:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1049:../Middlewares/FreeRTOS//Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1050:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1051:../Middlewares/FreeRTOS//Source/queue.c **** 			else
1052:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1053:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1054:../Middlewares/FreeRTOS//Source/queue.c **** 				knows that data was posted while it was locked. */
1055:../Middlewares/FreeRTOS//Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1056:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1057:../Middlewares/FreeRTOS//Source/queue.c **** 
1058:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdPASS;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 20


1059:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1060:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1061:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1062:../Middlewares/FreeRTOS//Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1063:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = errQUEUE_FULL;
1064:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1065:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1066:../Middlewares/FreeRTOS//Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1067:../Middlewares/FreeRTOS//Source/queue.c **** 
1068:../Middlewares/FreeRTOS//Source/queue.c **** 	return xReturn;
1069:../Middlewares/FreeRTOS//Source/queue.c **** }
1070:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1071:../Middlewares/FreeRTOS//Source/queue.c **** 
1072:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1073:../Middlewares/FreeRTOS//Source/queue.c **** {
1074:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
1075:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1076:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1077:../Middlewares/FreeRTOS//Source/queue.c **** 
1078:../Middlewares/FreeRTOS//Source/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1079:../Middlewares/FreeRTOS//Source/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1080:../Middlewares/FreeRTOS//Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1081:../Middlewares/FreeRTOS//Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1082:../Middlewares/FreeRTOS//Source/queue.c **** 	post). */
1083:../Middlewares/FreeRTOS//Source/queue.c **** 
1084:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue );
1085:../Middlewares/FreeRTOS//Source/queue.c **** 
1086:../Middlewares/FreeRTOS//Source/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1087:../Middlewares/FreeRTOS//Source/queue.c **** 	if the item size is not 0. */
1088:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1089:../Middlewares/FreeRTOS//Source/queue.c **** 
1090:../Middlewares/FreeRTOS//Source/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1091:../Middlewares/FreeRTOS//Source/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1092:../Middlewares/FreeRTOS//Source/queue.c **** 	interrupts, only tasks. */
1093:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
1094:../Middlewares/FreeRTOS//Source/queue.c **** 
1095:../Middlewares/FreeRTOS//Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1096:../Middlewares/FreeRTOS//Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1097:../Middlewares/FreeRTOS//Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1098:../Middlewares/FreeRTOS//Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1099:../Middlewares/FreeRTOS//Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1100:../Middlewares/FreeRTOS//Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1101:../Middlewares/FreeRTOS//Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1102:../Middlewares/FreeRTOS//Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1103:../Middlewares/FreeRTOS//Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1104:../Middlewares/FreeRTOS//Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1105:../Middlewares/FreeRTOS//Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1106:../Middlewares/FreeRTOS//Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1107:../Middlewares/FreeRTOS//Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1108:../Middlewares/FreeRTOS//Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1109:../Middlewares/FreeRTOS//Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1110:../Middlewares/FreeRTOS//Source/queue.c **** 
1111:../Middlewares/FreeRTOS//Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1112:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1113:../Middlewares/FreeRTOS//Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1114:../Middlewares/FreeRTOS//Source/queue.c **** 
1115:../Middlewares/FreeRTOS//Source/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 21


1116:../Middlewares/FreeRTOS//Source/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1117:../Middlewares/FreeRTOS//Source/queue.c **** 		space'. */
1118:../Middlewares/FreeRTOS//Source/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1119:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1120:../Middlewares/FreeRTOS//Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1121:../Middlewares/FreeRTOS//Source/queue.c **** 
1122:../Middlewares/FreeRTOS//Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1123:../Middlewares/FreeRTOS//Source/queue.c **** 
1124:../Middlewares/FreeRTOS//Source/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1125:../Middlewares/FreeRTOS//Source/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1126:../Middlewares/FreeRTOS//Source/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1127:../Middlewares/FreeRTOS//Source/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1128:../Middlewares/FreeRTOS//Source/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1129:../Middlewares/FreeRTOS//Source/queue.c **** 			messages (semaphores) available. */
1130:../Middlewares/FreeRTOS//Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
1131:../Middlewares/FreeRTOS//Source/queue.c **** 
1132:../Middlewares/FreeRTOS//Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1133:../Middlewares/FreeRTOS//Source/queue.c **** 			be done when the queue is unlocked later. */
1134:../Middlewares/FreeRTOS//Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
1135:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1136:../Middlewares/FreeRTOS//Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1137:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1138:../Middlewares/FreeRTOS//Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1139:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1140:../Middlewares/FreeRTOS//Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1141:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1142:../Middlewares/FreeRTOS//Source/queue.c **** 							/* The semaphore is a member of a queue set, and
1143:../Middlewares/FreeRTOS//Source/queue.c **** 							posting	to the queue set caused a higher priority
1144:../Middlewares/FreeRTOS//Source/queue.c **** 							task to	unblock.  A context switch is required. */
1145:../Middlewares/FreeRTOS//Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1146:../Middlewares/FreeRTOS//Source/queue.c **** 							{
1147:../Middlewares/FreeRTOS//Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1148:../Middlewares/FreeRTOS//Source/queue.c **** 							}
1149:../Middlewares/FreeRTOS//Source/queue.c **** 							else
1150:../Middlewares/FreeRTOS//Source/queue.c **** 							{
1151:../Middlewares/FreeRTOS//Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1152:../Middlewares/FreeRTOS//Source/queue.c **** 							}
1153:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1154:../Middlewares/FreeRTOS//Source/queue.c **** 						else
1155:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1156:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1157:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1158:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1159:../Middlewares/FreeRTOS//Source/queue.c **** 					else
1160:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1161:../Middlewares/FreeRTOS//Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1162:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1163:../Middlewares/FreeRTOS//Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1164:../Middlewares/FreeRTOS//Source/queue.c **** 							{
1165:../Middlewares/FreeRTOS//Source/queue.c **** 								/* The task waiting has a higher priority so
1166:../Middlewares/FreeRTOS//Source/queue.c **** 								record that a context switch is required. */
1167:../Middlewares/FreeRTOS//Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1168:../Middlewares/FreeRTOS//Source/queue.c **** 								{
1169:../Middlewares/FreeRTOS//Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1170:../Middlewares/FreeRTOS//Source/queue.c **** 								}
1171:../Middlewares/FreeRTOS//Source/queue.c **** 								else
1172:../Middlewares/FreeRTOS//Source/queue.c **** 								{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 22


1173:../Middlewares/FreeRTOS//Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1174:../Middlewares/FreeRTOS//Source/queue.c **** 								}
1175:../Middlewares/FreeRTOS//Source/queue.c **** 							}
1176:../Middlewares/FreeRTOS//Source/queue.c **** 							else
1177:../Middlewares/FreeRTOS//Source/queue.c **** 							{
1178:../Middlewares/FreeRTOS//Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1179:../Middlewares/FreeRTOS//Source/queue.c **** 							}
1180:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1181:../Middlewares/FreeRTOS//Source/queue.c **** 						else
1182:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1183:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1184:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1185:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1186:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1187:../Middlewares/FreeRTOS//Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1188:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1189:../Middlewares/FreeRTOS//Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1190:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1191:../Middlewares/FreeRTOS//Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1192:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1193:../Middlewares/FreeRTOS//Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1194:../Middlewares/FreeRTOS//Source/queue.c **** 							context	switch is required. */
1195:../Middlewares/FreeRTOS//Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1196:../Middlewares/FreeRTOS//Source/queue.c **** 							{
1197:../Middlewares/FreeRTOS//Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1198:../Middlewares/FreeRTOS//Source/queue.c **** 							}
1199:../Middlewares/FreeRTOS//Source/queue.c **** 							else
1200:../Middlewares/FreeRTOS//Source/queue.c **** 							{
1201:../Middlewares/FreeRTOS//Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1202:../Middlewares/FreeRTOS//Source/queue.c **** 							}
1203:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1204:../Middlewares/FreeRTOS//Source/queue.c **** 						else
1205:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1206:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1207:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1208:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1209:../Middlewares/FreeRTOS//Source/queue.c **** 					else
1210:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1211:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1212:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1213:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1214:../Middlewares/FreeRTOS//Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1215:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1216:../Middlewares/FreeRTOS//Source/queue.c **** 			else
1217:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1218:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1219:../Middlewares/FreeRTOS//Source/queue.c **** 				knows that data was posted while it was locked. */
1220:../Middlewares/FreeRTOS//Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1221:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1222:../Middlewares/FreeRTOS//Source/queue.c **** 
1223:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdPASS;
1224:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1225:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1226:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1227:../Middlewares/FreeRTOS//Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1228:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = errQUEUE_FULL;
1229:../Middlewares/FreeRTOS//Source/queue.c **** 		}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 23


1230:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1231:../Middlewares/FreeRTOS//Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1232:../Middlewares/FreeRTOS//Source/queue.c **** 
1233:../Middlewares/FreeRTOS//Source/queue.c **** 	return xReturn;
1234:../Middlewares/FreeRTOS//Source/queue.c **** }
1235:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1236:../Middlewares/FreeRTOS//Source/queue.c **** 
1237:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWa
1238:../Middlewares/FreeRTOS//Source/queue.c **** {
1239:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1240:../Middlewares/FreeRTOS//Source/queue.c **** TimeOut_t xTimeOut;
1241:../Middlewares/FreeRTOS//Source/queue.c **** int8_t *pcOriginalReadPosition;
1242:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1243:../Middlewares/FreeRTOS//Source/queue.c **** 
1244:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue );
1245:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1246:../Middlewares/FreeRTOS//Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1247:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1248:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1249:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1250:../Middlewares/FreeRTOS//Source/queue.c **** 	#endif
1251:../Middlewares/FreeRTOS//Source/queue.c **** 
1252:../Middlewares/FreeRTOS//Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1253:../Middlewares/FreeRTOS//Source/queue.c **** 	statements within the function itself.  This is done in the interest
1254:../Middlewares/FreeRTOS//Source/queue.c **** 	of execution time efficiency. */
1255:../Middlewares/FreeRTOS//Source/queue.c **** 
1256:../Middlewares/FreeRTOS//Source/queue.c **** 	for( ;; )
1257:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1258:../Middlewares/FreeRTOS//Source/queue.c **** 		taskENTER_CRITICAL();
1259:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1260:../Middlewares/FreeRTOS//Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1261:../Middlewares/FreeRTOS//Source/queue.c **** 
1262:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1263:../Middlewares/FreeRTOS//Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1264:../Middlewares/FreeRTOS//Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1265:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1266:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Remember the read position in case the queue is only being
1267:../Middlewares/FreeRTOS//Source/queue.c **** 				peeked. */
1268:../Middlewares/FreeRTOS//Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1269:../Middlewares/FreeRTOS//Source/queue.c **** 
1270:../Middlewares/FreeRTOS//Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1271:../Middlewares/FreeRTOS//Source/queue.c **** 
1272:../Middlewares/FreeRTOS//Source/queue.c **** 				if( xJustPeeking == pdFALSE )
1273:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1274:../Middlewares/FreeRTOS//Source/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
1275:../Middlewares/FreeRTOS//Source/queue.c **** 
1276:../Middlewares/FreeRTOS//Source/queue.c **** 					/* Actually removing data, not just peeking. */
1277:../Middlewares/FreeRTOS//Source/queue.c **** 					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
1278:../Middlewares/FreeRTOS//Source/queue.c **** 
1279:../Middlewares/FreeRTOS//Source/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
1280:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1281:../Middlewares/FreeRTOS//Source/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1282:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1283:../Middlewares/FreeRTOS//Source/queue.c **** 							/* Record the information required to implement
1284:../Middlewares/FreeRTOS//Source/queue.c **** 							priority inheritance should it become necessary. */
1285:../Middlewares/FreeRTOS//Source/queue.c **** 							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is 
1286:../Middlewares/FreeRTOS//Source/queue.c **** 						}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 24


1287:../Middlewares/FreeRTOS//Source/queue.c **** 						else
1288:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1289:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1290:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1291:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1292:../Middlewares/FreeRTOS//Source/queue.c **** 					#endif /* configUSE_MUTEXES */
1293:../Middlewares/FreeRTOS//Source/queue.c **** 
1294:../Middlewares/FreeRTOS//Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1295:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1296:../Middlewares/FreeRTOS//Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1297:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1298:../Middlewares/FreeRTOS//Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1299:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1300:../Middlewares/FreeRTOS//Source/queue.c **** 						else
1301:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1302:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1303:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1304:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1305:../Middlewares/FreeRTOS//Source/queue.c **** 					else
1306:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1307:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1308:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1309:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1310:../Middlewares/FreeRTOS//Source/queue.c **** 				else
1311:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1312:../Middlewares/FreeRTOS//Source/queue.c **** 					traceQUEUE_PEEK( pxQueue );
1313:../Middlewares/FreeRTOS//Source/queue.c **** 
1314:../Middlewares/FreeRTOS//Source/queue.c **** 					/* The data is not being removed, so reset the read
1315:../Middlewares/FreeRTOS//Source/queue.c **** 					pointer. */
1316:../Middlewares/FreeRTOS//Source/queue.c **** 					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1317:../Middlewares/FreeRTOS//Source/queue.c **** 
1318:../Middlewares/FreeRTOS//Source/queue.c **** 					/* The data is being left in the queue, so see if there are
1319:../Middlewares/FreeRTOS//Source/queue.c **** 					any other tasks waiting for the data. */
1320:../Middlewares/FreeRTOS//Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1321:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1322:../Middlewares/FreeRTOS//Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1323:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1324:../Middlewares/FreeRTOS//Source/queue.c **** 							/* The task waiting has a higher priority than this task. */
1325:../Middlewares/FreeRTOS//Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1326:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1327:../Middlewares/FreeRTOS//Source/queue.c **** 						else
1328:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1329:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1330:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1331:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1332:../Middlewares/FreeRTOS//Source/queue.c **** 					else
1333:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1334:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1335:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1336:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1337:../Middlewares/FreeRTOS//Source/queue.c **** 
1338:../Middlewares/FreeRTOS//Source/queue.c **** 				taskEXIT_CRITICAL();
1339:../Middlewares/FreeRTOS//Source/queue.c **** 				return pdPASS;
1340:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1341:../Middlewares/FreeRTOS//Source/queue.c **** 			else
1342:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1343:../Middlewares/FreeRTOS//Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 25


1344:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1345:../Middlewares/FreeRTOS//Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1346:../Middlewares/FreeRTOS//Source/queue.c **** 					the block time has expired) so leave now. */
1347:../Middlewares/FreeRTOS//Source/queue.c **** 					taskEXIT_CRITICAL();
1348:../Middlewares/FreeRTOS//Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1349:../Middlewares/FreeRTOS//Source/queue.c **** 					return errQUEUE_EMPTY;
1350:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1351:../Middlewares/FreeRTOS//Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1352:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1353:../Middlewares/FreeRTOS//Source/queue.c **** 					/* The queue was empty and a block time was specified so
1354:../Middlewares/FreeRTOS//Source/queue.c **** 					configure the timeout structure. */
1355:../Middlewares/FreeRTOS//Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
1356:../Middlewares/FreeRTOS//Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1357:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1358:../Middlewares/FreeRTOS//Source/queue.c **** 				else
1359:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1360:../Middlewares/FreeRTOS//Source/queue.c **** 					/* Entry time was already set. */
1361:../Middlewares/FreeRTOS//Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1362:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1363:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1364:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1365:../Middlewares/FreeRTOS//Source/queue.c **** 		taskEXIT_CRITICAL();
1366:../Middlewares/FreeRTOS//Source/queue.c **** 
1367:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1368:../Middlewares/FreeRTOS//Source/queue.c **** 		now the critical section has been exited. */
1369:../Middlewares/FreeRTOS//Source/queue.c **** 
1370:../Middlewares/FreeRTOS//Source/queue.c **** 		vTaskSuspendAll();
1371:../Middlewares/FreeRTOS//Source/queue.c **** 		prvLockQueue( pxQueue );
1372:../Middlewares/FreeRTOS//Source/queue.c **** 
1373:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1374:../Middlewares/FreeRTOS//Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1375:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1376:../Middlewares/FreeRTOS//Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1377:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1378:../Middlewares/FreeRTOS//Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1379:../Middlewares/FreeRTOS//Source/queue.c **** 
1380:../Middlewares/FreeRTOS//Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1381:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1382:../Middlewares/FreeRTOS//Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1383:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1384:../Middlewares/FreeRTOS//Source/queue.c **** 						taskENTER_CRITICAL();
1385:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1386:../Middlewares/FreeRTOS//Source/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1387:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1388:../Middlewares/FreeRTOS//Source/queue.c **** 						taskEXIT_CRITICAL();
1389:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1390:../Middlewares/FreeRTOS//Source/queue.c **** 					else
1391:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1392:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1393:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1394:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1395:../Middlewares/FreeRTOS//Source/queue.c **** 				#endif
1396:../Middlewares/FreeRTOS//Source/queue.c **** 
1397:../Middlewares/FreeRTOS//Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1398:../Middlewares/FreeRTOS//Source/queue.c **** 				prvUnlockQueue( pxQueue );
1399:../Middlewares/FreeRTOS//Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1400:../Middlewares/FreeRTOS//Source/queue.c **** 				{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 26


1401:../Middlewares/FreeRTOS//Source/queue.c **** 					portYIELD_WITHIN_API();
1402:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1403:../Middlewares/FreeRTOS//Source/queue.c **** 				else
1404:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1405:../Middlewares/FreeRTOS//Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1406:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1407:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1408:../Middlewares/FreeRTOS//Source/queue.c **** 			else
1409:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1410:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Try again. */
1411:../Middlewares/FreeRTOS//Source/queue.c **** 				prvUnlockQueue( pxQueue );
1412:../Middlewares/FreeRTOS//Source/queue.c **** 				( void ) xTaskResumeAll();
1413:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1414:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1415:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1416:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1417:../Middlewares/FreeRTOS//Source/queue.c **** 			prvUnlockQueue( pxQueue );
1418:../Middlewares/FreeRTOS//Source/queue.c **** 			( void ) xTaskResumeAll();
1419:../Middlewares/FreeRTOS//Source/queue.c **** 
1420:../Middlewares/FreeRTOS//Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1421:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1422:../Middlewares/FreeRTOS//Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1423:../Middlewares/FreeRTOS//Source/queue.c **** 				return errQUEUE_EMPTY;
1424:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1425:../Middlewares/FreeRTOS//Source/queue.c **** 			else
1426:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1427:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1428:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1429:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1430:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1431:../Middlewares/FreeRTOS//Source/queue.c **** }
1432:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1433:../Middlewares/FreeRTOS//Source/queue.c **** 
1434:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1435:../Middlewares/FreeRTOS//Source/queue.c **** {
1436:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
1437:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1438:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1439:../Middlewares/FreeRTOS//Source/queue.c **** 
1440:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue );
1441:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1442:../Middlewares/FreeRTOS//Source/queue.c **** 
1443:../Middlewares/FreeRTOS//Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1444:../Middlewares/FreeRTOS//Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1445:../Middlewares/FreeRTOS//Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1446:../Middlewares/FreeRTOS//Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1447:../Middlewares/FreeRTOS//Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1448:../Middlewares/FreeRTOS//Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1449:../Middlewares/FreeRTOS//Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1450:../Middlewares/FreeRTOS//Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1451:../Middlewares/FreeRTOS//Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1452:../Middlewares/FreeRTOS//Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1453:../Middlewares/FreeRTOS//Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1454:../Middlewares/FreeRTOS//Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1455:../Middlewares/FreeRTOS//Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1456:../Middlewares/FreeRTOS//Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1457:../Middlewares/FreeRTOS//Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 27


1458:../Middlewares/FreeRTOS//Source/queue.c **** 
1459:../Middlewares/FreeRTOS//Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1460:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1461:../Middlewares/FreeRTOS//Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1462:../Middlewares/FreeRTOS//Source/queue.c **** 
1463:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1464:../Middlewares/FreeRTOS//Source/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1465:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1466:../Middlewares/FreeRTOS//Source/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1467:../Middlewares/FreeRTOS//Source/queue.c **** 
1468:../Middlewares/FreeRTOS//Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1469:../Middlewares/FreeRTOS//Source/queue.c **** 
1470:../Middlewares/FreeRTOS//Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1471:../Middlewares/FreeRTOS//Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
1472:../Middlewares/FreeRTOS//Source/queue.c **** 
1473:../Middlewares/FreeRTOS//Source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1474:../Middlewares/FreeRTOS//Source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1475:../Middlewares/FreeRTOS//Source/queue.c **** 			will know that an ISR has removed data while the queue was
1476:../Middlewares/FreeRTOS//Source/queue.c **** 			locked. */
1477:../Middlewares/FreeRTOS//Source/queue.c **** 			if( cRxLock == queueUNLOCKED )
1478:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1479:../Middlewares/FreeRTOS//Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1480:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1481:../Middlewares/FreeRTOS//Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1482:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1483:../Middlewares/FreeRTOS//Source/queue.c **** 						/* The task waiting has a higher priority than us so
1484:../Middlewares/FreeRTOS//Source/queue.c **** 						force a context switch. */
1485:../Middlewares/FreeRTOS//Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1486:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1487:../Middlewares/FreeRTOS//Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1488:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1489:../Middlewares/FreeRTOS//Source/queue.c **** 						else
1490:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1491:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1492:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1493:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1494:../Middlewares/FreeRTOS//Source/queue.c **** 					else
1495:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1496:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1497:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1498:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1499:../Middlewares/FreeRTOS//Source/queue.c **** 				else
1500:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1501:../Middlewares/FreeRTOS//Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1502:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1503:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1504:../Middlewares/FreeRTOS//Source/queue.c **** 			else
1505:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1506:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1507:../Middlewares/FreeRTOS//Source/queue.c **** 				knows that data was removed while it was locked. */
1508:../Middlewares/FreeRTOS//Source/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1509:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1510:../Middlewares/FreeRTOS//Source/queue.c **** 
1511:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdPASS;
1512:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1513:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1514:../Middlewares/FreeRTOS//Source/queue.c **** 		{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 28


1515:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdFAIL;
1516:../Middlewares/FreeRTOS//Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1517:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1518:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1519:../Middlewares/FreeRTOS//Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1520:../Middlewares/FreeRTOS//Source/queue.c **** 
1521:../Middlewares/FreeRTOS//Source/queue.c **** 	return xReturn;
1522:../Middlewares/FreeRTOS//Source/queue.c **** }
1523:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1524:../Middlewares/FreeRTOS//Source/queue.c **** 
1525:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1526:../Middlewares/FreeRTOS//Source/queue.c **** {
1527:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
1528:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1529:../Middlewares/FreeRTOS//Source/queue.c **** int8_t *pcOriginalReadPosition;
1530:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1531:../Middlewares/FreeRTOS//Source/queue.c **** 
1532:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue );
1533:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1534:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1535:../Middlewares/FreeRTOS//Source/queue.c **** 
1536:../Middlewares/FreeRTOS//Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1537:../Middlewares/FreeRTOS//Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1538:../Middlewares/FreeRTOS//Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1539:../Middlewares/FreeRTOS//Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1540:../Middlewares/FreeRTOS//Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1541:../Middlewares/FreeRTOS//Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1542:../Middlewares/FreeRTOS//Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1543:../Middlewares/FreeRTOS//Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1544:../Middlewares/FreeRTOS//Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1545:../Middlewares/FreeRTOS//Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1546:../Middlewares/FreeRTOS//Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1547:../Middlewares/FreeRTOS//Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1548:../Middlewares/FreeRTOS//Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1549:../Middlewares/FreeRTOS//Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1550:../Middlewares/FreeRTOS//Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1551:../Middlewares/FreeRTOS//Source/queue.c **** 
1552:../Middlewares/FreeRTOS//Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1553:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1554:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1555:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1556:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1557:../Middlewares/FreeRTOS//Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1558:../Middlewares/FreeRTOS//Source/queue.c **** 
1559:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1560:../Middlewares/FreeRTOS//Source/queue.c **** 			actually being removed from the queue. */
1561:../Middlewares/FreeRTOS//Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1562:../Middlewares/FreeRTOS//Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1563:../Middlewares/FreeRTOS//Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1564:../Middlewares/FreeRTOS//Source/queue.c **** 
1565:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdPASS;
1566:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1567:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1568:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1569:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdFAIL;
1570:../Middlewares/FreeRTOS//Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1571:../Middlewares/FreeRTOS//Source/queue.c **** 		}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 29


1572:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1573:../Middlewares/FreeRTOS//Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1574:../Middlewares/FreeRTOS//Source/queue.c **** 
1575:../Middlewares/FreeRTOS//Source/queue.c **** 	return xReturn;
1576:../Middlewares/FreeRTOS//Source/queue.c **** }
1577:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1578:../Middlewares/FreeRTOS//Source/queue.c **** 
1579:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1580:../Middlewares/FreeRTOS//Source/queue.c **** {
1581:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxReturn;
1582:../Middlewares/FreeRTOS//Source/queue.c **** 
1583:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( xQueue );
1584:../Middlewares/FreeRTOS//Source/queue.c **** 
1585:../Middlewares/FreeRTOS//Source/queue.c **** 	taskENTER_CRITICAL();
1586:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1587:../Middlewares/FreeRTOS//Source/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1588:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1589:../Middlewares/FreeRTOS//Source/queue.c **** 	taskEXIT_CRITICAL();
1590:../Middlewares/FreeRTOS//Source/queue.c **** 
1591:../Middlewares/FreeRTOS//Source/queue.c **** 	return uxReturn;
1592:../Middlewares/FreeRTOS//Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1593:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1594:../Middlewares/FreeRTOS//Source/queue.c **** 
1595:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1596:../Middlewares/FreeRTOS//Source/queue.c **** {
1597:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxReturn;
1598:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t *pxQueue;
1599:../Middlewares/FreeRTOS//Source/queue.c **** 
1600:../Middlewares/FreeRTOS//Source/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
1601:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue );
1602:../Middlewares/FreeRTOS//Source/queue.c **** 
1603:../Middlewares/FreeRTOS//Source/queue.c **** 	taskENTER_CRITICAL();
1604:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1605:../Middlewares/FreeRTOS//Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1606:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1607:../Middlewares/FreeRTOS//Source/queue.c **** 	taskEXIT_CRITICAL();
1608:../Middlewares/FreeRTOS//Source/queue.c **** 
1609:../Middlewares/FreeRTOS//Source/queue.c **** 	return uxReturn;
1610:../Middlewares/FreeRTOS//Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1611:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1612:../Middlewares/FreeRTOS//Source/queue.c **** 
1613:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1614:../Middlewares/FreeRTOS//Source/queue.c **** {
1615:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxReturn;
1616:../Middlewares/FreeRTOS//Source/queue.c **** 
1617:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( xQueue );
1618:../Middlewares/FreeRTOS//Source/queue.c **** 
1619:../Middlewares/FreeRTOS//Source/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1620:../Middlewares/FreeRTOS//Source/queue.c **** 
1621:../Middlewares/FreeRTOS//Source/queue.c **** 	return uxReturn;
1622:../Middlewares/FreeRTOS//Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1623:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1624:../Middlewares/FreeRTOS//Source/queue.c **** 
1625:../Middlewares/FreeRTOS//Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1626:../Middlewares/FreeRTOS//Source/queue.c **** {
1627:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1628:../Middlewares/FreeRTOS//Source/queue.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 30


1629:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue );
1630:../Middlewares/FreeRTOS//Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1631:../Middlewares/FreeRTOS//Source/queue.c **** 
1632:../Middlewares/FreeRTOS//Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1633:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1634:../Middlewares/FreeRTOS//Source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1635:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1636:../Middlewares/FreeRTOS//Source/queue.c **** 	#endif
1637:../Middlewares/FreeRTOS//Source/queue.c **** 
1638:../Middlewares/FreeRTOS//Source/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1639:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1640:../Middlewares/FreeRTOS//Source/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1641:../Middlewares/FreeRTOS//Source/queue.c **** 		again. */
1642:../Middlewares/FreeRTOS//Source/queue.c **** 		vPortFree( pxQueue );
1643:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1644:../Middlewares/FreeRTOS//Source/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1645:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1646:../Middlewares/FreeRTOS//Source/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1647:../Middlewares/FreeRTOS//Source/queue.c **** 		check before attempting to free the memory. */
1648:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1649:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1650:../Middlewares/FreeRTOS//Source/queue.c **** 			vPortFree( pxQueue );
1651:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1652:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1653:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1654:../Middlewares/FreeRTOS//Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1655:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1656:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1657:../Middlewares/FreeRTOS//Source/queue.c **** 	#else
1658:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1659:../Middlewares/FreeRTOS//Source/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1660:../Middlewares/FreeRTOS//Source/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1661:../Middlewares/FreeRTOS//Source/queue.c **** 		( void ) pxQueue;
1662:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1663:../Middlewares/FreeRTOS//Source/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1664:../Middlewares/FreeRTOS//Source/queue.c **** }
1665:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1666:../Middlewares/FreeRTOS//Source/queue.c **** 
1667:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1668:../Middlewares/FreeRTOS//Source/queue.c **** 
1669:../Middlewares/FreeRTOS//Source/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1670:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1671:../Middlewares/FreeRTOS//Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
1672:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1673:../Middlewares/FreeRTOS//Source/queue.c **** 
1674:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1675:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1676:../Middlewares/FreeRTOS//Source/queue.c **** 
1677:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1678:../Middlewares/FreeRTOS//Source/queue.c **** 
1679:../Middlewares/FreeRTOS//Source/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1680:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1681:../Middlewares/FreeRTOS//Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
1682:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1683:../Middlewares/FreeRTOS//Source/queue.c **** 
1684:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1685:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 31


1686:../Middlewares/FreeRTOS//Source/queue.c **** 
1687:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1688:../Middlewares/FreeRTOS//Source/queue.c **** 
1689:../Middlewares/FreeRTOS//Source/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
1690:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1691:../Middlewares/FreeRTOS//Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
1692:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1693:../Middlewares/FreeRTOS//Source/queue.c **** 
1694:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1695:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1696:../Middlewares/FreeRTOS//Source/queue.c **** 
1697:../Middlewares/FreeRTOS//Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
1698:../Middlewares/FreeRTOS//Source/queue.c **** {
1699:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn = pdFALSE;
1700:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxMessagesWaiting;
1701:../Middlewares/FreeRTOS//Source/queue.c **** 
1702:../Middlewares/FreeRTOS//Source/queue.c **** 	/* This function is called from a critical section. */
1703:../Middlewares/FreeRTOS//Source/queue.c **** 
1704:../Middlewares/FreeRTOS//Source/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1705:../Middlewares/FreeRTOS//Source/queue.c **** 
1706:../Middlewares/FreeRTOS//Source/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1707:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1708:../Middlewares/FreeRTOS//Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1709:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1710:../Middlewares/FreeRTOS//Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1711:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1712:../Middlewares/FreeRTOS//Source/queue.c **** 				/* The mutex is no longer being held. */
1713:../Middlewares/FreeRTOS//Source/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1714:../Middlewares/FreeRTOS//Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
1715:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1716:../Middlewares/FreeRTOS//Source/queue.c **** 			else
1717:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1718:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1719:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1720:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1721:../Middlewares/FreeRTOS//Source/queue.c **** 		#endif /* configUSE_MUTEXES */
1722:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1723:../Middlewares/FreeRTOS//Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
1724:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1725:../Middlewares/FreeRTOS//Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
1726:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1727:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
1728:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1729:../Middlewares/FreeRTOS//Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
1730:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1731:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1732:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1733:../Middlewares/FreeRTOS//Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1734:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1735:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1736:../Middlewares/FreeRTOS//Source/queue.c **** 	else
1737:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1738:../Middlewares/FreeRTOS//Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
1739:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1740:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
1741:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1742:../Middlewares/FreeRTOS//Source/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 32


1743:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1744:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1745:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1746:../Middlewares/FreeRTOS//Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1747:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1748:../Middlewares/FreeRTOS//Source/queue.c **** 
1749:../Middlewares/FreeRTOS//Source/queue.c **** 		if( xPosition == queueOVERWRITE )
1750:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1751:../Middlewares/FreeRTOS//Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1752:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1753:../Middlewares/FreeRTOS//Source/queue.c **** 				/* An item is not being added but overwritten, so subtract
1754:../Middlewares/FreeRTOS//Source/queue.c **** 				one from the recorded number of items in the queue so when
1755:../Middlewares/FreeRTOS//Source/queue.c **** 				one is added again below the number of recorded items remains
1756:../Middlewares/FreeRTOS//Source/queue.c **** 				correct. */
1757:../Middlewares/FreeRTOS//Source/queue.c **** 				--uxMessagesWaiting;
1758:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1759:../Middlewares/FreeRTOS//Source/queue.c **** 			else
1760:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1761:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1762:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1763:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1764:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1765:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1766:../Middlewares/FreeRTOS//Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1767:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1768:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1769:../Middlewares/FreeRTOS//Source/queue.c **** 
1770:../Middlewares/FreeRTOS//Source/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
1771:../Middlewares/FreeRTOS//Source/queue.c **** 
1772:../Middlewares/FreeRTOS//Source/queue.c **** 	return xReturn;
1773:../Middlewares/FreeRTOS//Source/queue.c **** }
1774:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1775:../Middlewares/FreeRTOS//Source/queue.c **** 
1776:../Middlewares/FreeRTOS//Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
1777:../Middlewares/FreeRTOS//Source/queue.c **** {
1778:../Middlewares/FreeRTOS//Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1779:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1780:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1781:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
1782:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1783:../Middlewares/FreeRTOS//Source/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1784:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1785:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1786:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1787:../Middlewares/FreeRTOS//Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1788:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1789:../Middlewares/FreeRTOS//Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
1790:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1791:../Middlewares/FreeRTOS//Source/queue.c **** }
1792:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1793:../Middlewares/FreeRTOS//Source/queue.c **** 
1794:../Middlewares/FreeRTOS//Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
1795:../Middlewares/FreeRTOS//Source/queue.c **** {
1796:../Middlewares/FreeRTOS//Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1797:../Middlewares/FreeRTOS//Source/queue.c **** 
1798:../Middlewares/FreeRTOS//Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
1799:../Middlewares/FreeRTOS//Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 33


1800:../Middlewares/FreeRTOS//Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
1801:../Middlewares/FreeRTOS//Source/queue.c **** 	updated. */
1802:../Middlewares/FreeRTOS//Source/queue.c **** 	taskENTER_CRITICAL();
1803:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1804:../Middlewares/FreeRTOS//Source/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
1805:../Middlewares/FreeRTOS//Source/queue.c **** 
1806:../Middlewares/FreeRTOS//Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
1807:../Middlewares/FreeRTOS//Source/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
1808:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1809:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1810:../Middlewares/FreeRTOS//Source/queue.c **** 			blocked waiting for data to become available? */
1811:../Middlewares/FreeRTOS//Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
1812:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1813:../Middlewares/FreeRTOS//Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
1814:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1815:../Middlewares/FreeRTOS//Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1816:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1817:../Middlewares/FreeRTOS//Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
1818:../Middlewares/FreeRTOS//Source/queue.c **** 						the queue set caused a higher priority task to unblock.
1819:../Middlewares/FreeRTOS//Source/queue.c **** 						A context switch is required. */
1820:../Middlewares/FreeRTOS//Source/queue.c **** 						vTaskMissedYield();
1821:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1822:../Middlewares/FreeRTOS//Source/queue.c **** 					else
1823:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1824:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1825:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1826:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1827:../Middlewares/FreeRTOS//Source/queue.c **** 				else
1828:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1829:../Middlewares/FreeRTOS//Source/queue.c **** 					/* Tasks that are removed from the event list will get
1830:../Middlewares/FreeRTOS//Source/queue.c **** 					added to the pending ready list as the scheduler is still
1831:../Middlewares/FreeRTOS//Source/queue.c **** 					suspended. */
1832:../Middlewares/FreeRTOS//Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1833:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1834:../Middlewares/FreeRTOS//Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1835:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1836:../Middlewares/FreeRTOS//Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1837:../Middlewares/FreeRTOS//Source/queue.c **** 							context	switch is required. */
1838:../Middlewares/FreeRTOS//Source/queue.c **** 							vTaskMissedYield();
1839:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1840:../Middlewares/FreeRTOS//Source/queue.c **** 						else
1841:../Middlewares/FreeRTOS//Source/queue.c **** 						{
1842:../Middlewares/FreeRTOS//Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1843:../Middlewares/FreeRTOS//Source/queue.c **** 						}
1844:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1845:../Middlewares/FreeRTOS//Source/queue.c **** 					else
1846:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1847:../Middlewares/FreeRTOS//Source/queue.c **** 						break;
1848:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1849:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1850:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1851:../Middlewares/FreeRTOS//Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
1852:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1853:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
1854:../Middlewares/FreeRTOS//Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
1855:../Middlewares/FreeRTOS//Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1856:../Middlewares/FreeRTOS//Source/queue.c **** 				{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 34


1857:../Middlewares/FreeRTOS//Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1858:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1859:../Middlewares/FreeRTOS//Source/queue.c **** 						/* The task waiting has a higher priority so record that
1860:../Middlewares/FreeRTOS//Source/queue.c **** 						a context switch is required. */
1861:../Middlewares/FreeRTOS//Source/queue.c **** 						vTaskMissedYield();
1862:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1863:../Middlewares/FreeRTOS//Source/queue.c **** 					else
1864:../Middlewares/FreeRTOS//Source/queue.c **** 					{
1865:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1866:../Middlewares/FreeRTOS//Source/queue.c **** 					}
1867:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1868:../Middlewares/FreeRTOS//Source/queue.c **** 				else
1869:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1870:../Middlewares/FreeRTOS//Source/queue.c **** 					break;
1871:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1872:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1873:../Middlewares/FreeRTOS//Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
1874:../Middlewares/FreeRTOS//Source/queue.c **** 
1875:../Middlewares/FreeRTOS//Source/queue.c **** 			--cTxLock;
1876:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1877:../Middlewares/FreeRTOS//Source/queue.c **** 
1878:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
1879:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1880:../Middlewares/FreeRTOS//Source/queue.c **** 	taskEXIT_CRITICAL();
1881:../Middlewares/FreeRTOS//Source/queue.c **** 
1882:../Middlewares/FreeRTOS//Source/queue.c **** 	/* Do the same for the Rx lock. */
1883:../Middlewares/FreeRTOS//Source/queue.c **** 	taskENTER_CRITICAL();
1884:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1885:../Middlewares/FreeRTOS//Source/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
1886:../Middlewares/FreeRTOS//Source/queue.c **** 
1887:../Middlewares/FreeRTOS//Source/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
1888:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1889:../Middlewares/FreeRTOS//Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1890:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1891:../Middlewares/FreeRTOS//Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1892:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1893:../Middlewares/FreeRTOS//Source/queue.c **** 					vTaskMissedYield();
1894:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1895:../Middlewares/FreeRTOS//Source/queue.c **** 				else
1896:../Middlewares/FreeRTOS//Source/queue.c **** 				{
1897:../Middlewares/FreeRTOS//Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1898:../Middlewares/FreeRTOS//Source/queue.c **** 				}
1899:../Middlewares/FreeRTOS//Source/queue.c **** 
1900:../Middlewares/FreeRTOS//Source/queue.c **** 				--cRxLock;
1901:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1902:../Middlewares/FreeRTOS//Source/queue.c **** 			else
1903:../Middlewares/FreeRTOS//Source/queue.c **** 			{
1904:../Middlewares/FreeRTOS//Source/queue.c **** 				break;
1905:../Middlewares/FreeRTOS//Source/queue.c **** 			}
1906:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1907:../Middlewares/FreeRTOS//Source/queue.c **** 
1908:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
1909:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1910:../Middlewares/FreeRTOS//Source/queue.c **** 	taskEXIT_CRITICAL();
1911:../Middlewares/FreeRTOS//Source/queue.c **** }
1912:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1913:../Middlewares/FreeRTOS//Source/queue.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 35


1914:../Middlewares/FreeRTOS//Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
1915:../Middlewares/FreeRTOS//Source/queue.c **** {
1916:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
1917:../Middlewares/FreeRTOS//Source/queue.c **** 
1918:../Middlewares/FreeRTOS//Source/queue.c **** 	taskENTER_CRITICAL();
1919:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1920:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1921:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1922:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdTRUE;
1923:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1924:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1925:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1926:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdFALSE;
1927:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1928:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1929:../Middlewares/FreeRTOS//Source/queue.c **** 	taskEXIT_CRITICAL();
1930:../Middlewares/FreeRTOS//Source/queue.c **** 
1931:../Middlewares/FreeRTOS//Source/queue.c **** 	return xReturn;
1932:../Middlewares/FreeRTOS//Source/queue.c **** }
1933:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1934:../Middlewares/FreeRTOS//Source/queue.c **** 
1935:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
1936:../Middlewares/FreeRTOS//Source/queue.c **** {
1937:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
1938:../Middlewares/FreeRTOS//Source/queue.c **** 
1939:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( xQueue );
1940:../Middlewares/FreeRTOS//Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
1941:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1942:../Middlewares/FreeRTOS//Source/queue.c **** 		xReturn = pdTRUE;
1943:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1944:../Middlewares/FreeRTOS//Source/queue.c **** 	else
1945:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1946:../Middlewares/FreeRTOS//Source/queue.c **** 		xReturn = pdFALSE;
1947:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1948:../Middlewares/FreeRTOS//Source/queue.c **** 
1949:../Middlewares/FreeRTOS//Source/queue.c **** 	return xReturn;
1950:../Middlewares/FreeRTOS//Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
1951:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1952:../Middlewares/FreeRTOS//Source/queue.c **** 
1953:../Middlewares/FreeRTOS//Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
1954:../Middlewares/FreeRTOS//Source/queue.c **** {
  27              		.loc 1 1954 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 10B5     		push	{r4, lr}
  33              		.save {r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
  38 0002 0446     		mov	r4, r0
1955:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
1956:../Middlewares/FreeRTOS//Source/queue.c **** 
1957:../Middlewares/FreeRTOS//Source/queue.c **** 	taskENTER_CRITICAL();
  39              		.loc 1 1957 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 36


  40 0004 FFF7FEFF 		bl	vPortEnterCritical
  41              	.LVL1:
1958:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1959:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  42              		.loc 1 1959 0
  43 0008 A26B     		ldr	r2, [r4, #56]
  44 000a E36B     		ldr	r3, [r4, #60]
  45 000c 9A42     		cmp	r2, r3
  46 000e 04D0     		beq	.L5
1960:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1961:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdTRUE;
1962:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1963:../Middlewares/FreeRTOS//Source/queue.c **** 		else
1964:../Middlewares/FreeRTOS//Source/queue.c **** 		{
1965:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdFALSE;
  47              		.loc 1 1965 0
  48 0010 0024     		movs	r4, #0
  49              	.LVL2:
  50              	.L2:
1966:../Middlewares/FreeRTOS//Source/queue.c **** 		}
1967:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1968:../Middlewares/FreeRTOS//Source/queue.c **** 	taskEXIT_CRITICAL();
  51              		.loc 1 1968 0
  52 0012 FFF7FEFF 		bl	vPortExitCritical
  53              	.LVL3:
1969:../Middlewares/FreeRTOS//Source/queue.c **** 
1970:../Middlewares/FreeRTOS//Source/queue.c **** 	return xReturn;
1971:../Middlewares/FreeRTOS//Source/queue.c **** }
  54              		.loc 1 1971 0
  55 0016 2046     		mov	r0, r4
  56 0018 10BD     		pop	{r4, pc}
  57              	.LVL4:
  58              	.L5:
1961:../Middlewares/FreeRTOS//Source/queue.c **** 		}
  59              		.loc 1 1961 0
  60 001a 0124     		movs	r4, #1
  61              	.LVL5:
  62 001c F9E7     		b	.L2
  63              		.cfi_endproc
  64              	.LFE161:
  65              		.fnend
  67              		.section	.text._ZL15prvIsQueueEmptyPK15QueueDefinition,"ax",%progbits
  68              		.align	1
  69              		.syntax unified
  70              		.thumb
  71              		.thumb_func
  72              		.fpu fpv4-sp-d16
  74              	_ZL15prvIsQueueEmptyPK15QueueDefinition:
  75              		.fnstart
  76              	.LFB159:
1915:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
  77              		.loc 1 1915 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              	.LVL6:
  82 0000 10B5     		push	{r4, lr}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 37


  83              		.save {r4, lr}
  84              	.LCFI1:
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 4, -8
  87              		.cfi_offset 14, -4
  88 0002 0446     		mov	r4, r0
1918:../Middlewares/FreeRTOS//Source/queue.c **** 	{
  89              		.loc 1 1918 0
  90 0004 FFF7FEFF 		bl	vPortEnterCritical
  91              	.LVL7:
1920:../Middlewares/FreeRTOS//Source/queue.c **** 		{
  92              		.loc 1 1920 0
  93 0008 A36B     		ldr	r3, [r4, #56]
  94 000a 23B1     		cbz	r3, .L10
1926:../Middlewares/FreeRTOS//Source/queue.c **** 		}
  95              		.loc 1 1926 0
  96 000c 0024     		movs	r4, #0
  97              	.LVL8:
  98              	.L7:
1929:../Middlewares/FreeRTOS//Source/queue.c **** 
  99              		.loc 1 1929 0
 100 000e FFF7FEFF 		bl	vPortExitCritical
 101              	.LVL9:
1932:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 102              		.loc 1 1932 0
 103 0012 2046     		mov	r0, r4
 104 0014 10BD     		pop	{r4, pc}
 105              	.LVL10:
 106              	.L10:
1922:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 107              		.loc 1 1922 0
 108 0016 0124     		movs	r4, #1
 109              	.LVL11:
 110 0018 F9E7     		b	.L7
 111              		.cfi_endproc
 112              	.LFE159:
 113              		.fnend
 115              		.section	.text._ZL18prvCopyDataToQueueP15QueueDefinitionPKvl,"ax",%progbits
 116              		.align	1
 117              		.syntax unified
 118              		.thumb
 119              		.thumb_func
 120              		.fpu fpv4-sp-d16
 122              	_ZL18prvCopyDataToQueueP15QueueDefinitionPKvl:
 123              		.fnstart
 124              	.LFB156:
1698:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn = pdFALSE;
 125              		.loc 1 1698 0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              	.LVL12:
 130 0000 70B5     		push	{r4, r5, r6, lr}
 131              		.save {r4, r5, r6, lr}
 132              	.LCFI2:
 133              		.cfi_def_cfa_offset 16
 134              		.cfi_offset 4, -16
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 38


 135              		.cfi_offset 5, -12
 136              		.cfi_offset 6, -8
 137              		.cfi_offset 14, -4
 138 0002 0446     		mov	r4, r0
 139 0004 1646     		mov	r6, r2
 140              	.LVL13:
1704:../Middlewares/FreeRTOS//Source/queue.c **** 
 141              		.loc 1 1704 0
 142 0006 856B     		ldr	r5, [r0, #56]
 143              	.LVL14:
1706:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 144              		.loc 1 1706 0
 145 0008 026C     		ldr	r2, [r0, #64]
 146              	.LVL15:
 147 000a 5AB9     		cbnz	r2, .L12
1710:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 148              		.loc 1 1710 0
 149 000c 0368     		ldr	r3, [r0]
 150 000e 1BB1     		cbz	r3, .L21
1699:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxMessagesWaiting;
 151              		.loc 1 1699 0
 152 0010 0020     		movs	r0, #0
 153              	.LVL16:
 154              	.L13:
1770:../Middlewares/FreeRTOS//Source/queue.c **** 
 155              		.loc 1 1770 0
 156 0012 0135     		adds	r5, r5, #1
 157              	.LVL17:
 158 0014 A563     		str	r5, [r4, #56]
1773:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 159              		.loc 1 1773 0
 160 0016 70BD     		pop	{r4, r5, r6, pc}
 161              	.LVL18:
 162              	.L21:
1713:../Middlewares/FreeRTOS//Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 163              		.loc 1 1713 0
 164 0018 4068     		ldr	r0, [r0, #4]
 165              	.LVL19:
 166 001a FFF7FEFF 		bl	xTaskPriorityDisinherit
 167              	.LVL20:
1714:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 168              		.loc 1 1714 0
 169 001e 0023     		movs	r3, #0
 170 0020 6360     		str	r3, [r4, #4]
 171 0022 F6E7     		b	.L13
 172              	.LVL21:
 173              	.L12:
1723:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 174              		.loc 1 1723 0
 175 0024 6EB9     		cbnz	r6, .L14
1725:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 176              		.loc 1 1725 0
 177 0026 8068     		ldr	r0, [r0, #8]
 178              	.LVL22:
 179 0028 FFF7FEFF 		bl	memcpy
 180              	.LVL23:
1726:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 39


 181              		.loc 1 1726 0
 182 002c 226C     		ldr	r2, [r4, #64]
 183 002e A368     		ldr	r3, [r4, #8]
 184 0030 1344     		add	r3, r3, r2
 185 0032 A360     		str	r3, [r4, #8]
1727:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 186              		.loc 1 1727 0
 187 0034 6268     		ldr	r2, [r4, #4]
 188 0036 9342     		cmp	r3, r2
 189 0038 19D3     		bcc	.L17
1729:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 190              		.loc 1 1729 0
 191 003a 2368     		ldr	r3, [r4]
 192 003c A360     		str	r3, [r4, #8]
1699:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxMessagesWaiting;
 193              		.loc 1 1699 0
 194 003e 0020     		movs	r0, #0
 195 0040 E7E7     		b	.L13
 196              	.LVL24:
 197              	.L14:
1738:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 198              		.loc 1 1738 0
 199 0042 C068     		ldr	r0, [r0, #12]
 200              	.LVL25:
 201 0044 FFF7FEFF 		bl	memcpy
 202              	.LVL26:
1739:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 203              		.loc 1 1739 0
 204 0048 226C     		ldr	r2, [r4, #64]
 205 004a 5242     		negs	r2, r2
 206 004c E368     		ldr	r3, [r4, #12]
 207 004e 1344     		add	r3, r3, r2
 208 0050 E360     		str	r3, [r4, #12]
1740:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 209              		.loc 1 1740 0
 210 0052 2168     		ldr	r1, [r4]
 211 0054 8B42     		cmp	r3, r1
 212 0056 02D2     		bcs	.L15
1742:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 213              		.loc 1 1742 0
 214 0058 6368     		ldr	r3, [r4, #4]
 215 005a 1A44     		add	r2, r2, r3
 216 005c E260     		str	r2, [r4, #12]
 217              	.L15:
1749:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 218              		.loc 1 1749 0
 219 005e 022E     		cmp	r6, #2
 220 0060 01D0     		beq	.L22
1699:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxMessagesWaiting;
 221              		.loc 1 1699 0
 222 0062 0020     		movs	r0, #0
 223 0064 D5E7     		b	.L13
 224              	.L22:
1751:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 225              		.loc 1 1751 0
 226 0066 25B1     		cbz	r5, .L19
1757:../Middlewares/FreeRTOS//Source/queue.c **** 			}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 40


 227              		.loc 1 1757 0
 228 0068 013D     		subs	r5, r5, #1
 229              	.LVL27:
1699:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxMessagesWaiting;
 230              		.loc 1 1699 0
 231 006a 0020     		movs	r0, #0
 232 006c D1E7     		b	.L13
 233              	.L17:
 234 006e 0020     		movs	r0, #0
 235 0070 CFE7     		b	.L13
 236              	.L19:
 237 0072 0020     		movs	r0, #0
 238 0074 CDE7     		b	.L13
 239              		.cfi_endproc
 240              	.LFE156:
 241              		.fnend
 243              		.section	.text._ZL20prvCopyDataFromQueueP15QueueDefinitionPv,"ax",%progbits
 244              		.align	1
 245              		.syntax unified
 246              		.thumb
 247              		.thumb_func
 248              		.fpu fpv4-sp-d16
 250              	_ZL20prvCopyDataFromQueueP15QueueDefinitionPv:
 251              		.fnstart
 252              	.LFB157:
1777:../Middlewares/FreeRTOS//Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 253              		.loc 1 1777 0
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 0
 256              		@ frame_needed = 0, uses_anonymous_args = 0
 257              	.LVL28:
1778:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 258              		.loc 1 1778 0
 259 0000 026C     		ldr	r2, [r0, #64]
 260 0002 72B1     		cbz	r2, .L27
1777:../Middlewares/FreeRTOS//Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 261              		.loc 1 1777 0
 262 0004 10B5     		push	{r4, lr}
 263              	.LCFI3:
 264              		.cfi_def_cfa_offset 8
 265              		.cfi_offset 4, -8
 266              		.cfi_offset 14, -4
1780:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 267              		.loc 1 1780 0
 268 0006 C368     		ldr	r3, [r0, #12]
 269 0008 1344     		add	r3, r3, r2
 270 000a C360     		str	r3, [r0, #12]
1781:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 271              		.loc 1 1781 0
 272 000c 4468     		ldr	r4, [r0, #4]
 273 000e A342     		cmp	r3, r4
 274 0010 01D3     		bcc	.L25
1783:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 275              		.loc 1 1783 0
 276 0012 0368     		ldr	r3, [r0]
 277 0014 C360     		str	r3, [r0, #12]
 278              	.L25:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 41


 279 0016 0C46     		mov	r4, r1
1789:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 280              		.loc 1 1789 0
 281 0018 C168     		ldr	r1, [r0, #12]
 282              	.LVL29:
 283 001a 2046     		mov	r0, r4
 284              	.LVL30:
 285 001c FFF7FEFF 		bl	memcpy
 286              	.LVL31:
1791:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 287              		.loc 1 1791 0
 288 0020 10BD     		pop	{r4, pc}
 289              	.LVL32:
 290              	.L27:
 291              	.LCFI4:
 292              		.cfi_def_cfa_offset 0
 293              		.cfi_restore 4
 294              		.cfi_restore 14
 295 0022 7047     		bx	lr
 296              		.cfi_endproc
 297              	.LFE157:
 298              		.cantunwind
 299              		.fnend
 301              		.section	.text._ZL14prvUnlockQueueP15QueueDefinition,"ax",%progbits
 302              		.align	1
 303              		.syntax unified
 304              		.thumb
 305              		.thumb_func
 306              		.fpu fpv4-sp-d16
 308              	_ZL14prvUnlockQueueP15QueueDefinition:
 309              		.fnstart
 310              	.LFB158:
1795:../Middlewares/FreeRTOS//Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 311              		.loc 1 1795 0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 0
 314              		@ frame_needed = 0, uses_anonymous_args = 0
 315              	.LVL33:
 316 0000 38B5     		push	{r3, r4, r5, lr}
 317              		.save {r3, r4, r5, lr}
 318              	.LCFI5:
 319              		.cfi_def_cfa_offset 16
 320              		.cfi_offset 3, -16
 321              		.cfi_offset 4, -12
 322              		.cfi_offset 5, -8
 323              		.cfi_offset 14, -4
 324 0002 0546     		mov	r5, r0
1802:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 325              		.loc 1 1802 0
 326 0004 FFF7FEFF 		bl	vPortEnterCritical
 327              	.LVL34:
 328              	.LBB88:
1804:../Middlewares/FreeRTOS//Source/queue.c **** 
 329              		.loc 1 1804 0
 330 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 331 000c 64B2     		sxtb	r4, r4
 332              	.LVL35:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 42


 333 000e 03E0     		b	.L33
 334              	.L38:
1861:../Middlewares/FreeRTOS//Source/queue.c **** 					}
 335              		.loc 1 1861 0
 336 0010 FFF7FEFF 		bl	vTaskMissedYield
 337              	.LVL36:
 338              	.L32:
1875:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 339              		.loc 1 1875 0
 340 0014 013C     		subs	r4, r4, #1
 341              	.LVL37:
 342 0016 64B2     		sxtb	r4, r4
 343              	.LVL38:
 344              	.L33:
1807:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 345              		.loc 1 1807 0
 346 0018 002C     		cmp	r4, #0
 347 001a 08DD     		ble	.L31
1855:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 348              		.loc 1 1855 0
 349 001c 6B6A     		ldr	r3, [r5, #36]
 350 001e 33B1     		cbz	r3, .L31
1857:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 351              		.loc 1 1857 0
 352 0020 05F12400 		add	r0, r5, #36
 353 0024 FFF7FEFF 		bl	xTaskRemoveFromEventList
 354              	.LVL39:
 355 0028 0028     		cmp	r0, #0
 356 002a F3D0     		beq	.L32
 357 002c F0E7     		b	.L38
 358              	.L31:
1878:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 359              		.loc 1 1878 0
 360 002e FF23     		movs	r3, #255
 361 0030 85F84530 		strb	r3, [r5, #69]
 362              	.LBE88:
1880:../Middlewares/FreeRTOS//Source/queue.c **** 
 363              		.loc 1 1880 0
 364 0034 FFF7FEFF 		bl	vPortExitCritical
 365              	.LVL40:
1883:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 366              		.loc 1 1883 0
 367 0038 FFF7FEFF 		bl	vPortEnterCritical
 368              	.LVL41:
 369              	.LBB89:
1885:../Middlewares/FreeRTOS//Source/queue.c **** 
 370              		.loc 1 1885 0
 371 003c 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 372              	.LVL42:
 373 0040 64B2     		sxtb	r4, r4
 374              	.LVL43:
 375 0042 03E0     		b	.L36
 376              	.L39:
1893:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 377              		.loc 1 1893 0
 378 0044 FFF7FEFF 		bl	vTaskMissedYield
 379              	.LVL44:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 43


 380              	.L35:
1900:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 381              		.loc 1 1900 0
 382 0048 013C     		subs	r4, r4, #1
 383              	.LVL45:
 384 004a 64B2     		sxtb	r4, r4
 385              	.LVL46:
 386              	.L36:
1887:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 387              		.loc 1 1887 0
 388 004c 002C     		cmp	r4, #0
 389 004e 08DD     		ble	.L34
1889:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 390              		.loc 1 1889 0
 391 0050 2B69     		ldr	r3, [r5, #16]
 392 0052 33B1     		cbz	r3, .L34
1891:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 393              		.loc 1 1891 0
 394 0054 05F11000 		add	r0, r5, #16
 395 0058 FFF7FEFF 		bl	xTaskRemoveFromEventList
 396              	.LVL47:
 397 005c 0028     		cmp	r0, #0
 398 005e F3D0     		beq	.L35
 399 0060 F0E7     		b	.L39
 400              	.L34:
1908:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 401              		.loc 1 1908 0
 402 0062 FF23     		movs	r3, #255
 403 0064 85F84430 		strb	r3, [r5, #68]
 404              	.LBE89:
1910:../Middlewares/FreeRTOS//Source/queue.c **** }
 405              		.loc 1 1910 0
 406 0068 FFF7FEFF 		bl	vPortExitCritical
 407              	.LVL48:
1911:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 408              		.loc 1 1911 0
 409 006c 38BD     		pop	{r3, r4, r5, pc}
 410              		.cfi_endproc
 411              	.LFE158:
 412              		.fnend
 414              		.section	.text.xQueueGenericReset,"ax",%progbits
 415              		.align	1
 416              		.global	xQueueGenericReset
 417              		.syntax unified
 418              		.thumb
 419              		.thumb_func
 420              		.fpu fpv4-sp-d16
 422              	xQueueGenericReset:
 423              		.fnstart
 424              	.LFB135:
 280:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 425              		.loc 1 280 0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 0
 428              		@ frame_needed = 0, uses_anonymous_args = 0
 429              	.LVL49:
 430 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 44


 431              		.save {r3, r4, r5, lr}
 432              	.LCFI6:
 433              		.cfi_def_cfa_offset 16
 434              		.cfi_offset 3, -16
 435              		.cfi_offset 4, -12
 436              		.cfi_offset 5, -8
 437              		.cfi_offset 14, -4
 438              	.LVL50:
 283:../Middlewares/FreeRTOS//Source/queue.c **** 
 439              		.loc 1 283 0
 440 0002 40B9     		cbnz	r0, .L41
 441              	.LBB90:
 442              	.LBB91:
 443              		.file 2 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 45


  44:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 46


 101:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 47


 158:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 48


 215:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 238:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 444              		.loc 2 244 0
 445              		.syntax unified
 446              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 447 0004 4FF01003 			mov r3, #16												
 448 0008 83F31188 		msr basepri, r3											
 449 000c BFF36F8F 		isb														
 450 0010 BFF34F8F 		dsb														
 451              	
 452              	@ 0 "" 2
 453              	.LVL51:
 454              		.thumb
 455              		.syntax unified
 456              	.L42:
 457 0014 FEE7     		b	.L42
 458              	.L41:
 459 0016 0446     		mov	r4, r0
 460 0018 0D46     		mov	r5, r1
 461              	.LBE91:
 462              	.LBE90:
 285:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 463              		.loc 1 285 0
 464 001a FFF7FEFF 		bl	vPortEnterCritical
 465              	.LVL52:
 287:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 466              		.loc 1 287 0
 467 001e 2168     		ldr	r1, [r4]
 468 0020 E26B     		ldr	r2, [r4, #60]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 49


 469 0022 236C     		ldr	r3, [r4, #64]
 470 0024 03FB0210 		mla	r0, r3, r2, r1
 471 0028 6060     		str	r0, [r4, #4]
 288:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 472              		.loc 1 288 0
 473 002a 0020     		movs	r0, #0
 474 002c A063     		str	r0, [r4, #56]
 289:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 475              		.loc 1 289 0
 476 002e A160     		str	r1, [r4, #8]
 290:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 477              		.loc 1 290 0
 478 0030 013A     		subs	r2, r2, #1
 479 0032 02FB0313 		mla	r3, r2, r3, r1
 480 0036 E360     		str	r3, [r4, #12]
 291:../Middlewares/FreeRTOS//Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 481              		.loc 1 291 0
 482 0038 FF23     		movs	r3, #255
 483 003a 84F84430 		strb	r3, [r4, #68]
 292:../Middlewares/FreeRTOS//Source/queue.c **** 
 484              		.loc 1 292 0
 485 003e 84F84530 		strb	r3, [r4, #69]
 294:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 486              		.loc 1 294 0
 487 0042 A5B9     		cbnz	r5, .L43
 301:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 488              		.loc 1 301 0
 489 0044 2369     		ldr	r3, [r4, #16]
 490 0046 1BB9     		cbnz	r3, .L46
 491              	.L44:
 324:../Middlewares/FreeRTOS//Source/queue.c **** 
 492              		.loc 1 324 0
 493 0048 FFF7FEFF 		bl	vPortExitCritical
 494              	.LVL53:
 329:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 495              		.loc 1 329 0
 496 004c 0120     		movs	r0, #1
 497 004e 38BD     		pop	{r3, r4, r5, pc}
 498              	.LVL54:
 499              	.L46:
 303:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 500              		.loc 1 303 0
 501 0050 04F11000 		add	r0, r4, #16
 502 0054 FFF7FEFF 		bl	xTaskRemoveFromEventList
 503              	.LVL55:
 504 0058 0028     		cmp	r0, #0
 505 005a F5D0     		beq	.L44
 305:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 506              		.loc 1 305 0
 507 005c 084B     		ldr	r3, .L47
 508 005e 4FF08052 		mov	r2, #268435456
 509 0062 1A60     		str	r2, [r3]
 510              		.syntax unified
 511              	@ 305 "../Middlewares/FreeRTOS//Source/queue.c" 1
 512 0064 BFF34F8F 		dsb
 513              	@ 0 "" 2
 514              	@ 305 "../Middlewares/FreeRTOS//Source/queue.c" 1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 50


 515 0068 BFF36F8F 		isb
 516              	@ 0 "" 2
 517              		.thumb
 518              		.syntax unified
 519 006c ECE7     		b	.L44
 520              	.L43:
 320:../Middlewares/FreeRTOS//Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 521              		.loc 1 320 0
 522 006e 04F11000 		add	r0, r4, #16
 523 0072 FFF7FEFF 		bl	vListInitialise
 524              	.LVL56:
 321:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 525              		.loc 1 321 0
 526 0076 04F12400 		add	r0, r4, #36
 527 007a FFF7FEFF 		bl	vListInitialise
 528              	.LVL57:
 529 007e E3E7     		b	.L44
 530              	.L48:
 531              		.align	2
 532              	.L47:
 533 0080 04ED00E0 		.word	-536810236
 534              		.cfi_endproc
 535              	.LFE135:
 536              		.fnend
 538              		.section	.text._ZL21prvInitialiseNewQueuemmPhhP15QueueDefinition,"ax",%progbits
 539              		.align	1
 540              		.syntax unified
 541              		.thumb
 542              		.thumb_func
 543              		.fpu fpv4-sp-d16
 545              	_ZL21prvInitialiseNewQueuemmPhhP15QueueDefinition:
 546              		.fnstart
 547              	.LFB137:
 433:../Middlewares/FreeRTOS//Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 548              		.loc 1 433 0
 549              		.cfi_startproc
 550              		@ args = 4, pretend = 0, frame = 0
 551              		@ frame_needed = 0, uses_anonymous_args = 0
 552              	.LVL58:
 553 0000 38B5     		push	{r3, r4, r5, lr}
 554              		.save {r3, r4, r5, lr}
 555              	.LCFI7:
 556              		.cfi_def_cfa_offset 16
 557              		.cfi_offset 3, -16
 558              		.cfi_offset 4, -12
 559              		.cfi_offset 5, -8
 560              		.cfi_offset 14, -4
 561 0002 1D46     		mov	r5, r3
 562 0004 049C     		ldr	r4, [sp, #16]
 438:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 563              		.loc 1 438 0
 564 0006 0B46     		mov	r3, r1
 565              	.LVL59:
 566 0008 49B1     		cbz	r1, .L53
 449:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 567              		.loc 1 449 0
 568 000a 2260     		str	r2, [r4]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 51


 569              	.L51:
 454:../Middlewares/FreeRTOS//Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 570              		.loc 1 454 0
 571 000c E063     		str	r0, [r4, #60]
 455:../Middlewares/FreeRTOS//Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 572              		.loc 1 455 0
 573 000e 2364     		str	r3, [r4, #64]
 456:../Middlewares/FreeRTOS//Source/queue.c **** 
 574              		.loc 1 456 0
 575 0010 0121     		movs	r1, #1
 576              	.LVL60:
 577 0012 2046     		mov	r0, r4
 578              	.LVL61:
 579 0014 FFF7FEFF 		bl	xQueueGenericReset
 580              	.LVL62:
 460:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 581              		.loc 1 460 0
 582 0018 84F84C50 		strb	r5, [r4, #76]
 471:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 583              		.loc 1 471 0
 584 001c 38BD     		pop	{r3, r4, r5, pc}
 585              	.LVL63:
 586              	.L53:
 444:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 587              		.loc 1 444 0
 588 001e 2460     		str	r4, [r4]
 589 0020 F4E7     		b	.L51
 590              		.cfi_endproc
 591              	.LFE137:
 592              		.fnend
 594              		.section	.text.xQueueGenericCreate,"ax",%progbits
 595              		.align	1
 596              		.global	xQueueGenericCreate
 597              		.syntax unified
 598              		.thumb
 599              		.thumb_func
 600              		.fpu fpv4-sp-d16
 602              	xQueueGenericCreate:
 603              		.fnstart
 604              	.LFB136:
 387:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t *pxNewQueue;
 605              		.loc 1 387 0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 0
 608              		@ frame_needed = 0, uses_anonymous_args = 0
 609              	.LVL64:
 392:../Middlewares/FreeRTOS//Source/queue.c **** 
 610              		.loc 1 392 0
 611 0000 40B9     		cbnz	r0, .L55
 612              	.LBB92:
 613              	.LBB93:
 614              		.loc 2 244 0
 615              		.syntax unified
 616              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 617 0002 4FF01003 			mov r3, #16												
 618 0006 83F31188 		msr basepri, r3											
 619 000a BFF36F8F 		isb														
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 52


 620 000e BFF34F8F 		dsb														
 621              	
 622              	@ 0 "" 2
 623              	.LVL65:
 624              		.thumb
 625              		.syntax unified
 626              	.L56:
 627 0012 FEE7     		b	.L56
 628              	.L55:
 629              	.LBE93:
 630              	.LBE92:
 387:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t *pxNewQueue;
 631              		.loc 1 387 0
 632 0014 F0B5     		push	{r4, r5, r6, r7, lr}
 633              		.save {r4, r5, r6, r7, lr}
 634              	.LCFI8:
 635              		.cfi_def_cfa_offset 20
 636              		.cfi_offset 4, -20
 637              		.cfi_offset 5, -16
 638              		.cfi_offset 6, -12
 639              		.cfi_offset 7, -8
 640              		.cfi_offset 14, -4
 641              		.pad #12
 642 0016 83B0     		sub	sp, sp, #12
 643              	.LCFI9:
 644              		.cfi_def_cfa_offset 32
 645 0018 0546     		mov	r5, r0
 394:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 646              		.loc 1 394 0
 647 001a 11B1     		cbz	r1, .L59
 403:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 648              		.loc 1 403 0
 649 001c 01FB00F0 		mul	r0, r1, r0
 650              	.LVL66:
 651 0020 00E0     		b	.L57
 652              	.LVL67:
 653              	.L59:
 397:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 654              		.loc 1 397 0
 655 0022 0020     		movs	r0, #0
 656              	.LVL68:
 657              	.L57:
 658 0024 1746     		mov	r7, r2
 659 0026 0C46     		mov	r4, r1
 660              	.LVL69:
 406:../Middlewares/FreeRTOS//Source/queue.c **** 
 661              		.loc 1 406 0
 662 0028 5030     		adds	r0, r0, #80
 663              	.LVL70:
 664 002a FFF7FEFF 		bl	pvPortMalloc
 665              	.LVL71:
 408:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 666              		.loc 1 408 0
 667 002e 0646     		mov	r6, r0
 668 0030 38B1     		cbz	r0, .L54
 669              	.LVL72:
 423:../Middlewares/FreeRTOS//Source/queue.c **** 		}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 53


 670              		.loc 1 423 0
 671 0032 0090     		str	r0, [sp]
 672 0034 3B46     		mov	r3, r7
 673 0036 00F15002 		add	r2, r0, #80
 674              	.LVL73:
 675 003a 2146     		mov	r1, r4
 676 003c 2846     		mov	r0, r5
 677              	.LVL74:
 678 003e FFF7FEFF 		bl	_ZL21prvInitialiseNewQueuemmPhhP15QueueDefinition
 679              	.LVL75:
 680              	.L54:
 427:../Middlewares/FreeRTOS//Source/queue.c **** 
 681              		.loc 1 427 0
 682 0042 3046     		mov	r0, r6
 683 0044 03B0     		add	sp, sp, #12
 684              	.LCFI10:
 685              		.cfi_def_cfa_offset 20
 686              		@ sp needed
 687 0046 F0BD     		pop	{r4, r5, r6, r7, pc}
 688              		.cfi_endproc
 689              	.LFE136:
 690              		.fnend
 692              		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 693              		.align	1
 694              		.global	xQueueCreateCountingSemaphore
 695              		.syntax unified
 696              		.thumb
 697              		.thumb_func
 698              		.fpu fpv4-sp-d16
 700              	xQueueCreateCountingSemaphore:
 701              		.fnstart
 702              	.LFB142:
 698:../Middlewares/FreeRTOS//Source/queue.c **** 	QueueHandle_t xHandle;
 703              		.loc 1 698 0
 704              		.cfi_startproc
 705              		@ args = 0, pretend = 0, frame = 0
 706              		@ frame_needed = 0, uses_anonymous_args = 0
 707              	.LVL76:
 701:../Middlewares/FreeRTOS//Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 708              		.loc 1 701 0
 709 0000 40B9     		cbnz	r0, .L63
 710              	.LBB94:
 711              	.LBB95:
 712              		.loc 2 244 0
 713              		.syntax unified
 714              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 715 0002 4FF01003 			mov r3, #16												
 716 0006 83F31188 		msr basepri, r3											
 717 000a BFF36F8F 		isb														
 718 000e BFF34F8F 		dsb														
 719              	
 720              	@ 0 "" 2
 721              	.LVL77:
 722              		.thumb
 723              		.syntax unified
 724              	.L64:
 725 0012 FEE7     		b	.L64
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 54


 726              	.L63:
 727              	.LBE95:
 728              	.LBE94:
 702:../Middlewares/FreeRTOS//Source/queue.c **** 
 729              		.loc 1 702 0
 730 0014 8842     		cmp	r0, r1
 731 0016 08D2     		bcs	.L65
 732              	.LBB96:
 733              	.LBB97:
 734              		.loc 2 244 0
 735              		.syntax unified
 736              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 737 0018 4FF01003 			mov r3, #16												
 738 001c 83F31188 		msr basepri, r3											
 739 0020 BFF36F8F 		isb														
 740 0024 BFF34F8F 		dsb														
 741              	
 742              	@ 0 "" 2
 743              	.LVL78:
 744              		.thumb
 745              		.syntax unified
 746              	.L66:
 747 0028 FEE7     		b	.L66
 748              	.L65:
 749              	.LBE97:
 750              	.LBE96:
 698:../Middlewares/FreeRTOS//Source/queue.c **** 	QueueHandle_t xHandle;
 751              		.loc 1 698 0
 752 002a 10B5     		push	{r4, lr}
 753              		.save {r4, lr}
 754              	.LCFI11:
 755              		.cfi_def_cfa_offset 8
 756              		.cfi_offset 4, -8
 757              		.cfi_offset 14, -4
 758 002c 0C46     		mov	r4, r1
 704:../Middlewares/FreeRTOS//Source/queue.c **** 
 759              		.loc 1 704 0
 760 002e 0222     		movs	r2, #2
 761 0030 0021     		movs	r1, #0
 762              	.LVL79:
 763 0032 FFF7FEFF 		bl	xQueueGenericCreate
 764              	.LVL80:
 706:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 765              		.loc 1 706 0
 766 0036 0346     		mov	r3, r0
 767 0038 00B1     		cbz	r0, .L62
 708:../Middlewares/FreeRTOS//Source/queue.c **** 
 768              		.loc 1 708 0
 769 003a 8463     		str	r4, [r0, #56]
 770              	.L62:
 718:../Middlewares/FreeRTOS//Source/queue.c **** 
 771              		.loc 1 718 0
 772 003c 1846     		mov	r0, r3
 773              	.LVL81:
 774 003e 10BD     		pop	{r4, pc}
 775              		.cfi_endproc
 776              	.LFE142:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 55


 777              		.fnend
 779              		.section	.text.xQueueGenericSend,"ax",%progbits
 780              		.align	1
 781              		.global	xQueueGenericSend
 782              		.syntax unified
 783              		.thumb
 784              		.thumb_func
 785              		.fpu fpv4-sp-d16
 787              	xQueueGenericSend:
 788              		.fnstart
 789              	.LFB143:
 724:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 790              		.loc 1 724 0
 791              		.cfi_startproc
 792              		@ args = 0, pretend = 0, frame = 16
 793              		@ frame_needed = 0, uses_anonymous_args = 0
 794              	.LVL82:
 795 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 796              		.save {r4, r5, r6, r7, lr}
 797              	.LCFI12:
 798              		.cfi_def_cfa_offset 20
 799              		.cfi_offset 4, -20
 800              		.cfi_offset 5, -16
 801              		.cfi_offset 6, -12
 802              		.cfi_offset 7, -8
 803              		.cfi_offset 14, -4
 804              		.pad #20
 805 0002 85B0     		sub	sp, sp, #20
 806              	.LCFI13:
 807              		.cfi_def_cfa_offset 40
 808 0004 0192     		str	r2, [sp, #4]
 809              	.LVL83:
 729:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810              		.loc 1 729 0
 811 0006 60B1     		cbz	r0, .L95
 812 0008 0446     		mov	r4, r0
 730:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 813              		.loc 1 730 0
 814 000a 99B9     		cbnz	r1, .L73
 730:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 815              		.loc 1 730 0 is_stmt 0 discriminator 1
 816 000c 026C     		ldr	r2, [r0, #64]
 817              	.LVL84:
 818 000e 8AB1     		cbz	r2, .L73
 819              	.LBB98:
 820              	.LBB99:
 821              		.loc 2 244 0 is_stmt 1
 822              		.syntax unified
 823              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 824 0010 4FF01003 			mov r3, #16												
 825 0014 83F31188 		msr basepri, r3											
 826 0018 BFF36F8F 		isb														
 827 001c BFF34F8F 		dsb														
 828              	
 829              	@ 0 "" 2
 830              	.LVL85:
 831              		.thumb
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 56


 832              		.syntax unified
 833              	.L74:
 834 0020 FEE7     		b	.L74
 835              	.LVL86:
 836              	.L95:
 837              	.LBE99:
 838              	.LBE98:
 839              	.LBB100:
 840              	.LBB101:
 841              		.syntax unified
 842              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 843 0022 4FF01003 			mov r3, #16												
 844 0026 83F31188 		msr basepri, r3											
 845 002a BFF36F8F 		isb														
 846 002e BFF34F8F 		dsb														
 847              	
 848              	@ 0 "" 2
 849              	.LVL87:
 850              		.thumb
 851              		.syntax unified
 852              	.L72:
 853 0032 FEE7     		b	.L72
 854              	.LVL88:
 855              	.L73:
 856              	.LBE101:
 857              	.LBE100:
 731:../Middlewares/FreeRTOS//Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 858              		.loc 1 731 0
 859 0034 022B     		cmp	r3, #2
 860 0036 0BD1     		bne	.L75
 731:../Middlewares/FreeRTOS//Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 861              		.loc 1 731 0 is_stmt 0 discriminator 1
 862 0038 E26B     		ldr	r2, [r4, #60]
 863 003a 012A     		cmp	r2, #1
 864 003c 08D0     		beq	.L75
 865              	.LBB102:
 866              	.LBB103:
 867              		.loc 2 244 0 is_stmt 1
 868              		.syntax unified
 869              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 870 003e 4FF01003 			mov r3, #16												
 871 0042 83F31188 		msr basepri, r3											
 872 0046 BFF36F8F 		isb														
 873 004a BFF34F8F 		dsb														
 874              	
 875              	@ 0 "" 2
 876              	.LVL89:
 877              		.thumb
 878              		.syntax unified
 879              	.L76:
 880 004e FEE7     		b	.L76
 881              	.LVL90:
 882              	.L75:
 883 0050 1D46     		mov	r5, r3
 884 0052 0E46     		mov	r6, r1
 885              	.LBE103:
 886              	.LBE102:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 57


 734:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 887              		.loc 1 734 0
 888 0054 FFF7FEFF 		bl	xTaskGetSchedulerState
 889              	.LVL91:
 890 0058 0746     		mov	r7, r0
 891 005a 58B9     		cbnz	r0, .L92
 734:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 892              		.loc 1 734 0 is_stmt 0 discriminator 2
 893 005c 019B     		ldr	r3, [sp, #4]
 894 005e 002B     		cmp	r3, #0
 895 0060 43D0     		beq	.L79
 896              	.LBB104:
 897              	.LBB105:
 898              		.loc 2 244 0 is_stmt 1
 899              		.syntax unified
 900              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 901 0062 4FF01003 			mov r3, #16												
 902 0066 83F31188 		msr basepri, r3											
 903 006a BFF36F8F 		isb														
 904 006e BFF34F8F 		dsb														
 905              	
 906              	@ 0 "" 2
 907              	.LVL92:
 908              		.thumb
 909              		.syntax unified
 910              	.L78:
 911 0072 FEE7     		b	.L78
 912              	.L92:
 913              	.LBE105:
 914              	.LBE104:
 915 0074 0027     		movs	r7, #0
 916 0076 38E0     		b	.L79
 917              	.LVL93:
 918              	.L80:
 753:../Middlewares/FreeRTOS//Source/queue.c **** 
 919              		.loc 1 753 0
 920 0078 2A46     		mov	r2, r5
 921 007a 3146     		mov	r1, r6
 922 007c 2046     		mov	r0, r4
 923 007e FFF7FEFF 		bl	_ZL18prvCopyDataToQueueP15QueueDefinitionPKvl
 924              	.LVL94:
 808:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 925              		.loc 1 808 0
 926 0082 636A     		ldr	r3, [r4, #36]
 927 0084 4BB9     		cbnz	r3, .L96
 823:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 928              		.loc 1 823 0
 929 0086 A8B1     		cbz	r0, .L84
 829:../Middlewares/FreeRTOS//Source/queue.c **** 					}
 930              		.loc 1 829 0
 931 0088 3B4B     		ldr	r3, .L101
 932 008a 4FF08052 		mov	r2, #268435456
 933 008e 1A60     		str	r2, [r3]
 934              		.syntax unified
 935              	@ 829 "../Middlewares/FreeRTOS//Source/queue.c" 1
 936 0090 BFF34F8F 		dsb
 937              	@ 0 "" 2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 58


 938              	@ 829 "../Middlewares/FreeRTOS//Source/queue.c" 1
 939 0094 BFF36F8F 		isb
 940              	@ 0 "" 2
 941              		.thumb
 942              		.syntax unified
 943 0098 0CE0     		b	.L84
 944              	.L96:
 810:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 945              		.loc 1 810 0
 946 009a 04F12400 		add	r0, r4, #36
 947              	.LVL95:
 948 009e FFF7FEFF 		bl	xTaskRemoveFromEventList
 949              	.LVL96:
 950 00a2 38B1     		cbz	r0, .L84
 816:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 951              		.loc 1 816 0
 952 00a4 344B     		ldr	r3, .L101
 953 00a6 4FF08052 		mov	r2, #268435456
 954 00aa 1A60     		str	r2, [r3]
 955              		.syntax unified
 956              	@ 816 "../Middlewares/FreeRTOS//Source/queue.c" 1
 957 00ac BFF34F8F 		dsb
 958              	@ 0 "" 2
 959              	@ 816 "../Middlewares/FreeRTOS//Source/queue.c" 1
 960 00b0 BFF36F8F 		isb
 961              	@ 0 "" 2
 962              		.thumb
 963              		.syntax unified
 964              	.L84:
 838:../Middlewares/FreeRTOS//Source/queue.c **** 				return pdPASS;
 965              		.loc 1 838 0
 966 00b4 FFF7FEFF 		bl	vPortExitCritical
 967              	.LVL97:
 839:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 968              		.loc 1 839 0
 969 00b8 0120     		movs	r0, #1
 970              	.LVL98:
 971              	.L70:
 918:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 972              		.loc 1 918 0
 973 00ba 05B0     		add	sp, sp, #20
 974              	.LCFI14:
 975              		.cfi_remember_state
 976              		.cfi_def_cfa_offset 20
 977              		@ sp needed
 978 00bc F0BD     		pop	{r4, r5, r6, r7, pc}
 979              	.LVL99:
 980              	.L97:
 981              	.LCFI15:
 982              		.cfi_restore_state
 847:../Middlewares/FreeRTOS//Source/queue.c **** 
 983              		.loc 1 847 0
 984 00be FFF7FEFF 		bl	vPortExitCritical
 985              	.LVL100:
 852:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 986              		.loc 1 852 0
 987 00c2 0020     		movs	r0, #0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 59


 988 00c4 F9E7     		b	.L70
 989              	.L98:
 858:../Middlewares/FreeRTOS//Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 990              		.loc 1 858 0
 991 00c6 02A8     		add	r0, sp, #8
 992 00c8 FFF7FEFF 		bl	vTaskSetTimeOutState
 993              	.LVL101:
 859:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 994              		.loc 1 859 0
 995 00cc 0127     		movs	r7, #1
 996              	.LVL102:
 997 00ce 19E0     		b	.L86
 998              	.LVL103:
 999              	.L99:
 874:../Middlewares/FreeRTOS//Source/queue.c **** 
 1000              		.loc 1 874 0 discriminator 2
 1001 00d0 0023     		movs	r3, #0
 1002 00d2 84F84430 		strb	r3, [r4, #68]
 1003 00d6 21E0     		b	.L87
 1004              	.L100:
 874:../Middlewares/FreeRTOS//Source/queue.c **** 
 1005              		.loc 1 874 0 is_stmt 0 discriminator 5
 1006 00d8 0023     		movs	r3, #0
 1007 00da 84F84530 		strb	r3, [r4, #69]
 1008 00de 23E0     		b	.L88
 1009              	.L90:
 904:../Middlewares/FreeRTOS//Source/queue.c **** 				( void ) xTaskResumeAll();
 1010              		.loc 1 904 0 is_stmt 1
 1011 00e0 2046     		mov	r0, r4
 1012 00e2 FFF7FEFF 		bl	_ZL14prvUnlockQueueP15QueueDefinition
 1013              	.LVL104:
 905:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 1014              		.loc 1 905 0
 1015 00e6 FFF7FEFF 		bl	xTaskResumeAll
 1016              	.LVL105:
 1017              	.L79:
 744:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 1018              		.loc 1 744 0
 1019 00ea FFF7FEFF 		bl	vPortEnterCritical
 1020              	.LVL106:
 750:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 1021              		.loc 1 750 0
 1022 00ee A26B     		ldr	r2, [r4, #56]
 1023 00f0 E36B     		ldr	r3, [r4, #60]
 1024 00f2 9A42     		cmp	r2, r3
 1025 00f4 C0D3     		bcc	.L80
 750:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 1026              		.loc 1 750 0 is_stmt 0 discriminator 2
 1027 00f6 022D     		cmp	r5, #2
 1028 00f8 BED0     		beq	.L80
 843:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 1029              		.loc 1 843 0 is_stmt 1
 1030 00fa 019B     		ldr	r3, [sp, #4]
 1031 00fc 002B     		cmp	r3, #0
 1032 00fe DED0     		beq	.L97
 854:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 1033              		.loc 1 854 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 60


 1034 0100 002F     		cmp	r7, #0
 1035 0102 E0D0     		beq	.L98
 1036              	.LVL107:
 1037              	.L86:
 868:../Middlewares/FreeRTOS//Source/queue.c **** 
 1038              		.loc 1 868 0
 1039 0104 FFF7FEFF 		bl	vPortExitCritical
 1040              	.LVL108:
 873:../Middlewares/FreeRTOS//Source/queue.c **** 		prvLockQueue( pxQueue );
 1041              		.loc 1 873 0
 1042 0108 FFF7FEFF 		bl	vTaskSuspendAll
 1043              	.LVL109:
 874:../Middlewares/FreeRTOS//Source/queue.c **** 
 1044              		.loc 1 874 0
 1045 010c FFF7FEFF 		bl	vPortEnterCritical
 1046              	.LVL110:
 1047 0110 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1048 0114 5BB2     		sxtb	r3, r3
 1049 0116 B3F1FF3F 		cmp	r3, #-1
 1050 011a D9D0     		beq	.L99
 1051              	.L87:
 874:../Middlewares/FreeRTOS//Source/queue.c **** 
 1052              		.loc 1 874 0 is_stmt 0 discriminator 4
 1053 011c 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1054 0120 5BB2     		sxtb	r3, r3
 1055 0122 B3F1FF3F 		cmp	r3, #-1
 1056 0126 D7D0     		beq	.L100
 1057              	.L88:
 874:../Middlewares/FreeRTOS//Source/queue.c **** 
 1058              		.loc 1 874 0 discriminator 7
 1059 0128 FFF7FEFF 		bl	vPortExitCritical
 1060              	.LVL111:
 877:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 1061              		.loc 1 877 0 is_stmt 1 discriminator 7
 1062 012c 01A9     		add	r1, sp, #4
 1063 012e 02A8     		add	r0, sp, #8
 1064 0130 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1065              	.LVL112:
 1066 0134 C8B9     		cbnz	r0, .L89
 879:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 1067              		.loc 1 879 0
 1068 0136 2046     		mov	r0, r4
 1069 0138 FFF7FEFF 		bl	_ZL14prvIsQueueFullPK15QueueDefinition
 1070              	.LVL113:
 1071 013c 0028     		cmp	r0, #0
 1072 013e CFD0     		beq	.L90
 882:../Middlewares/FreeRTOS//Source/queue.c **** 
 1073              		.loc 1 882 0
 1074 0140 0199     		ldr	r1, [sp, #4]
 1075 0142 04F11000 		add	r0, r4, #16
 1076 0146 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1077              	.LVL114:
 889:../Middlewares/FreeRTOS//Source/queue.c **** 
 1078              		.loc 1 889 0
 1079 014a 2046     		mov	r0, r4
 1080 014c FFF7FEFF 		bl	_ZL14prvUnlockQueueP15QueueDefinition
 1081              	.LVL115:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 61


 896:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 1082              		.loc 1 896 0
 1083 0150 FFF7FEFF 		bl	xTaskResumeAll
 1084              	.LVL116:
 1085 0154 0028     		cmp	r0, #0
 1086 0156 C8D1     		bne	.L79
 898:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 1087              		.loc 1 898 0
 1088 0158 074B     		ldr	r3, .L101
 1089 015a 4FF08052 		mov	r2, #268435456
 1090 015e 1A60     		str	r2, [r3]
 1091              		.syntax unified
 1092              	@ 898 "../Middlewares/FreeRTOS//Source/queue.c" 1
 1093 0160 BFF34F8F 		dsb
 1094              	@ 0 "" 2
 1095              	@ 898 "../Middlewares/FreeRTOS//Source/queue.c" 1
 1096 0164 BFF36F8F 		isb
 1097              	@ 0 "" 2
 1098              		.thumb
 1099              		.syntax unified
 1100 0168 BFE7     		b	.L79
 1101              	.L89:
 911:../Middlewares/FreeRTOS//Source/queue.c **** 			( void ) xTaskResumeAll();
 1102              		.loc 1 911 0
 1103 016a 2046     		mov	r0, r4
 1104 016c FFF7FEFF 		bl	_ZL14prvUnlockQueueP15QueueDefinition
 1105              	.LVL117:
 912:../Middlewares/FreeRTOS//Source/queue.c **** 
 1106              		.loc 1 912 0
 1107 0170 FFF7FEFF 		bl	xTaskResumeAll
 1108              	.LVL118:
 915:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 1109              		.loc 1 915 0
 1110 0174 0020     		movs	r0, #0
 1111              	.LVL119:
 1112 0176 A0E7     		b	.L70
 1113              	.L102:
 1114              		.align	2
 1115              	.L101:
 1116 0178 04ED00E0 		.word	-536810236
 1117              		.cfi_endproc
 1118              	.LFE143:
 1119              		.fnend
 1121              		.section	.text._ZL18prvInitialiseMutexP15QueueDefinition,"ax",%progbits
 1122              		.align	1
 1123              		.syntax unified
 1124              		.thumb
 1125              		.thumb_func
 1126              		.fpu fpv4-sp-d16
 1128              	_ZL18prvInitialiseMutexP15QueueDefinition:
 1129              		.fnstart
 1130              	.LFB138:
 477:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxNewQueue != NULL )
 1131              		.loc 1 477 0
 1132              		.cfi_startproc
 1133              		@ args = 0, pretend = 0, frame = 0
 1134              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 62


 1135              	.LVL120:
 478:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 1136              		.loc 1 478 0
 1137 0000 48B1     		cbz	r0, .L106
 477:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxNewQueue != NULL )
 1138              		.loc 1 477 0
 1139 0002 08B5     		push	{r3, lr}
 1140              		.save {r3, lr}
 1141              	.LCFI16:
 1142              		.cfi_def_cfa_offset 8
 1143              		.cfi_offset 3, -8
 1144              		.cfi_offset 14, -4
 484:../Middlewares/FreeRTOS//Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1145              		.loc 1 484 0
 1146 0004 0021     		movs	r1, #0
 1147 0006 4160     		str	r1, [r0, #4]
 485:../Middlewares/FreeRTOS//Source/queue.c **** 
 1148              		.loc 1 485 0
 1149 0008 0160     		str	r1, [r0]
 488:../Middlewares/FreeRTOS//Source/queue.c **** 
 1150              		.loc 1 488 0
 1151 000a C160     		str	r1, [r0, #12]
 493:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 1152              		.loc 1 493 0
 1153 000c 0B46     		mov	r3, r1
 1154 000e 0A46     		mov	r2, r1
 1155 0010 FFF7FEFF 		bl	xQueueGenericSend
 1156              	.LVL121:
 499:../Middlewares/FreeRTOS//Source/queue.c **** 
 1157              		.loc 1 499 0
 1158 0014 08BD     		pop	{r3, pc}
 1159              	.LVL122:
 1160              	.L106:
 1161              	.LCFI17:
 1162              		.cfi_def_cfa_offset 0
 1163              		.cfi_restore 3
 1164              		.cfi_restore 14
 1165 0016 7047     		bx	lr
 1166              		.cfi_endproc
 1167              	.LFE138:
 1168              		.fnend
 1170              		.section	.text.xQueueCreateMutex,"ax",%progbits
 1171              		.align	1
 1172              		.global	xQueueCreateMutex
 1173              		.syntax unified
 1174              		.thumb
 1175              		.thumb_func
 1176              		.fpu fpv4-sp-d16
 1178              	xQueueCreateMutex:
 1179              		.fnstart
 1180              	.LFB139:
 507:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t *pxNewQueue;
 1181              		.loc 1 507 0
 1182              		.cfi_startproc
 1183              		@ args = 0, pretend = 0, frame = 0
 1184              		@ frame_needed = 0, uses_anonymous_args = 0
 1185              	.LVL123:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 63


 1186 0000 10B5     		push	{r4, lr}
 1187              		.save {r4, lr}
 1188              	.LCFI18:
 1189              		.cfi_def_cfa_offset 8
 1190              		.cfi_offset 4, -8
 1191              		.cfi_offset 14, -4
 1192              	.LVL124:
 511:../Middlewares/FreeRTOS//Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 1193              		.loc 1 511 0
 1194 0002 0246     		mov	r2, r0
 1195 0004 0021     		movs	r1, #0
 1196 0006 0120     		movs	r0, #1
 1197              	.LVL125:
 1198 0008 FFF7FEFF 		bl	xQueueGenericCreate
 1199              	.LVL126:
 1200 000c 0446     		mov	r4, r0
 1201              	.LVL127:
 512:../Middlewares/FreeRTOS//Source/queue.c **** 
 1202              		.loc 1 512 0
 1203 000e FFF7FEFF 		bl	_ZL18prvInitialiseMutexP15QueueDefinition
 1204              	.LVL128:
 515:../Middlewares/FreeRTOS//Source/queue.c **** 
 1205              		.loc 1 515 0
 1206 0012 2046     		mov	r0, r4
 1207 0014 10BD     		pop	{r4, pc}
 1208              		.cfi_endproc
 1209              	.LFE139:
 1210              		.fnend
 1212              		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 1213              		.align	1
 1214              		.global	xQueueGiveMutexRecursive
 1215              		.syntax unified
 1216              		.thumb
 1217              		.thumb_func
 1218              		.fpu fpv4-sp-d16
 1220              	xQueueGiveMutexRecursive:
 1221              		.fnstart
 1222              	.LFB140:
 573:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xReturn;
 1223              		.loc 1 573 0
 1224              		.cfi_startproc
 1225              		@ args = 0, pretend = 0, frame = 0
 1226              		@ frame_needed = 0, uses_anonymous_args = 0
 1227              	.LVL129:
 1228 0000 38B5     		push	{r3, r4, r5, lr}
 1229              		.save {r3, r4, r5, lr}
 1230              	.LCFI19:
 1231              		.cfi_def_cfa_offset 16
 1232              		.cfi_offset 3, -16
 1233              		.cfi_offset 4, -12
 1234              		.cfi_offset 5, -8
 1235              		.cfi_offset 14, -4
 1236              	.LVL130:
 577:../Middlewares/FreeRTOS//Source/queue.c **** 
 1237              		.loc 1 577 0
 1238 0002 40B9     		cbnz	r0, .L112
 1239              	.LBB106:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 64


 1240              	.LBB107:
 1241              		.loc 2 244 0
 1242              		.syntax unified
 1243              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1244 0004 4FF01003 			mov r3, #16												
 1245 0008 83F31188 		msr basepri, r3											
 1246 000c BFF36F8F 		isb														
 1247 0010 BFF34F8F 		dsb														
 1248              	
 1249              	@ 0 "" 2
 1250              	.LVL131:
 1251              		.thumb
 1252              		.syntax unified
 1253              	.L113:
 1254 0014 FEE7     		b	.L113
 1255              	.L112:
 1256 0016 0446     		mov	r4, r0
 1257              	.LBE107:
 1258              	.LBE106:
 585:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 1259              		.loc 1 585 0
 1260 0018 4568     		ldr	r5, [r0, #4]
 1261 001a FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 1262              	.LVL132:
 1263 001e 8542     		cmp	r5, r0
 1264 0020 01D0     		beq	.L118
 614:../Middlewares/FreeRTOS//Source/queue.c **** 
 1265              		.loc 1 614 0
 1266 0022 0020     		movs	r0, #0
 1267              	.LVL133:
 1268              	.L111:
 620:../Middlewares/FreeRTOS//Source/queue.c **** 
 1269              		.loc 1 620 0
 1270 0024 38BD     		pop	{r3, r4, r5, pc}
 1271              	.LVL134:
 1272              	.L118:
 594:../Middlewares/FreeRTOS//Source/queue.c **** 
 1273              		.loc 1 594 0
 1274 0026 E368     		ldr	r3, [r4, #12]
 1275 0028 013B     		subs	r3, r3, #1
 1276 002a E360     		str	r3, [r4, #12]
 597:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 1277              		.loc 1 597 0
 1278 002c 33B9     		cbnz	r3, .L116
 601:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 1279              		.loc 1 601 0
 1280 002e 1A46     		mov	r2, r3
 1281 0030 1946     		mov	r1, r3
 1282 0032 2046     		mov	r0, r4
 1283 0034 FFF7FEFF 		bl	xQueueGenericSend
 1284              	.LVL135:
 608:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 1285              		.loc 1 608 0
 1286 0038 0120     		movs	r0, #1
 1287 003a F3E7     		b	.L111
 1288              	.L116:
 1289 003c 0120     		movs	r0, #1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 65


 1290              	.LVL136:
 619:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 1291              		.loc 1 619 0
 1292 003e F1E7     		b	.L111
 1293              		.cfi_endproc
 1294              	.LFE140:
 1295              		.fnend
 1297              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1298              		.align	1
 1299              		.global	xQueueGenericSendFromISR
 1300              		.syntax unified
 1301              		.thumb
 1302              		.thumb_func
 1303              		.fpu fpv4-sp-d16
 1305              	xQueueGenericSendFromISR:
 1306              		.fnstart
 1307              	.LFB144:
 922:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
 1308              		.loc 1 922 0
 1309              		.cfi_startproc
 1310              		@ args = 0, pretend = 0, frame = 0
 1311              		@ frame_needed = 0, uses_anonymous_args = 0
 1312              	.LVL137:
 1313 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1314              		.save {r3, r4, r5, r6, r7, r8, r9, lr}
 1315              	.LCFI20:
 1316              		.cfi_def_cfa_offset 32
 1317              		.cfi_offset 3, -32
 1318              		.cfi_offset 4, -28
 1319              		.cfi_offset 5, -24
 1320              		.cfi_offset 6, -20
 1321              		.cfi_offset 7, -16
 1322              		.cfi_offset 8, -12
 1323              		.cfi_offset 9, -8
 1324              		.cfi_offset 14, -4
 1325              	.LVL138:
 927:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1326              		.loc 1 927 0
 1327 0004 60B1     		cbz	r0, .L134
 1328 0006 0446     		mov	r4, r0
 928:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1329              		.loc 1 928 0
 1330 0008 99B9     		cbnz	r1, .L122
 928:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1331              		.loc 1 928 0 is_stmt 0 discriminator 1
 1332 000a 006C     		ldr	r0, [r0, #64]
 1333              	.LVL139:
 1334 000c 88B1     		cbz	r0, .L122
 1335              	.LBB108:
 1336              	.LBB109:
 1337              		.loc 2 244 0 is_stmt 1
 1338              		.syntax unified
 1339              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1340 000e 4FF01003 			mov r3, #16												
 1341 0012 83F31188 		msr basepri, r3											
 1342 0016 BFF36F8F 		isb														
 1343 001a BFF34F8F 		dsb														
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 66


 1344              	
 1345              	@ 0 "" 2
 1346              	.LVL140:
 1347              		.thumb
 1348              		.syntax unified
 1349              	.L123:
 1350 001e FEE7     		b	.L123
 1351              	.LVL141:
 1352              	.L134:
 1353              	.LBE109:
 1354              	.LBE108:
 1355              	.LBB110:
 1356              	.LBB111:
 1357              		.syntax unified
 1358              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1359 0020 4FF01003 			mov r3, #16												
 1360 0024 83F31188 		msr basepri, r3											
 1361 0028 BFF36F8F 		isb														
 1362 002c BFF34F8F 		dsb														
 1363              	
 1364              	@ 0 "" 2
 1365              	.LVL142:
 1366              		.thumb
 1367              		.syntax unified
 1368              	.L121:
 1369 0030 FEE7     		b	.L121
 1370              	.LVL143:
 1371              	.L122:
 1372              	.LBE111:
 1373              	.LBE110:
 929:../Middlewares/FreeRTOS//Source/queue.c **** 
 1374              		.loc 1 929 0
 1375 0032 022B     		cmp	r3, #2
 1376 0034 0BD1     		bne	.L124
 929:../Middlewares/FreeRTOS//Source/queue.c **** 
 1377              		.loc 1 929 0 is_stmt 0 discriminator 1
 1378 0036 E06B     		ldr	r0, [r4, #60]
 1379 0038 0128     		cmp	r0, #1
 1380 003a 08D0     		beq	.L124
 1381              	.LBB112:
 1382              	.LBB113:
 1383              		.loc 2 244 0 is_stmt 1
 1384              		.syntax unified
 1385              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1386 003c 4FF01003 			mov r3, #16												
 1387 0040 83F31188 		msr basepri, r3											
 1388 0044 BFF36F8F 		isb														
 1389 0048 BFF34F8F 		dsb														
 1390              	
 1391              	@ 0 "" 2
 1392              	.LVL144:
 1393              		.thumb
 1394              		.syntax unified
 1395              	.L125:
 1396 004c FEE7     		b	.L125
 1397              	.LVL145:
 1398              	.L124:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 67


 1399 004e 1F46     		mov	r7, r3
 1400 0050 9046     		mov	r8, r2
 1401 0052 8946     		mov	r9, r1
 1402              	.LBE113:
 1403              	.LBE112:
 945:../Middlewares/FreeRTOS//Source/queue.c **** 
 1404              		.loc 1 945 0
 1405 0054 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1406              	.LVL146:
 1407              	.LBB114:
 1408              	.LBB115:
 245:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 254:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 1409              		.loc 2 261 0
 1410              		.syntax unified
 1411              	@ 261 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1412 0058 EFF31186 			mrs r6, basepri											
 1413 005c 4FF01003 		mov r3, #16												
 1414 0060 83F31188 		msr basepri, r3											
 1415 0064 BFF36F8F 		isb														
 1416 0068 BFF34F8F 		dsb														
 1417              	
 1418              	@ 0 "" 2
 1419              		.thumb
 1420              		.syntax unified
 1421              	.LBE115:
 1422              	.LBE114:
 1423              	.LBB116:
 954:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 1424              		.loc 1 954 0
 1425 006c A26B     		ldr	r2, [r4, #56]
 1426 006e E36B     		ldr	r3, [r4, #60]
 1427 0070 9A42     		cmp	r2, r3
 1428 0072 03D3     		bcc	.L126
 954:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 1429              		.loc 1 954 0 is_stmt 0 discriminator 2
 1430 0074 022F     		cmp	r7, #2
 1431 0076 01D0     		beq	.L126
1063:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 1432              		.loc 1 1063 0 is_stmt 1
 1433 0078 0020     		movs	r0, #0
 1434 007a 0FE0     		b	.L127
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 68


 1435              	.L126:
 1436              	.LBB117:
 956:../Middlewares/FreeRTOS//Source/queue.c **** 
 1437              		.loc 1 956 0
 1438 007c 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2
 1439 0080 6DB2     		sxtb	r5, r5
 1440              	.LVL147:
 965:../Middlewares/FreeRTOS//Source/queue.c **** 
 1441              		.loc 1 965 0
 1442 0082 3A46     		mov	r2, r7
 1443 0084 4946     		mov	r1, r9
 1444 0086 2046     		mov	r0, r4
 1445 0088 FFF7FEFF 		bl	_ZL18prvCopyDataToQueueP15QueueDefinitionPKvl
 1446              	.LVL148:
 969:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 1447              		.loc 1 969 0
 1448 008c B5F1FF3F 		cmp	r5, #-1
 1449 0090 08D0     		beq	.L135
1055:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 1450              		.loc 1 1055 0
 1451 0092 6B1C     		adds	r3, r5, #1
 1452 0094 5BB2     		sxtb	r3, r3
 1453 0096 84F84530 		strb	r3, [r4, #69]
1058:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 1454              		.loc 1 1058 0
 1455 009a 0120     		movs	r0, #1
 1456              	.LVL149:
 1457              	.L127:
 1458              	.LBE117:
 1459              	.LBE116:
 1460              	.LBB119:
 1461              	.LBB120:
 262:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 266:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 272:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 273:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
 274:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 1462              		.loc 2 274 0
 1463              		.syntax unified
 1464              	@ 274 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1465 009c 86F31188 			msr basepri, r6	
 1466              	@ 0 "" 2
 1467              	.LVL150:
 1468              		.thumb
 1469              		.syntax unified
 1470              	.LBE120:
 1471              	.LBE119:
1069:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 1472              		.loc 1 1069 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 69


 1473 00a0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1474              	.LVL151:
 1475              	.L135:
 1476              	.LBB121:
 1477              	.LBB118:
1024:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 1478              		.loc 1 1024 0
 1479 00a4 636A     		ldr	r3, [r4, #36]
 1480 00a6 5BB1     		cbz	r3, .L130
1026:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 1481              		.loc 1 1026 0
 1482 00a8 04F12400 		add	r0, r4, #36
 1483 00ac FFF7FEFF 		bl	xTaskRemoveFromEventList
 1484              	.LVL152:
 1485 00b0 40B1     		cbz	r0, .L131
1030:../Middlewares/FreeRTOS//Source/queue.c **** 							{
 1486              		.loc 1 1030 0
 1487 00b2 B8F1000F 		cmp	r8, #0
 1488 00b6 07D0     		beq	.L132
1032:../Middlewares/FreeRTOS//Source/queue.c **** 							}
 1489              		.loc 1 1032 0
 1490 00b8 0120     		movs	r0, #1
 1491 00ba C8F80000 		str	r0, [r8]
 1492 00be EDE7     		b	.L127
 1493              	.L130:
1058:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 1494              		.loc 1 1058 0
 1495 00c0 0120     		movs	r0, #1
 1496 00c2 EBE7     		b	.L127
 1497              	.L131:
 1498 00c4 0120     		movs	r0, #1
 1499 00c6 E9E7     		b	.L127
 1500              	.L132:
 1501 00c8 0120     		movs	r0, #1
 1502 00ca E7E7     		b	.L127
 1503              	.LBE118:
 1504              	.LBE121:
 1505              		.cfi_endproc
 1506              	.LFE144:
 1507              		.fnend
 1509              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1510              		.align	1
 1511              		.global	xQueueGiveFromISR
 1512              		.syntax unified
 1513              		.thumb
 1514              		.thumb_func
 1515              		.fpu fpv4-sp-d16
 1517              	xQueueGiveFromISR:
 1518              		.fnstart
 1519              	.LFB145:
1073:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
 1520              		.loc 1 1073 0
 1521              		.cfi_startproc
 1522              		@ args = 0, pretend = 0, frame = 0
 1523              		@ frame_needed = 0, uses_anonymous_args = 0
 1524              	.LVL153:
1084:../Middlewares/FreeRTOS//Source/queue.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 70


 1525              		.loc 1 1084 0
 1526 0000 60B1     		cbz	r0, .L151
1073:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
 1527              		.loc 1 1073 0
 1528 0002 70B5     		push	{r4, r5, r6, lr}
 1529              		.save {r4, r5, r6, lr}
 1530              	.LCFI21:
 1531              		.cfi_def_cfa_offset 16
 1532              		.cfi_offset 4, -16
 1533              		.cfi_offset 5, -12
 1534              		.cfi_offset 6, -8
 1535              		.cfi_offset 14, -4
 1536 0004 0446     		mov	r4, r0
1088:../Middlewares/FreeRTOS//Source/queue.c **** 
 1537              		.loc 1 1088 0
 1538 0006 036C     		ldr	r3, [r0, #64]
 1539 0008 8BB1     		cbz	r3, .L139
 1540              	.LBB122:
 1541              	.LBB123:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1542              		.loc 2 244 0
 1543              		.syntax unified
 1544              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1545 000a 4FF01003 			mov r3, #16												
 1546 000e 83F31188 		msr basepri, r3											
 1547 0012 BFF36F8F 		isb														
 1548 0016 BFF34F8F 		dsb														
 1549              	
 1550              	@ 0 "" 2
 1551              	.LVL154:
 1552              		.thumb
 1553              		.syntax unified
 1554              	.L140:
 1555 001a FEE7     		b	.L140
 1556              	.L151:
 1557              	.LCFI22:
 1558              		.cfi_def_cfa_offset 0
 1559              		.cfi_restore 4
 1560              		.cfi_restore 5
 1561              		.cfi_restore 6
 1562              		.cfi_restore 14
 1563              	.LBE123:
 1564              	.LBE122:
 1565              	.LBB124:
 1566              	.LBB125:
 1567              		.syntax unified
 1568              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1569 001c 4FF01003 			mov r3, #16												
 1570 0020 83F31188 		msr basepri, r3											
 1571 0024 BFF36F8F 		isb														
 1572 0028 BFF34F8F 		dsb														
 1573              	
 1574              	@ 0 "" 2
 1575              	.LVL155:
 1576              		.thumb
 1577              		.syntax unified
 1578              	.L138:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 71


 1579 002c FEE7     		b	.L138
 1580              	.L139:
 1581              	.LCFI23:
 1582              		.cfi_def_cfa_offset 16
 1583              		.cfi_offset 4, -16
 1584              		.cfi_offset 5, -12
 1585              		.cfi_offset 6, -8
 1586              		.cfi_offset 14, -4
 1587              	.LBE125:
 1588              	.LBE124:
1093:../Middlewares/FreeRTOS//Source/queue.c **** 
 1589              		.loc 1 1093 0
 1590 002e 0368     		ldr	r3, [r0]
 1591 0030 2BB3     		cbz	r3, .L152
 1592              	.L141:
 1593 0032 0E46     		mov	r6, r1
1109:../Middlewares/FreeRTOS//Source/queue.c **** 
 1594              		.loc 1 1109 0
 1595 0034 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1596              	.LVL156:
 1597              	.LBB126:
 1598              	.LBB127:
 261:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1599              		.loc 2 261 0
 1600              		.syntax unified
 1601              	@ 261 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1602 0038 EFF31185 			mrs r5, basepri											
 1603 003c 4FF01003 		mov r3, #16												
 1604 0040 83F31188 		msr basepri, r3											
 1605 0044 BFF36F8F 		isb														
 1606 0048 BFF34F8F 		dsb														
 1607              	
 1608              	@ 0 "" 2
 1609              		.thumb
 1610              		.syntax unified
 1611              	.LBE127:
 1612              	.LBE126:
 1613              	.LBB128:
1113:../Middlewares/FreeRTOS//Source/queue.c **** 
 1614              		.loc 1 1113 0
 1615 004c A26B     		ldr	r2, [r4, #56]
 1616              	.LVL157:
 1617              	.LBB129:
1118:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 1618              		.loc 1 1118 0
 1619 004e E36B     		ldr	r3, [r4, #60]
 1620 0050 9342     		cmp	r3, r2
 1621 0052 26D9     		bls	.L145
 1622              	.LBB130:
1120:../Middlewares/FreeRTOS//Source/queue.c **** 
 1623              		.loc 1 1120 0
 1624 0054 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1625 0058 5BB2     		sxtb	r3, r3
 1626              	.LVL158:
1130:../Middlewares/FreeRTOS//Source/queue.c **** 
 1627              		.loc 1 1130 0
 1628 005a 0132     		adds	r2, r2, #1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 72


 1629              	.LVL159:
 1630 005c A263     		str	r2, [r4, #56]
1134:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 1631              		.loc 1 1134 0
 1632 005e B3F1FF3F 		cmp	r3, #-1
 1633 0062 18D1     		bne	.L144
1189:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 1634              		.loc 1 1189 0
 1635 0064 636A     		ldr	r3, [r4, #36]
 1636              	.LVL160:
 1637 0066 F3B1     		cbz	r3, .L146
1191:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 1638              		.loc 1 1191 0
 1639 0068 04F12400 		add	r0, r4, #36
 1640 006c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1641              	.LVL161:
 1642 0070 D8B1     		cbz	r0, .L147
1195:../Middlewares/FreeRTOS//Source/queue.c **** 							{
 1643              		.loc 1 1195 0
 1644 0072 E6B1     		cbz	r6, .L148
1197:../Middlewares/FreeRTOS//Source/queue.c **** 							}
 1645              		.loc 1 1197 0
 1646 0074 0120     		movs	r0, #1
 1647 0076 3060     		str	r0, [r6]
 1648              	.L143:
 1649              	.LVL162:
 1650              	.LBE130:
 1651              	.LBE129:
 1652              	.LBE128:
 1653              	.LBB134:
 1654              	.LBB135:
 1655              		.loc 2 274 0
 1656              		.syntax unified
 1657              	@ 274 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1658 0078 85F31188 			msr basepri, r5	
 1659              	@ 0 "" 2
 1660              	.LVL163:
 1661              		.thumb
 1662              		.syntax unified
 1663              	.LBE135:
 1664              	.LBE134:
1234:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 1665              		.loc 1 1234 0
 1666 007c 70BD     		pop	{r4, r5, r6, pc}
 1667              	.LVL164:
 1668              	.L152:
1093:../Middlewares/FreeRTOS//Source/queue.c **** 
 1669              		.loc 1 1093 0 discriminator 1
 1670 007e 4368     		ldr	r3, [r0, #4]
 1671 0080 002B     		cmp	r3, #0
 1672 0082 D6D0     		beq	.L141
 1673              	.LBB136:
 1674              	.LBB137:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1675              		.loc 2 244 0
 1676              		.syntax unified
 1677              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 73


 1678 0084 4FF01003 			mov r3, #16												
 1679 0088 83F31188 		msr basepri, r3											
 1680 008c BFF36F8F 		isb														
 1681 0090 BFF34F8F 		dsb														
 1682              	
 1683              	@ 0 "" 2
 1684              	.LVL165:
 1685              		.thumb
 1686              		.syntax unified
 1687              	.L142:
 1688 0094 FEE7     		b	.L142
 1689              	.LVL166:
 1690              	.L144:
 1691              	.LBE137:
 1692              	.LBE136:
 1693              	.LBB138:
 1694              	.LBB133:
 1695              	.LBB131:
1220:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 1696              		.loc 1 1220 0
 1697 0096 0133     		adds	r3, r3, #1
 1698              	.LVL167:
 1699 0098 5BB2     		sxtb	r3, r3
 1700              	.LVL168:
 1701 009a 84F84530 		strb	r3, [r4, #69]
1223:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 1702              		.loc 1 1223 0
 1703 009e 0120     		movs	r0, #1
 1704 00a0 EAE7     		b	.L143
 1705              	.LVL169:
 1706              	.L145:
 1707              	.LBE131:
1228:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 1708              		.loc 1 1228 0
 1709 00a2 0020     		movs	r0, #0
 1710 00a4 E8E7     		b	.L143
 1711              	.LVL170:
 1712              	.L146:
 1713              	.LBB132:
1223:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 1714              		.loc 1 1223 0
 1715 00a6 0120     		movs	r0, #1
 1716 00a8 E6E7     		b	.L143
 1717              	.LVL171:
 1718              	.L147:
 1719 00aa 0120     		movs	r0, #1
 1720 00ac E4E7     		b	.L143
 1721              	.L148:
 1722 00ae 0120     		movs	r0, #1
 1723 00b0 E2E7     		b	.L143
 1724              	.LBE132:
 1725              	.LBE133:
 1726              	.LBE138:
 1727              		.cfi_endproc
 1728              	.LFE145:
 1729              		.fnend
 1731              		.section	.text.xQueueGenericReceive,"ax",%progbits
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 74


 1732              		.align	1
 1733              		.global	xQueueGenericReceive
 1734              		.syntax unified
 1735              		.thumb
 1736              		.thumb_func
 1737              		.fpu fpv4-sp-d16
 1739              	xQueueGenericReceive:
 1740              		.fnstart
 1741              	.LFB146:
1238:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1742              		.loc 1 1238 0
 1743              		.cfi_startproc
 1744              		@ args = 0, pretend = 0, frame = 16
 1745              		@ frame_needed = 0, uses_anonymous_args = 0
 1746              	.LVL172:
 1747 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1748              		.save {r4, r5, r6, r7, r8, lr}
 1749              	.LCFI24:
 1750              		.cfi_def_cfa_offset 24
 1751              		.cfi_offset 4, -24
 1752              		.cfi_offset 5, -20
 1753              		.cfi_offset 6, -16
 1754              		.cfi_offset 7, -12
 1755              		.cfi_offset 8, -8
 1756              		.cfi_offset 14, -4
 1757              		.pad #16
 1758 0004 84B0     		sub	sp, sp, #16
 1759              	.LCFI25:
 1760              		.cfi_def_cfa_offset 40
 1761 0006 0192     		str	r2, [sp, #4]
 1762              	.LVL173:
1244:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1763              		.loc 1 1244 0
 1764 0008 60B1     		cbz	r0, .L176
 1765 000a 0446     		mov	r4, r0
1245:../Middlewares/FreeRTOS//Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1766              		.loc 1 1245 0
 1767 000c 99B9     		cbnz	r1, .L156
1245:../Middlewares/FreeRTOS//Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1768              		.loc 1 1245 0 is_stmt 0 discriminator 1
 1769 000e 026C     		ldr	r2, [r0, #64]
 1770              	.LVL174:
 1771 0010 8AB1     		cbz	r2, .L156
 1772              	.LBB139:
 1773              	.LBB140:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1774              		.loc 2 244 0 is_stmt 1
 1775              		.syntax unified
 1776              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1777 0012 4FF01003 			mov r3, #16												
 1778 0016 83F31188 		msr basepri, r3											
 1779 001a BFF36F8F 		isb														
 1780 001e BFF34F8F 		dsb														
 1781              	
 1782              	@ 0 "" 2
 1783              	.LVL175:
 1784              		.thumb
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 75


 1785              		.syntax unified
 1786              	.L157:
 1787 0022 FEE7     		b	.L157
 1788              	.LVL176:
 1789              	.L176:
 1790              	.LBE140:
 1791              	.LBE139:
 1792              	.LBB141:
 1793              	.LBB142:
 1794              		.syntax unified
 1795              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1796 0024 4FF01003 			mov r3, #16												
 1797 0028 83F31188 		msr basepri, r3											
 1798 002c BFF36F8F 		isb														
 1799 0030 BFF34F8F 		dsb														
 1800              	
 1801              	@ 0 "" 2
 1802              	.LVL177:
 1803              		.thumb
 1804              		.syntax unified
 1805              	.L155:
 1806 0034 FEE7     		b	.L155
 1807              	.LVL178:
 1808              	.L156:
 1809 0036 1F46     		mov	r7, r3
 1810 0038 8846     		mov	r8, r1
 1811              	.LBE142:
 1812              	.LBE141:
1248:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 1813              		.loc 1 1248 0
 1814 003a FFF7FEFF 		bl	xTaskGetSchedulerState
 1815              	.LVL179:
 1816 003e 0646     		mov	r6, r0
 1817 0040 58B9     		cbnz	r0, .L174
1248:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 1818              		.loc 1 1248 0 is_stmt 0 discriminator 2
 1819 0042 019B     		ldr	r3, [sp, #4]
 1820 0044 002B     		cmp	r3, #0
 1821 0046 68D0     		beq	.L160
 1822              	.LBB143:
 1823              	.LBB144:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1824              		.loc 2 244 0 is_stmt 1
 1825              		.syntax unified
 1826              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1827 0048 4FF01003 			mov r3, #16												
 1828 004c 83F31188 		msr basepri, r3											
 1829 0050 BFF36F8F 		isb														
 1830 0054 BFF34F8F 		dsb														
 1831              	
 1832              	@ 0 "" 2
 1833              	.LVL180:
 1834              		.thumb
 1835              		.syntax unified
 1836              	.L159:
 1837 0058 FEE7     		b	.L159
 1838              	.L174:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 76


 1839              	.LBE144:
 1840              	.LBE143:
 1841 005a 0026     		movs	r6, #0
 1842 005c 5DE0     		b	.L160
 1843              	.LVL181:
 1844              	.L178:
 1845              	.LBB145:
 1846              	.LBB146:
1268:../Middlewares/FreeRTOS//Source/queue.c **** 
 1847              		.loc 1 1268 0
 1848 005e E668     		ldr	r6, [r4, #12]
 1849              	.LVL182:
1270:../Middlewares/FreeRTOS//Source/queue.c **** 
 1850              		.loc 1 1270 0
 1851 0060 4146     		mov	r1, r8
 1852 0062 2046     		mov	r0, r4
 1853 0064 FFF7FEFF 		bl	_ZL20prvCopyDataFromQueueP15QueueDefinitionPv
 1854              	.LVL183:
1272:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 1855              		.loc 1 1272 0
 1856 0068 DFB9     		cbnz	r7, .L162
1277:../Middlewares/FreeRTOS//Source/queue.c **** 
 1857              		.loc 1 1277 0
 1858 006a 013D     		subs	r5, r5, #1
 1859              	.LVL184:
 1860 006c A563     		str	r5, [r4, #56]
1281:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 1861              		.loc 1 1281 0
 1862 006e 2368     		ldr	r3, [r4]
 1863 0070 13B9     		cbnz	r3, .L163
1285:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 1864              		.loc 1 1285 0
 1865 0072 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1866              	.LVL185:
 1867 0076 6060     		str	r0, [r4, #4]
 1868              	.L163:
1294:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 1869              		.loc 1 1294 0
 1870 0078 2369     		ldr	r3, [r4, #16]
 1871 007a 63B1     		cbz	r3, .L164
1296:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 1872              		.loc 1 1296 0
 1873 007c 04F11000 		add	r0, r4, #16
 1874 0080 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1875              	.LVL186:
 1876 0084 38B1     		cbz	r0, .L164
1298:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 1877              		.loc 1 1298 0
 1878 0086 464B     		ldr	r3, .L184
 1879 0088 4FF08052 		mov	r2, #268435456
 1880 008c 1A60     		str	r2, [r3]
 1881              		.syntax unified
 1882              	@ 1298 "../Middlewares/FreeRTOS//Source/queue.c" 1
 1883 008e BFF34F8F 		dsb
 1884              	@ 0 "" 2
 1885              	@ 1298 "../Middlewares/FreeRTOS//Source/queue.c" 1
 1886 0092 BFF36F8F 		isb
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 77


 1887              	@ 0 "" 2
 1888              	.LVL187:
 1889              		.thumb
 1890              		.syntax unified
 1891              	.L164:
1338:../Middlewares/FreeRTOS//Source/queue.c **** 				return pdPASS;
 1892              		.loc 1 1338 0
 1893 0096 FFF7FEFF 		bl	vPortExitCritical
 1894              	.LVL188:
1339:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 1895              		.loc 1 1339 0
 1896 009a 0120     		movs	r0, #1
 1897              	.LVL189:
 1898              	.L153:
 1899              	.LBE146:
 1900              	.LBE145:
1431:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 1901              		.loc 1 1431 0
 1902 009c 04B0     		add	sp, sp, #16
 1903              	.LCFI26:
 1904              		.cfi_remember_state
 1905              		.cfi_def_cfa_offset 24
 1906              		@ sp needed
 1907 009e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1908              	.LVL190:
 1909              	.L162:
 1910              	.LCFI27:
 1911              		.cfi_restore_state
 1912              	.LBB149:
 1913              	.LBB147:
1316:../Middlewares/FreeRTOS//Source/queue.c **** 
 1914              		.loc 1 1316 0
 1915 00a2 E660     		str	r6, [r4, #12]
1320:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 1916              		.loc 1 1320 0
 1917 00a4 636A     		ldr	r3, [r4, #36]
 1918 00a6 002B     		cmp	r3, #0
 1919 00a8 F5D0     		beq	.L164
1322:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 1920              		.loc 1 1322 0
 1921 00aa 04F12400 		add	r0, r4, #36
 1922 00ae FFF7FEFF 		bl	xTaskRemoveFromEventList
 1923              	.LVL191:
 1924 00b2 0028     		cmp	r0, #0
 1925 00b4 EFD0     		beq	.L164
1325:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 1926              		.loc 1 1325 0
 1927 00b6 3A4B     		ldr	r3, .L184
 1928 00b8 4FF08052 		mov	r2, #268435456
 1929 00bc 1A60     		str	r2, [r3]
 1930              		.syntax unified
 1931              	@ 1325 "../Middlewares/FreeRTOS//Source/queue.c" 1
 1932 00be BFF34F8F 		dsb
 1933              	@ 0 "" 2
 1934              	@ 1325 "../Middlewares/FreeRTOS//Source/queue.c" 1
 1935 00c2 BFF36F8F 		isb
 1936              	@ 0 "" 2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 78


 1937              		.thumb
 1938              		.syntax unified
 1939 00c6 E6E7     		b	.L164
 1940              	.LVL192:
 1941              	.L179:
1347:../Middlewares/FreeRTOS//Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1942              		.loc 1 1347 0
 1943 00c8 FFF7FEFF 		bl	vPortExitCritical
 1944              	.LVL193:
1349:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 1945              		.loc 1 1349 0
 1946 00cc 0020     		movs	r0, #0
 1947 00ce E5E7     		b	.L153
 1948              	.L180:
1355:../Middlewares/FreeRTOS//Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1949              		.loc 1 1355 0
 1950 00d0 02A8     		add	r0, sp, #8
 1951 00d2 FFF7FEFF 		bl	vTaskSetTimeOutState
 1952              	.LVL194:
1356:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 1953              		.loc 1 1356 0
 1954 00d6 0126     		movs	r6, #1
 1955              	.LVL195:
 1956 00d8 29E0     		b	.L167
 1957              	.LVL196:
 1958              	.L181:
 1959              	.LBE147:
1371:../Middlewares/FreeRTOS//Source/queue.c **** 
 1960              		.loc 1 1371 0 discriminator 2
 1961 00da 0023     		movs	r3, #0
 1962 00dc 84F84430 		strb	r3, [r4, #68]
 1963 00e0 31E0     		b	.L168
 1964              	.L182:
1371:../Middlewares/FreeRTOS//Source/queue.c **** 
 1965              		.loc 1 1371 0 is_stmt 0 discriminator 5
 1966 00e2 0023     		movs	r3, #0
 1967 00e4 84F84530 		strb	r3, [r4, #69]
 1968 00e8 33E0     		b	.L169
 1969              	.L183:
1384:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 1970              		.loc 1 1384 0 is_stmt 1
 1971 00ea FFF7FEFF 		bl	vPortEnterCritical
 1972              	.LVL197:
1386:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 1973              		.loc 1 1386 0
 1974 00ee 6068     		ldr	r0, [r4, #4]
 1975 00f0 FFF7FEFF 		bl	vTaskPriorityInherit
 1976              	.LVL198:
1388:../Middlewares/FreeRTOS//Source/queue.c **** 					}
 1977              		.loc 1 1388 0
 1978 00f4 FFF7FEFF 		bl	vPortExitCritical
 1979              	.LVL199:
 1980 00f8 3BE0     		b	.L172
 1981              	.L171:
1411:../Middlewares/FreeRTOS//Source/queue.c **** 				( void ) xTaskResumeAll();
 1982              		.loc 1 1411 0
 1983 00fa 2046     		mov	r0, r4
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 79


 1984 00fc FFF7FEFF 		bl	_ZL14prvUnlockQueueP15QueueDefinition
 1985              	.LVL200:
1412:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 1986              		.loc 1 1412 0
 1987 0100 FFF7FEFF 		bl	xTaskResumeAll
 1988              	.LVL201:
 1989 0104 09E0     		b	.L160
 1990              	.L170:
1417:../Middlewares/FreeRTOS//Source/queue.c **** 			( void ) xTaskResumeAll();
 1991              		.loc 1 1417 0
 1992 0106 2046     		mov	r0, r4
 1993 0108 FFF7FEFF 		bl	_ZL14prvUnlockQueueP15QueueDefinition
 1994              	.LVL202:
1418:../Middlewares/FreeRTOS//Source/queue.c **** 
 1995              		.loc 1 1418 0
 1996 010c FFF7FEFF 		bl	xTaskResumeAll
 1997              	.LVL203:
1420:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 1998              		.loc 1 1420 0
 1999 0110 2046     		mov	r0, r4
 2000 0112 FFF7FEFF 		bl	_ZL15prvIsQueueEmptyPK15QueueDefinition
 2001              	.LVL204:
 2002 0116 0028     		cmp	r0, #0
 2003 0118 40D1     		bne	.L177
 2004              	.LVL205:
 2005              	.L160:
1258:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 2006              		.loc 1 1258 0
 2007 011a FFF7FEFF 		bl	vPortEnterCritical
 2008              	.LVL206:
 2009              	.LBB148:
1260:../Middlewares/FreeRTOS//Source/queue.c **** 
 2010              		.loc 1 1260 0
 2011 011e A56B     		ldr	r5, [r4, #56]
 2012              	.LVL207:
1264:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 2013              		.loc 1 1264 0
 2014 0120 002D     		cmp	r5, #0
 2015 0122 9CD1     		bne	.L178
1343:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 2016              		.loc 1 1343 0
 2017 0124 019B     		ldr	r3, [sp, #4]
 2018 0126 002B     		cmp	r3, #0
 2019 0128 CED0     		beq	.L179
1351:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 2020              		.loc 1 1351 0
 2021 012a 002E     		cmp	r6, #0
 2022 012c D0D0     		beq	.L180
 2023              	.LVL208:
 2024              	.L167:
 2025              	.LBE148:
1365:../Middlewares/FreeRTOS//Source/queue.c **** 
 2026              		.loc 1 1365 0
 2027 012e FFF7FEFF 		bl	vPortExitCritical
 2028              	.LVL209:
1370:../Middlewares/FreeRTOS//Source/queue.c **** 		prvLockQueue( pxQueue );
 2029              		.loc 1 1370 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 80


 2030 0132 FFF7FEFF 		bl	vTaskSuspendAll
 2031              	.LVL210:
1371:../Middlewares/FreeRTOS//Source/queue.c **** 
 2032              		.loc 1 1371 0
 2033 0136 FFF7FEFF 		bl	vPortEnterCritical
 2034              	.LVL211:
 2035 013a 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2036 013e 5BB2     		sxtb	r3, r3
 2037 0140 B3F1FF3F 		cmp	r3, #-1
 2038 0144 C9D0     		beq	.L181
 2039              	.L168:
1371:../Middlewares/FreeRTOS//Source/queue.c **** 
 2040              		.loc 1 1371 0 is_stmt 0 discriminator 4
 2041 0146 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2042 014a 5BB2     		sxtb	r3, r3
 2043 014c B3F1FF3F 		cmp	r3, #-1
 2044 0150 C7D0     		beq	.L182
 2045              	.L169:
1371:../Middlewares/FreeRTOS//Source/queue.c **** 
 2046              		.loc 1 1371 0 discriminator 7
 2047 0152 FFF7FEFF 		bl	vPortExitCritical
 2048              	.LVL212:
1374:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 2049              		.loc 1 1374 0 is_stmt 1 discriminator 7
 2050 0156 01A9     		add	r1, sp, #4
 2051 0158 02A8     		add	r0, sp, #8
 2052 015a FFF7FEFF 		bl	xTaskCheckForTimeOut
 2053              	.LVL213:
 2054 015e 0028     		cmp	r0, #0
 2055 0160 D1D1     		bne	.L170
1376:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 2056              		.loc 1 1376 0
 2057 0162 2046     		mov	r0, r4
 2058 0164 FFF7FEFF 		bl	_ZL15prvIsQueueEmptyPK15QueueDefinition
 2059              	.LVL214:
 2060 0168 0028     		cmp	r0, #0
 2061 016a C6D0     		beq	.L171
1382:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 2062              		.loc 1 1382 0
 2063 016c 2368     		ldr	r3, [r4]
 2064 016e 002B     		cmp	r3, #0
 2065 0170 BBD0     		beq	.L183
 2066              	.L172:
1397:../Middlewares/FreeRTOS//Source/queue.c **** 				prvUnlockQueue( pxQueue );
 2067              		.loc 1 1397 0
 2068 0172 0199     		ldr	r1, [sp, #4]
 2069 0174 04F12400 		add	r0, r4, #36
 2070 0178 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2071              	.LVL215:
1398:../Middlewares/FreeRTOS//Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2072              		.loc 1 1398 0
 2073 017c 2046     		mov	r0, r4
 2074 017e FFF7FEFF 		bl	_ZL14prvUnlockQueueP15QueueDefinition
 2075              	.LVL216:
1399:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 2076              		.loc 1 1399 0
 2077 0182 FFF7FEFF 		bl	xTaskResumeAll
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 81


 2078              	.LVL217:
 2079 0186 0028     		cmp	r0, #0
 2080 0188 C7D1     		bne	.L160
1401:../Middlewares/FreeRTOS//Source/queue.c **** 				}
 2081              		.loc 1 1401 0
 2082 018a 054B     		ldr	r3, .L184
 2083 018c 4FF08052 		mov	r2, #268435456
 2084 0190 1A60     		str	r2, [r3]
 2085              		.syntax unified
 2086              	@ 1401 "../Middlewares/FreeRTOS//Source/queue.c" 1
 2087 0192 BFF34F8F 		dsb
 2088              	@ 0 "" 2
 2089              	@ 1401 "../Middlewares/FreeRTOS//Source/queue.c" 1
 2090 0196 BFF36F8F 		isb
 2091              	@ 0 "" 2
 2092              		.thumb
 2093              		.syntax unified
 2094 019a BEE7     		b	.L160
 2095              	.L177:
1423:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 2096              		.loc 1 1423 0
 2097 019c 0020     		movs	r0, #0
 2098              	.LVL218:
 2099 019e 7DE7     		b	.L153
 2100              	.L185:
 2101              		.align	2
 2102              	.L184:
 2103 01a0 04ED00E0 		.word	-536810236
 2104              	.LBE149:
 2105              		.cfi_endproc
 2106              	.LFE146:
 2107              		.fnend
 2109              		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 2110              		.align	1
 2111              		.global	xQueueTakeMutexRecursive
 2112              		.syntax unified
 2113              		.thumb
 2114              		.thumb_func
 2115              		.fpu fpv4-sp-d16
 2117              	xQueueTakeMutexRecursive:
 2118              		.fnstart
 2119              	.LFB141:
 628:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xReturn;
 2120              		.loc 1 628 0
 2121              		.cfi_startproc
 2122              		@ args = 0, pretend = 0, frame = 0
 2123              		@ frame_needed = 0, uses_anonymous_args = 0
 2124              	.LVL219:
 632:../Middlewares/FreeRTOS//Source/queue.c **** 
 2125              		.loc 1 632 0
 2126 0000 40B9     		cbnz	r0, .L187
 2127              	.LBB150:
 2128              	.LBB151:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2129              		.loc 2 244 0
 2130              		.syntax unified
 2131              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 82


 2132 0002 4FF01003 			mov r3, #16												
 2133 0006 83F31188 		msr basepri, r3											
 2134 000a BFF36F8F 		isb														
 2135 000e BFF34F8F 		dsb														
 2136              	
 2137              	@ 0 "" 2
 2138              	.LVL220:
 2139              		.thumb
 2140              		.syntax unified
 2141              	.L188:
 2142 0012 FEE7     		b	.L188
 2143              	.L187:
 2144              	.LBE151:
 2145              	.LBE150:
 628:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xReturn;
 2146              		.loc 1 628 0
 2147 0014 70B5     		push	{r4, r5, r6, lr}
 2148              		.save {r4, r5, r6, lr}
 2149              	.LCFI28:
 2150              		.cfi_def_cfa_offset 16
 2151              		.cfi_offset 4, -16
 2152              		.cfi_offset 5, -12
 2153              		.cfi_offset 6, -8
 2154              		.cfi_offset 14, -4
 2155 0016 0446     		mov	r4, r0
 2156 0018 0D46     		mov	r5, r1
 639:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 2157              		.loc 1 639 0
 2158 001a 4668     		ldr	r6, [r0, #4]
 2159 001c FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 2160              	.LVL221:
 2161 0020 8642     		cmp	r6, r0
 2162 0022 0BD0     		beq	.L193
 646:../Middlewares/FreeRTOS//Source/queue.c **** 
 2163              		.loc 1 646 0
 2164 0024 0023     		movs	r3, #0
 2165 0026 2A46     		mov	r2, r5
 2166 0028 1946     		mov	r1, r3
 2167 002a 2046     		mov	r0, r4
 2168 002c FFF7FEFF 		bl	xQueueGenericReceive
 2169              	.LVL222:
 651:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 2170              		.loc 1 651 0
 2171 0030 0246     		mov	r2, r0
 2172 0032 38B1     		cbz	r0, .L186
 653:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 2173              		.loc 1 653 0
 2174 0034 E368     		ldr	r3, [r4, #12]
 2175 0036 0133     		adds	r3, r3, #1
 2176 0038 E360     		str	r3, [r4, #12]
 2177              	.LVL223:
 661:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 2178              		.loc 1 661 0
 2179 003a 03E0     		b	.L186
 2180              	.LVL224:
 2181              	.L193:
 641:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdPASS;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 83


 2182              		.loc 1 641 0
 2183 003c E368     		ldr	r3, [r4, #12]
 2184 003e 0133     		adds	r3, r3, #1
 2185 0040 E360     		str	r3, [r4, #12]
 2186              	.LVL225:
 642:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 2187              		.loc 1 642 0
 2188 0042 0122     		movs	r2, #1
 2189              	.LVL226:
 2190              	.L186:
 662:../Middlewares/FreeRTOS//Source/queue.c **** 
 2191              		.loc 1 662 0
 2192 0044 1046     		mov	r0, r2
 2193 0046 70BD     		pop	{r4, r5, r6, pc}
 2194              		.cfi_endproc
 2195              	.LFE141:
 2196              		.fnend
 2198              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 2199              		.align	1
 2200              		.global	xQueueReceiveFromISR
 2201              		.syntax unified
 2202              		.thumb
 2203              		.thumb_func
 2204              		.fpu fpv4-sp-d16
 2206              	xQueueReceiveFromISR:
 2207              		.fnstart
 2208              	.LFB147:
1435:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
 2209              		.loc 1 1435 0
 2210              		.cfi_startproc
 2211              		@ args = 0, pretend = 0, frame = 0
 2212              		@ frame_needed = 0, uses_anonymous_args = 0
 2213              	.LVL227:
 2214 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2215              		.save {r3, r4, r5, r6, r7, r8, r9, lr}
 2216              	.LCFI29:
 2217              		.cfi_def_cfa_offset 32
 2218              		.cfi_offset 3, -32
 2219              		.cfi_offset 4, -28
 2220              		.cfi_offset 5, -24
 2221              		.cfi_offset 6, -20
 2222              		.cfi_offset 7, -16
 2223              		.cfi_offset 8, -12
 2224              		.cfi_offset 9, -8
 2225              		.cfi_offset 14, -4
 2226              	.LVL228:
1440:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2227              		.loc 1 1440 0
 2228 0004 60B1     		cbz	r0, .L206
 2229 0006 0446     		mov	r4, r0
1441:../Middlewares/FreeRTOS//Source/queue.c **** 
 2230              		.loc 1 1441 0
 2231 0008 99B9     		cbnz	r1, .L197
1441:../Middlewares/FreeRTOS//Source/queue.c **** 
 2232              		.loc 1 1441 0 is_stmt 0 discriminator 1
 2233 000a 036C     		ldr	r3, [r0, #64]
 2234 000c 8BB1     		cbz	r3, .L197
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 84


 2235              	.LBB152:
 2236              	.LBB153:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2237              		.loc 2 244 0 is_stmt 1
 2238              		.syntax unified
 2239              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2240 000e 4FF01003 			mov r3, #16												
 2241 0012 83F31188 		msr basepri, r3											
 2242 0016 BFF36F8F 		isb														
 2243 001a BFF34F8F 		dsb														
 2244              	
 2245              	@ 0 "" 2
 2246              	.LVL229:
 2247              		.thumb
 2248              		.syntax unified
 2249              	.L198:
 2250 001e FEE7     		b	.L198
 2251              	.L206:
 2252              	.LBE153:
 2253              	.LBE152:
 2254              	.LBB154:
 2255              	.LBB155:
 2256              		.syntax unified
 2257              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2258 0020 4FF01003 			mov r3, #16												
 2259 0024 83F31188 		msr basepri, r3											
 2260 0028 BFF36F8F 		isb														
 2261 002c BFF34F8F 		dsb														
 2262              	
 2263              	@ 0 "" 2
 2264              	.LVL230:
 2265              		.thumb
 2266              		.syntax unified
 2267              	.L196:
 2268 0030 FEE7     		b	.L196
 2269              	.L197:
 2270 0032 1746     		mov	r7, r2
 2271 0034 8946     		mov	r9, r1
 2272              	.LBE155:
 2273              	.LBE154:
1457:../Middlewares/FreeRTOS//Source/queue.c **** 
 2274              		.loc 1 1457 0
 2275 0036 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2276              	.LVL231:
 2277              	.LBB156:
 2278              	.LBB157:
 261:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2279              		.loc 2 261 0
 2280              		.syntax unified
 2281              	@ 261 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2282 003a EFF31186 			mrs r6, basepri											
 2283 003e 4FF01003 		mov r3, #16												
 2284 0042 83F31188 		msr basepri, r3											
 2285 0046 BFF36F8F 		isb														
 2286 004a BFF34F8F 		dsb														
 2287              	
 2288              	@ 0 "" 2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 85


 2289              		.thumb
 2290              		.syntax unified
 2291              	.LBE157:
 2292              	.LBE156:
 2293              	.LBB158:
1461:../Middlewares/FreeRTOS//Source/queue.c **** 
 2294              		.loc 1 1461 0
 2295 004e D4F83880 		ldr	r8, [r4, #56]
 2296              	.LVL232:
 2297              	.LBB159:
1464:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 2298              		.loc 1 1464 0
 2299 0052 B8F1000F 		cmp	r8, #0
 2300 0056 1DD0     		beq	.L201
 2301              	.LBB160:
1466:../Middlewares/FreeRTOS//Source/queue.c **** 
 2302              		.loc 1 1466 0
 2303 0058 94F84450 		ldrb	r5, [r4, #68]	@ zero_extendqisi2
 2304 005c 6DB2     		sxtb	r5, r5
 2305              	.LVL233:
1470:../Middlewares/FreeRTOS//Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 2306              		.loc 1 1470 0
 2307 005e 4946     		mov	r1, r9
 2308 0060 2046     		mov	r0, r4
 2309 0062 FFF7FEFF 		bl	_ZL20prvCopyDataFromQueueP15QueueDefinitionPv
 2310              	.LVL234:
1471:../Middlewares/FreeRTOS//Source/queue.c **** 
 2311              		.loc 1 1471 0
 2312 0066 08F1FF33 		add	r3, r8, #-1
 2313 006a A363     		str	r3, [r4, #56]
1477:../Middlewares/FreeRTOS//Source/queue.c **** 			{
 2314              		.loc 1 1477 0
 2315 006c B5F1FF3F 		cmp	r5, #-1
 2316 0070 05D0     		beq	.L207
1508:../Middlewares/FreeRTOS//Source/queue.c **** 			}
 2317              		.loc 1 1508 0
 2318 0072 6B1C     		adds	r3, r5, #1
 2319 0074 5BB2     		sxtb	r3, r3
 2320 0076 84F84430 		strb	r3, [r4, #68]
1511:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 2321              		.loc 1 1511 0
 2322 007a 0120     		movs	r0, #1
 2323 007c 0BE0     		b	.L199
 2324              	.L207:
1479:../Middlewares/FreeRTOS//Source/queue.c **** 				{
 2325              		.loc 1 1479 0
 2326 007e 2369     		ldr	r3, [r4, #16]
 2327 0080 6BB1     		cbz	r3, .L202
1481:../Middlewares/FreeRTOS//Source/queue.c **** 					{
 2328              		.loc 1 1481 0
 2329 0082 04F11000 		add	r0, r4, #16
 2330 0086 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2331              	.LVL235:
 2332 008a 50B1     		cbz	r0, .L203
1485:../Middlewares/FreeRTOS//Source/queue.c **** 						{
 2333              		.loc 1 1485 0
 2334 008c 5FB1     		cbz	r7, .L204
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 86


1487:../Middlewares/FreeRTOS//Source/queue.c **** 						}
 2335              		.loc 1 1487 0
 2336 008e 0120     		movs	r0, #1
 2337 0090 3860     		str	r0, [r7]
 2338 0092 00E0     		b	.L199
 2339              	.LVL236:
 2340              	.L201:
 2341              	.LBE160:
1515:../Middlewares/FreeRTOS//Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2342              		.loc 1 1515 0
 2343 0094 0020     		movs	r0, #0
 2344              	.L199:
 2345              	.LVL237:
 2346              	.LBE159:
 2347              	.LBE158:
 2348              	.LBB163:
 2349              	.LBB164:
 2350              		.loc 2 274 0
 2351              		.syntax unified
 2352              	@ 274 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2353 0096 86F31188 			msr basepri, r6	
 2354              	@ 0 "" 2
 2355              	.LVL238:
 2356              		.thumb
 2357              		.syntax unified
 2358              	.LBE164:
 2359              	.LBE163:
1522:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 2360              		.loc 1 1522 0
 2361 009a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2362              	.LVL239:
 2363              	.L202:
 2364              	.LBB165:
 2365              	.LBB162:
 2366              	.LBB161:
1511:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 2367              		.loc 1 1511 0
 2368 009e 0120     		movs	r0, #1
 2369 00a0 F9E7     		b	.L199
 2370              	.L203:
 2371 00a2 0120     		movs	r0, #1
 2372 00a4 F7E7     		b	.L199
 2373              	.L204:
 2374 00a6 0120     		movs	r0, #1
 2375 00a8 F5E7     		b	.L199
 2376              	.LBE161:
 2377              	.LBE162:
 2378              	.LBE165:
 2379              		.cfi_endproc
 2380              	.LFE147:
 2381              		.fnend
 2383              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2384              		.align	1
 2385              		.global	xQueuePeekFromISR
 2386              		.syntax unified
 2387              		.thumb
 2388              		.thumb_func
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 87


 2389              		.fpu fpv4-sp-d16
 2391              	xQueuePeekFromISR:
 2392              		.fnstart
 2393              	.LFB148:
1526:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
 2394              		.loc 1 1526 0
 2395              		.cfi_startproc
 2396              		@ args = 0, pretend = 0, frame = 0
 2397              		@ frame_needed = 0, uses_anonymous_args = 0
 2398              	.LVL240:
 2399 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2400              		.save {r3, r4, r5, r6, r7, lr}
 2401              	.LCFI30:
 2402              		.cfi_def_cfa_offset 24
 2403              		.cfi_offset 3, -24
 2404              		.cfi_offset 4, -20
 2405              		.cfi_offset 5, -16
 2406              		.cfi_offset 6, -12
 2407              		.cfi_offset 7, -8
 2408              		.cfi_offset 14, -4
 2409              	.LVL241:
1532:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2410              		.loc 1 1532 0
 2411 0002 60B1     		cbz	r0, .L218
 2412 0004 0446     		mov	r4, r0
1533:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2413              		.loc 1 1533 0
 2414 0006 99B9     		cbnz	r1, .L211
1533:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2415              		.loc 1 1533 0 is_stmt 0 discriminator 1
 2416 0008 036C     		ldr	r3, [r0, #64]
 2417 000a 8BB1     		cbz	r3, .L211
 2418              	.LBB166:
 2419              	.LBB167:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2420              		.loc 2 244 0 is_stmt 1
 2421              		.syntax unified
 2422              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2423 000c 4FF01003 			mov r3, #16												
 2424 0010 83F31188 		msr basepri, r3											
 2425 0014 BFF36F8F 		isb														
 2426 0018 BFF34F8F 		dsb														
 2427              	
 2428              	@ 0 "" 2
 2429              	.LVL242:
 2430              		.thumb
 2431              		.syntax unified
 2432              	.L212:
 2433 001c FEE7     		b	.L212
 2434              	.L218:
 2435              	.LBE167:
 2436              	.LBE166:
 2437              	.LBB168:
 2438              	.LBB169:
 2439              		.syntax unified
 2440              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2441 001e 4FF01003 			mov r3, #16												
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 88


 2442 0022 83F31188 		msr basepri, r3											
 2443 0026 BFF36F8F 		isb														
 2444 002a BFF34F8F 		dsb														
 2445              	
 2446              	@ 0 "" 2
 2447              	.LVL243:
 2448              		.thumb
 2449              		.syntax unified
 2450              	.L210:
 2451 002e FEE7     		b	.L210
 2452              	.L211:
 2453              	.LBE169:
 2454              	.LBE168:
1534:../Middlewares/FreeRTOS//Source/queue.c **** 
 2455              		.loc 1 1534 0
 2456 0030 236C     		ldr	r3, [r4, #64]
 2457 0032 43B9     		cbnz	r3, .L213
 2458              	.LBB170:
 2459              	.LBB171:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2460              		.loc 2 244 0
 2461              		.syntax unified
 2462              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2463 0034 4FF01003 			mov r3, #16												
 2464 0038 83F31188 		msr basepri, r3											
 2465 003c BFF36F8F 		isb														
 2466 0040 BFF34F8F 		dsb														
 2467              	
 2468              	@ 0 "" 2
 2469              	.LVL244:
 2470              		.thumb
 2471              		.syntax unified
 2472              	.L214:
 2473 0044 FEE7     		b	.L214
 2474              	.L213:
 2475 0046 0D46     		mov	r5, r1
 2476              	.LBE171:
 2477              	.LBE170:
1550:../Middlewares/FreeRTOS//Source/queue.c **** 
 2478              		.loc 1 1550 0
 2479 0048 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2480              	.LVL245:
 2481              	.LBB172:
 2482              	.LBB173:
 261:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2483              		.loc 2 261 0
 2484              		.syntax unified
 2485              	@ 261 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2486 004c EFF31186 			mrs r6, basepri											
 2487 0050 4FF01003 		mov r3, #16												
 2488 0054 83F31188 		msr basepri, r3											
 2489 0058 BFF36F8F 		isb														
 2490 005c BFF34F8F 		dsb														
 2491              	
 2492              	@ 0 "" 2
 2493              		.thumb
 2494              		.syntax unified
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 89


 2495              	.LBE173:
 2496              	.LBE172:
1555:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 2497              		.loc 1 1555 0
 2498 0060 A36B     		ldr	r3, [r4, #56]
 2499 0062 4BB1     		cbz	r3, .L216
1561:../Middlewares/FreeRTOS//Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2500              		.loc 1 1561 0
 2501 0064 E768     		ldr	r7, [r4, #12]
 2502              	.LVL246:
1562:../Middlewares/FreeRTOS//Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 2503              		.loc 1 1562 0
 2504 0066 2946     		mov	r1, r5
 2505 0068 2046     		mov	r0, r4
 2506 006a FFF7FEFF 		bl	_ZL20prvCopyDataFromQueueP15QueueDefinitionPv
 2507              	.LVL247:
1563:../Middlewares/FreeRTOS//Source/queue.c **** 
 2508              		.loc 1 1563 0
 2509 006e E760     		str	r7, [r4, #12]
 2510              	.LVL248:
1565:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 2511              		.loc 1 1565 0
 2512 0070 0120     		movs	r0, #1
 2513              	.LVL249:
 2514              	.L215:
 2515              	.LBB174:
 2516              	.LBB175:
 2517              		.loc 2 274 0
 2518              		.syntax unified
 2519              	@ 274 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2520 0072 86F31188 			msr basepri, r6	
 2521              	@ 0 "" 2
 2522              	.LVL250:
 2523              		.thumb
 2524              		.syntax unified
 2525              	.LBE175:
 2526              	.LBE174:
1576:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 2527              		.loc 1 1576 0
 2528 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2529              	.LVL251:
 2530              	.L216:
1569:../Middlewares/FreeRTOS//Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2531              		.loc 1 1569 0
 2532 0078 0020     		movs	r0, #0
 2533 007a FAE7     		b	.L215
 2534              		.cfi_endproc
 2535              	.LFE148:
 2536              		.fnend
 2538              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2539              		.align	1
 2540              		.global	uxQueueMessagesWaiting
 2541              		.syntax unified
 2542              		.thumb
 2543              		.thumb_func
 2544              		.fpu fpv4-sp-d16
 2546              	uxQueueMessagesWaiting:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 90


 2547              		.fnstart
 2548              	.LFB149:
1580:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxReturn;
 2549              		.loc 1 1580 0
 2550              		.cfi_startproc
 2551              		@ args = 0, pretend = 0, frame = 0
 2552              		@ frame_needed = 0, uses_anonymous_args = 0
 2553              	.LVL252:
1583:../Middlewares/FreeRTOS//Source/queue.c **** 
 2554              		.loc 1 1583 0
 2555 0000 40B9     		cbnz	r0, .L220
 2556              	.LBB176:
 2557              	.LBB177:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2558              		.loc 2 244 0
 2559              		.syntax unified
 2560              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2561 0002 4FF01003 			mov r3, #16												
 2562 0006 83F31188 		msr basepri, r3											
 2563 000a BFF36F8F 		isb														
 2564 000e BFF34F8F 		dsb														
 2565              	
 2566              	@ 0 "" 2
 2567              	.LVL253:
 2568              		.thumb
 2569              		.syntax unified
 2570              	.L221:
 2571 0012 FEE7     		b	.L221
 2572              	.L220:
 2573              	.LBE177:
 2574              	.LBE176:
1580:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxReturn;
 2575              		.loc 1 1580 0
 2576 0014 10B5     		push	{r4, lr}
 2577              		.save {r4, lr}
 2578              	.LCFI31:
 2579              		.cfi_def_cfa_offset 8
 2580              		.cfi_offset 4, -8
 2581              		.cfi_offset 14, -4
 2582 0016 0446     		mov	r4, r0
1585:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 2583              		.loc 1 1585 0
 2584 0018 FFF7FEFF 		bl	vPortEnterCritical
 2585              	.LVL254:
1587:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 2586              		.loc 1 1587 0
 2587 001c A46B     		ldr	r4, [r4, #56]
 2588              	.LVL255:
1589:../Middlewares/FreeRTOS//Source/queue.c **** 
 2589              		.loc 1 1589 0
 2590 001e FFF7FEFF 		bl	vPortExitCritical
 2591              	.LVL256:
1592:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 2592              		.loc 1 1592 0
 2593 0022 2046     		mov	r0, r4
 2594 0024 10BD     		pop	{r4, pc}
 2595              		.cfi_endproc
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 91


 2596              	.LFE149:
 2597              		.fnend
 2599              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2600              		.align	1
 2601              		.global	uxQueueSpacesAvailable
 2602              		.syntax unified
 2603              		.thumb
 2604              		.thumb_func
 2605              		.fpu fpv4-sp-d16
 2607              	uxQueueSpacesAvailable:
 2608              		.fnstart
 2609              	.LFB150:
1596:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxReturn;
 2610              		.loc 1 1596 0
 2611              		.cfi_startproc
 2612              		@ args = 0, pretend = 0, frame = 0
 2613              		@ frame_needed = 0, uses_anonymous_args = 0
 2614              	.LVL257:
1601:../Middlewares/FreeRTOS//Source/queue.c **** 
 2615              		.loc 1 1601 0
 2616 0000 40B9     		cbnz	r0, .L225
 2617              	.LBB178:
 2618              	.LBB179:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2619              		.loc 2 244 0
 2620              		.syntax unified
 2621              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2622 0002 4FF01003 			mov r3, #16												
 2623 0006 83F31188 		msr basepri, r3											
 2624 000a BFF36F8F 		isb														
 2625 000e BFF34F8F 		dsb														
 2626              	
 2627              	@ 0 "" 2
 2628              	.LVL258:
 2629              		.thumb
 2630              		.syntax unified
 2631              	.L226:
 2632 0012 FEE7     		b	.L226
 2633              	.L225:
 2634              	.LBE179:
 2635              	.LBE178:
1596:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxReturn;
 2636              		.loc 1 1596 0
 2637 0014 10B5     		push	{r4, lr}
 2638              		.save {r4, lr}
 2639              	.LCFI32:
 2640              		.cfi_def_cfa_offset 8
 2641              		.cfi_offset 4, -8
 2642              		.cfi_offset 14, -4
 2643 0016 0446     		mov	r4, r0
1603:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 2644              		.loc 1 1603 0
 2645 0018 FFF7FEFF 		bl	vPortEnterCritical
 2646              	.LVL259:
1605:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 2647              		.loc 1 1605 0
 2648 001c E36B     		ldr	r3, [r4, #60]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 92


 2649 001e A46B     		ldr	r4, [r4, #56]
 2650              	.LVL260:
 2651 0020 1C1B     		subs	r4, r3, r4
 2652              	.LVL261:
1607:../Middlewares/FreeRTOS//Source/queue.c **** 
 2653              		.loc 1 1607 0
 2654 0022 FFF7FEFF 		bl	vPortExitCritical
 2655              	.LVL262:
1610:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 2656              		.loc 1 1610 0
 2657 0026 2046     		mov	r0, r4
 2658 0028 10BD     		pop	{r4, pc}
 2659              		.cfi_endproc
 2660              	.LFE150:
 2661              		.fnend
 2663              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2664              		.align	1
 2665              		.global	uxQueueMessagesWaitingFromISR
 2666              		.syntax unified
 2667              		.thumb
 2668              		.thumb_func
 2669              		.fpu fpv4-sp-d16
 2671              	uxQueueMessagesWaitingFromISR:
 2672              		.fnstart
 2673              	.LFB151:
1614:../Middlewares/FreeRTOS//Source/queue.c **** UBaseType_t uxReturn;
 2674              		.loc 1 1614 0
 2675              		.cfi_startproc
 2676              		@ args = 0, pretend = 0, frame = 0
 2677              		@ frame_needed = 0, uses_anonymous_args = 0
 2678              		@ link register save eliminated.
 2679              	.LVL263:
1617:../Middlewares/FreeRTOS//Source/queue.c **** 
 2680              		.loc 1 1617 0
 2681 0000 08B1     		cbz	r0, .L232
1619:../Middlewares/FreeRTOS//Source/queue.c **** 
 2682              		.loc 1 1619 0
 2683 0002 806B     		ldr	r0, [r0, #56]
 2684              	.LVL264:
1622:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 2685              		.loc 1 1622 0
 2686 0004 7047     		bx	lr
 2687              	.LVL265:
 2688              	.L232:
 2689              	.LBB180:
 2690              	.LBB181:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2691              		.loc 2 244 0
 2692              		.syntax unified
 2693              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2694 0006 4FF01003 			mov r3, #16												
 2695 000a 83F31188 		msr basepri, r3											
 2696 000e BFF36F8F 		isb														
 2697 0012 BFF34F8F 		dsb														
 2698              	
 2699              	@ 0 "" 2
 2700              	.LVL266:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 93


 2701              		.thumb
 2702              		.syntax unified
 2703              	.L231:
 2704 0016 FEE7     		b	.L231
 2705              	.LBE181:
 2706              	.LBE180:
 2707              		.cfi_endproc
 2708              	.LFE151:
 2709              		.cantunwind
 2710              		.fnend
 2712              		.section	.text.uxQueueGetQueueNumber,"ax",%progbits
 2713              		.align	1
 2714              		.global	uxQueueGetQueueNumber
 2715              		.syntax unified
 2716              		.thumb
 2717              		.thumb_func
 2718              		.fpu fpv4-sp-d16
 2720              	uxQueueGetQueueNumber:
 2721              		.fnstart
 2722              	.LFB153:
1670:../Middlewares/FreeRTOS//Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 2723              		.loc 1 1670 0
 2724              		.cfi_startproc
 2725              		@ args = 0, pretend = 0, frame = 0
 2726              		@ frame_needed = 0, uses_anonymous_args = 0
 2727              		@ link register save eliminated.
 2728              	.LVL267:
1672:../Middlewares/FreeRTOS//Source/queue.c **** 
 2729              		.loc 1 1672 0
 2730 0000 806C     		ldr	r0, [r0, #72]
 2731              	.LVL268:
 2732 0002 7047     		bx	lr
 2733              		.cfi_endproc
 2734              	.LFE153:
 2735              		.cantunwind
 2736              		.fnend
 2738              		.section	.text.vQueueSetQueueNumber,"ax",%progbits
 2739              		.align	1
 2740              		.global	vQueueSetQueueNumber
 2741              		.syntax unified
 2742              		.thumb
 2743              		.thumb_func
 2744              		.fpu fpv4-sp-d16
 2746              	vQueueSetQueueNumber:
 2747              		.fnstart
 2748              	.LFB154:
1680:../Middlewares/FreeRTOS//Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 2749              		.loc 1 1680 0
 2750              		.cfi_startproc
 2751              		@ args = 0, pretend = 0, frame = 0
 2752              		@ frame_needed = 0, uses_anonymous_args = 0
 2753              		@ link register save eliminated.
 2754              	.LVL269:
1681:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 2755              		.loc 1 1681 0
 2756 0000 8164     		str	r1, [r0, #72]
1682:../Middlewares/FreeRTOS//Source/queue.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 94


 2757              		.loc 1 1682 0
 2758 0002 7047     		bx	lr
 2759              		.cfi_endproc
 2760              	.LFE154:
 2761              		.cantunwind
 2762              		.fnend
 2764              		.section	.text.ucQueueGetQueueType,"ax",%progbits
 2765              		.align	1
 2766              		.global	ucQueueGetQueueType
 2767              		.syntax unified
 2768              		.thumb
 2769              		.thumb_func
 2770              		.fpu fpv4-sp-d16
 2772              	ucQueueGetQueueType:
 2773              		.fnstart
 2774              	.LFB155:
1690:../Middlewares/FreeRTOS//Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
 2775              		.loc 1 1690 0
 2776              		.cfi_startproc
 2777              		@ args = 0, pretend = 0, frame = 0
 2778              		@ frame_needed = 0, uses_anonymous_args = 0
 2779              		@ link register save eliminated.
 2780              	.LVL270:
1692:../Middlewares/FreeRTOS//Source/queue.c **** 
 2781              		.loc 1 1692 0
 2782 0000 90F84C00 		ldrb	r0, [r0, #76]	@ zero_extendqisi2
 2783              	.LVL271:
 2784 0004 7047     		bx	lr
 2785              		.cfi_endproc
 2786              	.LFE155:
 2787              		.cantunwind
 2788              		.fnend
 2790              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2791              		.align	1
 2792              		.global	xQueueIsQueueEmptyFromISR
 2793              		.syntax unified
 2794              		.thumb
 2795              		.thumb_func
 2796              		.fpu fpv4-sp-d16
 2798              	xQueueIsQueueEmptyFromISR:
 2799              		.fnstart
 2800              	.LFB160:
1936:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
 2801              		.loc 1 1936 0
 2802              		.cfi_startproc
 2803              		@ args = 0, pretend = 0, frame = 0
 2804              		@ frame_needed = 0, uses_anonymous_args = 0
 2805              		@ link register save eliminated.
 2806              	.LVL272:
1939:../Middlewares/FreeRTOS//Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2807              		.loc 1 1939 0
 2808 0000 18B1     		cbz	r0, .L241
1940:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 2809              		.loc 1 1940 0
 2810 0002 836B     		ldr	r3, [r0, #56]
 2811 0004 53B9     		cbnz	r3, .L240
1942:../Middlewares/FreeRTOS//Source/queue.c **** 	}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 95


 2812              		.loc 1 1942 0
 2813 0006 0120     		movs	r0, #1
 2814              	.LVL273:
 2815 0008 7047     		bx	lr
 2816              	.LVL274:
 2817              	.L241:
 2818              	.LBB182:
 2819              	.LBB183:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2820              		.loc 2 244 0
 2821              		.syntax unified
 2822              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2823 000a 4FF01003 			mov r3, #16												
 2824 000e 83F31188 		msr basepri, r3											
 2825 0012 BFF36F8F 		isb														
 2826 0016 BFF34F8F 		dsb														
 2827              	
 2828              	@ 0 "" 2
 2829              	.LVL275:
 2830              		.thumb
 2831              		.syntax unified
 2832              	.L238:
 2833 001a FEE7     		b	.L238
 2834              	.L240:
 2835              	.LBE183:
 2836              	.LBE182:
1946:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 2837              		.loc 1 1946 0
 2838 001c 0020     		movs	r0, #0
 2839              	.LVL276:
1950:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 2840              		.loc 1 1950 0
 2841 001e 7047     		bx	lr
 2842              		.cfi_endproc
 2843              	.LFE160:
 2844              		.cantunwind
 2845              		.fnend
 2847              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2848              		.align	1
 2849              		.global	xQueueIsQueueFullFromISR
 2850              		.syntax unified
 2851              		.thumb
 2852              		.thumb_func
 2853              		.fpu fpv4-sp-d16
 2855              	xQueueIsQueueFullFromISR:
 2856              		.fnstart
 2857              	.LFB162:
1972:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1973:../Middlewares/FreeRTOS//Source/queue.c **** 
1974:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
1975:../Middlewares/FreeRTOS//Source/queue.c **** {
 2858              		.loc 1 1975 0
 2859              		.cfi_startproc
 2860              		@ args = 0, pretend = 0, frame = 0
 2861              		@ frame_needed = 0, uses_anonymous_args = 0
 2862              		@ link register save eliminated.
 2863              	.LVL277:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 96


1976:../Middlewares/FreeRTOS//Source/queue.c **** BaseType_t xReturn;
1977:../Middlewares/FreeRTOS//Source/queue.c **** 
1978:../Middlewares/FreeRTOS//Source/queue.c **** 	configASSERT( xQueue );
 2864              		.loc 1 1978 0
 2865 0000 28B1     		cbz	r0, .L247
1979:../Middlewares/FreeRTOS//Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 2866              		.loc 1 1979 0
 2867 0002 826B     		ldr	r2, [r0, #56]
 2868 0004 C36B     		ldr	r3, [r0, #60]
 2869 0006 9A42     		cmp	r2, r3
 2870 0008 0AD1     		bne	.L246
1980:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1981:../Middlewares/FreeRTOS//Source/queue.c **** 		xReturn = pdTRUE;
 2871              		.loc 1 1981 0
 2872 000a 0120     		movs	r0, #1
 2873              	.LVL278:
 2874 000c 7047     		bx	lr
 2875              	.LVL279:
 2876              	.L247:
 2877              	.LBB184:
 2878              	.LBB185:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2879              		.loc 2 244 0
 2880              		.syntax unified
 2881              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2882 000e 4FF01003 			mov r3, #16												
 2883 0012 83F31188 		msr basepri, r3											
 2884 0016 BFF36F8F 		isb														
 2885 001a BFF34F8F 		dsb														
 2886              	
 2887              	@ 0 "" 2
 2888              	.LVL280:
 2889              		.thumb
 2890              		.syntax unified
 2891              	.L244:
 2892 001e FEE7     		b	.L244
 2893              	.L246:
 2894              	.LBE185:
 2895              	.LBE184:
1982:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1983:../Middlewares/FreeRTOS//Source/queue.c **** 	else
1984:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1985:../Middlewares/FreeRTOS//Source/queue.c **** 		xReturn = pdFALSE;
 2896              		.loc 1 1985 0
 2897 0020 0020     		movs	r0, #0
 2898              	.LVL281:
1986:../Middlewares/FreeRTOS//Source/queue.c **** 	}
1987:../Middlewares/FreeRTOS//Source/queue.c **** 
1988:../Middlewares/FreeRTOS//Source/queue.c **** 	return xReturn;
1989:../Middlewares/FreeRTOS//Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2899              		.loc 1 1989 0
 2900 0022 7047     		bx	lr
 2901              		.cfi_endproc
 2902              	.LFE162:
 2903              		.cantunwind
 2904              		.fnend
 2906              		.section	.text.vQueueAddToRegistry,"ax",%progbits
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 97


 2907              		.align	1
 2908              		.global	vQueueAddToRegistry
 2909              		.syntax unified
 2910              		.thumb
 2911              		.thumb_func
 2912              		.fpu fpv4-sp-d16
 2914              	vQueueAddToRegistry:
 2915              		.fnstart
 2916              	.LFB163:
1990:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
1991:../Middlewares/FreeRTOS//Source/queue.c **** 
1992:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
1993:../Middlewares/FreeRTOS//Source/queue.c **** 
1994:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
1995:../Middlewares/FreeRTOS//Source/queue.c **** 	{
1996:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xReturn;
1997:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1998:../Middlewares/FreeRTOS//Source/queue.c **** 
1999:../Middlewares/FreeRTOS//Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2000:../Middlewares/FreeRTOS//Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
2001:../Middlewares/FreeRTOS//Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2002:../Middlewares/FreeRTOS//Source/queue.c **** 		portDISABLE_INTERRUPTS();
2003:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2004:../Middlewares/FreeRTOS//Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2005:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2006:../Middlewares/FreeRTOS//Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
2007:../Middlewares/FreeRTOS//Source/queue.c **** 				posting? */
2008:../Middlewares/FreeRTOS//Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2009:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2010:../Middlewares/FreeRTOS//Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2011:../Middlewares/FreeRTOS//Source/queue.c **** 					return indicating that we need to block. */
2012:../Middlewares/FreeRTOS//Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2013:../Middlewares/FreeRTOS//Source/queue.c **** 					portENABLE_INTERRUPTS();
2014:../Middlewares/FreeRTOS//Source/queue.c **** 					return errQUEUE_BLOCKED;
2015:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2016:../Middlewares/FreeRTOS//Source/queue.c **** 				else
2017:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2018:../Middlewares/FreeRTOS//Source/queue.c **** 					portENABLE_INTERRUPTS();
2019:../Middlewares/FreeRTOS//Source/queue.c **** 					return errQUEUE_FULL;
2020:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2021:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2022:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2023:../Middlewares/FreeRTOS//Source/queue.c **** 		portENABLE_INTERRUPTS();
2024:../Middlewares/FreeRTOS//Source/queue.c **** 
2025:../Middlewares/FreeRTOS//Source/queue.c **** 		portDISABLE_INTERRUPTS();
2026:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2027:../Middlewares/FreeRTOS//Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2028:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2029:../Middlewares/FreeRTOS//Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2030:../Middlewares/FreeRTOS//Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2031:../Middlewares/FreeRTOS//Source/queue.c **** 				xReturn = pdPASS;
2032:../Middlewares/FreeRTOS//Source/queue.c **** 
2033:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2034:../Middlewares/FreeRTOS//Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2035:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2036:../Middlewares/FreeRTOS//Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2037:../Middlewares/FreeRTOS//Source/queue.c **** 					into the ready list as we are within a critical section.
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 98


2038:../Middlewares/FreeRTOS//Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2039:../Middlewares/FreeRTOS//Source/queue.c **** 					the event were caused from within an interrupt. */
2040:../Middlewares/FreeRTOS//Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2041:../Middlewares/FreeRTOS//Source/queue.c **** 					{
2042:../Middlewares/FreeRTOS//Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
2043:../Middlewares/FreeRTOS//Source/queue.c **** 						that a yield might be appropriate. */
2044:../Middlewares/FreeRTOS//Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2045:../Middlewares/FreeRTOS//Source/queue.c **** 					}
2046:../Middlewares/FreeRTOS//Source/queue.c **** 					else
2047:../Middlewares/FreeRTOS//Source/queue.c **** 					{
2048:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2049:../Middlewares/FreeRTOS//Source/queue.c **** 					}
2050:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2051:../Middlewares/FreeRTOS//Source/queue.c **** 				else
2052:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2053:../Middlewares/FreeRTOS//Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2054:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2055:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2056:../Middlewares/FreeRTOS//Source/queue.c **** 			else
2057:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2058:../Middlewares/FreeRTOS//Source/queue.c **** 				xReturn = errQUEUE_FULL;
2059:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2060:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2061:../Middlewares/FreeRTOS//Source/queue.c **** 		portENABLE_INTERRUPTS();
2062:../Middlewares/FreeRTOS//Source/queue.c **** 
2063:../Middlewares/FreeRTOS//Source/queue.c **** 		return xReturn;
2064:../Middlewares/FreeRTOS//Source/queue.c **** 	}
2065:../Middlewares/FreeRTOS//Source/queue.c **** 
2066:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2067:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
2068:../Middlewares/FreeRTOS//Source/queue.c **** 
2069:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2070:../Middlewares/FreeRTOS//Source/queue.c **** 
2071:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2072:../Middlewares/FreeRTOS//Source/queue.c **** 	{
2073:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xReturn;
2074:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2075:../Middlewares/FreeRTOS//Source/queue.c **** 
2076:../Middlewares/FreeRTOS//Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2077:../Middlewares/FreeRTOS//Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
2078:../Middlewares/FreeRTOS//Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2079:../Middlewares/FreeRTOS//Source/queue.c **** 		portDISABLE_INTERRUPTS();
2080:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2081:../Middlewares/FreeRTOS//Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2082:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2083:../Middlewares/FreeRTOS//Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2084:../Middlewares/FreeRTOS//Source/queue.c **** 				leave with nothing? */
2085:../Middlewares/FreeRTOS//Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2086:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2087:../Middlewares/FreeRTOS//Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2088:../Middlewares/FreeRTOS//Source/queue.c **** 					indicating that we need to block. */
2089:../Middlewares/FreeRTOS//Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2090:../Middlewares/FreeRTOS//Source/queue.c **** 					portENABLE_INTERRUPTS();
2091:../Middlewares/FreeRTOS//Source/queue.c **** 					return errQUEUE_BLOCKED;
2092:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2093:../Middlewares/FreeRTOS//Source/queue.c **** 				else
2094:../Middlewares/FreeRTOS//Source/queue.c **** 				{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 99


2095:../Middlewares/FreeRTOS//Source/queue.c **** 					portENABLE_INTERRUPTS();
2096:../Middlewares/FreeRTOS//Source/queue.c **** 					return errQUEUE_FULL;
2097:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2098:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2099:../Middlewares/FreeRTOS//Source/queue.c **** 			else
2100:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2101:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2102:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2103:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2104:../Middlewares/FreeRTOS//Source/queue.c **** 		portENABLE_INTERRUPTS();
2105:../Middlewares/FreeRTOS//Source/queue.c **** 
2106:../Middlewares/FreeRTOS//Source/queue.c **** 		portDISABLE_INTERRUPTS();
2107:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2108:../Middlewares/FreeRTOS//Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2109:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2110:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Data is available from the queue. */
2111:../Middlewares/FreeRTOS//Source/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2112:../Middlewares/FreeRTOS//Source/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2113:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2114:../Middlewares/FreeRTOS//Source/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2115:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2116:../Middlewares/FreeRTOS//Source/queue.c **** 				else
2117:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2118:../Middlewares/FreeRTOS//Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2119:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2120:../Middlewares/FreeRTOS//Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2121:../Middlewares/FreeRTOS//Source/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
2122:../Middlewares/FreeRTOS//Source/queue.c **** 
2123:../Middlewares/FreeRTOS//Source/queue.c **** 				xReturn = pdPASS;
2124:../Middlewares/FreeRTOS//Source/queue.c **** 
2125:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2126:../Middlewares/FreeRTOS//Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2127:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2128:../Middlewares/FreeRTOS//Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2129:../Middlewares/FreeRTOS//Source/queue.c **** 					into the ready list as we are within a critical section.
2130:../Middlewares/FreeRTOS//Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2131:../Middlewares/FreeRTOS//Source/queue.c **** 					the event were caused from within an interrupt. */
2132:../Middlewares/FreeRTOS//Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2133:../Middlewares/FreeRTOS//Source/queue.c **** 					{
2134:../Middlewares/FreeRTOS//Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2135:../Middlewares/FreeRTOS//Source/queue.c **** 					}
2136:../Middlewares/FreeRTOS//Source/queue.c **** 					else
2137:../Middlewares/FreeRTOS//Source/queue.c **** 					{
2138:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2139:../Middlewares/FreeRTOS//Source/queue.c **** 					}
2140:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2141:../Middlewares/FreeRTOS//Source/queue.c **** 				else
2142:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2143:../Middlewares/FreeRTOS//Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2144:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2145:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2146:../Middlewares/FreeRTOS//Source/queue.c **** 			else
2147:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2148:../Middlewares/FreeRTOS//Source/queue.c **** 				xReturn = pdFAIL;
2149:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2150:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2151:../Middlewares/FreeRTOS//Source/queue.c **** 		portENABLE_INTERRUPTS();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 100


2152:../Middlewares/FreeRTOS//Source/queue.c **** 
2153:../Middlewares/FreeRTOS//Source/queue.c **** 		return xReturn;
2154:../Middlewares/FreeRTOS//Source/queue.c **** 	}
2155:../Middlewares/FreeRTOS//Source/queue.c **** 
2156:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2157:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
2158:../Middlewares/FreeRTOS//Source/queue.c **** 
2159:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2160:../Middlewares/FreeRTOS//Source/queue.c **** 
2161:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2162:../Middlewares/FreeRTOS//Source/queue.c **** 	{
2163:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2164:../Middlewares/FreeRTOS//Source/queue.c **** 
2165:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2166:../Middlewares/FreeRTOS//Source/queue.c **** 		exit without doing anything. */
2167:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2168:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2169:../Middlewares/FreeRTOS//Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2170:../Middlewares/FreeRTOS//Source/queue.c **** 
2171:../Middlewares/FreeRTOS//Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2172:../Middlewares/FreeRTOS//Source/queue.c **** 			co-routine has not already been woken. */
2173:../Middlewares/FreeRTOS//Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2174:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2175:../Middlewares/FreeRTOS//Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2176:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2177:../Middlewares/FreeRTOS//Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2178:../Middlewares/FreeRTOS//Source/queue.c **** 					{
2179:../Middlewares/FreeRTOS//Source/queue.c **** 						return pdTRUE;
2180:../Middlewares/FreeRTOS//Source/queue.c **** 					}
2181:../Middlewares/FreeRTOS//Source/queue.c **** 					else
2182:../Middlewares/FreeRTOS//Source/queue.c **** 					{
2183:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2184:../Middlewares/FreeRTOS//Source/queue.c **** 					}
2185:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2186:../Middlewares/FreeRTOS//Source/queue.c **** 				else
2187:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2188:../Middlewares/FreeRTOS//Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2189:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2190:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2191:../Middlewares/FreeRTOS//Source/queue.c **** 			else
2192:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2193:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2194:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2195:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2196:../Middlewares/FreeRTOS//Source/queue.c **** 		else
2197:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2198:../Middlewares/FreeRTOS//Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2199:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2200:../Middlewares/FreeRTOS//Source/queue.c **** 
2201:../Middlewares/FreeRTOS//Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
2202:../Middlewares/FreeRTOS//Source/queue.c **** 	}
2203:../Middlewares/FreeRTOS//Source/queue.c **** 
2204:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2205:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
2206:../Middlewares/FreeRTOS//Source/queue.c **** 
2207:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2208:../Middlewares/FreeRTOS//Source/queue.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 101


2209:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2210:../Middlewares/FreeRTOS//Source/queue.c **** 	{
2211:../Middlewares/FreeRTOS//Source/queue.c **** 	BaseType_t xReturn;
2212:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2213:../Middlewares/FreeRTOS//Source/queue.c **** 
2214:../Middlewares/FreeRTOS//Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2215:../Middlewares/FreeRTOS//Source/queue.c **** 		not then just leave without doing anything. */
2216:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2217:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2218:../Middlewares/FreeRTOS//Source/queue.c **** 			/* Copy the data from the queue. */
2219:../Middlewares/FreeRTOS//Source/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2220:../Middlewares/FreeRTOS//Source/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2221:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2222:../Middlewares/FreeRTOS//Source/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2223:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2224:../Middlewares/FreeRTOS//Source/queue.c **** 			else
2225:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2226:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2227:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2228:../Middlewares/FreeRTOS//Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2229:../Middlewares/FreeRTOS//Source/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2230:../Middlewares/FreeRTOS//Source/queue.c **** 
2231:../Middlewares/FreeRTOS//Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2232:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2233:../Middlewares/FreeRTOS//Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2234:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2235:../Middlewares/FreeRTOS//Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2236:../Middlewares/FreeRTOS//Source/queue.c **** 					{
2237:../Middlewares/FreeRTOS//Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2238:../Middlewares/FreeRTOS//Source/queue.c **** 					}
2239:../Middlewares/FreeRTOS//Source/queue.c **** 					else
2240:../Middlewares/FreeRTOS//Source/queue.c **** 					{
2241:../Middlewares/FreeRTOS//Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2242:../Middlewares/FreeRTOS//Source/queue.c **** 					}
2243:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2244:../Middlewares/FreeRTOS//Source/queue.c **** 				else
2245:../Middlewares/FreeRTOS//Source/queue.c **** 				{
2246:../Middlewares/FreeRTOS//Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2247:../Middlewares/FreeRTOS//Source/queue.c **** 				}
2248:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2249:../Middlewares/FreeRTOS//Source/queue.c **** 			else
2250:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2251:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2252:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2253:../Middlewares/FreeRTOS//Source/queue.c **** 
2254:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdPASS;
2255:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2256:../Middlewares/FreeRTOS//Source/queue.c **** 		else
2257:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2258:../Middlewares/FreeRTOS//Source/queue.c **** 			xReturn = pdFAIL;
2259:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2260:../Middlewares/FreeRTOS//Source/queue.c **** 
2261:../Middlewares/FreeRTOS//Source/queue.c **** 		return xReturn;
2262:../Middlewares/FreeRTOS//Source/queue.c **** 	}
2263:../Middlewares/FreeRTOS//Source/queue.c **** 
2264:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2265:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 102


2266:../Middlewares/FreeRTOS//Source/queue.c **** 
2267:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2268:../Middlewares/FreeRTOS//Source/queue.c **** 
2269:../Middlewares/FreeRTOS//Source/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2270:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 2917              		.loc 1 2270 0
 2918              		.cfi_startproc
 2919              		@ args = 0, pretend = 0, frame = 0
 2920              		@ frame_needed = 0, uses_anonymous_args = 0
 2921              		@ link register save eliminated.
 2922              	.LVL282:
2271:../Middlewares/FreeRTOS//Source/queue.c **** 	UBaseType_t ux;
2272:../Middlewares/FreeRTOS//Source/queue.c **** 
2273:../Middlewares/FreeRTOS//Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2274:../Middlewares/FreeRTOS//Source/queue.c **** 		a free slot. */
2275:../Middlewares/FreeRTOS//Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2923              		.loc 1 2275 0
 2924 0000 0023     		movs	r3, #0
 2925              	.LVL283:
 2926              	.L251:
 2927              		.loc 1 2275 0 is_stmt 0 discriminator 1
 2928 0002 072B     		cmp	r3, #7
 2929 0004 0CD8     		bhi	.L248
2276:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2277:../Middlewares/FreeRTOS//Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 2930              		.loc 1 2277 0 is_stmt 1
 2931 0006 074A     		ldr	r2, .L253
 2932 0008 52F83320 		ldr	r2, [r2, r3, lsl #3]
 2933 000c 0AB1     		cbz	r2, .L252
2275:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 2934              		.loc 1 2275 0 discriminator 2
 2935 000e 0133     		adds	r3, r3, #1
 2936              	.LVL284:
 2937 0010 F7E7     		b	.L251
 2938              	.L252:
2278:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2279:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Store the information on this queue. */
2280:../Middlewares/FreeRTOS//Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 2939              		.loc 1 2280 0
 2940 0012 044A     		ldr	r2, .L253
 2941 0014 42F83310 		str	r1, [r2, r3, lsl #3]
2281:../Middlewares/FreeRTOS//Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 2942              		.loc 1 2281 0
 2943 0018 02EBC303 		add	r3, r2, r3, lsl #3
 2944              	.LVL285:
 2945 001c 5860     		str	r0, [r3, #4]
2282:../Middlewares/FreeRTOS//Source/queue.c **** 
2283:../Middlewares/FreeRTOS//Source/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2284:../Middlewares/FreeRTOS//Source/queue.c **** 				break;
 2946              		.loc 1 2284 0
 2947 001e 7047     		bx	lr
 2948              	.LVL286:
 2949              	.L248:
2285:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2286:../Middlewares/FreeRTOS//Source/queue.c **** 			else
2287:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2288:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 103


2289:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2290:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2291:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 2950              		.loc 1 2291 0
 2951 0020 7047     		bx	lr
 2952              	.L254:
 2953 0022 00BF     		.align	2
 2954              	.L253:
 2955 0024 00000000 		.word	.LANCHOR0
 2956              		.cfi_endproc
 2957              	.LFE163:
 2958              		.cantunwind
 2959              		.fnend
 2961              		.section	.text.pcQueueGetName,"ax",%progbits
 2962              		.align	1
 2963              		.global	pcQueueGetName
 2964              		.syntax unified
 2965              		.thumb
 2966              		.thumb_func
 2967              		.fpu fpv4-sp-d16
 2969              	pcQueueGetName:
 2970              		.fnstart
 2971              	.LFB164:
2292:../Middlewares/FreeRTOS//Source/queue.c **** 
2293:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2294:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
2295:../Middlewares/FreeRTOS//Source/queue.c **** 
2296:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2297:../Middlewares/FreeRTOS//Source/queue.c **** 
2298:../Middlewares/FreeRTOS//Source/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2299:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 2972              		.loc 1 2299 0
 2973              		.cfi_startproc
 2974              		@ args = 0, pretend = 0, frame = 0
 2975              		@ frame_needed = 0, uses_anonymous_args = 0
 2976              		@ link register save eliminated.
 2977              	.LVL287:
2300:../Middlewares/FreeRTOS//Source/queue.c **** 	UBaseType_t ux;
2301:../Middlewares/FreeRTOS//Source/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
2302:../Middlewares/FreeRTOS//Source/queue.c **** 
2303:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2304:../Middlewares/FreeRTOS//Source/queue.c **** 		removing entries from the registry while it is being searched. */
2305:../Middlewares/FreeRTOS//Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2978              		.loc 1 2305 0
 2979 0000 0023     		movs	r3, #0
 2980              	.LVL288:
 2981              	.L258:
 2982              		.loc 1 2305 0 is_stmt 0 discriminator 1
 2983 0002 072B     		cmp	r3, #7
 2984 0004 0BD8     		bhi	.L259
2306:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2307:../Middlewares/FreeRTOS//Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2985              		.loc 1 2307 0 is_stmt 1
 2986 0006 074A     		ldr	r2, .L261
 2987 0008 02EBC302 		add	r2, r2, r3, lsl #3
 2988 000c 5268     		ldr	r2, [r2, #4]
 2989 000e 8242     		cmp	r2, r0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 104


 2990 0010 01D0     		beq	.L260
2305:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 2991              		.loc 1 2305 0 discriminator 2
 2992 0012 0133     		adds	r3, r3, #1
 2993              	.LVL289:
 2994 0014 F5E7     		b	.L258
 2995              	.L260:
2308:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2309:../Middlewares/FreeRTOS//Source/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 2996              		.loc 1 2309 0
 2997 0016 034A     		ldr	r2, .L261
 2998 0018 52F83300 		ldr	r0, [r2, r3, lsl #3]
 2999              	.LVL290:
2310:../Middlewares/FreeRTOS//Source/queue.c **** 				break;
 3000              		.loc 1 2310 0
 3001 001c 7047     		bx	lr
 3002              	.LVL291:
 3003              	.L259:
2301:../Middlewares/FreeRTOS//Source/queue.c **** 
 3004              		.loc 1 2301 0
 3005 001e 0020     		movs	r0, #0
 3006              	.LVL292:
2311:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2312:../Middlewares/FreeRTOS//Source/queue.c **** 			else
2313:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2314:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2315:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2316:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2317:../Middlewares/FreeRTOS//Source/queue.c **** 
2318:../Middlewares/FreeRTOS//Source/queue.c **** 		return pcReturn;
2319:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 3007              		.loc 1 2319 0
 3008 0020 7047     		bx	lr
 3009              	.L262:
 3010 0022 00BF     		.align	2
 3011              	.L261:
 3012 0024 00000000 		.word	.LANCHOR0
 3013              		.cfi_endproc
 3014              	.LFE164:
 3015              		.cantunwind
 3016              		.fnend
 3018              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 3019              		.align	1
 3020              		.global	vQueueUnregisterQueue
 3021              		.syntax unified
 3022              		.thumb
 3023              		.thumb_func
 3024              		.fpu fpv4-sp-d16
 3026              	vQueueUnregisterQueue:
 3027              		.fnstart
 3028              	.LFB165:
2320:../Middlewares/FreeRTOS//Source/queue.c **** 
2321:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2322:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
2323:../Middlewares/FreeRTOS//Source/queue.c **** 
2324:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2325:../Middlewares/FreeRTOS//Source/queue.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 105


2326:../Middlewares/FreeRTOS//Source/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2327:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 3029              		.loc 1 2327 0
 3030              		.cfi_startproc
 3031              		@ args = 0, pretend = 0, frame = 0
 3032              		@ frame_needed = 0, uses_anonymous_args = 0
 3033              		@ link register save eliminated.
 3034              	.LVL293:
2328:../Middlewares/FreeRTOS//Source/queue.c **** 	UBaseType_t ux;
2329:../Middlewares/FreeRTOS//Source/queue.c **** 
2330:../Middlewares/FreeRTOS//Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2331:../Middlewares/FreeRTOS//Source/queue.c **** 		registry. */
2332:../Middlewares/FreeRTOS//Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3035              		.loc 1 2332 0
 3036 0000 0023     		movs	r3, #0
 3037              	.LVL294:
 3038              	.L266:
 3039              		.loc 1 2332 0 is_stmt 0 discriminator 1
 3040 0002 072B     		cmp	r3, #7
 3041 0004 0FD8     		bhi	.L263
2333:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2334:../Middlewares/FreeRTOS//Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3042              		.loc 1 2334 0 is_stmt 1
 3043 0006 084A     		ldr	r2, .L268
 3044 0008 02EBC302 		add	r2, r2, r3, lsl #3
 3045 000c 5268     		ldr	r2, [r2, #4]
 3046 000e 8242     		cmp	r2, r0
 3047 0010 01D0     		beq	.L267
2332:../Middlewares/FreeRTOS//Source/queue.c **** 		{
 3048              		.loc 1 2332 0 discriminator 2
 3049 0012 0133     		adds	r3, r3, #1
 3050              	.LVL295:
 3051 0014 F5E7     		b	.L266
 3052              	.L267:
2335:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2336:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2337:../Middlewares/FreeRTOS//Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 3053              		.loc 1 2337 0
 3054 0016 044A     		ldr	r2, .L268
 3055 0018 0021     		movs	r1, #0
 3056 001a 42F83310 		str	r1, [r2, r3, lsl #3]
2338:../Middlewares/FreeRTOS//Source/queue.c **** 
2339:../Middlewares/FreeRTOS//Source/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2340:../Middlewares/FreeRTOS//Source/queue.c **** 				appear in the registry twice if it is added, removed, then
2341:../Middlewares/FreeRTOS//Source/queue.c **** 				added again. */
2342:../Middlewares/FreeRTOS//Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 3057              		.loc 1 2342 0
 3058 001e 02EBC303 		add	r3, r2, r3, lsl #3
 3059              	.LVL296:
 3060 0022 5960     		str	r1, [r3, #4]
2343:../Middlewares/FreeRTOS//Source/queue.c **** 				break;
 3061              		.loc 1 2343 0
 3062 0024 7047     		bx	lr
 3063              	.LVL297:
 3064              	.L263:
2344:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2345:../Middlewares/FreeRTOS//Source/queue.c **** 			else
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 106


2346:../Middlewares/FreeRTOS//Source/queue.c **** 			{
2347:../Middlewares/FreeRTOS//Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2348:../Middlewares/FreeRTOS//Source/queue.c **** 			}
2349:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2350:../Middlewares/FreeRTOS//Source/queue.c **** 
2351:../Middlewares/FreeRTOS//Source/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3065              		.loc 1 2351 0
 3066 0026 7047     		bx	lr
 3067              	.L269:
 3068              		.align	2
 3069              	.L268:
 3070 0028 00000000 		.word	.LANCHOR0
 3071              		.cfi_endproc
 3072              	.LFE165:
 3073              		.cantunwind
 3074              		.fnend
 3076              		.section	.text.vQueueDelete,"ax",%progbits
 3077              		.align	1
 3078              		.global	vQueueDelete
 3079              		.syntax unified
 3080              		.thumb
 3081              		.thumb_func
 3082              		.fpu fpv4-sp-d16
 3084              	vQueueDelete:
 3085              		.fnstart
 3086              	.LFB152:
1626:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 3087              		.loc 1 1626 0
 3088              		.cfi_startproc
 3089              		@ args = 0, pretend = 0, frame = 0
 3090              		@ frame_needed = 0, uses_anonymous_args = 0
 3091              	.LVL298:
1629:../Middlewares/FreeRTOS//Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 3092              		.loc 1 1629 0
 3093 0000 40B9     		cbnz	r0, .L271
 3094              	.LBB186:
 3095              	.LBB187:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 3096              		.loc 2 244 0
 3097              		.syntax unified
 3098              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3099 0002 4FF01003 			mov r3, #16												
 3100 0006 83F31188 		msr basepri, r3											
 3101 000a BFF36F8F 		isb														
 3102 000e BFF34F8F 		dsb														
 3103              	
 3104              	@ 0 "" 2
 3105              	.LVL299:
 3106              		.thumb
 3107              		.syntax unified
 3108              	.L272:
 3109 0012 FEE7     		b	.L272
 3110              	.L271:
 3111              	.LBE187:
 3112              	.LBE186:
1626:../Middlewares/FreeRTOS//Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 3113              		.loc 1 1626 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 107


 3114 0014 10B5     		push	{r4, lr}
 3115              		.save {r4, lr}
 3116              	.LCFI33:
 3117              		.cfi_def_cfa_offset 8
 3118              		.cfi_offset 4, -8
 3119              		.cfi_offset 14, -4
 3120 0016 0446     		mov	r4, r0
1634:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 3121              		.loc 1 1634 0
 3122 0018 FFF7FEFF 		bl	vQueueUnregisterQueue
 3123              	.LVL300:
1642:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 3124              		.loc 1 1642 0
 3125 001c 2046     		mov	r0, r4
 3126 001e FFF7FEFF 		bl	vPortFree
 3127              	.LVL301:
1664:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
 3128              		.loc 1 1664 0
 3129 0022 10BD     		pop	{r4, pc}
 3130              		.cfi_endproc
 3131              	.LFE152:
 3132              		.fnend
 3134              		.section	.text.vQueueWaitForMessageRestricted,"ax",%progbits
 3135              		.align	1
 3136              		.global	vQueueWaitForMessageRestricted
 3137              		.syntax unified
 3138              		.thumb
 3139              		.thumb_func
 3140              		.fpu fpv4-sp-d16
 3142              	vQueueWaitForMessageRestricted:
 3143              		.fnstart
 3144              	.LFB166:
2352:../Middlewares/FreeRTOS//Source/queue.c **** 
2353:../Middlewares/FreeRTOS//Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2354:../Middlewares/FreeRTOS//Source/queue.c **** /*-----------------------------------------------------------*/
2355:../Middlewares/FreeRTOS//Source/queue.c **** 
2356:../Middlewares/FreeRTOS//Source/queue.c **** #if ( configUSE_TIMERS == 1 )
2357:../Middlewares/FreeRTOS//Source/queue.c **** 
2358:../Middlewares/FreeRTOS//Source/queue.c **** 	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType
2359:../Middlewares/FreeRTOS//Source/queue.c **** 	{
 3145              		.loc 1 2359 0
 3146              		.cfi_startproc
 3147              		@ args = 0, pretend = 0, frame = 0
 3148              		@ frame_needed = 0, uses_anonymous_args = 0
 3149              	.LVL302:
 3150 0000 70B5     		push	{r4, r5, r6, lr}
 3151              		.save {r4, r5, r6, lr}
 3152              	.LCFI34:
 3153              		.cfi_def_cfa_offset 16
 3154              		.cfi_offset 4, -16
 3155              		.cfi_offset 5, -12
 3156              		.cfi_offset 6, -8
 3157              		.cfi_offset 14, -4
 3158 0002 0446     		mov	r4, r0
 3159 0004 0D46     		mov	r5, r1
 3160 0006 1646     		mov	r6, r2
 3161              	.LVL303:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 108


2360:../Middlewares/FreeRTOS//Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2361:../Middlewares/FreeRTOS//Source/queue.c **** 
2362:../Middlewares/FreeRTOS//Source/queue.c **** 		/* This function should not be called by application code hence the
2363:../Middlewares/FreeRTOS//Source/queue.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2364:../Middlewares/FreeRTOS//Source/queue.c **** 		designed for use by kernel code, and has special calling requirements.
2365:../Middlewares/FreeRTOS//Source/queue.c **** 		It can result in vListInsert() being called on a list that can only
2366:../Middlewares/FreeRTOS//Source/queue.c **** 		possibly ever have one item in it, so the list will be fast, but even
2367:../Middlewares/FreeRTOS//Source/queue.c **** 		so it should be called with the scheduler locked and not from a critical
2368:../Middlewares/FreeRTOS//Source/queue.c **** 		section. */
2369:../Middlewares/FreeRTOS//Source/queue.c **** 
2370:../Middlewares/FreeRTOS//Source/queue.c **** 		/* Only do anything if there are no messages in the queue.  This function
2371:../Middlewares/FreeRTOS//Source/queue.c **** 		will not actually cause the task to block, just place it on a blocked
2372:../Middlewares/FreeRTOS//Source/queue.c **** 		list.  It will not block until the scheduler is unlocked - at which
2373:../Middlewares/FreeRTOS//Source/queue.c **** 		time a yield will be performed.  If an item is added to the queue while
2374:../Middlewares/FreeRTOS//Source/queue.c **** 		the queue is locked, and the calling task blocks on the queue, then the
2375:../Middlewares/FreeRTOS//Source/queue.c **** 		calling task will be immediately unblocked when the queue is unlocked. */
2376:../Middlewares/FreeRTOS//Source/queue.c **** 		prvLockQueue( pxQueue );
 3162              		.loc 1 2376 0
 3163 0008 FFF7FEFF 		bl	vPortEnterCritical
 3164              	.LVL304:
 3165 000c 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 3166 0010 5BB2     		sxtb	r3, r3
 3167 0012 B3F1FF3F 		cmp	r3, #-1
 3168 0016 0DD0     		beq	.L280
 3169              	.L276:
 3170              		.loc 1 2376 0 is_stmt 0 discriminator 4
 3171 0018 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 3172 001c 5BB2     		sxtb	r3, r3
 3173 001e B3F1FF3F 		cmp	r3, #-1
 3174 0022 0BD0     		beq	.L281
 3175              	.L277:
 3176              		.loc 1 2376 0 discriminator 7
 3177 0024 FFF7FEFF 		bl	vPortExitCritical
 3178              	.LVL305:
2377:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3179              		.loc 1 2377 0 is_stmt 1 discriminator 7
 3180 0028 A36B     		ldr	r3, [r4, #56]
 3181 002a 5BB1     		cbz	r3, .L282
 3182              	.L278:
2378:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2379:../Middlewares/FreeRTOS//Source/queue.c **** 			/* There is nothing in the queue, block for the specified period. */
2380:../Middlewares/FreeRTOS//Source/queue.c **** 			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefi
2381:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2382:../Middlewares/FreeRTOS//Source/queue.c **** 		else
2383:../Middlewares/FreeRTOS//Source/queue.c **** 		{
2384:../Middlewares/FreeRTOS//Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2385:../Middlewares/FreeRTOS//Source/queue.c **** 		}
2386:../Middlewares/FreeRTOS//Source/queue.c **** 		prvUnlockQueue( pxQueue );
 3183              		.loc 1 2386 0
 3184 002c 2046     		mov	r0, r4
 3185 002e FFF7FEFF 		bl	_ZL14prvUnlockQueueP15QueueDefinition
 3186              	.LVL306:
2387:../Middlewares/FreeRTOS//Source/queue.c **** 	}
 3187              		.loc 1 2387 0
 3188 0032 70BD     		pop	{r4, r5, r6, pc}
 3189              	.LVL307:
 3190              	.L280:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 109


2376:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3191              		.loc 1 2376 0 discriminator 2
 3192 0034 0023     		movs	r3, #0
 3193 0036 84F84430 		strb	r3, [r4, #68]
 3194 003a EDE7     		b	.L276
 3195              	.L281:
2376:../Middlewares/FreeRTOS//Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3196              		.loc 1 2376 0 is_stmt 0 discriminator 5
 3197 003c 0023     		movs	r3, #0
 3198 003e 84F84530 		strb	r3, [r4, #69]
 3199 0042 EFE7     		b	.L277
 3200              	.L282:
2380:../Middlewares/FreeRTOS//Source/queue.c **** 		}
 3201              		.loc 1 2380 0 is_stmt 1
 3202 0044 3246     		mov	r2, r6
 3203 0046 2946     		mov	r1, r5
 3204 0048 04F12400 		add	r0, r4, #36
 3205 004c FFF7FEFF 		bl	vTaskPlaceOnEventListRestricted
 3206              	.LVL308:
 3207 0050 ECE7     		b	.L278
 3208              		.cfi_endproc
 3209              	.LFE166:
 3210              		.fnend
 3212              		.global	xQueueRegistry
 3213              		.section	.bss.xQueueRegistry,"aw",%nobits
 3214              		.align	2
 3215              		.set	.LANCHOR0,. + 0
 3218              	xQueueRegistry:
 3219 0000 00000000 		.space	64
 3219      00000000 
 3219      00000000 
 3219      00000000 
 3219      00000000 
 3220              		.text
 3221              	.Letext0:
 3222              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/cstdlib"
 3223              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/arm-none-eab
 3224              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 3225              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 3226              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 3227              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 3228              		.file 9 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 3229              		.file 10 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 3230              		.file 11 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/stdlib.h"
 3231              		.file 12 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 3232              		.file 13 "../Libraries/CMSIS/CM4/CoreSupport/core_cm4.h"
 3233              		.file 14 "../Libraries/CMSIS/CM4/DeviceSupport/system_at32f4xx.h"
 3234              		.file 15 "../Libraries/CMSIS/CM4/DeviceSupport/at32f4xx.h"
 3235              		.file 16 "Inc/FreeRTOSConfig.h"
 3236              		.file 17 "../Middlewares/FreeRTOS//Source/include/list.h"
 3237              		.file 18 "../Middlewares/FreeRTOS//Source/include/task.h"
 3238              		.file 19 "../Middlewares/FreeRTOS//Source/include/queue.h"
 3239              		.file 20 "../Middlewares/FreeRTOS//Source/include/portable.h"
 3240              		.file 21 "<built-in>"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 110


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:17     .text._ZL14prvIsQueueFullPK15QueueDefinition:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:23     .text._ZL14prvIsQueueFullPK15QueueDefinition:0000000000000000 _ZL14prvIsQueueFullPK15QueueDefinition
.ARM.exidx.text._ZL14prvIsQueueFullPK15QueueDefinition:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:68     .text._ZL15prvIsQueueEmptyPK15QueueDefinition:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:74     .text._ZL15prvIsQueueEmptyPK15QueueDefinition:0000000000000000 _ZL15prvIsQueueEmptyPK15QueueDefinition
.ARM.exidx.text._ZL15prvIsQueueEmptyPK15QueueDefinition:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:116    .text._ZL18prvCopyDataToQueueP15QueueDefinitionPKvl:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:122    .text._ZL18prvCopyDataToQueueP15QueueDefinitionPKvl:0000000000000000 _ZL18prvCopyDataToQueueP15QueueDefinitionPKvl
.ARM.exidx.text._ZL18prvCopyDataToQueueP15QueueDefinitionPKvl:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:244    .text._ZL20prvCopyDataFromQueueP15QueueDefinitionPv:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:250    .text._ZL20prvCopyDataFromQueueP15QueueDefinitionPv:0000000000000000 _ZL20prvCopyDataFromQueueP15QueueDefinitionPv
.ARM.exidx.text._ZL20prvCopyDataFromQueueP15QueueDefinitionPv:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:302    .text._ZL14prvUnlockQueueP15QueueDefinition:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:308    .text._ZL14prvUnlockQueueP15QueueDefinition:0000000000000000 _ZL14prvUnlockQueueP15QueueDefinition
.ARM.exidx.text._ZL14prvUnlockQueueP15QueueDefinition:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:415    .text.xQueueGenericReset:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:422    .text.xQueueGenericReset:0000000000000000 xQueueGenericReset
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:533    .text.xQueueGenericReset:0000000000000080 $d
.ARM.exidx.text.xQueueGenericReset:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:539    .text._ZL21prvInitialiseNewQueuemmPhhP15QueueDefinition:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:545    .text._ZL21prvInitialiseNewQueuemmPhhP15QueueDefinition:0000000000000000 _ZL21prvInitialiseNewQueuemmPhhP15QueueDefinition
.ARM.exidx.text._ZL21prvInitialiseNewQueuemmPhhP15QueueDefinition:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:595    .text.xQueueGenericCreate:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:602    .text.xQueueGenericCreate:0000000000000000 xQueueGenericCreate
.ARM.exidx.text.xQueueGenericCreate:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:693    .text.xQueueCreateCountingSemaphore:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:700    .text.xQueueCreateCountingSemaphore:0000000000000000 xQueueCreateCountingSemaphore
.ARM.exidx.text.xQueueCreateCountingSemaphore:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:780    .text.xQueueGenericSend:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:787    .text.xQueueGenericSend:0000000000000000 xQueueGenericSend
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:1116   .text.xQueueGenericSend:0000000000000178 $d
.ARM.exidx.text.xQueueGenericSend:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:1122   .text._ZL18prvInitialiseMutexP15QueueDefinition:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:1128   .text._ZL18prvInitialiseMutexP15QueueDefinition:0000000000000000 _ZL18prvInitialiseMutexP15QueueDefinition
.ARM.extab.text._ZL18prvInitialiseMutexP15QueueDefinition:0000000000000000 $d
.ARM.exidx.text._ZL18prvInitialiseMutexP15QueueDefinition:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:1171   .text.xQueueCreateMutex:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:1178   .text.xQueueCreateMutex:0000000000000000 xQueueCreateMutex
.ARM.exidx.text.xQueueCreateMutex:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:1213   .text.xQueueGiveMutexRecursive:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:1220   .text.xQueueGiveMutexRecursive:0000000000000000 xQueueGiveMutexRecursive
.ARM.exidx.text.xQueueGiveMutexRecursive:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:1298   .text.xQueueGenericSendFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:1305   .text.xQueueGenericSendFromISR:0000000000000000 xQueueGenericSendFromISR
.ARM.exidx.text.xQueueGenericSendFromISR:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:1510   .text.xQueueGiveFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:1517   .text.xQueueGiveFromISR:0000000000000000 xQueueGiveFromISR
.ARM.exidx.text.xQueueGiveFromISR:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:1732   .text.xQueueGenericReceive:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:1739   .text.xQueueGenericReceive:0000000000000000 xQueueGenericReceive
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2103   .text.xQueueGenericReceive:00000000000001a0 $d
.ARM.exidx.text.xQueueGenericReceive:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2110   .text.xQueueTakeMutexRecursive:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2117   .text.xQueueTakeMutexRecursive:0000000000000000 xQueueTakeMutexRecursive
.ARM.exidx.text.xQueueTakeMutexRecursive:0000000000000000 $d
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 111


/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2199   .text.xQueueReceiveFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2206   .text.xQueueReceiveFromISR:0000000000000000 xQueueReceiveFromISR
.ARM.exidx.text.xQueueReceiveFromISR:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2384   .text.xQueuePeekFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2391   .text.xQueuePeekFromISR:0000000000000000 xQueuePeekFromISR
.ARM.exidx.text.xQueuePeekFromISR:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2539   .text.uxQueueMessagesWaiting:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2546   .text.uxQueueMessagesWaiting:0000000000000000 uxQueueMessagesWaiting
.ARM.exidx.text.uxQueueMessagesWaiting:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2600   .text.uxQueueSpacesAvailable:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2607   .text.uxQueueSpacesAvailable:0000000000000000 uxQueueSpacesAvailable
.ARM.exidx.text.uxQueueSpacesAvailable:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2664   .text.uxQueueMessagesWaitingFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2671   .text.uxQueueMessagesWaitingFromISR:0000000000000000 uxQueueMessagesWaitingFromISR
.ARM.exidx.text.uxQueueMessagesWaitingFromISR:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2713   .text.uxQueueGetQueueNumber:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2720   .text.uxQueueGetQueueNumber:0000000000000000 uxQueueGetQueueNumber
.ARM.exidx.text.uxQueueGetQueueNumber:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2739   .text.vQueueSetQueueNumber:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2746   .text.vQueueSetQueueNumber:0000000000000000 vQueueSetQueueNumber
.ARM.exidx.text.vQueueSetQueueNumber:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2765   .text.ucQueueGetQueueType:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2772   .text.ucQueueGetQueueType:0000000000000000 ucQueueGetQueueType
.ARM.exidx.text.ucQueueGetQueueType:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2791   .text.xQueueIsQueueEmptyFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2798   .text.xQueueIsQueueEmptyFromISR:0000000000000000 xQueueIsQueueEmptyFromISR
.ARM.exidx.text.xQueueIsQueueEmptyFromISR:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2848   .text.xQueueIsQueueFullFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2855   .text.xQueueIsQueueFullFromISR:0000000000000000 xQueueIsQueueFullFromISR
.ARM.exidx.text.xQueueIsQueueFullFromISR:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2907   .text.vQueueAddToRegistry:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2914   .text.vQueueAddToRegistry:0000000000000000 vQueueAddToRegistry
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2955   .text.vQueueAddToRegistry:0000000000000024 $d
.ARM.exidx.text.vQueueAddToRegistry:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2962   .text.pcQueueGetName:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:2969   .text.pcQueueGetName:0000000000000000 pcQueueGetName
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:3012   .text.pcQueueGetName:0000000000000024 $d
   .ARM.exidx.text.pcQueueGetName:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:3019   .text.vQueueUnregisterQueue:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:3026   .text.vQueueUnregisterQueue:0000000000000000 vQueueUnregisterQueue
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:3070   .text.vQueueUnregisterQueue:0000000000000028 $d
.ARM.exidx.text.vQueueUnregisterQueue:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:3077   .text.vQueueDelete:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:3084   .text.vQueueDelete:0000000000000000 vQueueDelete
     .ARM.exidx.text.vQueueDelete:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:3135   .text.vQueueWaitForMessageRestricted:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:3142   .text.vQueueWaitForMessageRestricted:0000000000000000 vQueueWaitForMessageRestricted
.ARM.exidx.text.vQueueWaitForMessageRestricted:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:3218   .bss.xQueueRegistry:0000000000000000 xQueueRegistry
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s:3214   .bss.xQueueRegistry:0000000000000000 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
__aeabi_unwind_cpp_pr0
xTaskPriorityDisinherit
memcpy
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccZCmbqT.s 			page 112


vTaskMissedYield
xTaskRemoveFromEventList
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskSetTimeOutState
xTaskResumeAll
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
__aeabi_unwind_cpp_pr1
xTaskGetCurrentTaskHandle
vPortValidateInterruptPriority
pvTaskIncrementMutexHeldCount
vTaskPriorityInherit
vPortFree
vTaskPlaceOnEventListRestricted
