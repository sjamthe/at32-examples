ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"tasks.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text._ZL22prvTaskIsTaskSuspendedPv,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv4-sp-d16
  23              	_ZL22prvTaskIsTaskSuspendedPv:
  24              		.fnstart
  25              	.LFB147:
  26              		.file 1 "../Middlewares/FreeRTOS//Source/tasks.c"
   1:../Middlewares/FreeRTOS//Source/tasks.c **** /*
   2:../Middlewares/FreeRTOS//Source/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/tasks.c ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/tasks.c **** 
   5:../Middlewares/FreeRTOS//Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/tasks.c **** 
   7:../Middlewares/FreeRTOS//Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/tasks.c **** 
   9:../Middlewares/FreeRTOS//Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/tasks.c **** 
  13:../Middlewares/FreeRTOS//Source/tasks.c ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Middlewares/FreeRTOS//Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/tasks.c ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/tasks.c **** 
  20:../Middlewares/FreeRTOS//Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/tasks.c **** 
  25:../Middlewares/FreeRTOS//Source/tasks.c ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/tasks.c ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/tasks.c ****      *                                                                       *
  32:../Middlewares/FreeRTOS//Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 2


  33:../Middlewares/FreeRTOS//Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Middlewares/FreeRTOS//Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/tasks.c ****      *                                                                       *
  37:../Middlewares/FreeRTOS//Source/tasks.c ****     ***************************************************************************
  38:../Middlewares/FreeRTOS//Source/tasks.c **** 
  39:../Middlewares/FreeRTOS//Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/tasks.c ****     defined configASSERT()?
  42:../Middlewares/FreeRTOS//Source/tasks.c **** 
  43:../Middlewares/FreeRTOS//Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Middlewares/FreeRTOS//Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/tasks.c ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/tasks.c **** 
  47:../Middlewares/FreeRTOS//Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Middlewares/FreeRTOS//Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/tasks.c **** 
  52:../Middlewares/FreeRTOS//Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/tasks.c **** 
  56:../Middlewares/FreeRTOS//Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Middlewares/FreeRTOS//Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/tasks.c **** 
  59:../Middlewares/FreeRTOS//Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/tasks.c **** 
  63:../Middlewares/FreeRTOS//Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/tasks.c ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/tasks.c **** 
  67:../Middlewares/FreeRTOS//Source/tasks.c ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/tasks.c **** */
  69:../Middlewares/FreeRTOS//Source/tasks.c **** 
  70:../Middlewares/FreeRTOS//Source/tasks.c **** /* Standard includes. */
  71:../Middlewares/FreeRTOS//Source/tasks.c **** #include <stdlib.h>
  72:../Middlewares/FreeRTOS//Source/tasks.c **** #include <string.h>
  73:../Middlewares/FreeRTOS//Source/tasks.c **** 
  74:../Middlewares/FreeRTOS//Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:../Middlewares/FreeRTOS//Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:../Middlewares/FreeRTOS//Source/tasks.c **** task.h is included from an application file. */
  77:../Middlewares/FreeRTOS//Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:../Middlewares/FreeRTOS//Source/tasks.c **** 
  79:../Middlewares/FreeRTOS//Source/tasks.c **** /* FreeRTOS includes. */
  80:../Middlewares/FreeRTOS//Source/tasks.c **** #include "FreeRTOS.h"
  81:../Middlewares/FreeRTOS//Source/tasks.c **** #include "task.h"
  82:../Middlewares/FreeRTOS//Source/tasks.c **** #include "timers.h"
  83:../Middlewares/FreeRTOS//Source/tasks.c **** #include "StackMacros.h"
  84:../Middlewares/FreeRTOS//Source/tasks.c **** 
  85:../Middlewares/FreeRTOS//Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:../Middlewares/FreeRTOS//Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:../Middlewares/FreeRTOS//Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:../Middlewares/FreeRTOS//Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:../Middlewares/FreeRTOS//Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 3


  90:../Middlewares/FreeRTOS//Source/tasks.c **** 
  91:../Middlewares/FreeRTOS//Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:../Middlewares/FreeRTOS//Source/tasks.c **** functions but without including stdio.h here. */
  93:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:../Middlewares/FreeRTOS//Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:../Middlewares/FreeRTOS//Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:../Middlewares/FreeRTOS//Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:../Middlewares/FreeRTOS//Source/tasks.c **** 	#include <stdio.h>
  99:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:../Middlewares/FreeRTOS//Source/tasks.c **** 
 101:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:../Middlewares/FreeRTOS//Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:../Middlewares/FreeRTOS//Source/tasks.c **** #else
 106:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 108:../Middlewares/FreeRTOS//Source/tasks.c **** 
 109:../Middlewares/FreeRTOS//Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:../Middlewares/FreeRTOS//Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:../Middlewares/FreeRTOS//Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:../Middlewares/FreeRTOS//Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:../Middlewares/FreeRTOS//Source/tasks.c **** 
 114:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 115:../Middlewares/FreeRTOS//Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:../Middlewares/FreeRTOS//Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 118:../Middlewares/FreeRTOS//Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:../Middlewares/FreeRTOS//Source/tasks.c **** 
 120:../Middlewares/FreeRTOS//Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:../Middlewares/FreeRTOS//Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:../Middlewares/FreeRTOS//Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:../Middlewares/FreeRTOS//Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:../Middlewares/FreeRTOS//Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:../Middlewares/FreeRTOS//Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:../Middlewares/FreeRTOS//Source/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:../Middlewares/FreeRTOS//Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:../Middlewares/FreeRTOS//Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:../Middlewares/FreeRTOS//Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:../Middlewares/FreeRTOS//Source/tasks.c **** made to free the RAM that was allocated statically.
 131:../Middlewares/FreeRTOS//Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:../Middlewares/FreeRTOS//Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:../Middlewares/FreeRTOS//Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:../Middlewares/FreeRTOS//Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:../Middlewares/FreeRTOS//Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:../Middlewares/FreeRTOS//Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:../Middlewares/FreeRTOS//Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:../Middlewares/FreeRTOS//Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:../Middlewares/FreeRTOS//Source/tasks.c **** 
 140:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 141:../Middlewares/FreeRTOS//Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 143:../Middlewares/FreeRTOS//Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:../Middlewares/FreeRTOS//Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:../Middlewares/FreeRTOS//Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 146:../Middlewares/FreeRTOS//Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 4


 147:../Middlewares/FreeRTOS//Source/tasks.c **** 
 148:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 149:../Middlewares/FreeRTOS//Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 150:../Middlewares/FreeRTOS//Source/tasks.c ****  * global, rather than file scope.
 151:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 152:../Middlewares/FreeRTOS//Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define static
 154:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 155:../Middlewares/FreeRTOS//Source/tasks.c **** 
 156:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:../Middlewares/FreeRTOS//Source/tasks.c **** 
 158:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:../Middlewares/FreeRTOS//Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:../Middlewares/FreeRTOS//Source/tasks.c **** 	microcontroller architecture. */
 161:../Middlewares/FreeRTOS//Source/tasks.c **** 
 162:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:../Middlewares/FreeRTOS//Source/tasks.c **** 	state task. */
 164:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:../Middlewares/FreeRTOS//Source/tasks.c **** 	{																									\
 166:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:../Middlewares/FreeRTOS//Source/tasks.c **** 		{																								\
 168:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:../Middlewares/FreeRTOS//Source/tasks.c **** 		}																								\
 170:../Middlewares/FreeRTOS//Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:../Middlewares/FreeRTOS//Source/tasks.c **** 
 172:../Middlewares/FreeRTOS//Source/tasks.c **** 	/*-----------------------------------------------------------*/
 173:../Middlewares/FreeRTOS//Source/tasks.c **** 
 174:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:../Middlewares/FreeRTOS//Source/tasks.c **** 	{																									\
 176:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:../Middlewares/FreeRTOS//Source/tasks.c **** 																										\
 178:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:../Middlewares/FreeRTOS//Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:../Middlewares/FreeRTOS//Source/tasks.c **** 		{																								\
 181:../Middlewares/FreeRTOS//Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:../Middlewares/FreeRTOS//Source/tasks.c **** 			--uxTopPriority;																			\
 183:../Middlewares/FreeRTOS//Source/tasks.c **** 		}																								\
 184:../Middlewares/FreeRTOS//Source/tasks.c **** 																										\
 185:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:../Middlewares/FreeRTOS//Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:../Middlewares/FreeRTOS//Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:../Middlewares/FreeRTOS//Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:../Middlewares/FreeRTOS//Source/tasks.c **** 
 191:../Middlewares/FreeRTOS//Source/tasks.c **** 	/*-----------------------------------------------------------*/
 192:../Middlewares/FreeRTOS//Source/tasks.c **** 
 193:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:../Middlewares/FreeRTOS//Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:../Middlewares/FreeRTOS//Source/tasks.c **** 	being used. */
 196:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:../Middlewares/FreeRTOS//Source/tasks.c **** 
 199:../Middlewares/FreeRTOS//Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:../Middlewares/FreeRTOS//Source/tasks.c **** 
 201:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:../Middlewares/FreeRTOS//Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 203:../Middlewares/FreeRTOS//Source/tasks.c **** 	architecture being used. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 5


 204:../Middlewares/FreeRTOS//Source/tasks.c **** 
 205:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 207:../Middlewares/FreeRTOS//Source/tasks.c **** 
 208:../Middlewares/FreeRTOS//Source/tasks.c **** 	/*-----------------------------------------------------------*/
 209:../Middlewares/FreeRTOS//Source/tasks.c **** 
 210:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:../Middlewares/FreeRTOS//Source/tasks.c **** 	{																								\
 212:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:../Middlewares/FreeRTOS//Source/tasks.c **** 																									\
 214:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:../Middlewares/FreeRTOS//Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:../Middlewares/FreeRTOS//Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:../Middlewares/FreeRTOS//Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:../Middlewares/FreeRTOS//Source/tasks.c **** 
 220:../Middlewares/FreeRTOS//Source/tasks.c **** 	/*-----------------------------------------------------------*/
 221:../Middlewares/FreeRTOS//Source/tasks.c **** 
 222:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:../Middlewares/FreeRTOS//Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:../Middlewares/FreeRTOS//Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:../Middlewares/FreeRTOS//Source/tasks.c **** 	{																									\
 227:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:../Middlewares/FreeRTOS//Source/tasks.c **** 		{																								\
 229:../Middlewares/FreeRTOS//Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:../Middlewares/FreeRTOS//Source/tasks.c **** 		}																								\
 231:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 232:../Middlewares/FreeRTOS//Source/tasks.c **** 
 233:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:../Middlewares/FreeRTOS//Source/tasks.c **** 
 235:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 236:../Middlewares/FreeRTOS//Source/tasks.c **** 
 237:../Middlewares/FreeRTOS//Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:../Middlewares/FreeRTOS//Source/tasks.c **** count overflows. */
 239:../Middlewares/FreeRTOS//Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:../Middlewares/FreeRTOS//Source/tasks.c **** {																									\
 241:../Middlewares/FreeRTOS//Source/tasks.c **** 	List_t *pxTemp;																					\
 242:../Middlewares/FreeRTOS//Source/tasks.c **** 																									\
 243:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:../Middlewares/FreeRTOS//Source/tasks.c **** 																									\
 246:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:../Middlewares/FreeRTOS//Source/tasks.c **** 	xNumOfOverflows++;																				\
 250:../Middlewares/FreeRTOS//Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:../Middlewares/FreeRTOS//Source/tasks.c **** }
 252:../Middlewares/FreeRTOS//Source/tasks.c **** 
 253:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 254:../Middlewares/FreeRTOS//Source/tasks.c **** 
 255:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 256:../Middlewares/FreeRTOS//Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:../Middlewares/FreeRTOS//Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 259:../Middlewares/FreeRTOS//Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 260:../Middlewares/FreeRTOS//Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 6


 261:../Middlewares/FreeRTOS//Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:../Middlewares/FreeRTOS//Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:../Middlewares/FreeRTOS//Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 264:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 265:../Middlewares/FreeRTOS//Source/tasks.c **** 
 266:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 267:../Middlewares/FreeRTOS//Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:../Middlewares/FreeRTOS//Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:../Middlewares/FreeRTOS//Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:../Middlewares/FreeRTOS//Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 272:../Middlewares/FreeRTOS//Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:../Middlewares/FreeRTOS//Source/tasks.c **** 
 274:../Middlewares/FreeRTOS//Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:../Middlewares/FreeRTOS//Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:../Middlewares/FreeRTOS//Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:../Middlewares/FreeRTOS//Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:../Middlewares/FreeRTOS//Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 279:../Middlewares/FreeRTOS//Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:../Middlewares/FreeRTOS//Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 281:../Middlewares/FreeRTOS//Source/tasks.c **** to its original value when it is released. */
 282:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:../Middlewares/FreeRTOS//Source/tasks.c **** #else
 285:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 287:../Middlewares/FreeRTOS//Source/tasks.c **** 
 288:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 289:../Middlewares/FreeRTOS//Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:../Middlewares/FreeRTOS//Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:../Middlewares/FreeRTOS//Source/tasks.c ****  * (the task's run time environment, including register values)
 292:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 293:../Middlewares/FreeRTOS//Source/tasks.c **** typedef struct tskTaskControlBlock
 294:../Middlewares/FreeRTOS//Source/tasks.c **** {
 295:../Middlewares/FreeRTOS//Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:../Middlewares/FreeRTOS//Source/tasks.c **** 
 297:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:../Middlewares/FreeRTOS//Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 300:../Middlewares/FreeRTOS//Source/tasks.c **** 
 301:../Middlewares/FreeRTOS//Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:../Middlewares/FreeRTOS//Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:../Middlewares/FreeRTOS//Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:../Middlewares/FreeRTOS//Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:../Middlewares/FreeRTOS//Source/tasks.c **** 
 307:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:../Middlewares/FreeRTOS//Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 310:../Middlewares/FreeRTOS//Source/tasks.c **** 
 311:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:../Middlewares/FreeRTOS//Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 314:../Middlewares/FreeRTOS//Source/tasks.c **** 
 315:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 316:../Middlewares/FreeRTOS//Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 317:../Middlewares/FreeRTOS//Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 7


 318:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 319:../Middlewares/FreeRTOS//Source/tasks.c **** 
 320:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 321:../Middlewares/FreeRTOS//Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 322:../Middlewares/FreeRTOS//Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 324:../Middlewares/FreeRTOS//Source/tasks.c **** 
 325:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:../Middlewares/FreeRTOS//Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 328:../Middlewares/FreeRTOS//Source/tasks.c **** 
 329:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:../Middlewares/FreeRTOS//Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 332:../Middlewares/FreeRTOS//Source/tasks.c **** 
 333:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:../Middlewares/FreeRTOS//Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 336:../Middlewares/FreeRTOS//Source/tasks.c **** 
 337:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 338:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:../Middlewares/FreeRTOS//Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:../Middlewares/FreeRTOS//Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:../Middlewares/FreeRTOS//Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:../Middlewares/FreeRTOS//Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:../Middlewares/FreeRTOS//Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:../Middlewares/FreeRTOS//Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:../Middlewares/FreeRTOS//Source/tasks.c **** 		struct	_reent xNewLib_reent;
 346:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 347:../Middlewares/FreeRTOS//Source/tasks.c **** 
 348:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:../Middlewares/FreeRTOS//Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:../Middlewares/FreeRTOS//Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 352:../Middlewares/FreeRTOS//Source/tasks.c **** 
 353:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* See the comments above the definition of
 354:../Middlewares/FreeRTOS//Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:../Middlewares/FreeRTOS//Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 358:../Middlewares/FreeRTOS//Source/tasks.c **** 
 359:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:../Middlewares/FreeRTOS//Source/tasks.c **** 		uint8_t ucDelayAborted;
 361:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 362:../Middlewares/FreeRTOS//Source/tasks.c **** 
 363:../Middlewares/FreeRTOS//Source/tasks.c **** } tskTCB;
 364:../Middlewares/FreeRTOS//Source/tasks.c **** 
 365:../Middlewares/FreeRTOS//Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:../Middlewares/FreeRTOS//Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:../Middlewares/FreeRTOS//Source/tasks.c **** typedef tskTCB TCB_t;
 368:../Middlewares/FreeRTOS//Source/tasks.c **** 
 369:../Middlewares/FreeRTOS//Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:../Middlewares/FreeRTOS//Source/tasks.c **** static variables must be declared volatile. */
 371:../Middlewares/FreeRTOS//Source/tasks.c **** 
 372:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 373:../Middlewares/FreeRTOS//Source/tasks.c **** 
 374:../Middlewares/FreeRTOS//Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 8


 375:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 376:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 377:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 378:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 379:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:../Middlewares/FreeRTOS//Source/tasks.c **** 
 382:../Middlewares/FreeRTOS//Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:../Middlewares/FreeRTOS//Source/tasks.c **** 
 384:../Middlewares/FreeRTOS//Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:../Middlewares/FreeRTOS//Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 386:../Middlewares/FreeRTOS//Source/tasks.c **** 
 387:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 388:../Middlewares/FreeRTOS//Source/tasks.c **** 
 389:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:../Middlewares/FreeRTOS//Source/tasks.c **** 
 391:../Middlewares/FreeRTOS//Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:../Middlewares/FreeRTOS//Source/tasks.c **** 
 393:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 394:../Middlewares/FreeRTOS//Source/tasks.c **** 
 395:../Middlewares/FreeRTOS//Source/tasks.c **** /* Other file private variables. --------------------------------*/
 396:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 397:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 405:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 406:../Middlewares/FreeRTOS//Source/tasks.c **** 
 407:../Middlewares/FreeRTOS//Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:../Middlewares/FreeRTOS//Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:../Middlewares/FreeRTOS//Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:../Middlewares/FreeRTOS//Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:../Middlewares/FreeRTOS//Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:../Middlewares/FreeRTOS//Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:../Middlewares/FreeRTOS//Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:../Middlewares/FreeRTOS//Source/tasks.c **** accessed from a critical section. */
 415:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 416:../Middlewares/FreeRTOS//Source/tasks.c **** 
 417:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:../Middlewares/FreeRTOS//Source/tasks.c **** 
 419:../Middlewares/FreeRTOS//Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 420:../Middlewares/FreeRTOS//Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 421:../Middlewares/FreeRTOS//Source/tasks.c **** 
 422:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 423:../Middlewares/FreeRTOS//Source/tasks.c **** 
 424:../Middlewares/FreeRTOS//Source/tasks.c **** /*lint +e956 */
 425:../Middlewares/FreeRTOS//Source/tasks.c **** 
 426:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 427:../Middlewares/FreeRTOS//Source/tasks.c **** 
 428:../Middlewares/FreeRTOS//Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:../Middlewares/FreeRTOS//Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 430:../Middlewares/FreeRTOS//Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 431:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 9


 432:../Middlewares/FreeRTOS//Source/tasks.c **** 
 433:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 434:../Middlewares/FreeRTOS//Source/tasks.c **** 	extern void vApplicationTickHook( void );
 435:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 436:../Middlewares/FreeRTOS//Source/tasks.c **** 
 437:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:../Middlewares/FreeRTOS//Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 440:../Middlewares/FreeRTOS//Source/tasks.c **** 
 441:../Middlewares/FreeRTOS//Source/tasks.c **** /* File private functions. --------------------------------*/
 442:../Middlewares/FreeRTOS//Source/tasks.c **** 
 443:../Middlewares/FreeRTOS//Source/tasks.c **** /**
 444:../Middlewares/FreeRTOS//Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:../Middlewares/FreeRTOS//Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:../Middlewares/FreeRTOS//Source/tasks.c ****  * is in any other state.
 447:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 448:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:../Middlewares/FreeRTOS//Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 450:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:../Middlewares/FreeRTOS//Source/tasks.c **** 
 452:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 453:../Middlewares/FreeRTOS//Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:../Middlewares/FreeRTOS//Source/tasks.c ****  * automatically upon the creation of the first task.
 455:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 456:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 457:../Middlewares/FreeRTOS//Source/tasks.c **** 
 458:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 459:../Middlewares/FreeRTOS//Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:../Middlewares/FreeRTOS//Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:../Middlewares/FreeRTOS//Source/tasks.c ****  * creation of the first user task.
 462:../Middlewares/FreeRTOS//Source/tasks.c ****  *
 463:../Middlewares/FreeRTOS//Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:../Middlewares/FreeRTOS//Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:../Middlewares/FreeRTOS//Source/tasks.c ****  *
 466:../Middlewares/FreeRTOS//Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:../Middlewares/FreeRTOS//Source/tasks.c ****  *
 468:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 469:../Middlewares/FreeRTOS//Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:../Middlewares/FreeRTOS//Source/tasks.c **** 
 471:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 472:../Middlewares/FreeRTOS//Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:../Middlewares/FreeRTOS//Source/tasks.c ****  * including the stack pointed to by the TCB.
 474:../Middlewares/FreeRTOS//Source/tasks.c ****  *
 475:../Middlewares/FreeRTOS//Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:../Middlewares/FreeRTOS//Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 478:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:../Middlewares/FreeRTOS//Source/tasks.c **** 
 480:../Middlewares/FreeRTOS//Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 481:../Middlewares/FreeRTOS//Source/tasks.c **** 
 482:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 483:../Middlewares/FreeRTOS//Source/tasks.c **** 
 484:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 485:../Middlewares/FreeRTOS//Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:../Middlewares/FreeRTOS//Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 487:../Middlewares/FreeRTOS//Source/tasks.c ****  * and its TCB deleted.
 488:../Middlewares/FreeRTOS//Source/tasks.c ****  */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 10


 489:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 490:../Middlewares/FreeRTOS//Source/tasks.c **** 
 491:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 492:../Middlewares/FreeRTOS//Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 493:../Middlewares/FreeRTOS//Source/tasks.c ****  * either the current or the overflow delayed task list.
 494:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 495:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 496:../Middlewares/FreeRTOS//Source/tasks.c **** 
 497:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 498:../Middlewares/FreeRTOS//Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:../Middlewares/FreeRTOS//Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:../Middlewares/FreeRTOS//Source/tasks.c ****  * a suspended list, etc.).
 501:../Middlewares/FreeRTOS//Source/tasks.c ****  *
 502:../Middlewares/FreeRTOS//Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:../Middlewares/FreeRTOS//Source/tasks.c ****  * NORMAL APPLICATION CODE.
 504:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 505:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:../Middlewares/FreeRTOS//Source/tasks.c **** 
 507:../Middlewares/FreeRTOS//Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 508:../Middlewares/FreeRTOS//Source/tasks.c **** 
 509:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 510:../Middlewares/FreeRTOS//Source/tasks.c **** 
 511:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 512:../Middlewares/FreeRTOS//Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:../Middlewares/FreeRTOS//Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 515:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:../Middlewares/FreeRTOS//Source/tasks.c **** 
 517:../Middlewares/FreeRTOS//Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 518:../Middlewares/FreeRTOS//Source/tasks.c **** 
 519:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 520:../Middlewares/FreeRTOS//Source/tasks.c **** 
 521:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 522:../Middlewares/FreeRTOS//Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:../Middlewares/FreeRTOS//Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:../Middlewares/FreeRTOS//Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 526:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:../Middlewares/FreeRTOS//Source/tasks.c **** 
 528:../Middlewares/FreeRTOS//Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 529:../Middlewares/FreeRTOS//Source/tasks.c **** 
 530:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 531:../Middlewares/FreeRTOS//Source/tasks.c **** 
 532:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 533:../Middlewares/FreeRTOS//Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:../Middlewares/FreeRTOS//Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:../Middlewares/FreeRTOS//Source/tasks.c ****  *
 536:../Middlewares/FreeRTOS//Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:../Middlewares/FreeRTOS//Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:../Middlewares/FreeRTOS//Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:../Middlewares/FreeRTOS//Source/tasks.c ****  * set to a value other than 1.
 540:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 541:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:../Middlewares/FreeRTOS//Source/tasks.c **** 
 543:../Middlewares/FreeRTOS//Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 544:../Middlewares/FreeRTOS//Source/tasks.c **** 
 545:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 11


 546:../Middlewares/FreeRTOS//Source/tasks.c **** 
 547:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 548:../Middlewares/FreeRTOS//Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 549:../Middlewares/FreeRTOS//Source/tasks.c ****  * will exit the Blocked state.
 550:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 551:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:../Middlewares/FreeRTOS//Source/tasks.c **** 
 553:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:../Middlewares/FreeRTOS//Source/tasks.c **** 
 555:../Middlewares/FreeRTOS//Source/tasks.c **** 	/*
 556:../Middlewares/FreeRTOS//Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:../Middlewares/FreeRTOS//Source/tasks.c **** 	 * human readable tables of task information.
 558:../Middlewares/FreeRTOS//Source/tasks.c **** 	 */
 559:../Middlewares/FreeRTOS//Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 560:../Middlewares/FreeRTOS//Source/tasks.c **** 
 561:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 562:../Middlewares/FreeRTOS//Source/tasks.c **** 
 563:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 564:../Middlewares/FreeRTOS//Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:../Middlewares/FreeRTOS//Source/tasks.c ****  * dynamically to fill in the structure's members.
 566:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 567:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:../Middlewares/FreeRTOS//Source/tasks.c **** 									const char * const pcName,
 569:../Middlewares/FreeRTOS//Source/tasks.c **** 									const uint32_t ulStackDepth,
 570:../Middlewares/FreeRTOS//Source/tasks.c **** 									void * const pvParameters,
 571:../Middlewares/FreeRTOS//Source/tasks.c **** 									UBaseType_t uxPriority,
 572:../Middlewares/FreeRTOS//Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:../Middlewares/FreeRTOS//Source/tasks.c **** 									TCB_t *pxNewTCB,
 574:../Middlewares/FreeRTOS//Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char
 575:../Middlewares/FreeRTOS//Source/tasks.c **** 
 576:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 577:../Middlewares/FreeRTOS//Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:../Middlewares/FreeRTOS//Source/tasks.c ****  * under the control of the scheduler.
 579:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 580:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 581:../Middlewares/FreeRTOS//Source/tasks.c **** 
 582:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 583:../Middlewares/FreeRTOS//Source/tasks.c **** 
 584:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:../Middlewares/FreeRTOS//Source/tasks.c **** 
 586:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:../Middlewares/FreeRTOS//Source/tasks.c **** 									const char * const pcName,
 588:../Middlewares/FreeRTOS//Source/tasks.c **** 									const uint32_t ulStackDepth,
 589:../Middlewares/FreeRTOS//Source/tasks.c **** 									void * const pvParameters,
 590:../Middlewares/FreeRTOS//Source/tasks.c **** 									UBaseType_t uxPriority,
 591:../Middlewares/FreeRTOS//Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:../Middlewares/FreeRTOS//Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 594:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxNewTCB;
 595:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskHandle_t xReturn;
 596:../Middlewares/FreeRTOS//Source/tasks.c **** 
 597:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:../Middlewares/FreeRTOS//Source/tasks.c **** 
 600:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 602:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 12


 603:../Middlewares/FreeRTOS//Source/tasks.c **** 			function - use them. */
 604:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:../Middlewares/FreeRTOS//Source/tasks.c **** 
 607:../Middlewares/FreeRTOS//Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 609:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:../Middlewares/FreeRTOS//Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 613:../Middlewares/FreeRTOS//Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:../Middlewares/FreeRTOS//Source/tasks.c **** 
 615:../Middlewares/FreeRTOS//Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:../Middlewares/FreeRTOS//Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 618:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
 619:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 620:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = NULL;
 621:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 622:../Middlewares/FreeRTOS//Source/tasks.c **** 
 623:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
 624:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 625:../Middlewares/FreeRTOS//Source/tasks.c **** 
 626:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 628:../Middlewares/FreeRTOS//Source/tasks.c **** 
 629:../Middlewares/FreeRTOS//Source/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:../Middlewares/FreeRTOS//Source/tasks.c **** 
 631:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 633:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:../Middlewares/FreeRTOS//Source/tasks.c **** 
 636:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:../Middlewares/FreeRTOS//Source/tasks.c **** 
 638:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 640:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:../Middlewares/FreeRTOS//Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:../Middlewares/FreeRTOS//Source/tasks.c **** 			not static allocation is being used. */
 643:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:../Middlewares/FreeRTOS//Source/tasks.c **** 
 645:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxNewTCB != NULL )
 646:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 647:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Store the stack location in the TCB. */
 648:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:../Middlewares/FreeRTOS//Source/tasks.c **** 
 650:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:../Middlewares/FreeRTOS//Source/tasks.c **** 				this task had a statically allocated stack in case it is
 652:../Middlewares/FreeRTOS//Source/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:../Middlewares/FreeRTOS//Source/tasks.c **** 
 655:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:../Middlewares/FreeRTOS//Source/tasks.c **** 										pxTaskDefinition->pcName,
 657:../Middlewares/FreeRTOS//Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 658:../Middlewares/FreeRTOS//Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 659:../Middlewares/FreeRTOS//Source/tasks.c **** 										pxTaskDefinition->uxPriority,
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 13


 660:../Middlewares/FreeRTOS//Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 661:../Middlewares/FreeRTOS//Source/tasks.c **** 										pxTaskDefinition->xRegions );
 662:../Middlewares/FreeRTOS//Source/tasks.c **** 
 663:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 664:../Middlewares/FreeRTOS//Source/tasks.c **** 				xReturn = pdPASS;
 665:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 666:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 667:../Middlewares/FreeRTOS//Source/tasks.c **** 
 668:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
 669:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 670:../Middlewares/FreeRTOS//Source/tasks.c **** 
 671:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 673:../Middlewares/FreeRTOS//Source/tasks.c **** 
 674:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:../Middlewares/FreeRTOS//Source/tasks.c **** 
 676:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:../Middlewares/FreeRTOS//Source/tasks.c **** 							const char * const pcName,
 678:../Middlewares/FreeRTOS//Source/tasks.c **** 							const uint16_t usStackDepth,
 679:../Middlewares/FreeRTOS//Source/tasks.c **** 							void * const pvParameters,
 680:../Middlewares/FreeRTOS//Source/tasks.c **** 							UBaseType_t uxPriority,
 681:../Middlewares/FreeRTOS//Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 683:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn;
 685:../Middlewares/FreeRTOS//Source/tasks.c **** 
 686:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:../Middlewares/FreeRTOS//Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:../Middlewares/FreeRTOS//Source/tasks.c **** 		the TCB then the stack. */
 689:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 691:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:../Middlewares/FreeRTOS//Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:../Middlewares/FreeRTOS//Source/tasks.c **** 			allocation is being used. */
 694:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:../Middlewares/FreeRTOS//Source/tasks.c **** 
 696:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxNewTCB != NULL )
 697:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 698:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 699:../Middlewares/FreeRTOS//Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 700:../Middlewares/FreeRTOS//Source/tasks.c **** 				be deleted later if required. */
 701:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:../Middlewares/FreeRTOS//Source/tasks.c **** 
 703:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 705:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:../Middlewares/FreeRTOS//Source/tasks.c **** 					vPortFree( pxNewTCB );
 707:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxNewTCB = NULL;
 708:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 709:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 710:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 711:../Middlewares/FreeRTOS//Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 713:../Middlewares/FreeRTOS//Source/tasks.c **** 		StackType_t *pxStack;
 714:../Middlewares/FreeRTOS//Source/tasks.c **** 
 715:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 716:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 14


 717:../Middlewares/FreeRTOS//Source/tasks.c **** 
 718:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxStack != NULL )
 719:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 720:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Allocate space for the TCB. */
 721:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 722:../Middlewares/FreeRTOS//Source/tasks.c **** 
 723:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxNewTCB != NULL )
 724:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 725:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Store the stack location in the TCB. */
 726:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 727:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 728:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
 729:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 730:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:../Middlewares/FreeRTOS//Source/tasks.c **** 					it again. */
 732:../Middlewares/FreeRTOS//Source/tasks.c **** 					vPortFree( pxStack );
 733:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 734:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 735:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
 736:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 737:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxNewTCB = NULL;
 738:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 739:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 740:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:../Middlewares/FreeRTOS//Source/tasks.c **** 
 742:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxNewTCB != NULL )
 743:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 744:../Middlewares/FreeRTOS//Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 746:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:../Middlewares/FreeRTOS//Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 750:../Middlewares/FreeRTOS//Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:../Middlewares/FreeRTOS//Source/tasks.c **** 
 752:../Middlewares/FreeRTOS//Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 753:../Middlewares/FreeRTOS//Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 754:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = pdPASS;
 755:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 756:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
 757:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 758:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 759:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 760:../Middlewares/FreeRTOS//Source/tasks.c **** 
 761:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
 762:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 763:../Middlewares/FreeRTOS//Source/tasks.c **** 
 764:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 766:../Middlewares/FreeRTOS//Source/tasks.c **** 
 767:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:../Middlewares/FreeRTOS//Source/tasks.c **** 									const char * const pcName,
 769:../Middlewares/FreeRTOS//Source/tasks.c **** 									const uint32_t ulStackDepth,
 770:../Middlewares/FreeRTOS//Source/tasks.c **** 									void * const pvParameters,
 771:../Middlewares/FreeRTOS//Source/tasks.c **** 									UBaseType_t uxPriority,
 772:../Middlewares/FreeRTOS//Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 773:../Middlewares/FreeRTOS//Source/tasks.c **** 									TCB_t *pxNewTCB,
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 15


 774:../Middlewares/FreeRTOS//Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 775:../Middlewares/FreeRTOS//Source/tasks.c **** {
 776:../Middlewares/FreeRTOS//Source/tasks.c **** StackType_t *pxTopOfStack;
 777:../Middlewares/FreeRTOS//Source/tasks.c **** UBaseType_t x;
 778:../Middlewares/FreeRTOS//Source/tasks.c **** 
 779:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:../Middlewares/FreeRTOS//Source/tasks.c **** 		BaseType_t xRunPrivileged;
 782:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 784:../Middlewares/FreeRTOS//Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 786:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
 787:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 788:../Middlewares/FreeRTOS//Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 790:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:../Middlewares/FreeRTOS//Source/tasks.c **** 
 793:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 796:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:../Middlewares/FreeRTOS//Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 798:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 799:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:../Middlewares/FreeRTOS//Source/tasks.c **** 
 801:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:../Middlewares/FreeRTOS//Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:../Middlewares/FreeRTOS//Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:../Middlewares/FreeRTOS//Source/tasks.c **** 	by the port. */
 805:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 807:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 808:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 809:../Middlewares/FreeRTOS//Source/tasks.c **** 
 810:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 811:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 812:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 813:../Middlewares/FreeRTOS//Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 815:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:../Middlewares/FreeRTOS//Source/tasks.c **** 
 817:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:../Middlewares/FreeRTOS//Source/tasks.c **** 
 820:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:../Middlewares/FreeRTOS//Source/tasks.c **** 		performed. */
 822:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 824:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:../Middlewares/FreeRTOS//Source/tasks.c **** 
 826:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Store the task name in the TCB. */
 827:../Middlewares/FreeRTOS//Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 828:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 829:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 830:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 16


 831:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 832:../Middlewares/FreeRTOS//Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 833:../Middlewares/FreeRTOS//Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 834:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 835:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 836:../Middlewares/FreeRTOS//Source/tasks.c **** 			break;
 837:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 838:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
 839:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 840:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 842:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 843:../Middlewares/FreeRTOS//Source/tasks.c **** 
 844:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:../Middlewares/FreeRTOS//Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 847:../Middlewares/FreeRTOS//Source/tasks.c **** 
 848:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:../Middlewares/FreeRTOS//Source/tasks.c **** 	remove the privilege bit if one is present. */
 850:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 851:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 852:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 853:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 854:../Middlewares/FreeRTOS//Source/tasks.c **** 	else
 855:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 856:../Middlewares/FreeRTOS//Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 858:../Middlewares/FreeRTOS//Source/tasks.c **** 
 859:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 860:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 862:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 863:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 864:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 865:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:../Middlewares/FreeRTOS//Source/tasks.c **** 
 867:../Middlewares/FreeRTOS//Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 868:../Middlewares/FreeRTOS//Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 869:../Middlewares/FreeRTOS//Source/tasks.c **** 
 870:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 871:../Middlewares/FreeRTOS//Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:../Middlewares/FreeRTOS//Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 873:../Middlewares/FreeRTOS//Source/tasks.c **** 
 874:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Event lists are always in priority order. */
 875:../Middlewares/FreeRTOS//Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 876:../Middlewares/FreeRTOS//Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 877:../Middlewares/FreeRTOS//Source/tasks.c **** 
 878:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 880:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 882:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:../Middlewares/FreeRTOS//Source/tasks.c **** 
 884:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 886:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 887:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 17


 888:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 889:../Middlewares/FreeRTOS//Source/tasks.c **** 
 890:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 891:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 892:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 894:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:../Middlewares/FreeRTOS//Source/tasks.c **** 
 896:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 898:../Middlewares/FreeRTOS//Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 900:../Middlewares/FreeRTOS//Source/tasks.c **** 	#else
 901:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 902:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:../Middlewares/FreeRTOS//Source/tasks.c **** 		( void ) xRegions;
 904:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 905:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 906:../Middlewares/FreeRTOS//Source/tasks.c **** 
 907:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 909:../Middlewares/FreeRTOS//Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 910:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 911:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 912:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 913:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 914:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 915:../Middlewares/FreeRTOS//Source/tasks.c **** 
 916:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 917:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 918:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 919:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 920:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 921:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 922:../Middlewares/FreeRTOS//Source/tasks.c **** 
 923:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 925:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:../Middlewares/FreeRTOS//Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 928:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 929:../Middlewares/FreeRTOS//Source/tasks.c **** 
 930:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 932:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 934:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 935:../Middlewares/FreeRTOS//Source/tasks.c **** 
 936:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:../Middlewares/FreeRTOS//Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:../Middlewares/FreeRTOS//Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:../Middlewares/FreeRTOS//Source/tasks.c **** 	the	top of stack variable is updated. */
 940:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 942:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 943:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 944:../Middlewares/FreeRTOS//Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 18


 945:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 946:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 947:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 948:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:../Middlewares/FreeRTOS//Source/tasks.c **** 
 950:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 951:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 952:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:../Middlewares/FreeRTOS//Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 954:../Middlewares/FreeRTOS//Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 955:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 956:../Middlewares/FreeRTOS//Source/tasks.c **** 	else
 957:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 958:../Middlewares/FreeRTOS//Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 960:../Middlewares/FreeRTOS//Source/tasks.c **** }
 961:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 962:../Middlewares/FreeRTOS//Source/tasks.c **** 
 963:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:../Middlewares/FreeRTOS//Source/tasks.c **** {
 965:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:../Middlewares/FreeRTOS//Source/tasks.c **** 	updated. */
 967:../Middlewares/FreeRTOS//Source/tasks.c **** 	taskENTER_CRITICAL();
 968:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 969:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 970:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 971:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 972:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:../Middlewares/FreeRTOS//Source/tasks.c **** 			the suspended state - make this the current task. */
 974:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 975:../Middlewares/FreeRTOS//Source/tasks.c **** 
 976:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 977:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 978:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:../Middlewares/FreeRTOS//Source/tasks.c **** 				initialisation required.  We will not recover if this call
 980:../Middlewares/FreeRTOS//Source/tasks.c **** 				fails, but we will report the failure. */
 981:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvInitialiseTaskLists();
 982:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 983:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
 984:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 985:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 987:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 988:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
 989:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 990:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:../Middlewares/FreeRTOS//Source/tasks.c **** 			current task if it is the highest priority task to be created
 992:../Middlewares/FreeRTOS//Source/tasks.c **** 			so far. */
 993:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 994:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 995:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 996:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 997:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 998:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 999:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
1000:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1001:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 19


1002:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1003:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1004:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1005:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1006:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1008:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1009:../Middlewares/FreeRTOS//Source/tasks.c **** 
1010:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxTaskNumber++;
1011:../Middlewares/FreeRTOS//Source/tasks.c **** 
1012:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1014:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1016:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1017:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:../Middlewares/FreeRTOS//Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1019:../Middlewares/FreeRTOS//Source/tasks.c **** 
1020:../Middlewares/FreeRTOS//Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1021:../Middlewares/FreeRTOS//Source/tasks.c **** 
1022:../Middlewares/FreeRTOS//Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1024:../Middlewares/FreeRTOS//Source/tasks.c **** 	taskEXIT_CRITICAL();
1025:../Middlewares/FreeRTOS//Source/tasks.c **** 
1026:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1027:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1028:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:../Middlewares/FreeRTOS//Source/tasks.c **** 		then it should run now. */
1030:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1031:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1032:../Middlewares/FreeRTOS//Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1033:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1034:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1035:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1036:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1037:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1038:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1039:../Middlewares/FreeRTOS//Source/tasks.c **** 	else
1040:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1041:../Middlewares/FreeRTOS//Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1043:../Middlewares/FreeRTOS//Source/tasks.c **** }
1044:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1045:../Middlewares/FreeRTOS//Source/tasks.c **** 
1046:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:../Middlewares/FreeRTOS//Source/tasks.c **** 
1048:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1050:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
1051:../Middlewares/FreeRTOS//Source/tasks.c **** 
1052:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
1053:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1054:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:../Middlewares/FreeRTOS//Source/tasks.c **** 			being deleted. */
1056:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1057:../Middlewares/FreeRTOS//Source/tasks.c **** 
1058:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Remove task from the ready list. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 20


1059:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1060:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1061:../Middlewares/FreeRTOS//Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1062:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1063:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1064:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1065:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1067:../Middlewares/FreeRTOS//Source/tasks.c **** 
1068:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Is the task waiting on an event also? */
1069:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1070:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1071:../Middlewares/FreeRTOS//Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1072:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1073:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1074:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1075:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1077:../Middlewares/FreeRTOS//Source/tasks.c **** 
1078:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:../Middlewares/FreeRTOS//Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:../Middlewares/FreeRTOS//Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:../Middlewares/FreeRTOS//Source/tasks.c **** 			not return. */
1082:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxTaskNumber++;
1083:../Middlewares/FreeRTOS//Source/tasks.c **** 
1084:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1085:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1086:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:../Middlewares/FreeRTOS//Source/tasks.c **** 				task itself, as a context switch to another task is required.
1088:../Middlewares/FreeRTOS//Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:../Middlewares/FreeRTOS//Source/tasks.c **** 				check the termination list and free up any memory allocated by
1090:../Middlewares/FreeRTOS//Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:../Middlewares/FreeRTOS//Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1092:../Middlewares/FreeRTOS//Source/tasks.c **** 
1093:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:../Middlewares/FreeRTOS//Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:../Middlewares/FreeRTOS//Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1096:../Middlewares/FreeRTOS//Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1097:../Middlewares/FreeRTOS//Source/tasks.c **** 
1098:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:../Middlewares/FreeRTOS//Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:../Middlewares/FreeRTOS//Source/tasks.c **** 				after which it is not possible to yield away from this task -
1101:../Middlewares/FreeRTOS//Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:../Middlewares/FreeRTOS//Source/tasks.c **** 				required. */
1103:../Middlewares/FreeRTOS//Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1105:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1106:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1107:../Middlewares/FreeRTOS//Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1108:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1109:../Middlewares/FreeRTOS//Source/tasks.c **** 
1110:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:../Middlewares/FreeRTOS//Source/tasks.c **** 				the task that has just been deleted. */
1112:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1113:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1114:../Middlewares/FreeRTOS//Source/tasks.c **** 
1115:../Middlewares/FreeRTOS//Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 21


1116:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1117:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
1118:../Middlewares/FreeRTOS//Source/tasks.c **** 
1119:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:../Middlewares/FreeRTOS//Source/tasks.c **** 		been deleted. */
1121:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1122:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1123:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1124:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1125:../Middlewares/FreeRTOS//Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1126:../Middlewares/FreeRTOS//Source/tasks.c **** 				portYIELD_WITHIN_API();
1127:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1128:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1129:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1130:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1132:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1133:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1134:../Middlewares/FreeRTOS//Source/tasks.c **** 
1135:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1137:../Middlewares/FreeRTOS//Source/tasks.c **** 
1138:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1139:../Middlewares/FreeRTOS//Source/tasks.c **** 
1140:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1142:../Middlewares/FreeRTOS//Source/tasks.c **** 	TickType_t xTimeToWake;
1143:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1144:../Middlewares/FreeRTOS//Source/tasks.c **** 
1145:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1146:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1147:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1148:../Middlewares/FreeRTOS//Source/tasks.c **** 
1149:../Middlewares/FreeRTOS//Source/tasks.c **** 		vTaskSuspendAll();
1150:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1151:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:../Middlewares/FreeRTOS//Source/tasks.c **** 			block. */
1153:../Middlewares/FreeRTOS//Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1154:../Middlewares/FreeRTOS//Source/tasks.c **** 
1155:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:../Middlewares/FreeRTOS//Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1157:../Middlewares/FreeRTOS//Source/tasks.c **** 
1158:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1159:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1160:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The tick count has overflowed since this function was
1161:../Middlewares/FreeRTOS//Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:../Middlewares/FreeRTOS//Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:../Middlewares/FreeRTOS//Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:../Middlewares/FreeRTOS//Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1166:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1167:../Middlewares/FreeRTOS//Source/tasks.c **** 					xShouldDelay = pdTRUE;
1168:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1169:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
1170:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1171:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 22


1173:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1174:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1175:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1176:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:../Middlewares/FreeRTOS//Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1178:../Middlewares/FreeRTOS//Source/tasks.c **** 				tick time is less than the wake time. */
1179:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1180:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1181:../Middlewares/FreeRTOS//Source/tasks.c **** 					xShouldDelay = pdTRUE;
1182:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1183:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
1184:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1185:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1187:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1188:../Middlewares/FreeRTOS//Source/tasks.c **** 
1189:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:../Middlewares/FreeRTOS//Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1191:../Middlewares/FreeRTOS//Source/tasks.c **** 
1192:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1193:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1194:../Middlewares/FreeRTOS//Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1195:../Middlewares/FreeRTOS//Source/tasks.c **** 
1196:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:../Middlewares/FreeRTOS//Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1199:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1200:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1201:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1202:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1204:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1205:../Middlewares/FreeRTOS//Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1206:../Middlewares/FreeRTOS//Source/tasks.c **** 
1207:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1208:../Middlewares/FreeRTOS//Source/tasks.c **** 		have put ourselves to sleep. */
1209:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1210:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1211:../Middlewares/FreeRTOS//Source/tasks.c **** 			portYIELD_WITHIN_API();
1212:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1213:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1214:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1215:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1217:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1218:../Middlewares/FreeRTOS//Source/tasks.c **** 
1219:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1221:../Middlewares/FreeRTOS//Source/tasks.c **** 
1222:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:../Middlewares/FreeRTOS//Source/tasks.c **** 
1224:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1226:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1227:../Middlewares/FreeRTOS//Source/tasks.c **** 
1228:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1229:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 23


1230:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1231:../Middlewares/FreeRTOS//Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1232:../Middlewares/FreeRTOS//Source/tasks.c **** 			vTaskSuspendAll();
1233:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1234:../Middlewares/FreeRTOS//Source/tasks.c **** 				traceTASK_DELAY();
1235:../Middlewares/FreeRTOS//Source/tasks.c **** 
1236:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* A task that is removed from the event list while the
1237:../Middlewares/FreeRTOS//Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1238:../Middlewares/FreeRTOS//Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:../Middlewares/FreeRTOS//Source/tasks.c **** 				is resumed.
1240:../Middlewares/FreeRTOS//Source/tasks.c **** 
1241:../Middlewares/FreeRTOS//Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:../Middlewares/FreeRTOS//Source/tasks.c **** 				executing task. */
1243:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1244:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1245:../Middlewares/FreeRTOS//Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1246:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1247:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1248:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1249:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1251:../Middlewares/FreeRTOS//Source/tasks.c **** 
1252:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:../Middlewares/FreeRTOS//Source/tasks.c **** 		have put ourselves to sleep. */
1254:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1255:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1256:../Middlewares/FreeRTOS//Source/tasks.c **** 			portYIELD_WITHIN_API();
1257:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1258:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1259:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1260:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1262:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1263:../Middlewares/FreeRTOS//Source/tasks.c **** 
1264:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1266:../Middlewares/FreeRTOS//Source/tasks.c **** 
1267:../Middlewares/FreeRTOS//Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:../Middlewares/FreeRTOS//Source/tasks.c **** 
1269:../Middlewares/FreeRTOS//Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1271:../Middlewares/FreeRTOS//Source/tasks.c **** 	eTaskState eReturn;
1272:../Middlewares/FreeRTOS//Source/tasks.c **** 	List_t *pxStateList;
1273:../Middlewares/FreeRTOS//Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1274:../Middlewares/FreeRTOS//Source/tasks.c **** 
1275:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( pxTCB );
1276:../Middlewares/FreeRTOS//Source/tasks.c **** 
1277:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1278:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1279:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1280:../Middlewares/FreeRTOS//Source/tasks.c **** 			eReturn = eRunning;
1281:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1282:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1283:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1284:../Middlewares/FreeRTOS//Source/tasks.c **** 			taskENTER_CRITICAL();
1285:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1286:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 24


1287:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1288:../Middlewares/FreeRTOS//Source/tasks.c **** 			taskEXIT_CRITICAL();
1289:../Middlewares/FreeRTOS//Source/tasks.c **** 
1290:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1291:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1292:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:../Middlewares/FreeRTOS//Source/tasks.c **** 				lists. */
1294:../Middlewares/FreeRTOS//Source/tasks.c **** 				eReturn = eBlocked;
1295:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1296:../Middlewares/FreeRTOS//Source/tasks.c **** 
1297:../Middlewares/FreeRTOS//Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:../Middlewares/FreeRTOS//Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1299:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1300:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1301:../Middlewares/FreeRTOS//Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:../Middlewares/FreeRTOS//Source/tasks.c **** 					indefinitely? */
1303:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1304:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1305:../Middlewares/FreeRTOS//Source/tasks.c **** 						eReturn = eSuspended;
1306:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1307:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
1308:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1309:../Middlewares/FreeRTOS//Source/tasks.c **** 						eReturn = eBlocked;
1310:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1311:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1312:../Middlewares/FreeRTOS//Source/tasks.c **** 			#endif
1313:../Middlewares/FreeRTOS//Source/tasks.c **** 
1314:../Middlewares/FreeRTOS//Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:../Middlewares/FreeRTOS//Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1316:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1317:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:../Middlewares/FreeRTOS//Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:../Middlewares/FreeRTOS//Source/tasks.c **** 					all. */
1320:../Middlewares/FreeRTOS//Source/tasks.c **** 					eReturn = eDeleted;
1321:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1322:../Middlewares/FreeRTOS//Source/tasks.c **** 			#endif
1323:../Middlewares/FreeRTOS//Source/tasks.c **** 
1324:../Middlewares/FreeRTOS//Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1326:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:../Middlewares/FreeRTOS//Source/tasks.c **** 				Ready (including pending ready) state. */
1328:../Middlewares/FreeRTOS//Source/tasks.c **** 				eReturn = eReady;
1329:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1330:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1331:../Middlewares/FreeRTOS//Source/tasks.c **** 
1332:../Middlewares/FreeRTOS//Source/tasks.c **** 		return eReturn;
1333:../Middlewares/FreeRTOS//Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1334:../Middlewares/FreeRTOS//Source/tasks.c **** 
1335:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1337:../Middlewares/FreeRTOS//Source/tasks.c **** 
1338:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:../Middlewares/FreeRTOS//Source/tasks.c **** 
1340:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1342:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
1343:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxReturn;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 25


1344:../Middlewares/FreeRTOS//Source/tasks.c **** 
1345:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
1346:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1347:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:../Middlewares/FreeRTOS//Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1350:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1351:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1352:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
1353:../Middlewares/FreeRTOS//Source/tasks.c **** 
1354:../Middlewares/FreeRTOS//Source/tasks.c **** 		return uxReturn;
1355:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1356:../Middlewares/FreeRTOS//Source/tasks.c **** 
1357:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1359:../Middlewares/FreeRTOS//Source/tasks.c **** 
1360:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:../Middlewares/FreeRTOS//Source/tasks.c **** 
1362:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1364:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
1365:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1366:../Middlewares/FreeRTOS//Source/tasks.c **** 
1367:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:../Middlewares/FreeRTOS//Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:../Middlewares/FreeRTOS//Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:../Middlewares/FreeRTOS//Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:../Middlewares/FreeRTOS//Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:../Middlewares/FreeRTOS//Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:../Middlewares/FreeRTOS//Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:../Middlewares/FreeRTOS//Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:../Middlewares/FreeRTOS//Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:../Middlewares/FreeRTOS//Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:../Middlewares/FreeRTOS//Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:../Middlewares/FreeRTOS//Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:../Middlewares/FreeRTOS//Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:../Middlewares/FreeRTOS//Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:../Middlewares/FreeRTOS//Source/tasks.c **** 		provided on the following link:
1382:../Middlewares/FreeRTOS//Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:../Middlewares/FreeRTOS//Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1384:../Middlewares/FreeRTOS//Source/tasks.c **** 
1385:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1386:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1387:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:../Middlewares/FreeRTOS//Source/tasks.c **** 			task that is being queried. */
1389:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1390:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1391:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1392:../Middlewares/FreeRTOS//Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:../Middlewares/FreeRTOS//Source/tasks.c **** 
1394:../Middlewares/FreeRTOS//Source/tasks.c **** 		return uxReturn;
1395:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1396:../Middlewares/FreeRTOS//Source/tasks.c **** 
1397:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1399:../Middlewares/FreeRTOS//Source/tasks.c **** 
1400:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 26


1401:../Middlewares/FreeRTOS//Source/tasks.c **** 
1402:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1403:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1404:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
1405:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1407:../Middlewares/FreeRTOS//Source/tasks.c **** 
1408:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1409:../Middlewares/FreeRTOS//Source/tasks.c **** 
1410:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Ensure the new priority is valid. */
1411:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1412:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1413:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1414:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1415:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1416:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1417:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1419:../Middlewares/FreeRTOS//Source/tasks.c **** 
1420:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
1421:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1422:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1423:../Middlewares/FreeRTOS//Source/tasks.c **** 			task that is being changed. */
1424:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1425:../Middlewares/FreeRTOS//Source/tasks.c **** 
1426:../Middlewares/FreeRTOS//Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1427:../Middlewares/FreeRTOS//Source/tasks.c **** 
1428:../Middlewares/FreeRTOS//Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1430:../Middlewares/FreeRTOS//Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1431:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1432:../Middlewares/FreeRTOS//Source/tasks.c **** 			#else
1433:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1434:../Middlewares/FreeRTOS//Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1435:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1436:../Middlewares/FreeRTOS//Source/tasks.c **** 			#endif
1437:../Middlewares/FreeRTOS//Source/tasks.c **** 
1438:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1439:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1440:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The priority change may have readied a task of higher
1441:../Middlewares/FreeRTOS//Source/tasks.c **** 				priority than the calling task. */
1442:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1443:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1444:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1445:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1446:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* The priority of a task other than the currently
1447:../Middlewares/FreeRTOS//Source/tasks.c **** 						running task is being raised.  Is the priority being
1448:../Middlewares/FreeRTOS//Source/tasks.c **** 						raised above that of the running task? */
1449:../Middlewares/FreeRTOS//Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1450:../Middlewares/FreeRTOS//Source/tasks.c **** 						{
1451:../Middlewares/FreeRTOS//Source/tasks.c **** 							xYieldRequired = pdTRUE;
1452:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
1453:../Middlewares/FreeRTOS//Source/tasks.c **** 						else
1454:../Middlewares/FreeRTOS//Source/tasks.c **** 						{
1455:../Middlewares/FreeRTOS//Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1456:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
1457:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 27


1458:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
1459:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1460:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* The priority of the running task is being raised,
1461:../Middlewares/FreeRTOS//Source/tasks.c **** 						but the running task must already be the highest
1462:../Middlewares/FreeRTOS//Source/tasks.c **** 						priority task able to run so no yield is required. */
1463:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1464:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1465:../Middlewares/FreeRTOS//Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1466:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1467:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Setting the priority of the running task down means
1468:../Middlewares/FreeRTOS//Source/tasks.c **** 					there may now be another task of higher priority that
1469:../Middlewares/FreeRTOS//Source/tasks.c **** 					is ready to execute. */
1470:../Middlewares/FreeRTOS//Source/tasks.c **** 					xYieldRequired = pdTRUE;
1471:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1472:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
1473:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1474:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Setting the priority of any other task down does not
1475:../Middlewares/FreeRTOS//Source/tasks.c **** 					require a yield as the running task must be above the
1476:../Middlewares/FreeRTOS//Source/tasks.c **** 					new priority of the task being modified. */
1477:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1478:../Middlewares/FreeRTOS//Source/tasks.c **** 
1479:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:../Middlewares/FreeRTOS//Source/tasks.c **** 				before its uxPriority member is changed so the
1481:../Middlewares/FreeRTOS//Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:../Middlewares/FreeRTOS//Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1483:../Middlewares/FreeRTOS//Source/tasks.c **** 
1484:../Middlewares/FreeRTOS//Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1486:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Only change the priority being used if the task is not
1487:../Middlewares/FreeRTOS//Source/tasks.c **** 					currently using an inherited priority. */
1488:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1489:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1490:../Middlewares/FreeRTOS//Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1491:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1492:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
1493:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1494:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1496:../Middlewares/FreeRTOS//Source/tasks.c **** 
1497:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The base priority gets set whatever. */
1498:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1499:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1500:../Middlewares/FreeRTOS//Source/tasks.c **** 				#else
1501:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1502:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1503:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1504:../Middlewares/FreeRTOS//Source/tasks.c **** 				#endif
1505:../Middlewares/FreeRTOS//Source/tasks.c **** 
1506:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:../Middlewares/FreeRTOS//Source/tasks.c **** 				being used for anything else. */
1508:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1509:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1510:../Middlewares/FreeRTOS//Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1511:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1512:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
1513:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1514:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 28


1515:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1516:../Middlewares/FreeRTOS//Source/tasks.c **** 
1517:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1518:../Middlewares/FreeRTOS//Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:../Middlewares/FreeRTOS//Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:../Middlewares/FreeRTOS//Source/tasks.c **** 				in the list appropriate to its new priority. */
1521:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1522:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1523:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:../Middlewares/FreeRTOS//Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:../Middlewares/FreeRTOS//Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1527:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1528:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* It is known that the task is in its ready list so
1529:../Middlewares/FreeRTOS//Source/tasks.c **** 						there is no need to check again and the port level
1530:../Middlewares/FreeRTOS//Source/tasks.c **** 						reset macro can be called directly. */
1531:../Middlewares/FreeRTOS//Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1532:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1533:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
1534:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1535:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1537:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1538:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1539:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
1540:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1541:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1542:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1543:../Middlewares/FreeRTOS//Source/tasks.c **** 
1544:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1545:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1546:../Middlewares/FreeRTOS//Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1547:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1548:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
1549:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1550:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1552:../Middlewares/FreeRTOS//Source/tasks.c **** 
1553:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:../Middlewares/FreeRTOS//Source/tasks.c **** 				optimised task selection is not being used. */
1555:../Middlewares/FreeRTOS//Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1557:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1558:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
1559:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1560:../Middlewares/FreeRTOS//Source/tasks.c **** 
1561:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1563:../Middlewares/FreeRTOS//Source/tasks.c **** 
1564:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1565:../Middlewares/FreeRTOS//Source/tasks.c **** 
1566:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1568:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
1569:../Middlewares/FreeRTOS//Source/tasks.c **** 
1570:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
1571:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 29


1572:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1573:../Middlewares/FreeRTOS//Source/tasks.c **** 			being suspended. */
1574:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1575:../Middlewares/FreeRTOS//Source/tasks.c **** 
1576:../Middlewares/FreeRTOS//Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1577:../Middlewares/FreeRTOS//Source/tasks.c **** 
1578:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:../Middlewares/FreeRTOS//Source/tasks.c **** 			suspended list. */
1580:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1581:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1582:../Middlewares/FreeRTOS//Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1583:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1584:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1585:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1586:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1588:../Middlewares/FreeRTOS//Source/tasks.c **** 
1589:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Is the task waiting on an event also? */
1590:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1591:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1592:../Middlewares/FreeRTOS//Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1593:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1594:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1595:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1596:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1598:../Middlewares/FreeRTOS//Source/tasks.c **** 
1599:../Middlewares/FreeRTOS//Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1600:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1601:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
1602:../Middlewares/FreeRTOS//Source/tasks.c **** 
1603:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1604:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1605:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:../Middlewares/FreeRTOS//Source/tasks.c **** 			task that is now in the Suspended state. */
1607:../Middlewares/FreeRTOS//Source/tasks.c **** 			taskENTER_CRITICAL();
1608:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1609:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1610:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1611:../Middlewares/FreeRTOS//Source/tasks.c **** 			taskEXIT_CRITICAL();
1612:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1613:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1614:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1615:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1617:../Middlewares/FreeRTOS//Source/tasks.c **** 
1618:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1619:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1620:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1621:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1622:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The current task has just been suspended. */
1623:../Middlewares/FreeRTOS//Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1624:../Middlewares/FreeRTOS//Source/tasks.c **** 				portYIELD_WITHIN_API();
1625:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1626:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1627:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1628:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 30


1629:../Middlewares/FreeRTOS//Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1630:../Middlewares/FreeRTOS//Source/tasks.c **** 				must be adjusted to point to a different task. */
1631:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1632:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1633:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1634:../Middlewares/FreeRTOS//Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:../Middlewares/FreeRTOS//Source/tasks.c **** 					be set to point to it no matter what its relative priority
1636:../Middlewares/FreeRTOS//Source/tasks.c **** 					is. */
1637:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxCurrentTCB = NULL;
1638:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1639:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
1640:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1641:../Middlewares/FreeRTOS//Source/tasks.c **** 					vTaskSwitchContext();
1642:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1643:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1644:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1645:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1646:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1647:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1649:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1650:../Middlewares/FreeRTOS//Source/tasks.c **** 
1651:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1653:../Middlewares/FreeRTOS//Source/tasks.c **** 
1654:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:../Middlewares/FreeRTOS//Source/tasks.c **** 
1656:../Middlewares/FreeRTOS//Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
  27              		.loc 1 1657 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1658:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1659:../Middlewares/FreeRTOS//Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1660:../Middlewares/FreeRTOS//Source/tasks.c **** 
1661:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:../Middlewares/FreeRTOS//Source/tasks.c **** 		section. */
1663:../Middlewares/FreeRTOS//Source/tasks.c **** 
1664:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( xTask );
  33              		.loc 1 1665 0
  34 0000 50B1     		cbz	r0, .L8
1666:../Middlewares/FreeRTOS//Source/tasks.c **** 
1667:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  35              		.loc 1 1668 0
  36 0002 4169     		ldr	r1, [r0, #20]
  37 0004 0C4A     		ldr	r2, .L9
  38 0006 9142     		cmp	r1, r2
  39 0008 0FD1     		bne	.L5
1669:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1670:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  40              		.loc 1 1671 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 31


  41 000a 836A     		ldr	r3, [r0, #40]
  42 000c 0B4A     		ldr	r2, .L9+4
  43 000e 9342     		cmp	r3, r2
  44 0010 0DD0     		beq	.L6
1672:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1673:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:../Middlewares/FreeRTOS//Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
  45              		.loc 1 1675 0
  46 0012 73B1     		cbz	r3, .L7
1658:../Middlewares/FreeRTOS//Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  47              		.loc 1 1658 0
  48 0014 0020     		movs	r0, #0
  49              	.LVL1:
  50 0016 7047     		bx	lr
  51              	.LVL2:
  52              	.L8:
  53              	.LBB110:
  54              	.LBB111:
  55              		.file 2 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 32


  38:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 33


  95:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 34


 152:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 35


 209:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 238:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
  56              		.loc 2 244 0
  57              		.syntax unified
  58              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  59 0018 4FF01003 			mov r3, #16												
  60 001c 83F31188 		msr basepri, r3											
  61 0020 BFF36F8F 		isb														
  62 0024 BFF34F8F 		dsb														
  63              	
  64              	@ 0 "" 2
  65              	.LVL3:
  66              		.thumb
  67              		.syntax unified
  68              	.L3:
  69 0028 FEE7     		b	.L3
  70              	.L5:
  71              	.LBE111:
  72              	.LBE110:
1658:../Middlewares/FreeRTOS//Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  73              		.loc 1 1658 0
  74 002a 0020     		movs	r0, #0
  75              	.LVL4:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 36


  76 002c 7047     		bx	lr
  77              	.LVL5:
  78              	.L6:
  79 002e 0020     		movs	r0, #0
  80              	.LVL6:
  81 0030 7047     		bx	lr
  82              	.LVL7:
  83              	.L7:
1676:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1677:../Middlewares/FreeRTOS//Source/tasks.c **** 					xReturn = pdTRUE;
  84              		.loc 1 1677 0
  85 0032 0120     		movs	r0, #1
  86              	.LVL8:
1678:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1679:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
1680:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1681:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1683:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1684:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1685:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1686:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1688:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1689:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1690:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1691:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1692:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1693:../Middlewares/FreeRTOS//Source/tasks.c **** 
1694:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
1695:../Middlewares/FreeRTOS//Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  87              		.loc 1 1695 0
  88 0034 7047     		bx	lr
  89              	.L10:
  90 0036 00BF     		.align	2
  91              	.L9:
  92 0038 00000000 		.word	.LANCHOR0
  93 003c 00000000 		.word	.LANCHOR1
  94              		.cfi_endproc
  95              	.LFE147:
  96              		.cantunwind
  97              		.fnend
  99              		.section	.text._ZL26prvTaskCheckFreeStackSpacePKh,"ax",%progbits
 100              		.align	1
 101              		.syntax unified
 102              		.thumb
 103              		.thumb_func
 104              		.fpu fpv4-sp-d16
 106              	_ZL26prvTaskCheckFreeStackSpacePKh:
 107              		.fnstart
 108              	.LFB176:
1696:../Middlewares/FreeRTOS//Source/tasks.c **** 
1697:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1698:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1699:../Middlewares/FreeRTOS//Source/tasks.c **** 
1700:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 37


1702:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1704:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1705:../Middlewares/FreeRTOS//Source/tasks.c **** 
1706:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( xTaskToResume );
1708:../Middlewares/FreeRTOS//Source/tasks.c **** 
1709:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1710:../Middlewares/FreeRTOS//Source/tasks.c **** 		currently executing task. */
1711:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1712:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1713:../Middlewares/FreeRTOS//Source/tasks.c **** 			taskENTER_CRITICAL();
1714:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1715:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1716:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1717:../Middlewares/FreeRTOS//Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1718:../Middlewares/FreeRTOS//Source/tasks.c **** 
1719:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:../Middlewares/FreeRTOS//Source/tasks.c **** 					lists even if the scheduler is suspended. */
1721:../Middlewares/FreeRTOS//Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1722:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1723:../Middlewares/FreeRTOS//Source/tasks.c **** 
1724:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1726:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1727:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1728:../Middlewares/FreeRTOS//Source/tasks.c **** 						but will leave the lists in the correct state for the
1729:../Middlewares/FreeRTOS//Source/tasks.c **** 						next yield. */
1730:../Middlewares/FreeRTOS//Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1731:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1732:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
1733:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1734:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1736:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1737:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
1738:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1739:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1741:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1742:../Middlewares/FreeRTOS//Source/tasks.c **** 			taskEXIT_CRITICAL();
1743:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1744:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1745:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1746:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1748:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1749:../Middlewares/FreeRTOS//Source/tasks.c **** 
1750:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:../Middlewares/FreeRTOS//Source/tasks.c **** 
1752:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1753:../Middlewares/FreeRTOS//Source/tasks.c **** 
1754:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1755:../Middlewares/FreeRTOS//Source/tasks.c **** 
1756:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1757:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1758:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 38


1759:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1760:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1761:../Middlewares/FreeRTOS//Source/tasks.c **** 
1762:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( xTaskToResume );
1763:../Middlewares/FreeRTOS//Source/tasks.c **** 
1764:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:../Middlewares/FreeRTOS//Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:../Middlewares/FreeRTOS//Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1767:../Middlewares/FreeRTOS//Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:../Middlewares/FreeRTOS//Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1769:../Middlewares/FreeRTOS//Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1770:../Middlewares/FreeRTOS//Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1771:../Middlewares/FreeRTOS//Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:../Middlewares/FreeRTOS//Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:../Middlewares/FreeRTOS//Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1774:../Middlewares/FreeRTOS//Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1775:../Middlewares/FreeRTOS//Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:../Middlewares/FreeRTOS//Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:../Middlewares/FreeRTOS//Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:../Middlewares/FreeRTOS//Source/tasks.c **** 		provided on the following link:
1779:../Middlewares/FreeRTOS//Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1780:../Middlewares/FreeRTOS//Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1781:../Middlewares/FreeRTOS//Source/tasks.c **** 
1782:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1783:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1784:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1786:../Middlewares/FreeRTOS//Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1787:../Middlewares/FreeRTOS//Source/tasks.c **** 
1788:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1790:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1791:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:../Middlewares/FreeRTOS//Source/tasks.c **** 					suspended list to the ready list directly. */
1793:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1794:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1795:../Middlewares/FreeRTOS//Source/tasks.c **** 						xYieldRequired = pdTRUE;
1796:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1797:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
1798:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1799:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1801:../Middlewares/FreeRTOS//Source/tasks.c **** 
1802:../Middlewares/FreeRTOS//Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1803:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1804:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1805:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
1806:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1807:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1808:../Middlewares/FreeRTOS//Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:../Middlewares/FreeRTOS//Source/tasks.c **** 					unsuspended. */
1810:../Middlewares/FreeRTOS//Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1811:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1812:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1813:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1814:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1815:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 39


1816:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1817:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1818:../Middlewares/FreeRTOS//Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:../Middlewares/FreeRTOS//Source/tasks.c **** 
1820:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xYieldRequired;
1821:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1822:../Middlewares/FreeRTOS//Source/tasks.c **** 
1823:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1824:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1825:../Middlewares/FreeRTOS//Source/tasks.c **** 
1826:../Middlewares/FreeRTOS//Source/tasks.c **** void vTaskStartScheduler( void )
1827:../Middlewares/FreeRTOS//Source/tasks.c **** {
1828:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xReturn;
1829:../Middlewares/FreeRTOS//Source/tasks.c **** 
1830:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1831:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1833:../Middlewares/FreeRTOS//Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:../Middlewares/FreeRTOS//Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:../Middlewares/FreeRTOS//Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1836:../Middlewares/FreeRTOS//Source/tasks.c **** 
1837:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:../Middlewares/FreeRTOS//Source/tasks.c **** 		address of the RAM then create the idle task. */
1839:../Middlewares/FreeRTOS//Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:../Middlewares/FreeRTOS//Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1841:../Middlewares/FreeRTOS//Source/tasks.c **** 												"IDLE",
1842:../Middlewares/FreeRTOS//Source/tasks.c **** 												ulIdleTaskStackSize,
1843:../Middlewares/FreeRTOS//Source/tasks.c **** 												( void * ) NULL,
1844:../Middlewares/FreeRTOS//Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:../Middlewares/FreeRTOS//Source/tasks.c **** 												pxIdleTaskStackBuffer,
1846:../Middlewares/FreeRTOS//Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:../Middlewares/FreeRTOS//Source/tasks.c **** 
1848:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1850:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = pdPASS;
1851:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1852:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1853:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1854:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = pdFAIL;
1855:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1856:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1857:../Middlewares/FreeRTOS//Source/tasks.c **** 	#else
1858:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1859:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:../Middlewares/FreeRTOS//Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1861:../Middlewares/FreeRTOS//Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:../Middlewares/FreeRTOS//Source/tasks.c **** 								( void * ) NULL,
1863:../Middlewares/FreeRTOS//Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:../Middlewares/FreeRTOS//Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1866:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:../Middlewares/FreeRTOS//Source/tasks.c **** 
1868:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1869:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1870:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xReturn == pdPASS )
1871:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1872:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 40


1873:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1874:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1875:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1876:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1878:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1879:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:../Middlewares/FreeRTOS//Source/tasks.c **** 
1881:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( xReturn == pdPASS )
1882:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1883:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1884:../Middlewares/FreeRTOS//Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1885:../Middlewares/FreeRTOS//Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:../Middlewares/FreeRTOS//Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:../Middlewares/FreeRTOS//Source/tasks.c **** 		starts to run. */
1888:../Middlewares/FreeRTOS//Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1889:../Middlewares/FreeRTOS//Source/tasks.c **** 
1890:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1892:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:../Middlewares/FreeRTOS//Source/tasks.c **** 			structure specific to the task that will run first. */
1894:../Middlewares/FreeRTOS//Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1896:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:../Middlewares/FreeRTOS//Source/tasks.c **** 
1898:../Middlewares/FreeRTOS//Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1899:../Middlewares/FreeRTOS//Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1900:../Middlewares/FreeRTOS//Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1901:../Middlewares/FreeRTOS//Source/tasks.c **** 
1902:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1903:../Middlewares/FreeRTOS//Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:../Middlewares/FreeRTOS//Source/tasks.c **** 		the run time counter time base. */
1905:../Middlewares/FreeRTOS//Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1906:../Middlewares/FreeRTOS//Source/tasks.c **** 
1907:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:../Middlewares/FreeRTOS//Source/tasks.c **** 		portable interface. */
1909:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1910:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1911:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:../Middlewares/FreeRTOS//Source/tasks.c **** 			function will not return. */
1913:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1914:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1915:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1916:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1918:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1919:../Middlewares/FreeRTOS//Source/tasks.c **** 	else
1920:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1921:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:../Middlewares/FreeRTOS//Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:../Middlewares/FreeRTOS//Source/tasks.c **** 		or the timer task. */
1924:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1925:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1926:../Middlewares/FreeRTOS//Source/tasks.c **** 
1927:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1928:../Middlewares/FreeRTOS//Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:../Middlewares/FreeRTOS//Source/tasks.c **** 	( void ) xIdleTaskHandle;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 41


1930:../Middlewares/FreeRTOS//Source/tasks.c **** }
1931:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1932:../Middlewares/FreeRTOS//Source/tasks.c **** 
1933:../Middlewares/FreeRTOS//Source/tasks.c **** void vTaskEndScheduler( void )
1934:../Middlewares/FreeRTOS//Source/tasks.c **** {
1935:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1936:../Middlewares/FreeRTOS//Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:../Middlewares/FreeRTOS//Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1938:../Middlewares/FreeRTOS//Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1939:../Middlewares/FreeRTOS//Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
1940:../Middlewares/FreeRTOS//Source/tasks.c **** 	vPortEndScheduler();
1941:../Middlewares/FreeRTOS//Source/tasks.c **** }
1942:../Middlewares/FreeRTOS//Source/tasks.c **** /*----------------------------------------------------------*/
1943:../Middlewares/FreeRTOS//Source/tasks.c **** 
1944:../Middlewares/FreeRTOS//Source/tasks.c **** void vTaskSuspendAll( void )
1945:../Middlewares/FreeRTOS//Source/tasks.c **** {
1946:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1948:../Middlewares/FreeRTOS//Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:../Middlewares/FreeRTOS//Source/tasks.c **** 	http://goo.gl/wu4acr */
1950:../Middlewares/FreeRTOS//Source/tasks.c **** 	++uxSchedulerSuspended;
1951:../Middlewares/FreeRTOS//Source/tasks.c **** }
1952:../Middlewares/FreeRTOS//Source/tasks.c **** /*----------------------------------------------------------*/
1953:../Middlewares/FreeRTOS//Source/tasks.c **** 
1954:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1955:../Middlewares/FreeRTOS//Source/tasks.c **** 
1956:../Middlewares/FreeRTOS//Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1958:../Middlewares/FreeRTOS//Source/tasks.c **** 	TickType_t xReturn;
1959:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:../Middlewares/FreeRTOS//Source/tasks.c **** 
1961:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:../Middlewares/FreeRTOS//Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:../Middlewares/FreeRTOS//Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:../Middlewares/FreeRTOS//Source/tasks.c **** 		running. */
1965:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1967:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1969:../Middlewares/FreeRTOS//Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1970:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1971:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1972:../Middlewares/FreeRTOS//Source/tasks.c **** 		#else
1973:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1974:../Middlewares/FreeRTOS//Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:../Middlewares/FreeRTOS//Source/tasks.c **** 
1976:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:../Middlewares/FreeRTOS//Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:../Middlewares/FreeRTOS//Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:../Middlewares/FreeRTOS//Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:../Middlewares/FreeRTOS//Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1981:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1983:../Middlewares/FreeRTOS//Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1984:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1985:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1986:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 42


1987:../Middlewares/FreeRTOS//Source/tasks.c **** 
1988:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1989:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1990:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = 0;
1991:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1992:../Middlewares/FreeRTOS//Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1993:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1994:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1995:../Middlewares/FreeRTOS//Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:../Middlewares/FreeRTOS//Source/tasks.c **** 			processed. */
1997:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = 0;
1998:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1999:../Middlewares/FreeRTOS//Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2001:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:../Middlewares/FreeRTOS//Source/tasks.c **** 			idle priority.  This path can only be reached if
2003:../Middlewares/FreeRTOS//Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = 0;
2005:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2006:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
2007:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2008:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2010:../Middlewares/FreeRTOS//Source/tasks.c **** 
2011:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
2012:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2013:../Middlewares/FreeRTOS//Source/tasks.c **** 
2014:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:../Middlewares/FreeRTOS//Source/tasks.c **** /*----------------------------------------------------------*/
2016:../Middlewares/FreeRTOS//Source/tasks.c **** 
2017:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:../Middlewares/FreeRTOS//Source/tasks.c **** {
2019:../Middlewares/FreeRTOS//Source/tasks.c **** TCB_t *pxTCB = NULL;
2020:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2021:../Middlewares/FreeRTOS//Source/tasks.c **** 
2022:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:../Middlewares/FreeRTOS//Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2025:../Middlewares/FreeRTOS//Source/tasks.c **** 
2026:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2027:../Middlewares/FreeRTOS//Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:../Middlewares/FreeRTOS//Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:../Middlewares/FreeRTOS//Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:../Middlewares/FreeRTOS//Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:../Middlewares/FreeRTOS//Source/tasks.c **** 	taskENTER_CRITICAL();
2032:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2033:../Middlewares/FreeRTOS//Source/tasks.c **** 		--uxSchedulerSuspended;
2034:../Middlewares/FreeRTOS//Source/tasks.c **** 
2035:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2036:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2037:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2038:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2039:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2040:../Middlewares/FreeRTOS//Source/tasks.c **** 				appropriate ready list. */
2041:../Middlewares/FreeRTOS//Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2042:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2043:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 43


2044:../Middlewares/FreeRTOS//Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2045:../Middlewares/FreeRTOS//Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2046:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2047:../Middlewares/FreeRTOS//Source/tasks.c **** 
2048:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:../Middlewares/FreeRTOS//Source/tasks.c **** 					task then a yield must be performed. */
2050:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2051:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2052:../Middlewares/FreeRTOS//Source/tasks.c **** 						xYieldPending = pdTRUE;
2053:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2054:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
2055:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2056:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2058:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2059:../Middlewares/FreeRTOS//Source/tasks.c **** 
2060:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxTCB != NULL )
2061:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2062:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:../Middlewares/FreeRTOS//Source/tasks.c **** 					which may have prevented the next unblock time from being
2064:../Middlewares/FreeRTOS//Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2065:../Middlewares/FreeRTOS//Source/tasks.c **** 					important for low power tickless implementations, where
2066:../Middlewares/FreeRTOS//Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:../Middlewares/FreeRTOS//Source/tasks.c **** 					state. */
2068:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2069:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2070:../Middlewares/FreeRTOS//Source/tasks.c **** 
2071:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:../Middlewares/FreeRTOS//Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:../Middlewares/FreeRTOS//Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:../Middlewares/FreeRTOS//Source/tasks.c **** 				time. */
2075:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2076:../Middlewares/FreeRTOS//Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2077:../Middlewares/FreeRTOS//Source/tasks.c **** 
2078:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2079:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2080:../Middlewares/FreeRTOS//Source/tasks.c **** 						do
2081:../Middlewares/FreeRTOS//Source/tasks.c **** 						{
2082:../Middlewares/FreeRTOS//Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2083:../Middlewares/FreeRTOS//Source/tasks.c **** 							{
2084:../Middlewares/FreeRTOS//Source/tasks.c **** 								xYieldPending = pdTRUE;
2085:../Middlewares/FreeRTOS//Source/tasks.c **** 							}
2086:../Middlewares/FreeRTOS//Source/tasks.c **** 							else
2087:../Middlewares/FreeRTOS//Source/tasks.c **** 							{
2088:../Middlewares/FreeRTOS//Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:../Middlewares/FreeRTOS//Source/tasks.c **** 							}
2090:../Middlewares/FreeRTOS//Source/tasks.c **** 							--uxPendedCounts;
2091:../Middlewares/FreeRTOS//Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2092:../Middlewares/FreeRTOS//Source/tasks.c **** 
2093:../Middlewares/FreeRTOS//Source/tasks.c **** 						uxPendedTicks = 0;
2094:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2095:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
2096:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2097:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2098:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2099:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2100:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 44


2101:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2102:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2103:../Middlewares/FreeRTOS//Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2105:../Middlewares/FreeRTOS//Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2106:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2107:../Middlewares/FreeRTOS//Source/tasks.c **** 					#endif
2108:../Middlewares/FreeRTOS//Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2109:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2110:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
2111:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2112:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2113:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2114:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2115:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2116:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
2117:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2118:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2119:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2120:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2121:../Middlewares/FreeRTOS//Source/tasks.c **** 	taskEXIT_CRITICAL();
2122:../Middlewares/FreeRTOS//Source/tasks.c **** 
2123:../Middlewares/FreeRTOS//Source/tasks.c **** 	return xAlreadyYielded;
2124:../Middlewares/FreeRTOS//Source/tasks.c **** }
2125:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2126:../Middlewares/FreeRTOS//Source/tasks.c **** 
2127:../Middlewares/FreeRTOS//Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2128:../Middlewares/FreeRTOS//Source/tasks.c **** {
2129:../Middlewares/FreeRTOS//Source/tasks.c **** TickType_t xTicks;
2130:../Middlewares/FreeRTOS//Source/tasks.c **** 
2131:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:../Middlewares/FreeRTOS//Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2134:../Middlewares/FreeRTOS//Source/tasks.c **** 		xTicks = xTickCount;
2135:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2136:../Middlewares/FreeRTOS//Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:../Middlewares/FreeRTOS//Source/tasks.c **** 
2138:../Middlewares/FreeRTOS//Source/tasks.c **** 	return xTicks;
2139:../Middlewares/FreeRTOS//Source/tasks.c **** }
2140:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2141:../Middlewares/FreeRTOS//Source/tasks.c **** 
2142:../Middlewares/FreeRTOS//Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:../Middlewares/FreeRTOS//Source/tasks.c **** {
2144:../Middlewares/FreeRTOS//Source/tasks.c **** TickType_t xReturn;
2145:../Middlewares/FreeRTOS//Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:../Middlewares/FreeRTOS//Source/tasks.c **** 
2147:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:../Middlewares/FreeRTOS//Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:../Middlewares/FreeRTOS//Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:../Middlewares/FreeRTOS//Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:../Middlewares/FreeRTOS//Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:../Middlewares/FreeRTOS//Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:../Middlewares/FreeRTOS//Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2154:../Middlewares/FreeRTOS//Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2155:../Middlewares/FreeRTOS//Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2156:../Middlewares/FreeRTOS//Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:../Middlewares/FreeRTOS//Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 45


2158:../Middlewares/FreeRTOS//Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:../Middlewares/FreeRTOS//Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2160:../Middlewares/FreeRTOS//Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:../Middlewares/FreeRTOS//Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2162:../Middlewares/FreeRTOS//Source/tasks.c **** 
2163:../Middlewares/FreeRTOS//Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2164:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2165:../Middlewares/FreeRTOS//Source/tasks.c **** 		xReturn = xTickCount;
2166:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2167:../Middlewares/FreeRTOS//Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2168:../Middlewares/FreeRTOS//Source/tasks.c **** 
2169:../Middlewares/FreeRTOS//Source/tasks.c **** 	return xReturn;
2170:../Middlewares/FreeRTOS//Source/tasks.c **** }
2171:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2172:../Middlewares/FreeRTOS//Source/tasks.c **** 
2173:../Middlewares/FreeRTOS//Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:../Middlewares/FreeRTOS//Source/tasks.c **** {
2175:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t. */
2177:../Middlewares/FreeRTOS//Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2178:../Middlewares/FreeRTOS//Source/tasks.c **** }
2179:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2180:../Middlewares/FreeRTOS//Source/tasks.c **** 
2181:../Middlewares/FreeRTOS//Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:../Middlewares/FreeRTOS//Source/tasks.c **** {
2183:../Middlewares/FreeRTOS//Source/tasks.c **** TCB_t *pxTCB;
2184:../Middlewares/FreeRTOS//Source/tasks.c **** 
2185:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:../Middlewares/FreeRTOS//Source/tasks.c **** 	queried. */
2187:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2188:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxTCB );
2189:../Middlewares/FreeRTOS//Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2190:../Middlewares/FreeRTOS//Source/tasks.c **** }
2191:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2192:../Middlewares/FreeRTOS//Source/tasks.c **** 
2193:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:../Middlewares/FreeRTOS//Source/tasks.c **** 
2195:../Middlewares/FreeRTOS//Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2197:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2198:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t x;
2199:../Middlewares/FreeRTOS//Source/tasks.c **** 	char cNextChar;
2200:../Middlewares/FreeRTOS//Source/tasks.c **** 
2201:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:../Middlewares/FreeRTOS//Source/tasks.c **** 
2203:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2204:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2205:../Middlewares/FreeRTOS//Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2206:../Middlewares/FreeRTOS//Source/tasks.c **** 
2207:../Middlewares/FreeRTOS//Source/tasks.c **** 			do
2208:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2209:../Middlewares/FreeRTOS//Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2210:../Middlewares/FreeRTOS//Source/tasks.c **** 
2211:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Check each character in the name looking for a match or
2212:../Middlewares/FreeRTOS//Source/tasks.c **** 				mismatch. */
2213:../Middlewares/FreeRTOS//Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2214:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 46


2215:../Middlewares/FreeRTOS//Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2216:../Middlewares/FreeRTOS//Source/tasks.c **** 
2217:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2218:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2219:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* Characters didn't match. */
2220:../Middlewares/FreeRTOS//Source/tasks.c **** 						break;
2221:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2222:../Middlewares/FreeRTOS//Source/tasks.c **** 					else if( cNextChar == 0x00 )
2223:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2224:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* Both strings terminated, a match must have been
2225:../Middlewares/FreeRTOS//Source/tasks.c **** 						found. */
2226:../Middlewares/FreeRTOS//Source/tasks.c **** 						pxReturn = pxNextTCB;
2227:../Middlewares/FreeRTOS//Source/tasks.c **** 						break;
2228:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2229:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
2230:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2231:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2233:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2234:../Middlewares/FreeRTOS//Source/tasks.c **** 
2235:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxReturn != NULL )
2236:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2237:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The handle has been found. */
2238:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
2239:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2240:../Middlewares/FreeRTOS//Source/tasks.c **** 
2241:../Middlewares/FreeRTOS//Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2242:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2243:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
2244:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2245:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2247:../Middlewares/FreeRTOS//Source/tasks.c **** 
2248:../Middlewares/FreeRTOS//Source/tasks.c **** 		return pxReturn;
2249:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2250:../Middlewares/FreeRTOS//Source/tasks.c **** 
2251:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2252:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2253:../Middlewares/FreeRTOS//Source/tasks.c **** 
2254:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2255:../Middlewares/FreeRTOS//Source/tasks.c **** 
2256:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2258:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t* pxTCB;
2260:../Middlewares/FreeRTOS//Source/tasks.c **** 
2261:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:../Middlewares/FreeRTOS//Source/tasks.c **** 
2264:../Middlewares/FreeRTOS//Source/tasks.c **** 		vTaskSuspendAll();
2265:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2266:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Search the ready lists. */
2267:../Middlewares/FreeRTOS//Source/tasks.c **** 			do
2268:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2269:../Middlewares/FreeRTOS//Source/tasks.c **** 				uxQueue--;
2270:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 47


2272:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxTCB != NULL )
2273:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2274:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Found the handle. */
2275:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
2276:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2277:../Middlewares/FreeRTOS//Source/tasks.c **** 
2278:../Middlewares/FreeRTOS//Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:../Middlewares/FreeRTOS//Source/tasks.c **** 
2280:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Search the delayed lists. */
2281:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxTCB == NULL )
2282:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2283:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2284:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2285:../Middlewares/FreeRTOS//Source/tasks.c **** 
2286:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxTCB == NULL )
2287:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2288:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2290:../Middlewares/FreeRTOS//Source/tasks.c **** 
2291:../Middlewares/FreeRTOS//Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2293:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxTCB == NULL )
2294:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2295:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Search the suspended list. */
2296:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2297:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2298:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2299:../Middlewares/FreeRTOS//Source/tasks.c **** 			#endif
2300:../Middlewares/FreeRTOS//Source/tasks.c **** 
2301:../Middlewares/FreeRTOS//Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2303:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxTCB == NULL )
2304:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2305:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Search the deleted list. */
2306:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2308:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2309:../Middlewares/FreeRTOS//Source/tasks.c **** 			#endif
2310:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2311:../Middlewares/FreeRTOS//Source/tasks.c **** 		( void ) xTaskResumeAll();
2312:../Middlewares/FreeRTOS//Source/tasks.c **** 
2313:../Middlewares/FreeRTOS//Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2315:../Middlewares/FreeRTOS//Source/tasks.c **** 
2316:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2318:../Middlewares/FreeRTOS//Source/tasks.c **** 
2319:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:../Middlewares/FreeRTOS//Source/tasks.c **** 
2321:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2323:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2324:../Middlewares/FreeRTOS//Source/tasks.c **** 
2325:../Middlewares/FreeRTOS//Source/tasks.c **** 		vTaskSuspendAll();
2326:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2327:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 48


2329:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2330:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2331:../Middlewares/FreeRTOS//Source/tasks.c **** 				task in the Ready state. */
2332:../Middlewares/FreeRTOS//Source/tasks.c **** 				do
2333:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2334:../Middlewares/FreeRTOS//Source/tasks.c **** 					uxQueue--;
2335:../Middlewares/FreeRTOS//Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2336:../Middlewares/FreeRTOS//Source/tasks.c **** 
2337:../Middlewares/FreeRTOS//Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2338:../Middlewares/FreeRTOS//Source/tasks.c **** 
2339:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2340:../Middlewares/FreeRTOS//Source/tasks.c **** 				task in the Blocked state. */
2341:../Middlewares/FreeRTOS//Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2342:../Middlewares/FreeRTOS//Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2343:../Middlewares/FreeRTOS//Source/tasks.c **** 
2344:../Middlewares/FreeRTOS//Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2346:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2347:../Middlewares/FreeRTOS//Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:../Middlewares/FreeRTOS//Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2349:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2350:../Middlewares/FreeRTOS//Source/tasks.c **** 				#endif
2351:../Middlewares/FreeRTOS//Source/tasks.c **** 
2352:../Middlewares/FreeRTOS//Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2354:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2355:../Middlewares/FreeRTOS//Source/tasks.c **** 					each task in the Suspended state. */
2356:../Middlewares/FreeRTOS//Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2357:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2358:../Middlewares/FreeRTOS//Source/tasks.c **** 				#endif
2359:../Middlewares/FreeRTOS//Source/tasks.c **** 
2360:../Middlewares/FreeRTOS//Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2362:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2364:../Middlewares/FreeRTOS//Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:../Middlewares/FreeRTOS//Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2366:../Middlewares/FreeRTOS//Source/tasks.c **** 						#else
2367:../Middlewares/FreeRTOS//Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:../Middlewares/FreeRTOS//Source/tasks.c **** 						#endif
2369:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2370:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2371:../Middlewares/FreeRTOS//Source/tasks.c **** 				#else
2372:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2373:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2374:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2375:../Middlewares/FreeRTOS//Source/tasks.c **** 						*pulTotalRunTime = 0;
2376:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2377:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2378:../Middlewares/FreeRTOS//Source/tasks.c **** 				#endif
2379:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2380:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
2381:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2382:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2383:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2384:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2385:../Middlewares/FreeRTOS//Source/tasks.c **** 		( void ) xTaskResumeAll();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 49


2386:../Middlewares/FreeRTOS//Source/tasks.c **** 
2387:../Middlewares/FreeRTOS//Source/tasks.c **** 		return uxTask;
2388:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2389:../Middlewares/FreeRTOS//Source/tasks.c **** 
2390:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:../Middlewares/FreeRTOS//Source/tasks.c **** /*----------------------------------------------------------*/
2392:../Middlewares/FreeRTOS//Source/tasks.c **** 
2393:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2394:../Middlewares/FreeRTOS//Source/tasks.c **** 
2395:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2396:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2397:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2398:../Middlewares/FreeRTOS//Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xIdleTaskHandle;
2401:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2402:../Middlewares/FreeRTOS//Source/tasks.c **** 
2403:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2404:../Middlewares/FreeRTOS//Source/tasks.c **** /*----------------------------------------------------------*/
2405:../Middlewares/FreeRTOS//Source/tasks.c **** 
2406:../Middlewares/FreeRTOS//Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2407:../Middlewares/FreeRTOS//Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2408:../Middlewares/FreeRTOS//Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:../Middlewares/FreeRTOS//Source/tasks.c **** 1. */
2410:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2411:../Middlewares/FreeRTOS//Source/tasks.c **** 
2412:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2414:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:../Middlewares/FreeRTOS//Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:../Middlewares/FreeRTOS//Source/tasks.c **** 		each stepped tick. */
2417:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:../Middlewares/FreeRTOS//Source/tasks.c **** 		xTickCount += xTicksToJump;
2419:../Middlewares/FreeRTOS//Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2421:../Middlewares/FreeRTOS//Source/tasks.c **** 
2422:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2423:../Middlewares/FreeRTOS//Source/tasks.c **** /*----------------------------------------------------------*/
2424:../Middlewares/FreeRTOS//Source/tasks.c **** 
2425:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2426:../Middlewares/FreeRTOS//Source/tasks.c **** 
2427:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2429:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:../Middlewares/FreeRTOS//Source/tasks.c **** 
2432:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( pxTCB );
2433:../Middlewares/FreeRTOS//Source/tasks.c **** 
2434:../Middlewares/FreeRTOS//Source/tasks.c **** 		vTaskSuspendAll();
2435:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2436:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:../Middlewares/FreeRTOS//Source/tasks.c **** 			it is actually in the Blocked state. */
2438:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2439:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2440:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2441:../Middlewares/FreeRTOS//Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:../Middlewares/FreeRTOS//Source/tasks.c **** 				scheduler is suspended. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 50


2443:../Middlewares/FreeRTOS//Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2444:../Middlewares/FreeRTOS//Source/tasks.c **** 
2445:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2446:../Middlewares/FreeRTOS//Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2447:../Middlewares/FreeRTOS//Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:../Middlewares/FreeRTOS//Source/tasks.c **** 				is used. */
2449:../Middlewares/FreeRTOS//Source/tasks.c **** 				taskENTER_CRITICAL();
2450:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2451:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2453:../Middlewares/FreeRTOS//Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2454:../Middlewares/FreeRTOS//Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2455:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2456:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
2457:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2458:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2460:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2461:../Middlewares/FreeRTOS//Source/tasks.c **** 				taskEXIT_CRITICAL();
2462:../Middlewares/FreeRTOS//Source/tasks.c **** 
2463:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2464:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2465:../Middlewares/FreeRTOS//Source/tasks.c **** 
2466:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:../Middlewares/FreeRTOS//Source/tasks.c **** 				switch if preemption is turned off. */
2468:../Middlewares/FreeRTOS//Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2469:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2470:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:../Middlewares/FreeRTOS//Source/tasks.c **** 					performed if the unblocked task has a priority that is
2472:../Middlewares/FreeRTOS//Source/tasks.c **** 					equal to or higher than the currently executing task. */
2473:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2475:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2476:../Middlewares/FreeRTOS//Source/tasks.c **** 						is unsuspended. */
2477:../Middlewares/FreeRTOS//Source/tasks.c **** 						xYieldPending = pdTRUE;
2478:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2479:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
2480:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2481:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2483:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2484:../Middlewares/FreeRTOS//Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2486:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
2487:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2488:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2490:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2491:../Middlewares/FreeRTOS//Source/tasks.c **** 		xTaskResumeAll();
2492:../Middlewares/FreeRTOS//Source/tasks.c **** 
2493:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
2494:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2495:../Middlewares/FreeRTOS//Source/tasks.c **** 
2496:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2497:../Middlewares/FreeRTOS//Source/tasks.c **** /*----------------------------------------------------------*/
2498:../Middlewares/FreeRTOS//Source/tasks.c **** 
2499:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 51


2500:../Middlewares/FreeRTOS//Source/tasks.c **** {
2501:../Middlewares/FreeRTOS//Source/tasks.c **** TCB_t * pxTCB;
2502:../Middlewares/FreeRTOS//Source/tasks.c **** TickType_t xItemValue;
2503:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2504:../Middlewares/FreeRTOS//Source/tasks.c **** 
2505:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:../Middlewares/FreeRTOS//Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:../Middlewares/FreeRTOS//Source/tasks.c **** 	tasks to be unblocked. */
2508:../Middlewares/FreeRTOS//Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2509:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2510:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2511:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2512:../Middlewares/FreeRTOS//Source/tasks.c **** 		block. */
2513:../Middlewares/FreeRTOS//Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
2514:../Middlewares/FreeRTOS//Source/tasks.c **** 
2515:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:../Middlewares/FreeRTOS//Source/tasks.c **** 		delayed lists if it wraps to 0. */
2517:../Middlewares/FreeRTOS//Source/tasks.c **** 		xTickCount = xConstTickCount;
2518:../Middlewares/FreeRTOS//Source/tasks.c **** 
2519:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
2520:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2521:../Middlewares/FreeRTOS//Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2522:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2523:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
2524:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2525:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2526:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2527:../Middlewares/FreeRTOS//Source/tasks.c **** 
2528:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:../Middlewares/FreeRTOS//Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:../Middlewares/FreeRTOS//Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:../Middlewares/FreeRTOS//Source/tasks.c **** 		look any further down the list. */
2532:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2533:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2534:../Middlewares/FreeRTOS//Source/tasks.c **** 			for( ;; )
2535:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2536:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2537:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2538:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:../Middlewares/FreeRTOS//Source/tasks.c **** 					to the maximum possible value so it is extremely
2540:../Middlewares/FreeRTOS//Source/tasks.c **** 					unlikely that the
2541:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2542:../Middlewares/FreeRTOS//Source/tasks.c **** 					next time through. */
2543:../Middlewares/FreeRTOS//Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2544:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
2545:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2546:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
2547:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2548:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:../Middlewares/FreeRTOS//Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:../Middlewares/FreeRTOS//Source/tasks.c **** 					at which the task at the head of the delayed list must
2551:../Middlewares/FreeRTOS//Source/tasks.c **** 					be removed from the Blocked state. */
2552:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2553:../Middlewares/FreeRTOS//Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2554:../Middlewares/FreeRTOS//Source/tasks.c **** 
2555:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2556:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 52


2557:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:../Middlewares/FreeRTOS//Source/tasks.c **** 						item value is the time at which the task at the head
2559:../Middlewares/FreeRTOS//Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2560:../Middlewares/FreeRTOS//Source/tasks.c **** 						state -	so record the item value in
2561:../Middlewares/FreeRTOS//Source/tasks.c **** 						xNextTaskUnblockTime. */
2562:../Middlewares/FreeRTOS//Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2563:../Middlewares/FreeRTOS//Source/tasks.c **** 						break;
2564:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2565:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
2566:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2567:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2568:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2569:../Middlewares/FreeRTOS//Source/tasks.c **** 
2570:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:../Middlewares/FreeRTOS//Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2572:../Middlewares/FreeRTOS//Source/tasks.c **** 
2573:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:../Middlewares/FreeRTOS//Source/tasks.c **** 					it from the event list. */
2575:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2576:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2577:../Middlewares/FreeRTOS//Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2578:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2579:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
2580:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2581:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2583:../Middlewares/FreeRTOS//Source/tasks.c **** 
2584:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:../Middlewares/FreeRTOS//Source/tasks.c **** 					list. */
2586:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2587:../Middlewares/FreeRTOS//Source/tasks.c **** 
2588:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:../Middlewares/FreeRTOS//Source/tasks.c **** 					context switch if preemption is turned off. */
2590:../Middlewares/FreeRTOS//Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2592:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* Preemption is on, but a context switch should
2593:../Middlewares/FreeRTOS//Source/tasks.c **** 						only be performed if the unblocked task has a
2594:../Middlewares/FreeRTOS//Source/tasks.c **** 						priority that is equal to or higher than the
2595:../Middlewares/FreeRTOS//Source/tasks.c **** 						currently executing task. */
2596:../Middlewares/FreeRTOS//Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2597:../Middlewares/FreeRTOS//Source/tasks.c **** 						{
2598:../Middlewares/FreeRTOS//Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2599:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
2600:../Middlewares/FreeRTOS//Source/tasks.c **** 						else
2601:../Middlewares/FreeRTOS//Source/tasks.c **** 						{
2602:../Middlewares/FreeRTOS//Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
2604:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2605:../Middlewares/FreeRTOS//Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2607:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2608:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2609:../Middlewares/FreeRTOS//Source/tasks.c **** 
2610:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2611:../Middlewares/FreeRTOS//Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2612:../Middlewares/FreeRTOS//Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2613:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 53


2614:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2615:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2616:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2617:../Middlewares/FreeRTOS//Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2618:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2619:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
2620:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2621:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2622:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2623:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2624:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2625:../Middlewares/FreeRTOS//Source/tasks.c **** 
2626:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2627:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2628:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:../Middlewares/FreeRTOS//Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2632:../Middlewares/FreeRTOS//Source/tasks.c **** 				vApplicationTickHook();
2633:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2634:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
2635:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2636:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2638:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2639:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2640:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2641:../Middlewares/FreeRTOS//Source/tasks.c **** 	else
2642:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2643:../Middlewares/FreeRTOS//Source/tasks.c **** 		++uxPendedTicks;
2644:../Middlewares/FreeRTOS//Source/tasks.c **** 
2645:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:../Middlewares/FreeRTOS//Source/tasks.c **** 		scheduler is locked. */
2647:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2649:../Middlewares/FreeRTOS//Source/tasks.c **** 			vApplicationTickHook();
2650:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2651:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif
2652:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2653:../Middlewares/FreeRTOS//Source/tasks.c **** 
2654:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2656:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2657:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2658:../Middlewares/FreeRTOS//Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2659:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2660:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
2661:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2662:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2664:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2665:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:../Middlewares/FreeRTOS//Source/tasks.c **** 
2667:../Middlewares/FreeRTOS//Source/tasks.c **** 	return xSwitchRequired;
2668:../Middlewares/FreeRTOS//Source/tasks.c **** }
2669:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2670:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 54


2671:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2672:../Middlewares/FreeRTOS//Source/tasks.c **** 
2673:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2674:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2675:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *xTCB;
2676:../Middlewares/FreeRTOS//Source/tasks.c **** 
2677:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:../Middlewares/FreeRTOS//Source/tasks.c **** 		getting set. */
2679:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xTask == NULL )
2680:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2681:../Middlewares/FreeRTOS//Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2682:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2683:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
2684:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2685:../Middlewares/FreeRTOS//Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2687:../Middlewares/FreeRTOS//Source/tasks.c **** 
2688:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:../Middlewares/FreeRTOS//Source/tasks.c **** 		the value can be accessed from an interrupt. */
2690:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
2691:../Middlewares/FreeRTOS//Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2692:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
2693:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2694:../Middlewares/FreeRTOS//Source/tasks.c **** 
2695:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2696:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2697:../Middlewares/FreeRTOS//Source/tasks.c **** 
2698:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2699:../Middlewares/FreeRTOS//Source/tasks.c **** 
2700:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2702:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *xTCB;
2703:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskHookFunction_t xReturn;
2704:../Middlewares/FreeRTOS//Source/tasks.c **** 
2705:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xTask == NULL )
2707:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2708:../Middlewares/FreeRTOS//Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2710:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
2711:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2712:../Middlewares/FreeRTOS//Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2714:../Middlewares/FreeRTOS//Source/tasks.c **** 
2715:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:../Middlewares/FreeRTOS//Source/tasks.c **** 		the value can be accessed from an interrupt. */
2717:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
2718:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2719:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2721:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
2722:../Middlewares/FreeRTOS//Source/tasks.c **** 
2723:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
2724:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2725:../Middlewares/FreeRTOS//Source/tasks.c **** 
2726:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 55


2728:../Middlewares/FreeRTOS//Source/tasks.c **** 
2729:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2730:../Middlewares/FreeRTOS//Source/tasks.c **** 
2731:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2732:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2733:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *xTCB;
2734:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn;
2735:../Middlewares/FreeRTOS//Source/tasks.c **** 
2736:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xTask == NULL )
2738:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2739:../Middlewares/FreeRTOS//Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2740:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2741:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
2742:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2743:../Middlewares/FreeRTOS//Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2745:../Middlewares/FreeRTOS//Source/tasks.c **** 
2746:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2748:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2749:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2750:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
2751:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2752:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = pdFAIL;
2753:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2754:../Middlewares/FreeRTOS//Source/tasks.c **** 
2755:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
2756:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2757:../Middlewares/FreeRTOS//Source/tasks.c **** 
2758:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2760:../Middlewares/FreeRTOS//Source/tasks.c **** 
2761:../Middlewares/FreeRTOS//Source/tasks.c **** void vTaskSwitchContext( void )
2762:../Middlewares/FreeRTOS//Source/tasks.c **** {
2763:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2764:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2765:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2766:../Middlewares/FreeRTOS//Source/tasks.c **** 		switch. */
2767:../Middlewares/FreeRTOS//Source/tasks.c **** 		xYieldPending = pdTRUE;
2768:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2769:../Middlewares/FreeRTOS//Source/tasks.c **** 	else
2770:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2771:../Middlewares/FreeRTOS//Source/tasks.c **** 		xYieldPending = pdFALSE;
2772:../Middlewares/FreeRTOS//Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:../Middlewares/FreeRTOS//Source/tasks.c **** 
2774:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2776:../Middlewares/FreeRTOS//Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:../Middlewares/FreeRTOS//Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:../Middlewares/FreeRTOS//Source/tasks.c **** 				#else
2779:../Middlewares/FreeRTOS//Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:../Middlewares/FreeRTOS//Source/tasks.c **** 				#endif
2781:../Middlewares/FreeRTOS//Source/tasks.c **** 
2782:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2783:../Middlewares/FreeRTOS//Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:../Middlewares/FreeRTOS//Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 56


2785:../Middlewares/FreeRTOS//Source/tasks.c **** 				protection here so count values are only valid until the timer
2786:../Middlewares/FreeRTOS//Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2787:../Middlewares/FreeRTOS//Source/tasks.c **** 				against suspect run time stat counter implementations - which
2788:../Middlewares/FreeRTOS//Source/tasks.c **** 				are provided by the application, not the kernel. */
2789:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2791:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2793:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
2794:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2795:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2796:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2797:../Middlewares/FreeRTOS//Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2799:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:../Middlewares/FreeRTOS//Source/tasks.c **** 
2801:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2802:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2803:../Middlewares/FreeRTOS//Source/tasks.c **** 
2804:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2805:../Middlewares/FreeRTOS//Source/tasks.c **** 		optimised asm code. */
2806:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2807:../Middlewares/FreeRTOS//Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2808:../Middlewares/FreeRTOS//Source/tasks.c **** 
2809:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2810:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2811:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2812:../Middlewares/FreeRTOS//Source/tasks.c **** 			structure specific to this task. */
2813:../Middlewares/FreeRTOS//Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2814:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2815:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2816:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2817:../Middlewares/FreeRTOS//Source/tasks.c **** }
2818:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2819:../Middlewares/FreeRTOS//Source/tasks.c **** 
2820:../Middlewares/FreeRTOS//Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2821:../Middlewares/FreeRTOS//Source/tasks.c **** {
2822:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxEventList );
2823:../Middlewares/FreeRTOS//Source/tasks.c **** 
2824:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2825:../Middlewares/FreeRTOS//Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2826:../Middlewares/FreeRTOS//Source/tasks.c **** 
2827:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2828:../Middlewares/FreeRTOS//Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2829:../Middlewares/FreeRTOS//Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2830:../Middlewares/FreeRTOS//Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2831:../Middlewares/FreeRTOS//Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2832:../Middlewares/FreeRTOS//Source/tasks.c **** 
2833:../Middlewares/FreeRTOS//Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2834:../Middlewares/FreeRTOS//Source/tasks.c **** }
2835:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2836:../Middlewares/FreeRTOS//Source/tasks.c **** 
2837:../Middlewares/FreeRTOS//Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2838:../Middlewares/FreeRTOS//Source/tasks.c **** {
2839:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxEventList );
2840:../Middlewares/FreeRTOS//Source/tasks.c **** 
2841:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 57


2842:../Middlewares/FreeRTOS//Source/tasks.c **** 	the event groups implementation. */
2843:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2844:../Middlewares/FreeRTOS//Source/tasks.c **** 
2845:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2846:../Middlewares/FreeRTOS//Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2847:../Middlewares/FreeRTOS//Source/tasks.c **** 	task that is not in the Blocked state. */
2848:../Middlewares/FreeRTOS//Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2849:../Middlewares/FreeRTOS//Source/tasks.c **** 
2850:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2851:../Middlewares/FreeRTOS//Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2852:../Middlewares/FreeRTOS//Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2853:../Middlewares/FreeRTOS//Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2854:../Middlewares/FreeRTOS//Source/tasks.c **** 	the task level). */
2855:../Middlewares/FreeRTOS//Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2856:../Middlewares/FreeRTOS//Source/tasks.c **** 
2857:../Middlewares/FreeRTOS//Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2858:../Middlewares/FreeRTOS//Source/tasks.c **** }
2859:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2860:../Middlewares/FreeRTOS//Source/tasks.c **** 
2861:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2862:../Middlewares/FreeRTOS//Source/tasks.c **** 
2863:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2864:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2865:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( pxEventList );
2866:../Middlewares/FreeRTOS//Source/tasks.c **** 
2867:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* This function should not be called by application code hence the
2868:../Middlewares/FreeRTOS//Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2869:../Middlewares/FreeRTOS//Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2870:../Middlewares/FreeRTOS//Source/tasks.c **** 		it should be called with the scheduler suspended. */
2871:../Middlewares/FreeRTOS//Source/tasks.c **** 
2872:../Middlewares/FreeRTOS//Source/tasks.c **** 
2873:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2874:../Middlewares/FreeRTOS//Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2875:../Middlewares/FreeRTOS//Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2876:../Middlewares/FreeRTOS//Source/tasks.c **** 		can be used in place of vListInsert. */
2877:../Middlewares/FreeRTOS//Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2878:../Middlewares/FreeRTOS//Source/tasks.c **** 
2879:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2880:../Middlewares/FreeRTOS//Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2881:../Middlewares/FreeRTOS//Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2882:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2883:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2884:../Middlewares/FreeRTOS//Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2885:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2886:../Middlewares/FreeRTOS//Source/tasks.c **** 
2887:../Middlewares/FreeRTOS//Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2888:../Middlewares/FreeRTOS//Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2889:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2890:../Middlewares/FreeRTOS//Source/tasks.c **** 
2891:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TIMERS */
2892:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2893:../Middlewares/FreeRTOS//Source/tasks.c **** 
2894:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2895:../Middlewares/FreeRTOS//Source/tasks.c **** {
2896:../Middlewares/FreeRTOS//Source/tasks.c **** TCB_t *pxUnblockedTCB;
2897:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xReturn;
2898:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 58


2899:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2900:../Middlewares/FreeRTOS//Source/tasks.c **** 	called from a critical section within an ISR. */
2901:../Middlewares/FreeRTOS//Source/tasks.c **** 
2902:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2903:../Middlewares/FreeRTOS//Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2904:../Middlewares/FreeRTOS//Source/tasks.c **** 	the delayed list, and add it to the ready list.
2905:../Middlewares/FreeRTOS//Source/tasks.c **** 
2906:../Middlewares/FreeRTOS//Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2907:../Middlewares/FreeRTOS//Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2908:../Middlewares/FreeRTOS//Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2909:../Middlewares/FreeRTOS//Source/tasks.c **** 
2910:../Middlewares/FreeRTOS//Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2911:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxEventList is not empty. */
2912:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2913:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2914:../Middlewares/FreeRTOS//Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2915:../Middlewares/FreeRTOS//Source/tasks.c **** 
2916:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2917:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2918:../Middlewares/FreeRTOS//Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2919:../Middlewares/FreeRTOS//Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
2920:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2921:../Middlewares/FreeRTOS//Source/tasks.c **** 	else
2922:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2923:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2924:../Middlewares/FreeRTOS//Source/tasks.c **** 		pending until the scheduler is resumed. */
2925:../Middlewares/FreeRTOS//Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2926:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2927:../Middlewares/FreeRTOS//Source/tasks.c **** 
2928:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2929:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2930:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2931:../Middlewares/FreeRTOS//Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2932:../Middlewares/FreeRTOS//Source/tasks.c **** 		it should force a context switch now. */
2933:../Middlewares/FreeRTOS//Source/tasks.c **** 		xReturn = pdTRUE;
2934:../Middlewares/FreeRTOS//Source/tasks.c **** 
2935:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2936:../Middlewares/FreeRTOS//Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2937:../Middlewares/FreeRTOS//Source/tasks.c **** 		xYieldPending = pdTRUE;
2938:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2939:../Middlewares/FreeRTOS//Source/tasks.c **** 	else
2940:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2941:../Middlewares/FreeRTOS//Source/tasks.c **** 		xReturn = pdFALSE;
2942:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2943:../Middlewares/FreeRTOS//Source/tasks.c **** 
2944:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2945:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2946:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2947:../Middlewares/FreeRTOS//Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2948:../Middlewares/FreeRTOS//Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2949:../Middlewares/FreeRTOS//Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2950:../Middlewares/FreeRTOS//Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2951:../Middlewares/FreeRTOS//Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2952:../Middlewares/FreeRTOS//Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2953:../Middlewares/FreeRTOS//Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2954:../Middlewares/FreeRTOS//Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2955:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 59


2956:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
2957:../Middlewares/FreeRTOS//Source/tasks.c **** 
2958:../Middlewares/FreeRTOS//Source/tasks.c **** 	return xReturn;
2959:../Middlewares/FreeRTOS//Source/tasks.c **** }
2960:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2961:../Middlewares/FreeRTOS//Source/tasks.c **** 
2962:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2963:../Middlewares/FreeRTOS//Source/tasks.c **** {
2964:../Middlewares/FreeRTOS//Source/tasks.c **** TCB_t *pxUnblockedTCB;
2965:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xReturn;
2966:../Middlewares/FreeRTOS//Source/tasks.c **** 
2967:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2968:../Middlewares/FreeRTOS//Source/tasks.c **** 	the event flags implementation. */
2969:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2970:../Middlewares/FreeRTOS//Source/tasks.c **** 
2971:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Store the new item value in the event list. */
2972:../Middlewares/FreeRTOS//Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
2973:../Middlewares/FreeRTOS//Source/tasks.c **** 
2974:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2975:../Middlewares/FreeRTOS//Source/tasks.c **** 	event flags. */
2976:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
2977:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2978:../Middlewares/FreeRTOS//Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
2979:../Middlewares/FreeRTOS//Source/tasks.c **** 
2980:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2981:../Middlewares/FreeRTOS//Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2982:../Middlewares/FreeRTOS//Source/tasks.c **** 	lists. */
2983:../Middlewares/FreeRTOS//Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2984:../Middlewares/FreeRTOS//Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
2985:../Middlewares/FreeRTOS//Source/tasks.c **** 
2986:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2987:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2988:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Return true if the task removed from the event list has
2989:../Middlewares/FreeRTOS//Source/tasks.c **** 		a higher priority than the calling task.  This allows
2990:../Middlewares/FreeRTOS//Source/tasks.c **** 		the calling task to know if it should force a context
2991:../Middlewares/FreeRTOS//Source/tasks.c **** 		switch now. */
2992:../Middlewares/FreeRTOS//Source/tasks.c **** 		xReturn = pdTRUE;
2993:../Middlewares/FreeRTOS//Source/tasks.c **** 
2994:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2995:../Middlewares/FreeRTOS//Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2996:../Middlewares/FreeRTOS//Source/tasks.c **** 		xYieldPending = pdTRUE;
2997:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2998:../Middlewares/FreeRTOS//Source/tasks.c **** 	else
2999:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3000:../Middlewares/FreeRTOS//Source/tasks.c **** 		xReturn = pdFALSE;
3001:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3002:../Middlewares/FreeRTOS//Source/tasks.c **** 
3003:../Middlewares/FreeRTOS//Source/tasks.c **** 	return xReturn;
3004:../Middlewares/FreeRTOS//Source/tasks.c **** }
3005:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3006:../Middlewares/FreeRTOS//Source/tasks.c **** 
3007:../Middlewares/FreeRTOS//Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3008:../Middlewares/FreeRTOS//Source/tasks.c **** {
3009:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxTimeOut );
3010:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3011:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3012:../Middlewares/FreeRTOS//Source/tasks.c **** }
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 60


3013:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3014:../Middlewares/FreeRTOS//Source/tasks.c **** 
3015:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3016:../Middlewares/FreeRTOS//Source/tasks.c **** {
3017:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xReturn;
3018:../Middlewares/FreeRTOS//Source/tasks.c **** 
3019:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxTimeOut );
3020:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxTicksToWait );
3021:../Middlewares/FreeRTOS//Source/tasks.c **** 
3022:../Middlewares/FreeRTOS//Source/tasks.c **** 	taskENTER_CRITICAL();
3023:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3024:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3025:../Middlewares/FreeRTOS//Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3026:../Middlewares/FreeRTOS//Source/tasks.c **** 
3027:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3028:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3029:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3030:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3031:../Middlewares/FreeRTOS//Source/tasks.c **** 				but has the same result. */
3032:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3033:../Middlewares/FreeRTOS//Source/tasks.c **** 				xReturn = pdTRUE;
3034:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3035:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
3036:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif
3037:../Middlewares/FreeRTOS//Source/tasks.c **** 
3038:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3039:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3040:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3041:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3042:../Middlewares/FreeRTOS//Source/tasks.c **** 				specified is the maximum block time then the task should block
3043:../Middlewares/FreeRTOS//Source/tasks.c **** 				indefinitely, and therefore never time out. */
3044:../Middlewares/FreeRTOS//Source/tasks.c **** 				xReturn = pdFALSE;
3045:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3046:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
3047:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif
3048:../Middlewares/FreeRTOS//Source/tasks.c **** 
3049:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3050:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3051:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* The tick count is greater than the time at which
3052:../Middlewares/FreeRTOS//Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3053:../Middlewares/FreeRTOS//Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3054:../Middlewares/FreeRTOS//Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3055:../Middlewares/FreeRTOS//Source/tasks.c **** 			was called. */
3056:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = pdTRUE;
3057:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3058:../Middlewares/FreeRTOS//Source/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
3059:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3060:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3061:../Middlewares/FreeRTOS//Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
3062:../Middlewares/FreeRTOS//Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
3063:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = pdFALSE;
3064:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3065:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3066:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3067:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = pdTRUE;
3068:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3069:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 61


3070:../Middlewares/FreeRTOS//Source/tasks.c **** 	taskEXIT_CRITICAL();
3071:../Middlewares/FreeRTOS//Source/tasks.c **** 
3072:../Middlewares/FreeRTOS//Source/tasks.c **** 	return xReturn;
3073:../Middlewares/FreeRTOS//Source/tasks.c **** }
3074:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3075:../Middlewares/FreeRTOS//Source/tasks.c **** 
3076:../Middlewares/FreeRTOS//Source/tasks.c **** void vTaskMissedYield( void )
3077:../Middlewares/FreeRTOS//Source/tasks.c **** {
3078:../Middlewares/FreeRTOS//Source/tasks.c **** 	xYieldPending = pdTRUE;
3079:../Middlewares/FreeRTOS//Source/tasks.c **** }
3080:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3081:../Middlewares/FreeRTOS//Source/tasks.c **** 
3082:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3083:../Middlewares/FreeRTOS//Source/tasks.c **** 
3084:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3085:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3086:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxReturn;
3087:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
3088:../Middlewares/FreeRTOS//Source/tasks.c **** 
3089:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xTask != NULL )
3090:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3091:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3092:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3093:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3094:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3095:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3096:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxReturn = 0U;
3097:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3098:../Middlewares/FreeRTOS//Source/tasks.c **** 
3099:../Middlewares/FreeRTOS//Source/tasks.c **** 		return uxReturn;
3100:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3101:../Middlewares/FreeRTOS//Source/tasks.c **** 
3102:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3103:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3104:../Middlewares/FreeRTOS//Source/tasks.c **** 
3105:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3106:../Middlewares/FreeRTOS//Source/tasks.c **** 
3107:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3108:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3109:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
3110:../Middlewares/FreeRTOS//Source/tasks.c **** 
3111:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xTask != NULL )
3112:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3113:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3114:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3115:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3116:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3117:../Middlewares/FreeRTOS//Source/tasks.c **** 
3118:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3119:../Middlewares/FreeRTOS//Source/tasks.c **** 
3120:../Middlewares/FreeRTOS//Source/tasks.c **** /*
3121:../Middlewares/FreeRTOS//Source/tasks.c ****  * -----------------------------------------------------------
3122:../Middlewares/FreeRTOS//Source/tasks.c ****  * The Idle task.
3123:../Middlewares/FreeRTOS//Source/tasks.c ****  * ----------------------------------------------------------
3124:../Middlewares/FreeRTOS//Source/tasks.c ****  *
3125:../Middlewares/FreeRTOS//Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3126:../Middlewares/FreeRTOS//Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 62


3127:../Middlewares/FreeRTOS//Source/tasks.c ****  *
3128:../Middlewares/FreeRTOS//Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3129:../Middlewares/FreeRTOS//Source/tasks.c ****  *
3130:../Middlewares/FreeRTOS//Source/tasks.c ****  */
3131:../Middlewares/FreeRTOS//Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3132:../Middlewares/FreeRTOS//Source/tasks.c **** {
3133:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Stop warnings. */
3134:../Middlewares/FreeRTOS//Source/tasks.c **** 	( void ) pvParameters;
3135:../Middlewares/FreeRTOS//Source/tasks.c **** 
3136:../Middlewares/FreeRTOS//Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3137:../Middlewares/FreeRTOS//Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3138:../Middlewares/FreeRTOS//Source/tasks.c **** 
3139:../Middlewares/FreeRTOS//Source/tasks.c **** 	for( ;; )
3140:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3141:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3142:../Middlewares/FreeRTOS//Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3143:../Middlewares/FreeRTOS//Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3144:../Middlewares/FreeRTOS//Source/tasks.c **** 
3145:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3146:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3147:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3148:../Middlewares/FreeRTOS//Source/tasks.c **** 			see if any other task has become available.  If we are using
3149:../Middlewares/FreeRTOS//Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3150:../Middlewares/FreeRTOS//Source/tasks.c **** 			will automatically get the processor anyway. */
3151:../Middlewares/FreeRTOS//Source/tasks.c **** 			taskYIELD();
3152:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3153:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3154:../Middlewares/FreeRTOS//Source/tasks.c **** 
3155:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3156:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3157:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3158:../Middlewares/FreeRTOS//Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3159:../Middlewares/FreeRTOS//Source/tasks.c **** 			to run then the idle task should yield before the end of the
3160:../Middlewares/FreeRTOS//Source/tasks.c **** 			timeslice.
3161:../Middlewares/FreeRTOS//Source/tasks.c **** 
3162:../Middlewares/FreeRTOS//Source/tasks.c **** 			A critical region is not required here as we are just reading from
3163:../Middlewares/FreeRTOS//Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3164:../Middlewares/FreeRTOS//Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3165:../Middlewares/FreeRTOS//Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3166:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3167:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3168:../Middlewares/FreeRTOS//Source/tasks.c **** 				taskYIELD();
3169:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3170:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
3171:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3172:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3173:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3174:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3175:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3176:../Middlewares/FreeRTOS//Source/tasks.c **** 
3177:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3178:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3179:../Middlewares/FreeRTOS//Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3180:../Middlewares/FreeRTOS//Source/tasks.c **** 
3181:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3182:../Middlewares/FreeRTOS//Source/tasks.c **** 			allows the application designer to add background functionality
3183:../Middlewares/FreeRTOS//Source/tasks.c **** 			without the overhead of a separate task.
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 63


3184:../Middlewares/FreeRTOS//Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3185:../Middlewares/FreeRTOS//Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3186:../Middlewares/FreeRTOS//Source/tasks.c **** 			vApplicationIdleHook();
3187:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3188:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3189:../Middlewares/FreeRTOS//Source/tasks.c **** 
3190:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3191:../Middlewares/FreeRTOS//Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3192:../Middlewares/FreeRTOS//Source/tasks.c **** 		user defined low power mode	implementations require
3193:../Middlewares/FreeRTOS//Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3194:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3195:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3196:../Middlewares/FreeRTOS//Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3197:../Middlewares/FreeRTOS//Source/tasks.c **** 
3198:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3199:../Middlewares/FreeRTOS//Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3200:../Middlewares/FreeRTOS//Source/tasks.c **** 			test of the expected idle time is performed without the
3201:../Middlewares/FreeRTOS//Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3202:../Middlewares/FreeRTOS//Source/tasks.c **** 			valid. */
3203:../Middlewares/FreeRTOS//Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3204:../Middlewares/FreeRTOS//Source/tasks.c **** 
3205:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3206:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3207:../Middlewares/FreeRTOS//Source/tasks.c **** 				vTaskSuspendAll();
3208:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3209:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3210:../Middlewares/FreeRTOS//Source/tasks.c **** 					time can be sampled again, and this time its value can
3211:../Middlewares/FreeRTOS//Source/tasks.c **** 					be used. */
3212:../Middlewares/FreeRTOS//Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3213:../Middlewares/FreeRTOS//Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3214:../Middlewares/FreeRTOS//Source/tasks.c **** 
3215:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3216:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
3217:../Middlewares/FreeRTOS//Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3218:../Middlewares/FreeRTOS//Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3219:../Middlewares/FreeRTOS//Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3220:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
3221:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
3222:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
3223:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3224:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
3225:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
3226:../Middlewares/FreeRTOS//Source/tasks.c **** 				( void ) xTaskResumeAll();
3227:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3228:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
3229:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3230:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3231:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3232:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3233:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3234:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3235:../Middlewares/FreeRTOS//Source/tasks.c **** }
3236:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3237:../Middlewares/FreeRTOS//Source/tasks.c **** 
3238:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3239:../Middlewares/FreeRTOS//Source/tasks.c **** 
3240:../Middlewares/FreeRTOS//Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 64


3241:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3242:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3243:../Middlewares/FreeRTOS//Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3244:../Middlewares/FreeRTOS//Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3245:../Middlewares/FreeRTOS//Source/tasks.c **** 
3246:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3247:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3248:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3249:../Middlewares/FreeRTOS//Source/tasks.c **** 			eReturn = eAbortSleep;
3250:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3251:../Middlewares/FreeRTOS//Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3252:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3253:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3254:../Middlewares/FreeRTOS//Source/tasks.c **** 			eReturn = eAbortSleep;
3255:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3256:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3257:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3258:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3259:../Middlewares/FreeRTOS//Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3260:../Middlewares/FreeRTOS//Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3261:../Middlewares/FreeRTOS//Source/tasks.c **** 			interrupts. */
3262:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3263:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3264:../Middlewares/FreeRTOS//Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3265:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3266:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
3267:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3268:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3269:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3270:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3271:../Middlewares/FreeRTOS//Source/tasks.c **** 
3272:../Middlewares/FreeRTOS//Source/tasks.c **** 		return eReturn;
3273:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3274:../Middlewares/FreeRTOS//Source/tasks.c **** 
3275:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3276:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3277:../Middlewares/FreeRTOS//Source/tasks.c **** 
3278:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3279:../Middlewares/FreeRTOS//Source/tasks.c **** 
3280:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3281:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3282:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
3283:../Middlewares/FreeRTOS//Source/tasks.c **** 
3284:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3285:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3286:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3287:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3288:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3289:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3290:../Middlewares/FreeRTOS//Source/tasks.c **** 
3291:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3292:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3293:../Middlewares/FreeRTOS//Source/tasks.c **** 
3294:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3295:../Middlewares/FreeRTOS//Source/tasks.c **** 
3296:../Middlewares/FreeRTOS//Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3297:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 65


3298:../Middlewares/FreeRTOS//Source/tasks.c **** 	void *pvReturn = NULL;
3299:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
3300:../Middlewares/FreeRTOS//Source/tasks.c **** 
3301:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3302:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3303:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3304:../Middlewares/FreeRTOS//Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3305:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3306:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3307:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3308:../Middlewares/FreeRTOS//Source/tasks.c **** 			pvReturn = NULL;
3309:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3310:../Middlewares/FreeRTOS//Source/tasks.c **** 
3311:../Middlewares/FreeRTOS//Source/tasks.c **** 		return pvReturn;
3312:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3313:../Middlewares/FreeRTOS//Source/tasks.c **** 
3314:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3315:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3316:../Middlewares/FreeRTOS//Source/tasks.c **** 
3317:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3318:../Middlewares/FreeRTOS//Source/tasks.c **** 
3319:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3320:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3321:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
3322:../Middlewares/FreeRTOS//Source/tasks.c **** 
3323:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3324:../Middlewares/FreeRTOS//Source/tasks.c **** 		the calling task. */
3325:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3326:../Middlewares/FreeRTOS//Source/tasks.c **** 
3327:../Middlewares/FreeRTOS//Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3328:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3329:../Middlewares/FreeRTOS//Source/tasks.c **** 
3330:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3331:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3332:../Middlewares/FreeRTOS//Source/tasks.c **** 
3333:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvInitialiseTaskLists( void )
3334:../Middlewares/FreeRTOS//Source/tasks.c **** {
3335:../Middlewares/FreeRTOS//Source/tasks.c **** UBaseType_t uxPriority;
3336:../Middlewares/FreeRTOS//Source/tasks.c **** 
3337:../Middlewares/FreeRTOS//Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3338:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3339:../Middlewares/FreeRTOS//Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3340:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3341:../Middlewares/FreeRTOS//Source/tasks.c **** 
3342:../Middlewares/FreeRTOS//Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3343:../Middlewares/FreeRTOS//Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3344:../Middlewares/FreeRTOS//Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3345:../Middlewares/FreeRTOS//Source/tasks.c **** 
3346:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3347:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3348:../Middlewares/FreeRTOS//Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3349:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3350:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3351:../Middlewares/FreeRTOS//Source/tasks.c **** 
3352:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3353:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3354:../Middlewares/FreeRTOS//Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 66


3355:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3356:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3357:../Middlewares/FreeRTOS//Source/tasks.c **** 
3358:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3359:../Middlewares/FreeRTOS//Source/tasks.c **** 	using list2. */
3360:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3361:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3362:../Middlewares/FreeRTOS//Source/tasks.c **** }
3363:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3364:../Middlewares/FreeRTOS//Source/tasks.c **** 
3365:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3366:../Middlewares/FreeRTOS//Source/tasks.c **** {
3367:../Middlewares/FreeRTOS//Source/tasks.c **** 
3368:../Middlewares/FreeRTOS//Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3369:../Middlewares/FreeRTOS//Source/tasks.c **** 
3370:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3371:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3372:../Middlewares/FreeRTOS//Source/tasks.c **** 		BaseType_t xListIsEmpty;
3373:../Middlewares/FreeRTOS//Source/tasks.c **** 
3374:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3375:../Middlewares/FreeRTOS//Source/tasks.c **** 		too often in the idle task. */
3376:../Middlewares/FreeRTOS//Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3377:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3378:../Middlewares/FreeRTOS//Source/tasks.c **** 			vTaskSuspendAll();
3379:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3380:../Middlewares/FreeRTOS//Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
3381:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3382:../Middlewares/FreeRTOS//Source/tasks.c **** 			( void ) xTaskResumeAll();
3383:../Middlewares/FreeRTOS//Source/tasks.c **** 
3384:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
3385:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3386:../Middlewares/FreeRTOS//Source/tasks.c **** 				TCB_t *pxTCB;
3387:../Middlewares/FreeRTOS//Source/tasks.c **** 
3388:../Middlewares/FreeRTOS//Source/tasks.c **** 				taskENTER_CRITICAL();
3389:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3390:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3391:../Middlewares/FreeRTOS//Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3392:../Middlewares/FreeRTOS//Source/tasks.c **** 					--uxCurrentNumberOfTasks;
3393:../Middlewares/FreeRTOS//Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
3394:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
3395:../Middlewares/FreeRTOS//Source/tasks.c **** 				taskEXIT_CRITICAL();
3396:../Middlewares/FreeRTOS//Source/tasks.c **** 
3397:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvDeleteTCB( pxTCB );
3398:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3399:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
3400:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3401:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3402:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3403:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3404:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3405:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3406:../Middlewares/FreeRTOS//Source/tasks.c **** }
3407:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3408:../Middlewares/FreeRTOS//Source/tasks.c **** 
3409:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3410:../Middlewares/FreeRTOS//Source/tasks.c **** 
3411:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 67


3412:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3413:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
3414:../Middlewares/FreeRTOS//Source/tasks.c **** 
3415:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3416:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3417:../Middlewares/FreeRTOS//Source/tasks.c **** 
3418:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3419:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3420:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3421:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3422:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3423:../Middlewares/FreeRTOS//Source/tasks.c **** 
3424:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3425:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3426:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3427:../Middlewares/FreeRTOS//Source/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3428:../Middlewares/FreeRTOS//Source/tasks.c **** 			being in the Blocked state. */
3429:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
3430:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3431:../Middlewares/FreeRTOS//Source/tasks.c **** 				vTaskSuspendAll();
3432:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3433:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3434:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
3435:../Middlewares/FreeRTOS//Source/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
3436:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
3437:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
3438:../Middlewares/FreeRTOS//Source/tasks.c **** 				xTaskResumeAll();
3439:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3440:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3441:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3442:../Middlewares/FreeRTOS//Source/tasks.c **** 
3443:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3444:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3445:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3446:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3447:../Middlewares/FreeRTOS//Source/tasks.c **** 		#else
3448:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3449:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3450:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3451:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif
3452:../Middlewares/FreeRTOS//Source/tasks.c **** 
3453:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3454:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3455:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3456:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3457:../Middlewares/FreeRTOS//Source/tasks.c **** 		#else
3458:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3459:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3460:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3461:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif
3462:../Middlewares/FreeRTOS//Source/tasks.c **** 
3463:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3464:../Middlewares/FreeRTOS//Source/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3465:../Middlewares/FreeRTOS//Source/tasks.c **** 		just set to whatever is passed in. */
3466:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( eState != eInvalid )
3467:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3468:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 68


3469:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3470:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3471:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3472:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
3473:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3474:../Middlewares/FreeRTOS//Source/tasks.c **** 
3475:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3476:../Middlewares/FreeRTOS//Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3477:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3478:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3479:../Middlewares/FreeRTOS//Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3480:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3481:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3482:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3483:../Middlewares/FreeRTOS//Source/tasks.c **** 			#else
3484:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3485:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3486:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3487:../Middlewares/FreeRTOS//Source/tasks.c **** 			#endif
3488:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3489:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3490:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3491:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3492:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3493:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3494:../Middlewares/FreeRTOS//Source/tasks.c **** 
3495:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3496:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3497:../Middlewares/FreeRTOS//Source/tasks.c **** 
3498:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3499:../Middlewares/FreeRTOS//Source/tasks.c **** 
3500:../Middlewares/FreeRTOS//Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3501:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3502:../Middlewares/FreeRTOS//Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3503:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxTask = 0;
3504:../Middlewares/FreeRTOS//Source/tasks.c **** 
3505:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3506:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3507:../Middlewares/FreeRTOS//Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3508:../Middlewares/FreeRTOS//Source/tasks.c **** 
3509:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3510:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3511:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3512:../Middlewares/FreeRTOS//Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3513:../Middlewares/FreeRTOS//Source/tasks.c **** 			do
3514:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3515:../Middlewares/FreeRTOS//Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3516:../Middlewares/FreeRTOS//Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3517:../Middlewares/FreeRTOS//Source/tasks.c **** 				uxTask++;
3518:../Middlewares/FreeRTOS//Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3519:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3520:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3521:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3522:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3523:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3524:../Middlewares/FreeRTOS//Source/tasks.c **** 
3525:../Middlewares/FreeRTOS//Source/tasks.c **** 		return uxTask;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 69


3526:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3527:../Middlewares/FreeRTOS//Source/tasks.c **** 
3528:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3529:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3530:../Middlewares/FreeRTOS//Source/tasks.c **** 
3531:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3532:../Middlewares/FreeRTOS//Source/tasks.c **** 
3533:../Middlewares/FreeRTOS//Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3534:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 109              		.loc 1 3534 0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              		@ link register save eliminated.
 114              	.LVL9:
3535:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint32_t ulCount = 0U;
 115              		.loc 1 3535 0
 116 0000 0023     		movs	r3, #0
 117              	.LVL10:
 118              	.L13:
3536:../Middlewares/FreeRTOS//Source/tasks.c **** 
3537:../Middlewares/FreeRTOS//Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 119              		.loc 1 3537 0
 120 0002 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 121 0004 A52A     		cmp	r2, #165
 122 0006 02D1     		bne	.L12
3538:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3539:../Middlewares/FreeRTOS//Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 123              		.loc 1 3539 0
 124 0008 0130     		adds	r0, r0, #1
 125              	.LVL11:
3540:../Middlewares/FreeRTOS//Source/tasks.c **** 			ulCount++;
 126              		.loc 1 3540 0
 127 000a 0133     		adds	r3, r3, #1
 128              	.LVL12:
3537:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 129              		.loc 1 3537 0
 130 000c F9E7     		b	.L13
 131              	.L12:
 132              	.LVL13:
3541:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3542:../Middlewares/FreeRTOS//Source/tasks.c **** 
3543:../Middlewares/FreeRTOS//Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3544:../Middlewares/FreeRTOS//Source/tasks.c **** 
3545:../Middlewares/FreeRTOS//Source/tasks.c **** 		return ( uint16_t ) ulCount;
3546:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 133              		.loc 1 3546 0
 134 000e C3F38F00 		ubfx	r0, r3, #2, #16
 135              	.LVL14:
 136 0012 7047     		bx	lr
 137              		.cfi_endproc
 138              	.LFE176:
 139              		.cantunwind
 140              		.fnend
 142              		.section	.text._ZL27prvResetNextTaskUnblockTimev,"ax",%progbits
 143              		.align	1
 144              		.syntax unified
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 70


 145              		.thumb
 146              		.thumb_func
 147              		.fpu fpv4-sp-d16
 149              	_ZL27prvResetNextTaskUnblockTimev:
 150              		.fnstart
 151              	.LFB178:
3547:../Middlewares/FreeRTOS//Source/tasks.c **** 
3548:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3549:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3550:../Middlewares/FreeRTOS//Source/tasks.c **** 
3551:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3552:../Middlewares/FreeRTOS//Source/tasks.c **** 
3553:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3554:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3555:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
3556:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint8_t *pucEndOfStack;
3557:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxReturn;
3558:../Middlewares/FreeRTOS//Source/tasks.c **** 
3559:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3560:../Middlewares/FreeRTOS//Source/tasks.c **** 
3561:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3562:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3563:../Middlewares/FreeRTOS//Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3564:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3565:../Middlewares/FreeRTOS//Source/tasks.c **** 		#else
3566:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3567:../Middlewares/FreeRTOS//Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3568:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3569:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif
3570:../Middlewares/FreeRTOS//Source/tasks.c **** 
3571:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3572:../Middlewares/FreeRTOS//Source/tasks.c **** 
3573:../Middlewares/FreeRTOS//Source/tasks.c **** 		return uxReturn;
3574:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3575:../Middlewares/FreeRTOS//Source/tasks.c **** 
3576:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3577:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3578:../Middlewares/FreeRTOS//Source/tasks.c **** 
3579:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3580:../Middlewares/FreeRTOS//Source/tasks.c **** 
3581:../Middlewares/FreeRTOS//Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3582:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3583:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3584:../Middlewares/FreeRTOS//Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3585:../Middlewares/FreeRTOS//Source/tasks.c **** 		want to allocate and clean RAM statically. */
3586:../Middlewares/FreeRTOS//Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3587:../Middlewares/FreeRTOS//Source/tasks.c **** 
3588:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3589:../Middlewares/FreeRTOS//Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3590:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3591:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3592:../Middlewares/FreeRTOS//Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3593:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3594:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3595:../Middlewares/FreeRTOS//Source/tasks.c **** 
3596:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3597:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 71


3598:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3599:../Middlewares/FreeRTOS//Source/tasks.c **** 			the stack and TCB. */
3600:../Middlewares/FreeRTOS//Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3601:../Middlewares/FreeRTOS//Source/tasks.c **** 			vPortFree( pxTCB );
3602:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3603:../Middlewares/FreeRTOS//Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3604:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3605:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3606:../Middlewares/FreeRTOS//Source/tasks.c **** 			check what was statically allocated before trying to free the
3607:../Middlewares/FreeRTOS//Source/tasks.c **** 			memory. */
3608:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3609:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3610:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3611:../Middlewares/FreeRTOS//Source/tasks.c **** 				must be freed. */
3612:../Middlewares/FreeRTOS//Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3613:../Middlewares/FreeRTOS//Source/tasks.c **** 				vPortFree( pxTCB );
3614:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3615:../Middlewares/FreeRTOS//Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3616:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3617:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3618:../Middlewares/FreeRTOS//Source/tasks.c **** 				only memory that must be freed. */
3619:../Middlewares/FreeRTOS//Source/tasks.c **** 				vPortFree( pxTCB );
3620:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3621:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
3622:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3623:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3624:../Middlewares/FreeRTOS//Source/tasks.c **** 				nothing needs to be freed. */
3625:../Middlewares/FreeRTOS//Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3626:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3627:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3628:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3629:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3630:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3631:../Middlewares/FreeRTOS//Source/tasks.c **** 
3632:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3633:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3634:../Middlewares/FreeRTOS//Source/tasks.c **** 
3635:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3636:../Middlewares/FreeRTOS//Source/tasks.c **** {
 152              		.loc 1 3636 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              		@ link register save eliminated.
3637:../Middlewares/FreeRTOS//Source/tasks.c **** TCB_t *pxTCB;
3638:../Middlewares/FreeRTOS//Source/tasks.c **** 
3639:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 157              		.loc 1 3639 0
 158 0000 084B     		ldr	r3, .L18
 159 0002 1B68     		ldr	r3, [r3]
 160 0004 1B68     		ldr	r3, [r3]
 161 0006 3BB1     		cbz	r3, .L17
3640:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3641:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3642:../Middlewares/FreeRTOS//Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3643:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3644:../Middlewares/FreeRTOS//Source/tasks.c **** 		there is an item in the delayed list. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 72


3645:../Middlewares/FreeRTOS//Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3646:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3647:../Middlewares/FreeRTOS//Source/tasks.c **** 	else
3648:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3649:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3650:../Middlewares/FreeRTOS//Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3651:../Middlewares/FreeRTOS//Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3652:../Middlewares/FreeRTOS//Source/tasks.c **** 		from the Blocked state. */
3653:../Middlewares/FreeRTOS//Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 162              		.loc 1 3653 0
 163 0008 064B     		ldr	r3, .L18
 164 000a 1B68     		ldr	r3, [r3]
 165 000c DB68     		ldr	r3, [r3, #12]
 166 000e DB68     		ldr	r3, [r3, #12]
 167              	.LVL15:
3654:../Middlewares/FreeRTOS//Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 168              		.loc 1 3654 0
 169 0010 5A68     		ldr	r2, [r3, #4]
 170 0012 054B     		ldr	r3, .L18+4
 171              	.LVL16:
 172 0014 1A60     		str	r2, [r3]
3655:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3656:../Middlewares/FreeRTOS//Source/tasks.c **** }
 173              		.loc 1 3656 0
 174 0016 7047     		bx	lr
 175              	.L17:
3645:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 176              		.loc 1 3645 0
 177 0018 034B     		ldr	r3, .L18+4
 178 001a 4FF0FF32 		mov	r2, #-1
 179 001e 1A60     		str	r2, [r3]
 180 0020 7047     		bx	lr
 181              	.L19:
 182 0022 00BF     		.align	2
 183              	.L18:
 184 0024 00000000 		.word	.LANCHOR2
 185 0028 00000000 		.word	.LANCHOR3
 186              		.cfi_endproc
 187              	.LFE178:
 188              		.cantunwind
 189              		.fnend
 191              		.section	.text._ZL12prvDeleteTCBP19tskTaskControlBlock,"ax",%progbits
 192              		.align	1
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 196              		.fpu fpv4-sp-d16
 198              	_ZL12prvDeleteTCBP19tskTaskControlBlock:
 199              		.fnstart
 200              	.LFB177:
3582:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 201              		.loc 1 3582 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205              	.LVL17:
 206 0000 10B5     		push	{r4, lr}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 73


 207              		.save {r4, lr}
 208              	.LCFI0:
 209              		.cfi_def_cfa_offset 8
 210              		.cfi_offset 4, -8
 211              		.cfi_offset 14, -4
 212 0002 0446     		mov	r4, r0
3600:../Middlewares/FreeRTOS//Source/tasks.c **** 			vPortFree( pxTCB );
 213              		.loc 1 3600 0
 214 0004 006B     		ldr	r0, [r0, #48]
 215              	.LVL18:
 216 0006 FFF7FEFF 		bl	vPortFree
 217              	.LVL19:
3601:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 218              		.loc 1 3601 0
 219 000a 2046     		mov	r0, r4
 220 000c FFF7FEFF 		bl	vPortFree
 221              	.LVL20:
3630:../Middlewares/FreeRTOS//Source/tasks.c **** 
 222              		.loc 1 3630 0
 223 0010 10BD     		pop	{r4, pc}
 224              		.cfi_endproc
 225              	.LFE177:
 226              		.fnend
 228              		.section	.text._ZL20prvInitialiseNewTaskPFvPvEPKcmS_mPS_P19tskTaskControlBlockPK14xMEMORY_REGION,"
 229              		.align	1
 230              		.syntax unified
 231              		.thumb
 232              		.thumb_func
 233              		.fpu fpv4-sp-d16
 235              	_ZL20prvInitialiseNewTaskPFvPvEPKcmS_mPS_P19tskTaskControlBlockPK14xMEMORY_REGION:
 236              		.fnstart
 237              	.LFB137:
 775:../Middlewares/FreeRTOS//Source/tasks.c **** StackType_t *pxTopOfStack;
 238              		.loc 1 775 0
 239              		.cfi_startproc
 240              		@ args = 16, pretend = 0, frame = 0
 241              		@ frame_needed = 0, uses_anonymous_args = 0
 242              	.LVL21:
 243 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 244              		.save {r4, r5, r6, r7, r8, r9, r10, lr}
 245              	.LCFI1:
 246              		.cfi_def_cfa_offset 32
 247              		.cfi_offset 4, -32
 248              		.cfi_offset 5, -28
 249              		.cfi_offset 6, -24
 250              		.cfi_offset 7, -20
 251              		.cfi_offset 8, -16
 252              		.cfi_offset 9, -12
 253              		.cfi_offset 10, -8
 254              		.cfi_offset 14, -4
 255 0004 8146     		mov	r9, r0
 256 0006 0D46     		mov	r5, r1
 257 0008 1746     		mov	r7, r2
 258 000a 9A46     		mov	r10, r3
 259 000c 089E     		ldr	r6, [sp, #32]
 260 000e DDF82480 		ldr	r8, [sp, #36]
 261 0012 0A9C     		ldr	r4, [sp, #40]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 74


 797:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 262              		.loc 1 797 0
 263 0014 9200     		lsls	r2, r2, #2
 264              	.LVL22:
 265 0016 A521     		movs	r1, #165
 266              	.LVL23:
 267 0018 206B     		ldr	r0, [r4, #48]
 268              	.LVL24:
 269 001a FFF7FEFF 		bl	memset
 270              	.LVL25:
 807:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 271              		.loc 1 807 0
 272 001e 236B     		ldr	r3, [r4, #48]
 273 0020 07F18042 		add	r2, r7, #1073741824
 274 0024 013A     		subs	r2, r2, #1
 275 0026 03EB8207 		add	r7, r3, r2, lsl #2
 276              	.LVL26:
 808:../Middlewares/FreeRTOS//Source/tasks.c **** 
 277              		.loc 1 808 0
 278 002a 27F00707 		bic	r7, r7, #7
 279              	.LVL27:
 827:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 280              		.loc 1 827 0
 281 002e 0023     		movs	r3, #0
 282              	.LVL28:
 283              	.L24:
 827:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 284              		.loc 1 827 0 is_stmt 0 discriminator 1
 285 0030 132B     		cmp	r3, #19
 286 0032 07D8     		bhi	.L23
 829:../Middlewares/FreeRTOS//Source/tasks.c **** 
 287              		.loc 1 829 0 is_stmt 1
 288 0034 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 289 0036 E218     		adds	r2, r4, r3
 290 0038 82F83410 		strb	r1, [r2, #52]
 834:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 291              		.loc 1 834 0
 292 003c EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 293 003e 0AB1     		cbz	r2, .L23
 827:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 294              		.loc 1 827 0 discriminator 2
 295 0040 0133     		adds	r3, r3, #1
 296              	.LVL29:
 297 0042 F5E7     		b	.L24
 298              	.L23:
 846:../Middlewares/FreeRTOS//Source/tasks.c **** 
 299              		.loc 1 846 0
 300 0044 0023     		movs	r3, #0
 301              	.LVL30:
 302 0046 84F84730 		strb	r3, [r4, #71]
 850:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 303              		.loc 1 850 0
 304 004a 092E     		cmp	r6, #9
 305 004c 00D9     		bls	.L25
 852:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 306              		.loc 1 852 0
 307 004e 0926     		movs	r6, #9
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 75


 308              	.L25:
 309              	.LVL31:
 859:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 310              		.loc 1 859 0
 311 0050 E662     		str	r6, [r4, #44]
 862:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 312              		.loc 1 862 0
 313 0052 2665     		str	r6, [r4, #80]
 863:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 314              		.loc 1 863 0
 315 0054 0025     		movs	r5, #0
 316              	.LVL32:
 317 0056 6565     		str	r5, [r4, #84]
 867:../Middlewares/FreeRTOS//Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 318              		.loc 1 867 0
 319 0058 201D     		adds	r0, r4, #4
 320 005a FFF7FEFF 		bl	vListInitialiseItem
 321              	.LVL33:
 868:../Middlewares/FreeRTOS//Source/tasks.c **** 
 322              		.loc 1 868 0
 323 005e 04F11800 		add	r0, r4, #24
 324 0062 FFF7FEFF 		bl	vListInitialiseItem
 325              	.LVL34:
 872:../Middlewares/FreeRTOS//Source/tasks.c **** 
 326              		.loc 1 872 0
 327 0066 2461     		str	r4, [r4, #16]
 875:../Middlewares/FreeRTOS//Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 328              		.loc 1 875 0
 329 0068 C6F10A06 		rsb	r6, r6, #10
 330              	.LVL35:
 331 006c A661     		str	r6, [r4, #24]
 876:../Middlewares/FreeRTOS//Source/tasks.c **** 
 332              		.loc 1 876 0
 333 006e 6462     		str	r4, [r4, #36]
 892:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 334              		.loc 1 892 0
 335 0070 A565     		str	r5, [r4, #88]
 918:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 336              		.loc 1 918 0
 337 0072 E565     		str	r5, [r4, #92]
 919:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 338              		.loc 1 919 0
 339 0074 84F86050 		strb	r5, [r4, #96]
 946:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 340              		.loc 1 946 0
 341 0078 5246     		mov	r2, r10
 342 007a 4946     		mov	r1, r9
 343 007c 3846     		mov	r0, r7
 344 007e FFF7FEFF 		bl	pxPortInitialiseStack
 345              	.LVL36:
 346 0082 2060     		str	r0, [r4]
 950:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 347              		.loc 1 950 0
 348 0084 B8F1000F 		cmp	r8, #0
 349 0088 01D0     		beq	.L22
 954:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 350              		.loc 1 954 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 76


 351 008a C8F80040 		str	r4, [r8]
 352              	.L22:
 960:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 353              		.loc 1 960 0
 354 008e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 355              		.cfi_endproc
 356              	.LFE137:
 357              		.fnend
 359              		.section	.text._ZL22prvInitialiseTaskListsv,"ax",%progbits
 360              		.align	1
 361              		.syntax unified
 362              		.thumb
 363              		.thumb_func
 364              		.fpu fpv4-sp-d16
 366              	_ZL22prvInitialiseTaskListsv:
 367              		.fnstart
 368              	.LFB172:
3334:../Middlewares/FreeRTOS//Source/tasks.c **** UBaseType_t uxPriority;
 369              		.loc 1 3334 0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 0
 372              		@ frame_needed = 0, uses_anonymous_args = 0
 373 0000 38B5     		push	{r3, r4, r5, lr}
 374              		.save {r3, r4, r5, lr}
 375              	.LCFI2:
 376              		.cfi_def_cfa_offset 16
 377              		.cfi_offset 3, -16
 378              		.cfi_offset 4, -12
 379              		.cfi_offset 5, -8
 380              		.cfi_offset 14, -4
 381              	.LVL37:
3337:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 382              		.loc 1 3337 0
 383 0002 0024     		movs	r4, #0
 384              	.LVL38:
 385              	.L31:
3337:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 386              		.loc 1 3337 0 is_stmt 0 discriminator 3
 387 0004 092C     		cmp	r4, #9
 388 0006 08D8     		bhi	.L30
3339:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 389              		.loc 1 3339 0 is_stmt 1 discriminator 2
 390 0008 04EB8402 		add	r2, r4, r4, lsl #2
 391 000c 9300     		lsls	r3, r2, #2
 392 000e 0E48     		ldr	r0, .L33
 393 0010 1844     		add	r0, r0, r3
 394 0012 FFF7FEFF 		bl	vListInitialise
 395              	.LVL39:
3337:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 396              		.loc 1 3337 0 discriminator 2
 397 0016 0134     		adds	r4, r4, #1
 398              	.LVL40:
 399 0018 F4E7     		b	.L31
 400              	.L30:
3342:../Middlewares/FreeRTOS//Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 401              		.loc 1 3342 0
 402 001a 0C4D     		ldr	r5, .L33+4
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 77


 403 001c 2846     		mov	r0, r5
 404 001e FFF7FEFF 		bl	vListInitialise
 405              	.LVL41:
3343:../Middlewares/FreeRTOS//Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 406              		.loc 1 3343 0
 407 0022 0B4C     		ldr	r4, .L33+8
 408              	.LVL42:
 409 0024 2046     		mov	r0, r4
 410 0026 FFF7FEFF 		bl	vListInitialise
 411              	.LVL43:
3344:../Middlewares/FreeRTOS//Source/tasks.c **** 
 412              		.loc 1 3344 0
 413 002a 0A48     		ldr	r0, .L33+12
 414 002c FFF7FEFF 		bl	vListInitialise
 415              	.LVL44:
3348:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 416              		.loc 1 3348 0
 417 0030 0948     		ldr	r0, .L33+16
 418 0032 FFF7FEFF 		bl	vListInitialise
 419              	.LVL45:
3354:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 420              		.loc 1 3354 0
 421 0036 0948     		ldr	r0, .L33+20
 422 0038 FFF7FEFF 		bl	vListInitialise
 423              	.LVL46:
3360:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 424              		.loc 1 3360 0
 425 003c 084B     		ldr	r3, .L33+24
 426 003e 1D60     		str	r5, [r3]
3361:../Middlewares/FreeRTOS//Source/tasks.c **** }
 427              		.loc 1 3361 0
 428 0040 084B     		ldr	r3, .L33+28
 429 0042 1C60     		str	r4, [r3]
3362:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 430              		.loc 1 3362 0
 431 0044 38BD     		pop	{r3, r4, r5, pc}
 432              	.L34:
 433 0046 00BF     		.align	2
 434              	.L33:
 435 0048 00000000 		.word	.LANCHOR4
 436 004c 00000000 		.word	.LANCHOR5
 437 0050 00000000 		.word	.LANCHOR6
 438 0054 00000000 		.word	.LANCHOR1
 439 0058 00000000 		.word	.LANCHOR7
 440 005c 00000000 		.word	.LANCHOR0
 441 0060 00000000 		.word	.LANCHOR2
 442 0064 00000000 		.word	.LANCHOR8
 443              		.cfi_endproc
 444              	.LFE172:
 445              		.fnend
 447              		.section	.text._ZL24prvAddNewTaskToReadyListP19tskTaskControlBlock,"ax",%progbits
 448              		.align	1
 449              		.syntax unified
 450              		.thumb
 451              		.thumb_func
 452              		.fpu fpv4-sp-d16
 454              	_ZL24prvAddNewTaskToReadyListP19tskTaskControlBlock:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 78


 455              		.fnstart
 456              	.LFB138:
 964:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 457              		.loc 1 964 0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461              	.LVL47:
 462 0000 10B5     		push	{r4, lr}
 463              		.save {r4, lr}
 464              	.LCFI3:
 465              		.cfi_def_cfa_offset 8
 466              		.cfi_offset 4, -8
 467              		.cfi_offset 14, -4
 468 0002 0446     		mov	r4, r0
 967:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 469              		.loc 1 967 0
 470 0004 FFF7FEFF 		bl	vPortEnterCritical
 471              	.LVL48:
 969:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 472              		.loc 1 969 0
 473 0008 214A     		ldr	r2, .L42
 474 000a 1368     		ldr	r3, [r2]
 475 000c 0133     		adds	r3, r3, #1
 476 000e 1360     		str	r3, [r2]
 970:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 477              		.loc 1 970 0
 478 0010 204B     		ldr	r3, .L42+4
 479 0012 1B68     		ldr	r3, [r3]
 480 0014 5BB1     		cbz	r3, .L40
 993:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 481              		.loc 1 993 0
 482 0016 204B     		ldr	r3, .L42+8
 483 0018 1B68     		ldr	r3, [r3]
 484 001a 6BB9     		cbnz	r3, .L37
 995:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 485              		.loc 1 995 0
 486 001c 1D4B     		ldr	r3, .L42+4
 487 001e 1B68     		ldr	r3, [r3]
 488 0020 DA6A     		ldr	r2, [r3, #44]
 489 0022 E36A     		ldr	r3, [r4, #44]
 490 0024 9A42     		cmp	r2, r3
 491 0026 07D8     		bhi	.L37
 997:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 492              		.loc 1 997 0
 493 0028 1A4B     		ldr	r3, .L42+4
 494 002a 1C60     		str	r4, [r3]
 495 002c 04E0     		b	.L37
 496              	.L40:
 974:../Middlewares/FreeRTOS//Source/tasks.c **** 
 497              		.loc 1 974 0
 498 002e 194B     		ldr	r3, .L42+4
 499 0030 1C60     		str	r4, [r3]
 976:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 500              		.loc 1 976 0
 501 0032 1368     		ldr	r3, [r2]
 502 0034 012B     		cmp	r3, #1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 79


 503 0036 27D0     		beq	.L41
 504              	.L37:
1010:../Middlewares/FreeRTOS//Source/tasks.c **** 
 505              		.loc 1 1010 0
 506 0038 184A     		ldr	r2, .L42+12
 507 003a 1368     		ldr	r3, [r2]
 508 003c 0133     		adds	r3, r3, #1
 509 003e 1360     		str	r3, [r2]
1015:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 510              		.loc 1 1015 0
 511 0040 A364     		str	r3, [r4, #72]
1020:../Middlewares/FreeRTOS//Source/tasks.c **** 
 512              		.loc 1 1020 0
 513 0042 1748     		ldr	r0, .L42+16
 514 0044 0268     		ldr	r2, [r0]
 515 0046 E36A     		ldr	r3, [r4, #44]
 516 0048 0121     		movs	r1, #1
 517 004a 9940     		lsls	r1, r1, r3
 518 004c 0A43     		orrs	r2, r2, r1
 519 004e 0260     		str	r2, [r0]
 520 0050 03EB8303 		add	r3, r3, r3, lsl #2
 521 0054 9A00     		lsls	r2, r3, #2
 522 0056 211D     		adds	r1, r4, #4
 523 0058 1248     		ldr	r0, .L42+20
 524 005a 1044     		add	r0, r0, r2
 525 005c FFF7FEFF 		bl	vListInsertEnd
 526              	.LVL49:
1024:../Middlewares/FreeRTOS//Source/tasks.c **** 
 527              		.loc 1 1024 0
 528 0060 FFF7FEFF 		bl	vPortExitCritical
 529              	.LVL50:
1026:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 530              		.loc 1 1026 0
 531 0064 0C4B     		ldr	r3, .L42+8
 532 0066 1B68     		ldr	r3, [r3]
 533 0068 6BB1     		cbz	r3, .L35
1030:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 534              		.loc 1 1030 0
 535 006a 0A4B     		ldr	r3, .L42+4
 536 006c 1B68     		ldr	r3, [r3]
 537 006e DA6A     		ldr	r2, [r3, #44]
 538 0070 E36A     		ldr	r3, [r4, #44]
 539 0072 9A42     		cmp	r2, r3
 540 0074 07D2     		bcs	.L35
1032:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 541              		.loc 1 1032 0
 542 0076 0C4B     		ldr	r3, .L42+24
 543 0078 4FF08052 		mov	r2, #268435456
 544 007c 1A60     		str	r2, [r3]
 545              		.syntax unified
 546              	@ 1032 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 547 007e BFF34F8F 		dsb
 548              	@ 0 "" 2
 549              	@ 1032 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 550 0082 BFF36F8F 		isb
 551              	@ 0 "" 2
 552              		.thumb
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 80


 553              		.syntax unified
 554              	.L35:
1043:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 555              		.loc 1 1043 0
 556 0086 10BD     		pop	{r4, pc}
 557              	.LVL51:
 558              	.L41:
 981:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 559              		.loc 1 981 0
 560 0088 FFF7FEFF 		bl	_ZL22prvInitialiseTaskListsv
 561              	.LVL52:
 562 008c D4E7     		b	.L37
 563              	.L43:
 564 008e 00BF     		.align	2
 565              	.L42:
 566 0090 00000000 		.word	.LANCHOR9
 567 0094 00000000 		.word	.LANCHOR10
 568 0098 00000000 		.word	.LANCHOR11
 569 009c 00000000 		.word	.LANCHOR12
 570 00a0 00000000 		.word	.LANCHOR13
 571 00a4 00000000 		.word	.LANCHOR4
 572 00a8 04ED00E0 		.word	-536810236
 573              		.cfi_endproc
 574              	.LFE138:
 575              		.fnend
 577              		.section	.text._ZL30prvAddCurrentTaskToDelayedListml,"ax",%progbits
 578              		.align	1
 579              		.syntax unified
 580              		.thumb
 581              		.thumb_func
 582              		.fpu fpv4-sp-d16
 584              	_ZL30prvAddCurrentTaskToDelayedListml:
 585              		.fnstart
 586              	.LFB194:
3657:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3658:../Middlewares/FreeRTOS//Source/tasks.c **** 
3659:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3660:../Middlewares/FreeRTOS//Source/tasks.c **** 
3661:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3662:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3663:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskHandle_t xReturn;
3664:../Middlewares/FreeRTOS//Source/tasks.c **** 
3665:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* A critical section is not required as this is not called from
3666:../Middlewares/FreeRTOS//Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3667:../Middlewares/FreeRTOS//Source/tasks.c **** 		individual execution thread. */
3668:../Middlewares/FreeRTOS//Source/tasks.c **** 		xReturn = pxCurrentTCB;
3669:../Middlewares/FreeRTOS//Source/tasks.c **** 
3670:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
3671:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3672:../Middlewares/FreeRTOS//Source/tasks.c **** 
3673:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3674:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3675:../Middlewares/FreeRTOS//Source/tasks.c **** 
3676:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3677:../Middlewares/FreeRTOS//Source/tasks.c **** 
3678:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3679:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 81


3680:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn;
3681:../Middlewares/FreeRTOS//Source/tasks.c **** 
3682:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3683:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3684:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3685:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3686:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3687:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3688:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3689:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3690:../Middlewares/FreeRTOS//Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3691:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3692:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
3693:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3694:../Middlewares/FreeRTOS//Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3695:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3696:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3697:../Middlewares/FreeRTOS//Source/tasks.c **** 
3698:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
3699:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3700:../Middlewares/FreeRTOS//Source/tasks.c **** 
3701:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3702:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3703:../Middlewares/FreeRTOS//Source/tasks.c **** 
3704:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3705:../Middlewares/FreeRTOS//Source/tasks.c **** 
3706:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3707:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3708:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3709:../Middlewares/FreeRTOS//Source/tasks.c **** 
3710:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3711:../Middlewares/FreeRTOS//Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3712:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxMutexHolder != NULL )
3713:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3714:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3715:../Middlewares/FreeRTOS//Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3716:../Middlewares/FreeRTOS//Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3717:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
3718:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3719:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3720:../Middlewares/FreeRTOS//Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3721:../Middlewares/FreeRTOS//Source/tasks.c **** 				not	being used for anything else. */
3722:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
3723:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3724:../Middlewares/FreeRTOS//Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3725:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
3726:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
3727:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3728:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3729:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
3730:../Middlewares/FreeRTOS//Source/tasks.c **** 
3731:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3732:../Middlewares/FreeRTOS//Source/tasks.c **** 				to be moved into a new list. */
3733:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
3734:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3735:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3736:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 82


3737:../Middlewares/FreeRTOS//Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3738:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
3739:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
3740:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
3741:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3742:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
3743:../Middlewares/FreeRTOS//Source/tasks.c **** 
3744:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3745:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3746:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3747:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
3748:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
3749:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3750:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Just inherit the priority. */
3751:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3752:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
3753:../Middlewares/FreeRTOS//Source/tasks.c **** 
3754:../Middlewares/FreeRTOS//Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3755:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3756:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
3757:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3758:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3759:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3760:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3761:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3762:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3763:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3764:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3765:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3766:../Middlewares/FreeRTOS//Source/tasks.c **** 
3767:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_MUTEXES */
3768:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3769:../Middlewares/FreeRTOS//Source/tasks.c **** 
3770:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3771:../Middlewares/FreeRTOS//Source/tasks.c **** 
3772:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3773:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3774:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3775:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3776:../Middlewares/FreeRTOS//Source/tasks.c **** 
3777:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxMutexHolder != NULL )
3778:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3779:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3780:../Middlewares/FreeRTOS//Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3781:../Middlewares/FreeRTOS//Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3782:../Middlewares/FreeRTOS//Source/tasks.c **** 			be the running state task. */
3783:../Middlewares/FreeRTOS//Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3784:../Middlewares/FreeRTOS//Source/tasks.c **** 
3785:../Middlewares/FreeRTOS//Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3786:../Middlewares/FreeRTOS//Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3787:../Middlewares/FreeRTOS//Source/tasks.c **** 
3788:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3789:../Middlewares/FreeRTOS//Source/tasks.c **** 			task? */
3790:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3791:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3792:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3793:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 83


3794:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3795:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3796:../Middlewares/FreeRTOS//Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3797:../Middlewares/FreeRTOS//Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3798:../Middlewares/FreeRTOS//Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3799:../Middlewares/FreeRTOS//Source/tasks.c **** 					the	holding task from the ready	list. */
3800:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3801:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
3802:../Middlewares/FreeRTOS//Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3803:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
3804:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
3805:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
3806:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3807:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
3808:../Middlewares/FreeRTOS//Source/tasks.c **** 
3809:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3810:../Middlewares/FreeRTOS//Source/tasks.c **** 					new	ready list. */
3811:../Middlewares/FreeRTOS//Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3812:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3813:../Middlewares/FreeRTOS//Source/tasks.c **** 
3814:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3815:../Middlewares/FreeRTOS//Source/tasks.c **** 					any other purpose if this task is running, and it must be
3816:../Middlewares/FreeRTOS//Source/tasks.c **** 					running to give back the mutex. */
3817:../Middlewares/FreeRTOS//Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3818:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3819:../Middlewares/FreeRTOS//Source/tasks.c **** 
3820:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3821:../Middlewares/FreeRTOS//Source/tasks.c **** 					This is only actually required in the corner case whereby
3822:../Middlewares/FreeRTOS//Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3823:../Middlewares/FreeRTOS//Source/tasks.c **** 					in an order different to that in which they were taken.
3824:../Middlewares/FreeRTOS//Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3825:../Middlewares/FreeRTOS//Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3826:../Middlewares/FreeRTOS//Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3827:../Middlewares/FreeRTOS//Source/tasks.c **** 					a task is waiting on it or not. */
3828:../Middlewares/FreeRTOS//Source/tasks.c **** 					xReturn = pdTRUE;
3829:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
3830:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
3831:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3832:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3833:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
3834:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3835:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
3836:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3837:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3838:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3839:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3840:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3841:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3842:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3843:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3844:../Middlewares/FreeRTOS//Source/tasks.c **** 
3845:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
3846:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3847:../Middlewares/FreeRTOS//Source/tasks.c **** 
3848:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_MUTEXES */
3849:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3850:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 84


3851:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3852:../Middlewares/FreeRTOS//Source/tasks.c **** 
3853:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskEnterCritical( void )
3854:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3855:../Middlewares/FreeRTOS//Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3856:../Middlewares/FreeRTOS//Source/tasks.c **** 
3857:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3858:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3859:../Middlewares/FreeRTOS//Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3860:../Middlewares/FreeRTOS//Source/tasks.c **** 
3861:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3862:../Middlewares/FreeRTOS//Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3863:../Middlewares/FreeRTOS//Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3864:../Middlewares/FreeRTOS//Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3865:../Middlewares/FreeRTOS//Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3866:../Middlewares/FreeRTOS//Source/tasks.c **** 			critical section. */
3867:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3868:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3869:../Middlewares/FreeRTOS//Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3870:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3871:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3872:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3873:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3874:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3875:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3876:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3877:../Middlewares/FreeRTOS//Source/tasks.c **** 
3878:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3879:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3880:../Middlewares/FreeRTOS//Source/tasks.c **** 
3881:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3882:../Middlewares/FreeRTOS//Source/tasks.c **** 
3883:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskExitCritical( void )
3884:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3885:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3886:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3887:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3888:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3889:../Middlewares/FreeRTOS//Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3890:../Middlewares/FreeRTOS//Source/tasks.c **** 
3891:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3892:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3893:../Middlewares/FreeRTOS//Source/tasks.c **** 					portENABLE_INTERRUPTS();
3894:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
3895:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
3896:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3897:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3898:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
3899:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3900:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
3901:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3902:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3903:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3904:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3905:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3906:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3907:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 85


3908:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3909:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3910:../Middlewares/FreeRTOS//Source/tasks.c **** 
3911:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3912:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3913:../Middlewares/FreeRTOS//Source/tasks.c **** 
3914:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3915:../Middlewares/FreeRTOS//Source/tasks.c **** 
3916:../Middlewares/FreeRTOS//Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3917:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3918:../Middlewares/FreeRTOS//Source/tasks.c **** 	size_t x;
3919:../Middlewares/FreeRTOS//Source/tasks.c **** 
3920:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Start by copying the entire string. */
3921:../Middlewares/FreeRTOS//Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3922:../Middlewares/FreeRTOS//Source/tasks.c **** 
3923:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3924:../Middlewares/FreeRTOS//Source/tasks.c **** 		printed out. */
3925:../Middlewares/FreeRTOS//Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3926:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3927:../Middlewares/FreeRTOS//Source/tasks.c **** 			pcBuffer[ x ] = ' ';
3928:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3929:../Middlewares/FreeRTOS//Source/tasks.c **** 
3930:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Terminate. */
3931:../Middlewares/FreeRTOS//Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
3932:../Middlewares/FreeRTOS//Source/tasks.c **** 
3933:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Return the new end of string. */
3934:../Middlewares/FreeRTOS//Source/tasks.c **** 		return &( pcBuffer[ x ] );
3935:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3936:../Middlewares/FreeRTOS//Source/tasks.c **** 
3937:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3938:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3939:../Middlewares/FreeRTOS//Source/tasks.c **** 
3940:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:../Middlewares/FreeRTOS//Source/tasks.c **** 
3942:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3943:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3944:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3945:../Middlewares/FreeRTOS//Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3946:../Middlewares/FreeRTOS//Source/tasks.c **** 	char cStatus;
3947:../Middlewares/FreeRTOS//Source/tasks.c **** 
3948:../Middlewares/FreeRTOS//Source/tasks.c **** 		/*
3949:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * PLEASE NOTE:
3950:../Middlewares/FreeRTOS//Source/tasks.c **** 		 *
3951:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3952:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3953:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * scheduler.
3954:../Middlewares/FreeRTOS//Source/tasks.c **** 		 *
3955:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3956:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3957:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * displays task names, states and stack usage.
3958:../Middlewares/FreeRTOS//Source/tasks.c **** 		 *
3959:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3960:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3961:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3962:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3963:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3964:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 86


3965:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * snprintf() implementation!).
3966:../Middlewares/FreeRTOS//Source/tasks.c **** 		 *
3967:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3968:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3969:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * through a call to vTaskList().
3970:../Middlewares/FreeRTOS//Source/tasks.c **** 		 */
3971:../Middlewares/FreeRTOS//Source/tasks.c **** 
3972:../Middlewares/FreeRTOS//Source/tasks.c **** 
3973:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3974:../Middlewares/FreeRTOS//Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3975:../Middlewares/FreeRTOS//Source/tasks.c **** 
3976:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3977:../Middlewares/FreeRTOS//Source/tasks.c **** 		function is executing. */
3978:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3979:../Middlewares/FreeRTOS//Source/tasks.c **** 
3980:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3981:../Middlewares/FreeRTOS//Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3982:../Middlewares/FreeRTOS//Source/tasks.c **** 		equate to NULL. */
3983:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3984:../Middlewares/FreeRTOS//Source/tasks.c **** 
3985:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3986:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3987:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Generate the (binary) data. */
3988:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3989:../Middlewares/FreeRTOS//Source/tasks.c **** 
3990:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Create a human readable table from the binary data. */
3991:../Middlewares/FreeRTOS//Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3992:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3993:../Middlewares/FreeRTOS//Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3994:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3995:../Middlewares/FreeRTOS//Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3996:../Middlewares/FreeRTOS//Source/tasks.c **** 										break;
3997:../Middlewares/FreeRTOS//Source/tasks.c **** 
3998:../Middlewares/FreeRTOS//Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3999:../Middlewares/FreeRTOS//Source/tasks.c **** 										break;
4000:../Middlewares/FreeRTOS//Source/tasks.c **** 
4001:../Middlewares/FreeRTOS//Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4002:../Middlewares/FreeRTOS//Source/tasks.c **** 										break;
4003:../Middlewares/FreeRTOS//Source/tasks.c **** 
4004:../Middlewares/FreeRTOS//Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4005:../Middlewares/FreeRTOS//Source/tasks.c **** 										break;
4006:../Middlewares/FreeRTOS//Source/tasks.c **** 
4007:../Middlewares/FreeRTOS//Source/tasks.c **** 					default:			/* Should not get here, but it is included
4008:../Middlewares/FreeRTOS//Source/tasks.c **** 										to prevent static checking errors. */
4009:../Middlewares/FreeRTOS//Source/tasks.c **** 										cStatus = 0x00;
4010:../Middlewares/FreeRTOS//Source/tasks.c **** 										break;
4011:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4012:../Middlewares/FreeRTOS//Source/tasks.c **** 
4013:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4014:../Middlewares/FreeRTOS//Source/tasks.c **** 				can be printed in tabular form more easily. */
4015:../Middlewares/FreeRTOS//Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4016:../Middlewares/FreeRTOS//Source/tasks.c **** 
4017:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Write the rest of the string. */
4018:../Middlewares/FreeRTOS//Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4019:../Middlewares/FreeRTOS//Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4020:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4021:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 87


4022:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4023:../Middlewares/FreeRTOS//Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4024:../Middlewares/FreeRTOS//Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4025:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4026:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
4027:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4028:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4029:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4030:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4031:../Middlewares/FreeRTOS//Source/tasks.c **** 
4032:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4033:../Middlewares/FreeRTOS//Source/tasks.c **** /*----------------------------------------------------------*/
4034:../Middlewares/FreeRTOS//Source/tasks.c **** 
4035:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4036:../Middlewares/FreeRTOS//Source/tasks.c **** 
4037:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4038:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4039:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4040:../Middlewares/FreeRTOS//Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4041:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4042:../Middlewares/FreeRTOS//Source/tasks.c **** 
4043:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4044:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4045:../Middlewares/FreeRTOS//Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4046:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4047:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif
4048:../Middlewares/FreeRTOS//Source/tasks.c **** 
4049:../Middlewares/FreeRTOS//Source/tasks.c **** 		/*
4050:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * PLEASE NOTE:
4051:../Middlewares/FreeRTOS//Source/tasks.c **** 		 *
4052:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4053:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4054:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * scheduler.
4055:../Middlewares/FreeRTOS//Source/tasks.c **** 		 *
4056:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4057:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4058:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4059:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * in both absolute and percentage terms.
4060:../Middlewares/FreeRTOS//Source/tasks.c **** 		 *
4061:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4062:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4063:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4064:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4065:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4066:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4067:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * a full snprintf() implementation!).
4068:../Middlewares/FreeRTOS//Source/tasks.c **** 		 *
4069:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4070:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4071:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4072:../Middlewares/FreeRTOS//Source/tasks.c **** 		 */
4073:../Middlewares/FreeRTOS//Source/tasks.c **** 
4074:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4075:../Middlewares/FreeRTOS//Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4076:../Middlewares/FreeRTOS//Source/tasks.c **** 
4077:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4078:../Middlewares/FreeRTOS//Source/tasks.c **** 		function is executing. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 88


4079:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4080:../Middlewares/FreeRTOS//Source/tasks.c **** 
4081:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4082:../Middlewares/FreeRTOS//Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4083:../Middlewares/FreeRTOS//Source/tasks.c **** 		equate to NULL. */
4084:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4085:../Middlewares/FreeRTOS//Source/tasks.c **** 
4086:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4087:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4088:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Generate the (binary) data. */
4089:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4090:../Middlewares/FreeRTOS//Source/tasks.c **** 
4091:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* For percentage calculations. */
4092:../Middlewares/FreeRTOS//Source/tasks.c **** 			ulTotalTime /= 100UL;
4093:../Middlewares/FreeRTOS//Source/tasks.c **** 
4094:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Avoid divide by zero errors. */
4095:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( ulTotalTime > 0 )
4096:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4097:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4098:../Middlewares/FreeRTOS//Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4099:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4100:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4101:../Middlewares/FreeRTOS//Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4102:../Middlewares/FreeRTOS//Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4103:../Middlewares/FreeRTOS//Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4104:../Middlewares/FreeRTOS//Source/tasks.c **** 
4105:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Write the task name to the string, padding with
4106:../Middlewares/FreeRTOS//Source/tasks.c **** 					spaces so it can be printed in tabular form more
4107:../Middlewares/FreeRTOS//Source/tasks.c **** 					easily. */
4108:../Middlewares/FreeRTOS//Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4109:../Middlewares/FreeRTOS//Source/tasks.c **** 
4110:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4111:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
4112:../Middlewares/FreeRTOS//Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4113:../Middlewares/FreeRTOS//Source/tasks.c **** 						{
4114:../Middlewares/FreeRTOS//Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4115:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
4116:../Middlewares/FreeRTOS//Source/tasks.c **** 						#else
4117:../Middlewares/FreeRTOS//Source/tasks.c **** 						{
4118:../Middlewares/FreeRTOS//Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4119:../Middlewares/FreeRTOS//Source/tasks.c **** 							printf() library can be used. */
4120:../Middlewares/FreeRTOS//Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4121:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
4122:../Middlewares/FreeRTOS//Source/tasks.c **** 						#endif
4123:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
4124:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
4125:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
4126:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* If the percentage is zero here then the task has
4127:../Middlewares/FreeRTOS//Source/tasks.c **** 						consumed less than 1% of the total run time. */
4128:../Middlewares/FreeRTOS//Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4129:../Middlewares/FreeRTOS//Source/tasks.c **** 						{
4130:../Middlewares/FreeRTOS//Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4131:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
4132:../Middlewares/FreeRTOS//Source/tasks.c **** 						#else
4133:../Middlewares/FreeRTOS//Source/tasks.c **** 						{
4134:../Middlewares/FreeRTOS//Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4135:../Middlewares/FreeRTOS//Source/tasks.c **** 							printf() library can be used. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 89


4136:../Middlewares/FreeRTOS//Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4137:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
4138:../Middlewares/FreeRTOS//Source/tasks.c **** 						#endif
4139:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
4140:../Middlewares/FreeRTOS//Source/tasks.c **** 
4141:../Middlewares/FreeRTOS//Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4142:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4143:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4144:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
4145:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4146:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4147:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4148:../Middlewares/FreeRTOS//Source/tasks.c **** 
4149:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4150:../Middlewares/FreeRTOS//Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4151:../Middlewares/FreeRTOS//Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4152:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4153:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
4154:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4155:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4156:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4157:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4158:../Middlewares/FreeRTOS//Source/tasks.c **** 
4159:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4160:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
4161:../Middlewares/FreeRTOS//Source/tasks.c **** 
4162:../Middlewares/FreeRTOS//Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4163:../Middlewares/FreeRTOS//Source/tasks.c **** {
4164:../Middlewares/FreeRTOS//Source/tasks.c **** TickType_t uxReturn;
4165:../Middlewares/FreeRTOS//Source/tasks.c **** 
4166:../Middlewares/FreeRTOS//Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4167:../Middlewares/FreeRTOS//Source/tasks.c **** 
4168:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4169:../Middlewares/FreeRTOS//Source/tasks.c **** 	queues and semaphores. */
4170:../Middlewares/FreeRTOS//Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4171:../Middlewares/FreeRTOS//Source/tasks.c **** 
4172:../Middlewares/FreeRTOS//Source/tasks.c **** 	return uxReturn;
4173:../Middlewares/FreeRTOS//Source/tasks.c **** }
4174:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
4175:../Middlewares/FreeRTOS//Source/tasks.c **** 
4176:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4177:../Middlewares/FreeRTOS//Source/tasks.c **** 
4178:../Middlewares/FreeRTOS//Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4179:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4180:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4181:../Middlewares/FreeRTOS//Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4182:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4183:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4184:../Middlewares/FreeRTOS//Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4185:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4186:../Middlewares/FreeRTOS//Source/tasks.c **** 
4187:../Middlewares/FreeRTOS//Source/tasks.c **** 		return pxCurrentTCB;
4188:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4189:../Middlewares/FreeRTOS//Source/tasks.c **** 
4190:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_MUTEXES */
4191:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
4192:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 90


4193:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4194:../Middlewares/FreeRTOS//Source/tasks.c **** 
4195:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4196:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4197:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint32_t ulReturn;
4198:../Middlewares/FreeRTOS//Source/tasks.c **** 
4199:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
4200:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4201:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4202:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4203:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4204:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4205:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4206:../Middlewares/FreeRTOS//Source/tasks.c **** 
4207:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4208:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4209:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4210:../Middlewares/FreeRTOS//Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4211:../Middlewares/FreeRTOS//Source/tasks.c **** 
4212:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4213:../Middlewares/FreeRTOS//Source/tasks.c **** 					section (some will yield immediately, others wait until the
4214:../Middlewares/FreeRTOS//Source/tasks.c **** 					critical section exits) - but it is not something that
4215:../Middlewares/FreeRTOS//Source/tasks.c **** 					application code should ever do. */
4216:../Middlewares/FreeRTOS//Source/tasks.c **** 					portYIELD_WITHIN_API();
4217:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4218:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
4219:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4220:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4221:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4222:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4223:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
4224:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4225:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4226:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4227:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4228:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
4229:../Middlewares/FreeRTOS//Source/tasks.c **** 
4230:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
4231:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4232:../Middlewares/FreeRTOS//Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4233:../Middlewares/FreeRTOS//Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4234:../Middlewares/FreeRTOS//Source/tasks.c **** 
4235:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( ulReturn != 0UL )
4236:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4237:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4238:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4239:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4240:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4241:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
4242:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4243:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
4244:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4245:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4246:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
4247:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4248:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4249:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 91


4250:../Middlewares/FreeRTOS//Source/tasks.c **** 
4251:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4252:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4253:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
4254:../Middlewares/FreeRTOS//Source/tasks.c **** 
4255:../Middlewares/FreeRTOS//Source/tasks.c **** 		return ulReturn;
4256:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4257:../Middlewares/FreeRTOS//Source/tasks.c **** 
4258:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4259:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
4260:../Middlewares/FreeRTOS//Source/tasks.c **** 
4261:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4262:../Middlewares/FreeRTOS//Source/tasks.c **** 
4263:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4264:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4265:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn;
4266:../Middlewares/FreeRTOS//Source/tasks.c **** 
4267:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
4268:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4269:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4270:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4271:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4272:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4273:../Middlewares/FreeRTOS//Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4274:../Middlewares/FreeRTOS//Source/tasks.c **** 				clear the value to zero. */
4275:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4276:../Middlewares/FreeRTOS//Source/tasks.c **** 
4277:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4278:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4279:../Middlewares/FreeRTOS//Source/tasks.c **** 
4280:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4281:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4282:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4283:../Middlewares/FreeRTOS//Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4284:../Middlewares/FreeRTOS//Source/tasks.c **** 
4285:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4286:../Middlewares/FreeRTOS//Source/tasks.c **** 					section (some will yield immediately, others wait until the
4287:../Middlewares/FreeRTOS//Source/tasks.c **** 					critical section exits) - but it is not something that
4288:../Middlewares/FreeRTOS//Source/tasks.c **** 					application code should ever do. */
4289:../Middlewares/FreeRTOS//Source/tasks.c **** 					portYIELD_WITHIN_API();
4290:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4291:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
4292:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4293:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4294:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4295:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4296:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
4297:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4298:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4299:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4300:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4301:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
4302:../Middlewares/FreeRTOS//Source/tasks.c **** 
4303:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
4304:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4305:../Middlewares/FreeRTOS//Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4306:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 92


4307:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pulNotificationValue != NULL )
4308:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4309:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Output the current notification value, which may or may not
4310:../Middlewares/FreeRTOS//Source/tasks.c **** 				have changed. */
4311:../Middlewares/FreeRTOS//Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4312:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4313:../Middlewares/FreeRTOS//Source/tasks.c **** 
4314:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4315:../Middlewares/FreeRTOS//Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4316:../Middlewares/FreeRTOS//Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4317:../Middlewares/FreeRTOS//Source/tasks.c **** 			unblocked because of a timeout. */
4318:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
4319:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4320:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* A notification was not received. */
4321:../Middlewares/FreeRTOS//Source/tasks.c **** 				xReturn = pdFALSE;
4322:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4323:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
4324:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4325:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* A notification was already pending or a notification was
4326:../Middlewares/FreeRTOS//Source/tasks.c **** 				received while the task was waiting. */
4327:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4328:../Middlewares/FreeRTOS//Source/tasks.c **** 				xReturn = pdTRUE;
4329:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4330:../Middlewares/FreeRTOS//Source/tasks.c **** 
4331:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4332:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4333:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
4334:../Middlewares/FreeRTOS//Source/tasks.c **** 
4335:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
4336:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4337:../Middlewares/FreeRTOS//Source/tasks.c **** 
4338:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4339:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
4340:../Middlewares/FreeRTOS//Source/tasks.c **** 
4341:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4342:../Middlewares/FreeRTOS//Source/tasks.c **** 
4343:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4344:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4345:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * pxTCB;
4346:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4347:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4348:../Middlewares/FreeRTOS//Source/tasks.c **** 
4349:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( xTaskToNotify );
4350:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4351:../Middlewares/FreeRTOS//Source/tasks.c **** 
4352:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
4353:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4354:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4355:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4356:../Middlewares/FreeRTOS//Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4357:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4358:../Middlewares/FreeRTOS//Source/tasks.c **** 
4359:../Middlewares/FreeRTOS//Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4360:../Middlewares/FreeRTOS//Source/tasks.c **** 
4361:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4362:../Middlewares/FreeRTOS//Source/tasks.c **** 
4363:../Middlewares/FreeRTOS//Source/tasks.c **** 			switch( eAction )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 93


4364:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4365:../Middlewares/FreeRTOS//Source/tasks.c **** 				case eSetBits	:
4366:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4367:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
4368:../Middlewares/FreeRTOS//Source/tasks.c **** 
4369:../Middlewares/FreeRTOS//Source/tasks.c **** 				case eIncrement	:
4370:../Middlewares/FreeRTOS//Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4371:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
4372:../Middlewares/FreeRTOS//Source/tasks.c **** 
4373:../Middlewares/FreeRTOS//Source/tasks.c **** 				case eSetValueWithOverwrite	:
4374:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4375:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
4376:../Middlewares/FreeRTOS//Source/tasks.c **** 
4377:../Middlewares/FreeRTOS//Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4378:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4379:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
4380:../Middlewares/FreeRTOS//Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4381:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
4382:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
4383:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
4384:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* The value could not be written to the task. */
4385:../Middlewares/FreeRTOS//Source/tasks.c **** 						xReturn = pdFAIL;
4386:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
4387:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
4388:../Middlewares/FreeRTOS//Source/tasks.c **** 
4389:../Middlewares/FreeRTOS//Source/tasks.c **** 				case eNoAction:
4390:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The task is being notified without its notify value being
4391:../Middlewares/FreeRTOS//Source/tasks.c **** 					updated. */
4392:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
4393:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4394:../Middlewares/FreeRTOS//Source/tasks.c **** 
4395:../Middlewares/FreeRTOS//Source/tasks.c **** 			traceTASK_NOTIFY();
4396:../Middlewares/FreeRTOS//Source/tasks.c **** 
4397:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4398:../Middlewares/FreeRTOS//Source/tasks.c **** 			notification then unblock it now. */
4399:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4400:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4401:../Middlewares/FreeRTOS//Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4402:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4403:../Middlewares/FreeRTOS//Source/tasks.c **** 
4404:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The task should not have been on an event list. */
4405:../Middlewares/FreeRTOS//Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4406:../Middlewares/FreeRTOS//Source/tasks.c **** 
4407:../Middlewares/FreeRTOS//Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4408:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4409:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4410:../Middlewares/FreeRTOS//Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4411:../Middlewares/FreeRTOS//Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4412:../Middlewares/FreeRTOS//Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4413:../Middlewares/FreeRTOS//Source/tasks.c **** 					because it will automatically get reset to a new value when
4414:../Middlewares/FreeRTOS//Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4415:../Middlewares/FreeRTOS//Source/tasks.c **** 					tickless idling is used it might be more important to enter
4416:../Middlewares/FreeRTOS//Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4417:../Middlewares/FreeRTOS//Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4418:../Middlewares/FreeRTOS//Source/tasks.c **** 					earliest possible time. */
4419:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4420:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 94


4421:../Middlewares/FreeRTOS//Source/tasks.c **** 				#endif
4422:../Middlewares/FreeRTOS//Source/tasks.c **** 
4423:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4424:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4425:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The notified task has a priority above the currently
4426:../Middlewares/FreeRTOS//Source/tasks.c **** 					executing task so a yield is required. */
4427:../Middlewares/FreeRTOS//Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4428:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4429:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
4430:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4431:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4433:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4434:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
4435:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4436:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4437:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4438:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4439:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
4440:../Middlewares/FreeRTOS//Source/tasks.c **** 
4441:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
4442:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4443:../Middlewares/FreeRTOS//Source/tasks.c **** 
4444:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4445:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
4446:../Middlewares/FreeRTOS//Source/tasks.c **** 
4447:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4448:../Middlewares/FreeRTOS//Source/tasks.c **** 
4449:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4450:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4451:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * pxTCB;
4452:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4453:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4454:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4455:../Middlewares/FreeRTOS//Source/tasks.c **** 
4456:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( xTaskToNotify );
4457:../Middlewares/FreeRTOS//Source/tasks.c **** 
4458:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4459:../Middlewares/FreeRTOS//Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4460:../Middlewares/FreeRTOS//Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4461:../Middlewares/FreeRTOS//Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4462:../Middlewares/FreeRTOS//Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4463:../Middlewares/FreeRTOS//Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4464:../Middlewares/FreeRTOS//Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4465:../Middlewares/FreeRTOS//Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4466:../Middlewares/FreeRTOS//Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4467:../Middlewares/FreeRTOS//Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4468:../Middlewares/FreeRTOS//Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4469:../Middlewares/FreeRTOS//Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4470:../Middlewares/FreeRTOS//Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4471:../Middlewares/FreeRTOS//Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4472:../Middlewares/FreeRTOS//Source/tasks.c **** 		provided on the following link:
4473:../Middlewares/FreeRTOS//Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4474:../Middlewares/FreeRTOS//Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4475:../Middlewares/FreeRTOS//Source/tasks.c **** 
4476:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4477:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 95


4478:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4479:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4480:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4481:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4482:../Middlewares/FreeRTOS//Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4483:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4484:../Middlewares/FreeRTOS//Source/tasks.c **** 
4485:../Middlewares/FreeRTOS//Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4486:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4487:../Middlewares/FreeRTOS//Source/tasks.c **** 
4488:../Middlewares/FreeRTOS//Source/tasks.c **** 			switch( eAction )
4489:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4490:../Middlewares/FreeRTOS//Source/tasks.c **** 				case eSetBits	:
4491:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4492:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
4493:../Middlewares/FreeRTOS//Source/tasks.c **** 
4494:../Middlewares/FreeRTOS//Source/tasks.c **** 				case eIncrement	:
4495:../Middlewares/FreeRTOS//Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4496:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
4497:../Middlewares/FreeRTOS//Source/tasks.c **** 
4498:../Middlewares/FreeRTOS//Source/tasks.c **** 				case eSetValueWithOverwrite	:
4499:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4500:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
4501:../Middlewares/FreeRTOS//Source/tasks.c **** 
4502:../Middlewares/FreeRTOS//Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4503:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4504:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
4505:../Middlewares/FreeRTOS//Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4506:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
4507:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
4508:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
4509:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* The value could not be written to the task. */
4510:../Middlewares/FreeRTOS//Source/tasks.c **** 						xReturn = pdFAIL;
4511:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
4512:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
4513:../Middlewares/FreeRTOS//Source/tasks.c **** 
4514:../Middlewares/FreeRTOS//Source/tasks.c **** 				case eNoAction :
4515:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The task is being notified without its notify value being
4516:../Middlewares/FreeRTOS//Source/tasks.c **** 					updated. */
4517:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
4518:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4519:../Middlewares/FreeRTOS//Source/tasks.c **** 
4520:../Middlewares/FreeRTOS//Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4521:../Middlewares/FreeRTOS//Source/tasks.c **** 
4522:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4523:../Middlewares/FreeRTOS//Source/tasks.c **** 			notification then unblock it now. */
4524:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4525:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4526:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The task should not have been on an event list. */
4527:../Middlewares/FreeRTOS//Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4528:../Middlewares/FreeRTOS//Source/tasks.c **** 
4529:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4530:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4531:../Middlewares/FreeRTOS//Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4532:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4533:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4534:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 96


4535:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4536:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4537:../Middlewares/FreeRTOS//Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4538:../Middlewares/FreeRTOS//Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4539:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4540:../Middlewares/FreeRTOS//Source/tasks.c **** 
4541:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4542:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4543:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The notified task has a priority above the currently
4544:../Middlewares/FreeRTOS//Source/tasks.c **** 					executing task so a yield is required. */
4545:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4546:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
4547:../Middlewares/FreeRTOS//Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4548:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
4549:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
4550:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
4551:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4552:../Middlewares/FreeRTOS//Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4553:../Middlewares/FreeRTOS//Source/tasks.c **** 						safe FreeRTOS function. */
4554:../Middlewares/FreeRTOS//Source/tasks.c **** 						xYieldPending = pdTRUE;
4555:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
4556:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4557:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
4558:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4559:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4560:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4561:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4562:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4563:../Middlewares/FreeRTOS//Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4564:../Middlewares/FreeRTOS//Source/tasks.c **** 
4565:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
4566:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4567:../Middlewares/FreeRTOS//Source/tasks.c **** 
4568:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4569:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
4570:../Middlewares/FreeRTOS//Source/tasks.c **** 
4571:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4572:../Middlewares/FreeRTOS//Source/tasks.c **** 
4573:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4574:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4575:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * pxTCB;
4576:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4577:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4578:../Middlewares/FreeRTOS//Source/tasks.c **** 
4579:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( xTaskToNotify );
4580:../Middlewares/FreeRTOS//Source/tasks.c **** 
4581:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4582:../Middlewares/FreeRTOS//Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4583:../Middlewares/FreeRTOS//Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4584:../Middlewares/FreeRTOS//Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4585:../Middlewares/FreeRTOS//Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4586:../Middlewares/FreeRTOS//Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4587:../Middlewares/FreeRTOS//Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4588:../Middlewares/FreeRTOS//Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4589:../Middlewares/FreeRTOS//Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4590:../Middlewares/FreeRTOS//Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4591:../Middlewares/FreeRTOS//Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 97


4592:../Middlewares/FreeRTOS//Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4593:../Middlewares/FreeRTOS//Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4594:../Middlewares/FreeRTOS//Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4595:../Middlewares/FreeRTOS//Source/tasks.c **** 		provided on the following link:
4596:../Middlewares/FreeRTOS//Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4597:../Middlewares/FreeRTOS//Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4598:../Middlewares/FreeRTOS//Source/tasks.c **** 
4599:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4600:../Middlewares/FreeRTOS//Source/tasks.c **** 
4601:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4602:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4603:../Middlewares/FreeRTOS//Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4604:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4605:../Middlewares/FreeRTOS//Source/tasks.c **** 
4606:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4607:../Middlewares/FreeRTOS//Source/tasks.c **** 			semaphore. */
4608:../Middlewares/FreeRTOS//Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4609:../Middlewares/FreeRTOS//Source/tasks.c **** 
4610:../Middlewares/FreeRTOS//Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4611:../Middlewares/FreeRTOS//Source/tasks.c **** 
4612:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4613:../Middlewares/FreeRTOS//Source/tasks.c **** 			notification then unblock it now. */
4614:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4615:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4616:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The task should not have been on an event list. */
4617:../Middlewares/FreeRTOS//Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4618:../Middlewares/FreeRTOS//Source/tasks.c **** 
4619:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4620:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4621:../Middlewares/FreeRTOS//Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4622:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4623:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4624:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
4625:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4626:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4627:../Middlewares/FreeRTOS//Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4628:../Middlewares/FreeRTOS//Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4629:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4630:../Middlewares/FreeRTOS//Source/tasks.c **** 
4631:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4632:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4633:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The notified task has a priority above the currently
4634:../Middlewares/FreeRTOS//Source/tasks.c **** 					executing task so a yield is required. */
4635:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4636:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
4637:../Middlewares/FreeRTOS//Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4638:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
4639:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
4640:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
4641:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4642:../Middlewares/FreeRTOS//Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4643:../Middlewares/FreeRTOS//Source/tasks.c **** 						safe FreeRTOS function. */
4644:../Middlewares/FreeRTOS//Source/tasks.c **** 						xYieldPending = pdTRUE;
4645:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
4646:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4647:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
4648:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 98


4649:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4650:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4651:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4652:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4653:../Middlewares/FreeRTOS//Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4654:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4655:../Middlewares/FreeRTOS//Source/tasks.c **** 
4656:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4657:../Middlewares/FreeRTOS//Source/tasks.c **** 
4658:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
4659:../Middlewares/FreeRTOS//Source/tasks.c **** 
4660:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4661:../Middlewares/FreeRTOS//Source/tasks.c **** 
4662:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4663:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4664:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
4665:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn;
4666:../Middlewares/FreeRTOS//Source/tasks.c **** 
4667:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4668:../Middlewares/FreeRTOS//Source/tasks.c **** 		its notification state cleared. */
4669:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4670:../Middlewares/FreeRTOS//Source/tasks.c **** 
4671:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
4672:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4673:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4674:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4675:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4676:../Middlewares/FreeRTOS//Source/tasks.c **** 				xReturn = pdPASS;
4677:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4678:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
4679:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4680:../Middlewares/FreeRTOS//Source/tasks.c **** 				xReturn = pdFAIL;
4681:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4682:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4683:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
4684:../Middlewares/FreeRTOS//Source/tasks.c **** 
4685:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
4686:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4687:../Middlewares/FreeRTOS//Source/tasks.c **** 
4688:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4689:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
4690:../Middlewares/FreeRTOS//Source/tasks.c **** 
4691:../Middlewares/FreeRTOS//Source/tasks.c **** 
4692:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4693:../Middlewares/FreeRTOS//Source/tasks.c **** {
 587              		.loc 1 4693 0
 588              		.cfi_startproc
 589              		@ args = 0, pretend = 0, frame = 0
 590              		@ frame_needed = 0, uses_anonymous_args = 0
 591              	.LVL53:
 592 0000 70B5     		push	{r4, r5, r6, lr}
 593              		.save {r4, r5, r6, lr}
 594              	.LCFI4:
 595              		.cfi_def_cfa_offset 16
 596              		.cfi_offset 4, -16
 597              		.cfi_offset 5, -12
 598              		.cfi_offset 6, -8
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 99


 599              		.cfi_offset 14, -4
 600 0002 0446     		mov	r4, r0
 601 0004 0E46     		mov	r6, r1
4694:../Middlewares/FreeRTOS//Source/tasks.c **** TickType_t xTimeToWake;
4695:../Middlewares/FreeRTOS//Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 602              		.loc 1 4695 0
 603 0006 1D4B     		ldr	r3, .L52
 604 0008 1D68     		ldr	r5, [r3]
 605              	.LVL54:
4696:../Middlewares/FreeRTOS//Source/tasks.c **** 
4697:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4698:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4699:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4700:../Middlewares/FreeRTOS//Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4701:../Middlewares/FreeRTOS//Source/tasks.c **** 		when the task leaves the Blocked state. */
4702:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4703:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4704:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
4705:../Middlewares/FreeRTOS//Source/tasks.c **** 
4706:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4707:../Middlewares/FreeRTOS//Source/tasks.c **** 	as the same list item is used for both lists. */
4708:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 606              		.loc 1 4708 0
 607 000a 1D4B     		ldr	r3, .L52+4
 608 000c 1868     		ldr	r0, [r3]
 609              	.LVL55:
 610 000e 0430     		adds	r0, r0, #4
 611 0010 FFF7FEFF 		bl	uxListRemove
 612              	.LVL56:
 613 0014 50B9     		cbnz	r0, .L45
4709:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4710:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4711:../Middlewares/FreeRTOS//Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4712:../Middlewares/FreeRTOS//Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 614              		.loc 1 4712 0
 615 0016 1A4B     		ldr	r3, .L52+4
 616 0018 1B68     		ldr	r3, [r3]
 617 001a DA6A     		ldr	r2, [r3, #44]
 618 001c 0123     		movs	r3, #1
 619 001e 03FA02F2 		lsl	r2, r3, r2
 620 0022 1849     		ldr	r1, .L52+8
 621 0024 0B68     		ldr	r3, [r1]
 622 0026 23EA0203 		bic	r3, r3, r2
 623 002a 0B60     		str	r3, [r1]
 624              	.L45:
4713:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4714:../Middlewares/FreeRTOS//Source/tasks.c **** 	else
4715:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4716:../Middlewares/FreeRTOS//Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4717:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4718:../Middlewares/FreeRTOS//Source/tasks.c **** 
4719:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4720:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4721:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 625              		.loc 1 4721 0
 626 002c B4F1FF3F 		cmp	r4, #-1
 627 0030 13D0     		beq	.L50
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 100


 628              	.L46:
4722:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4723:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4724:../Middlewares/FreeRTOS//Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4725:../Middlewares/FreeRTOS//Source/tasks.c **** 			indefinitely. */
4726:../Middlewares/FreeRTOS//Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
4727:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4728:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
4729:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4730:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4731:../Middlewares/FreeRTOS//Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4732:../Middlewares/FreeRTOS//Source/tasks.c **** 			kernel will manage it correctly. */
4733:../Middlewares/FreeRTOS//Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 629              		.loc 1 4733 0
 630 0032 2C44     		add	r4, r4, r5
 631              	.LVL57:
4734:../Middlewares/FreeRTOS//Source/tasks.c **** 
4735:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4736:../Middlewares/FreeRTOS//Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 632              		.loc 1 4736 0
 633 0034 124B     		ldr	r3, .L52+4
 634 0036 1B68     		ldr	r3, [r3]
 635 0038 5C60     		str	r4, [r3, #4]
4737:../Middlewares/FreeRTOS//Source/tasks.c **** 
4738:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 636              		.loc 1 4738 0
 637 003a AC42     		cmp	r4, r5
 638 003c 16D3     		bcc	.L51
4739:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4740:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4741:../Middlewares/FreeRTOS//Source/tasks.c **** 				list. */
4742:../Middlewares/FreeRTOS//Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4743:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4744:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
4745:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4746:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4747:../Middlewares/FreeRTOS//Source/tasks.c **** 				is used. */
4748:../Middlewares/FreeRTOS//Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 639              		.loc 1 4748 0
 640 003e 124B     		ldr	r3, .L52+12
 641 0040 1868     		ldr	r0, [r3]
 642 0042 0F4B     		ldr	r3, .L52+4
 643 0044 1968     		ldr	r1, [r3]
 644 0046 0431     		adds	r1, r1, #4
 645 0048 FFF7FEFF 		bl	vListInsert
 646              	.LVL58:
4749:../Middlewares/FreeRTOS//Source/tasks.c **** 
4750:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4751:../Middlewares/FreeRTOS//Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4752:../Middlewares/FreeRTOS//Source/tasks.c **** 				needs to be updated too. */
4753:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 647              		.loc 1 4753 0
 648 004c 0F4B     		ldr	r3, .L52+16
 649 004e 1B68     		ldr	r3, [r3]
 650 0050 9C42     		cmp	r4, r3
 651 0052 12D2     		bcs	.L44
4754:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 101


4755:../Middlewares/FreeRTOS//Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 652              		.loc 1 4755 0
 653 0054 0D4B     		ldr	r3, .L52+16
 654 0056 1C60     		str	r4, [r3]
 655              	.LVL59:
4756:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4757:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
4758:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4759:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4760:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4761:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4762:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4763:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4764:../Middlewares/FreeRTOS//Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4765:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4766:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4767:../Middlewares/FreeRTOS//Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4768:../Middlewares/FreeRTOS//Source/tasks.c **** 		will manage it correctly. */
4769:../Middlewares/FreeRTOS//Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4770:../Middlewares/FreeRTOS//Source/tasks.c **** 
4771:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4772:../Middlewares/FreeRTOS//Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4773:../Middlewares/FreeRTOS//Source/tasks.c **** 
4774:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4775:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4776:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4777:../Middlewares/FreeRTOS//Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4778:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4779:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
4780:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4781:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4782:../Middlewares/FreeRTOS//Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4783:../Middlewares/FreeRTOS//Source/tasks.c **** 
4784:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4785:../Middlewares/FreeRTOS//Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
4786:../Middlewares/FreeRTOS//Source/tasks.c **** 			too. */
4787:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
4788:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4789:../Middlewares/FreeRTOS//Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
4790:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4791:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
4792:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4793:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4794:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4795:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4796:../Middlewares/FreeRTOS//Source/tasks.c **** 
4797:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
4798:../Middlewares/FreeRTOS//Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
4799:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4800:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
4801:../Middlewares/FreeRTOS//Source/tasks.c **** }
 656              		.loc 1 4801 0
 657 0058 0FE0     		b	.L44
 658              	.LVL60:
 659              	.L50:
4721:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 660              		.loc 1 4721 0 discriminator 1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 102


 661 005a 002E     		cmp	r6, #0
 662 005c E9D0     		beq	.L46
4726:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 663              		.loc 1 4726 0
 664 005e 084B     		ldr	r3, .L52+4
 665 0060 1968     		ldr	r1, [r3]
 666 0062 0431     		adds	r1, r1, #4
 667 0064 0A48     		ldr	r0, .L52+20
 668 0066 FFF7FEFF 		bl	vListInsertEnd
 669              	.LVL61:
 670 006a 06E0     		b	.L44
 671              	.LVL62:
 672              	.L51:
4742:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 673              		.loc 1 4742 0
 674 006c 094B     		ldr	r3, .L52+24
 675 006e 1868     		ldr	r0, [r3]
 676 0070 034B     		ldr	r3, .L52+4
 677 0072 1968     		ldr	r1, [r3]
 678 0074 0431     		adds	r1, r1, #4
 679 0076 FFF7FEFF 		bl	vListInsert
 680              	.LVL63:
 681              	.L44:
 682              		.loc 1 4801 0
 683 007a 70BD     		pop	{r4, r5, r6, pc}
 684              	.LVL64:
 685              	.L53:
 686              		.align	2
 687              	.L52:
 688 007c 00000000 		.word	.LANCHOR14
 689 0080 00000000 		.word	.LANCHOR10
 690 0084 00000000 		.word	.LANCHOR13
 691 0088 00000000 		.word	.LANCHOR2
 692 008c 00000000 		.word	.LANCHOR3
 693 0090 00000000 		.word	.LANCHOR0
 694 0094 00000000 		.word	.LANCHOR8
 695              		.cfi_endproc
 696              	.LFE194:
 697              		.fnend
 699              		.section	.text._ZL20prvWriteNameToBufferPcPKc,"ax",%progbits
 700              		.align	1
 701              		.syntax unified
 702              		.thumb
 703              		.thumb_func
 704              		.fpu fpv4-sp-d16
 706              	_ZL20prvWriteNameToBufferPcPKc:
 707              		.fnstart
 708              	.LFB183:
3917:../Middlewares/FreeRTOS//Source/tasks.c **** 	size_t x;
 709              		.loc 1 3917 0
 710              		.cfi_startproc
 711              		@ args = 0, pretend = 0, frame = 0
 712              		@ frame_needed = 0, uses_anonymous_args = 0
 713              	.LVL65:
 714 0000 10B5     		push	{r4, lr}
 715              	.LCFI5:
 716              		.cfi_def_cfa_offset 8
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 103


 717              		.cfi_offset 4, -8
 718              		.cfi_offset 14, -4
 719 0002 0446     		mov	r4, r0
3921:../Middlewares/FreeRTOS//Source/tasks.c **** 
 720              		.loc 1 3921 0
 721 0004 FFF7FEFF 		bl	strcpy
 722              	.LVL66:
3925:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 723              		.loc 1 3925 0
 724 0008 2046     		mov	r0, r4
 725 000a FFF7FEFF 		bl	strlen
 726              	.LVL67:
 727              	.L56:
3925:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 728              		.loc 1 3925 0 is_stmt 0 discriminator 3
 729 000e 1228     		cmp	r0, #18
 730 0010 03D8     		bhi	.L55
3927:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 731              		.loc 1 3927 0 is_stmt 1 discriminator 2
 732 0012 2023     		movs	r3, #32
 733 0014 2354     		strb	r3, [r4, r0]
3925:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 734              		.loc 1 3925 0 discriminator 2
 735 0016 0130     		adds	r0, r0, #1
 736              	.LVL68:
 737 0018 F9E7     		b	.L56
 738              	.L55:
3931:../Middlewares/FreeRTOS//Source/tasks.c **** 
 739              		.loc 1 3931 0
 740 001a 0023     		movs	r3, #0
 741 001c 2354     		strb	r3, [r4, r0]
3935:../Middlewares/FreeRTOS//Source/tasks.c **** 
 742              		.loc 1 3935 0
 743 001e 2044     		add	r0, r0, r4
 744              	.LVL69:
 745 0020 10BD     		pop	{r4, pc}
 746              		.cfi_endproc
 747              	.LFE183:
 748              		.cantunwind
 749              		.fnend
 751              		.section	.text.xTaskCreate,"ax",%progbits
 752              		.align	1
 753              		.global	xTaskCreate
 754              		.syntax unified
 755              		.thumb
 756              		.thumb_func
 757              		.fpu fpv4-sp-d16
 759              	xTaskCreate:
 760              		.fnstart
 761              	.LFB136:
 682:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxNewTCB;
 762              		.loc 1 682 0
 763              		.cfi_startproc
 764              		@ args = 8, pretend = 0, frame = 0
 765              		@ frame_needed = 0, uses_anonymous_args = 0
 766              	.LVL70:
 767 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 104


 768              		.save {r4, r5, r6, r7, r8, r9, lr}
 769              	.LCFI6:
 770              		.cfi_def_cfa_offset 28
 771              		.cfi_offset 4, -28
 772              		.cfi_offset 5, -24
 773              		.cfi_offset 6, -20
 774              		.cfi_offset 7, -16
 775              		.cfi_offset 8, -12
 776              		.cfi_offset 9, -8
 777              		.cfi_offset 14, -4
 778              		.pad #20
 779 0004 85B0     		sub	sp, sp, #20
 780              	.LCFI7:
 781              		.cfi_def_cfa_offset 48
 782 0006 0746     		mov	r7, r0
 783 0008 8846     		mov	r8, r1
 784 000a 1546     		mov	r5, r2
 785 000c 9946     		mov	r9, r3
 786              	.LBB112:
 716:../Middlewares/FreeRTOS//Source/tasks.c **** 
 787              		.loc 1 716 0
 788 000e 9000     		lsls	r0, r2, #2
 789              	.LVL71:
 790 0010 FFF7FEFF 		bl	pvPortMalloc
 791              	.LVL72:
 718:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 792              		.loc 1 718 0
 793 0014 F8B1     		cbz	r0, .L62
 794 0016 0646     		mov	r6, r0
 721:../Middlewares/FreeRTOS//Source/tasks.c **** 
 795              		.loc 1 721 0
 796 0018 6420     		movs	r0, #100
 797              	.LVL73:
 798 001a FFF7FEFF 		bl	pvPortMalloc
 799              	.LVL74:
 723:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 800              		.loc 1 723 0
 801 001e 0446     		mov	r4, r0
 802 0020 A8B1     		cbz	r0, .L60
 726:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 803              		.loc 1 726 0
 804 0022 0663     		str	r6, [r0, #48]
 805              	.LVL75:
 806              	.L61:
 807              	.LBE112:
 742:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 808              		.loc 1 742 0
 809 0024 D4B1     		cbz	r4, .L63
 752:../Middlewares/FreeRTOS//Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 810              		.loc 1 752 0
 811 0026 0023     		movs	r3, #0
 812 0028 0393     		str	r3, [sp, #12]
 813 002a 0294     		str	r4, [sp, #8]
 814 002c 0D9B     		ldr	r3, [sp, #52]
 815 002e 0193     		str	r3, [sp, #4]
 816 0030 0C9B     		ldr	r3, [sp, #48]
 817 0032 0093     		str	r3, [sp]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 105


 818 0034 4B46     		mov	r3, r9
 819 0036 2A46     		mov	r2, r5
 820 0038 4146     		mov	r1, r8
 821 003a 3846     		mov	r0, r7
 822 003c FFF7FEFF 		bl	_ZL20prvInitialiseNewTaskPFvPvEPKcmS_mPS_P19tskTaskControlBlockPK14xMEMORY_REGION
 823              	.LVL76:
 753:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = pdPASS;
 824              		.loc 1 753 0
 825 0040 2046     		mov	r0, r4
 826 0042 FFF7FEFF 		bl	_ZL24prvAddNewTaskToReadyListP19tskTaskControlBlock
 827              	.LVL77:
 754:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 828              		.loc 1 754 0
 829 0046 0120     		movs	r0, #1
 830              	.LVL78:
 831              	.L58:
 762:../Middlewares/FreeRTOS//Source/tasks.c **** 
 832              		.loc 1 762 0
 833 0048 05B0     		add	sp, sp, #20
 834              	.LCFI8:
 835              		.cfi_remember_state
 836              		.cfi_def_cfa_offset 28
 837              		@ sp needed
 838 004a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 839              	.LVL79:
 840              	.L60:
 841              	.LCFI9:
 842              		.cfi_restore_state
 843              	.LBB113:
 732:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 844              		.loc 1 732 0
 845 004e 3046     		mov	r0, r6
 846              	.LVL80:
 847 0050 FFF7FEFF 		bl	vPortFree
 848              	.LVL81:
 849 0054 E6E7     		b	.L61
 850              	.LVL82:
 851              	.L62:
 852              	.LBE113:
 758:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 853              		.loc 1 758 0
 854 0056 4FF0FF30 		mov	r0, #-1
 855              	.LVL83:
 856 005a F5E7     		b	.L58
 857              	.LVL84:
 858              	.L63:
 859 005c 4FF0FF30 		mov	r0, #-1
 860              	.LVL85:
 761:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 861              		.loc 1 761 0
 862 0060 F2E7     		b	.L58
 863              		.cfi_endproc
 864              	.LFE136:
 865              		.fnend
 867              		.section	.text.vTaskDelete,"ax",%progbits
 868              		.align	1
 869              		.global	vTaskDelete
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 106


 870              		.syntax unified
 871              		.thumb
 872              		.thumb_func
 873              		.fpu fpv4-sp-d16
 875              	vTaskDelete:
 876              		.fnstart
 877              	.LFB139:
1049:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
 878              		.loc 1 1049 0
 879              		.cfi_startproc
 880              		@ args = 0, pretend = 0, frame = 0
 881              		@ frame_needed = 0, uses_anonymous_args = 0
 882              	.LVL86:
 883 0000 38B5     		push	{r3, r4, r5, lr}
 884              		.save {r3, r4, r5, lr}
 885              	.LCFI10:
 886              		.cfi_def_cfa_offset 16
 887              		.cfi_offset 3, -16
 888              		.cfi_offset 4, -12
 889              		.cfi_offset 5, -8
 890              		.cfi_offset 14, -4
 891 0002 0446     		mov	r4, r0
1052:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 892              		.loc 1 1052 0
 893 0004 FFF7FEFF 		bl	vPortEnterCritical
 894              	.LVL87:
1056:../Middlewares/FreeRTOS//Source/tasks.c **** 
 895              		.loc 1 1056 0
 896 0008 002C     		cmp	r4, #0
 897 000a 33D0     		beq	.L75
 898              	.LVL88:
 899              	.L66:
1059:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 900              		.loc 1 1059 0 discriminator 4
 901 000c 251D     		adds	r5, r4, #4
 902 000e 2846     		mov	r0, r5
 903 0010 FFF7FEFF 		bl	uxListRemove
 904              	.LVL89:
 905 0014 68B9     		cbnz	r0, .L67
1061:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 906              		.loc 1 1061 0
 907 0016 E16A     		ldr	r1, [r4, #44]
 908 0018 01EB8102 		add	r2, r1, r1, lsl #2
 909 001c 9300     		lsls	r3, r2, #2
 910 001e 264A     		ldr	r2, .L78
 911 0020 D358     		ldr	r3, [r2, r3]
 912 0022 33B9     		cbnz	r3, .L67
1061:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 913              		.loc 1 1061 0 is_stmt 0 discriminator 1
 914 0024 2548     		ldr	r0, .L78+4
 915 0026 0368     		ldr	r3, [r0]
 916 0028 0122     		movs	r2, #1
 917 002a 8A40     		lsls	r2, r2, r1
 918 002c 23EA0203 		bic	r3, r3, r2
 919 0030 0360     		str	r3, [r0]
 920              	.L67:
1069:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 107


 921              		.loc 1 1069 0 is_stmt 1
 922 0032 A36A     		ldr	r3, [r4, #40]
 923 0034 1BB1     		cbz	r3, .L68
1071:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 924              		.loc 1 1071 0
 925 0036 04F11800 		add	r0, r4, #24
 926 003a FFF7FEFF 		bl	uxListRemove
 927              	.LVL90:
 928              	.L68:
1082:../Middlewares/FreeRTOS//Source/tasks.c **** 
 929              		.loc 1 1082 0
 930 003e 204A     		ldr	r2, .L78+8
 931 0040 1368     		ldr	r3, [r2]
 932 0042 0133     		adds	r3, r3, #1
 933 0044 1360     		str	r3, [r2]
1084:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 934              		.loc 1 1084 0
 935 0046 1F4B     		ldr	r3, .L78+12
 936 0048 1B68     		ldr	r3, [r3]
 937 004a A342     		cmp	r3, r4
 938 004c 15D0     		beq	.L76
1107:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 939              		.loc 1 1107 0
 940 004e 1E4A     		ldr	r2, .L78+16
 941 0050 1368     		ldr	r3, [r2]
 942 0052 013B     		subs	r3, r3, #1
 943 0054 1360     		str	r3, [r2]
1108:../Middlewares/FreeRTOS//Source/tasks.c **** 
 944              		.loc 1 1108 0
 945 0056 2046     		mov	r0, r4
 946 0058 FFF7FEFF 		bl	_ZL12prvDeleteTCBP19tskTaskControlBlock
 947              	.LVL91:
1112:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 948              		.loc 1 1112 0
 949 005c FFF7FEFF 		bl	_ZL27prvResetNextTaskUnblockTimev
 950              	.LVL92:
 951              	.L70:
1117:../Middlewares/FreeRTOS//Source/tasks.c **** 
 952              		.loc 1 1117 0
 953 0060 FFF7FEFF 		bl	vPortExitCritical
 954              	.LVL93:
1121:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 955              		.loc 1 1121 0
 956 0064 194B     		ldr	r3, .L78+20
 957 0066 1B68     		ldr	r3, [r3]
 958 0068 1BB1     		cbz	r3, .L65
1123:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 959              		.loc 1 1123 0
 960 006a 164B     		ldr	r3, .L78+12
 961 006c 1B68     		ldr	r3, [r3]
 962 006e A342     		cmp	r3, r4
 963 0070 0CD0     		beq	.L77
 964              	.L65:
1133:../Middlewares/FreeRTOS//Source/tasks.c **** 
 965              		.loc 1 1133 0
 966 0072 38BD     		pop	{r3, r4, r5, pc}
 967              	.LVL94:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 108


 968              	.L75:
1056:../Middlewares/FreeRTOS//Source/tasks.c **** 
 969              		.loc 1 1056 0 discriminator 1
 970 0074 134B     		ldr	r3, .L78+12
 971 0076 1C68     		ldr	r4, [r3]
 972              	.LVL95:
 973 0078 C8E7     		b	.L66
 974              	.LVL96:
 975              	.L76:
1091:../Middlewares/FreeRTOS//Source/tasks.c **** 
 976              		.loc 1 1091 0
 977 007a 2946     		mov	r1, r5
 978 007c 1448     		ldr	r0, .L78+24
 979 007e FFF7FEFF 		bl	vListInsertEnd
 980              	.LVL97:
1096:../Middlewares/FreeRTOS//Source/tasks.c **** 
 981              		.loc 1 1096 0
 982 0082 144A     		ldr	r2, .L78+28
 983 0084 1368     		ldr	r3, [r2]
 984 0086 0133     		adds	r3, r3, #1
 985 0088 1360     		str	r3, [r2]
 986 008a E9E7     		b	.L70
 987              	.L77:
1125:../Middlewares/FreeRTOS//Source/tasks.c **** 				portYIELD_WITHIN_API();
 988              		.loc 1 1125 0
 989 008c 124B     		ldr	r3, .L78+32
 990 008e 1B68     		ldr	r3, [r3]
 991 0090 43B1     		cbz	r3, .L72
 992              	.LBB114:
 993              	.LBB115:
 994              		.loc 2 244 0
 995              		.syntax unified
 996              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 997 0092 4FF01003 			mov r3, #16												
 998 0096 83F31188 		msr basepri, r3											
 999 009a BFF36F8F 		isb														
 1000 009e BFF34F8F 		dsb														
 1001              	
 1002              	@ 0 "" 2
 1003              	.LVL98:
 1004              		.thumb
 1005              		.syntax unified
 1006              	.L73:
 1007 00a2 FEE7     		b	.L73
 1008              	.L72:
 1009              	.LBE115:
 1010              	.LBE114:
1126:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 1011              		.loc 1 1126 0
 1012 00a4 0D4B     		ldr	r3, .L78+36
 1013 00a6 4FF08052 		mov	r2, #268435456
 1014 00aa 1A60     		str	r2, [r3]
 1015              		.syntax unified
 1016              	@ 1126 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 1017 00ac BFF34F8F 		dsb
 1018              	@ 0 "" 2
 1019              	@ 1126 "../Middlewares/FreeRTOS//Source/tasks.c" 1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 109


 1020 00b0 BFF36F8F 		isb
 1021              	@ 0 "" 2
1133:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1022              		.loc 1 1133 0
 1023              		.thumb
 1024              		.syntax unified
 1025 00b4 DDE7     		b	.L65
 1026              	.L79:
 1027 00b6 00BF     		.align	2
 1028              	.L78:
 1029 00b8 00000000 		.word	.LANCHOR4
 1030 00bc 00000000 		.word	.LANCHOR13
 1031 00c0 00000000 		.word	.LANCHOR12
 1032 00c4 00000000 		.word	.LANCHOR10
 1033 00c8 00000000 		.word	.LANCHOR9
 1034 00cc 00000000 		.word	.LANCHOR11
 1035 00d0 00000000 		.word	.LANCHOR7
 1036 00d4 00000000 		.word	.LANCHOR15
 1037 00d8 00000000 		.word	.LANCHOR16
 1038 00dc 04ED00E0 		.word	-536810236
 1039              		.cfi_endproc
 1040              	.LFE139:
 1041              		.fnend
 1043              		.section	.text.eTaskGetState,"ax",%progbits
 1044              		.align	1
 1045              		.global	eTaskGetState
 1046              		.syntax unified
 1047              		.thumb
 1048              		.thumb_func
 1049              		.fpu fpv4-sp-d16
 1051              	eTaskGetState:
 1052              		.fnstart
 1053              	.LFB142:
1270:../Middlewares/FreeRTOS//Source/tasks.c **** 	eTaskState eReturn;
 1054              		.loc 1 1270 0
 1055              		.cfi_startproc
 1056              		@ args = 0, pretend = 0, frame = 0
 1057              		@ frame_needed = 0, uses_anonymous_args = 0
 1058              	.LVL99:
 1059 0000 38B5     		push	{r3, r4, r5, lr}
 1060              		.save {r3, r4, r5, lr}
 1061              	.LCFI11:
 1062              		.cfi_def_cfa_offset 16
 1063              		.cfi_offset 3, -16
 1064              		.cfi_offset 4, -12
 1065              		.cfi_offset 5, -8
 1066              		.cfi_offset 14, -4
 1067              	.LVL100:
1275:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1068              		.loc 1 1275 0
 1069 0002 D0B1     		cbz	r0, .L92
 1070 0004 0546     		mov	r5, r0
1277:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 1071              		.loc 1 1277 0
 1072 0006 194B     		ldr	r3, .L95
 1073 0008 1B68     		ldr	r3, [r3]
 1074 000a 8342     		cmp	r3, r0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 110


 1075 000c 24D0     		beq	.L85
1284:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 1076              		.loc 1 1284 0
 1077 000e FFF7FEFF 		bl	vPortEnterCritical
 1078              	.LVL101:
1286:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 1079              		.loc 1 1286 0
 1080 0012 6C69     		ldr	r4, [r5, #20]
 1081              	.LVL102:
1288:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1082              		.loc 1 1288 0
 1083 0014 FFF7FEFF 		bl	vPortExitCritical
 1084              	.LVL103:
1290:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 1085              		.loc 1 1290 0
 1086 0018 154B     		ldr	r3, .L95+4
 1087 001a 1B68     		ldr	r3, [r3]
 1088 001c A342     		cmp	r3, r4
 1089 001e 1DD0     		beq	.L86
1290:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 1090              		.loc 1 1290 0 is_stmt 0 discriminator 2
 1091 0020 144B     		ldr	r3, .L95+8
 1092 0022 1B68     		ldr	r3, [r3]
 1093 0024 A342     		cmp	r3, r4
 1094 0026 1BD0     		beq	.L87
1298:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 1095              		.loc 1 1298 0 is_stmt 1
 1096 0028 134B     		ldr	r3, .L95+12
 1097 002a 9C42     		cmp	r4, r3
 1098 002c 0ED0     		beq	.L93
1315:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 1099              		.loc 1 1315 0
 1100 002e 134B     		ldr	r3, .L95+16
 1101 0030 9C42     		cmp	r4, r3
 1102 0032 19D0     		beq	.L89
1315:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 1103              		.loc 1 1315 0 is_stmt 0 discriminator 1
 1104 0034 74B1     		cbz	r4, .L94
1328:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 1105              		.loc 1 1328 0 is_stmt 1
 1106 0036 0120     		movs	r0, #1
 1107 0038 0FE0     		b	.L83
 1108              	.LVL104:
 1109              	.L92:
 1110              	.LBB116:
 1111              	.LBB117:
 1112              		.loc 2 244 0
 1113              		.syntax unified
 1114              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1115 003a 4FF01003 			mov r3, #16												
 1116 003e 83F31188 		msr basepri, r3											
 1117 0042 BFF36F8F 		isb														
 1118 0046 BFF34F8F 		dsb														
 1119              	
 1120              	@ 0 "" 2
 1121              	.LVL105:
 1122              		.thumb
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 111


 1123              		.syntax unified
 1124              	.L82:
 1125 004a FEE7     		b	.L82
 1126              	.LVL106:
 1127              	.L93:
 1128              	.LBE117:
 1129              	.LBE116:
1303:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 1130              		.loc 1 1303 0
 1131 004c AB6A     		ldr	r3, [r5, #40]
 1132 004e 4BB9     		cbnz	r3, .L88
1305:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 1133              		.loc 1 1305 0
 1134 0050 0320     		movs	r0, #3
 1135 0052 02E0     		b	.L83
 1136              	.L94:
1320:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 1137              		.loc 1 1320 0
 1138 0054 0420     		movs	r0, #4
 1139 0056 00E0     		b	.L83
 1140              	.LVL107:
 1141              	.L85:
1280:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 1142              		.loc 1 1280 0
 1143 0058 0020     		movs	r0, #0
 1144              	.LVL108:
 1145              	.L83:
1333:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1146              		.loc 1 1333 0
 1147 005a 38BD     		pop	{r3, r4, r5, pc}
 1148              	.LVL109:
 1149              	.L86:
1294:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 1150              		.loc 1 1294 0
 1151 005c 0220     		movs	r0, #2
 1152 005e FCE7     		b	.L83
 1153              	.L87:
 1154 0060 0220     		movs	r0, #2
 1155 0062 FAE7     		b	.L83
 1156              	.L88:
1309:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 1157              		.loc 1 1309 0
 1158 0064 0220     		movs	r0, #2
 1159 0066 F8E7     		b	.L83
 1160              	.L89:
1320:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 1161              		.loc 1 1320 0
 1162 0068 0420     		movs	r0, #4
 1163 006a F6E7     		b	.L83
 1164              	.L96:
 1165              		.align	2
 1166              	.L95:
 1167 006c 00000000 		.word	.LANCHOR10
 1168 0070 00000000 		.word	.LANCHOR2
 1169 0074 00000000 		.word	.LANCHOR8
 1170 0078 00000000 		.word	.LANCHOR0
 1171 007c 00000000 		.word	.LANCHOR7
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 112


 1172              		.cfi_endproc
 1173              	.LFE142:
 1174              		.fnend
 1176              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1177              		.align	1
 1178              		.global	uxTaskPriorityGet
 1179              		.syntax unified
 1180              		.thumb
 1181              		.thumb_func
 1182              		.fpu fpv4-sp-d16
 1184              	uxTaskPriorityGet:
 1185              		.fnstart
 1186              	.LFB143:
1341:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
 1187              		.loc 1 1341 0
 1188              		.cfi_startproc
 1189              		@ args = 0, pretend = 0, frame = 0
 1190              		@ frame_needed = 0, uses_anonymous_args = 0
 1191              	.LVL110:
 1192 0000 10B5     		push	{r4, lr}
 1193              		.save {r4, lr}
 1194              	.LCFI12:
 1195              		.cfi_def_cfa_offset 8
 1196              		.cfi_offset 4, -8
 1197              		.cfi_offset 14, -4
 1198 0002 0446     		mov	r4, r0
1345:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 1199              		.loc 1 1345 0
 1200 0004 FFF7FEFF 		bl	vPortEnterCritical
 1201              	.LVL111:
1349:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1202              		.loc 1 1349 0
 1203 0008 24B1     		cbz	r4, .L100
 1204              	.LVL112:
 1205              	.L98:
1350:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 1206              		.loc 1 1350 0 discriminator 4
 1207 000a E46A     		ldr	r4, [r4, #44]
 1208              	.LVL113:
1352:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1209              		.loc 1 1352 0 discriminator 4
 1210 000c FFF7FEFF 		bl	vPortExitCritical
 1211              	.LVL114:
1355:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1212              		.loc 1 1355 0 discriminator 4
 1213 0010 2046     		mov	r0, r4
 1214 0012 10BD     		pop	{r4, pc}
 1215              	.LVL115:
 1216              	.L100:
1349:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1217              		.loc 1 1349 0 discriminator 1
 1218 0014 014B     		ldr	r3, .L101
 1219 0016 1C68     		ldr	r4, [r3]
 1220              	.LVL116:
 1221 0018 F7E7     		b	.L98
 1222              	.L102:
 1223 001a 00BF     		.align	2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 113


 1224              	.L101:
 1225 001c 00000000 		.word	.LANCHOR10
 1226              		.cfi_endproc
 1227              	.LFE143:
 1228              		.fnend
 1230              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1231              		.align	1
 1232              		.global	uxTaskPriorityGetFromISR
 1233              		.syntax unified
 1234              		.thumb
 1235              		.thumb_func
 1236              		.fpu fpv4-sp-d16
 1238              	uxTaskPriorityGetFromISR:
 1239              		.fnstart
 1240              	.LFB144:
1363:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
 1241              		.loc 1 1363 0
 1242              		.cfi_startproc
 1243              		@ args = 0, pretend = 0, frame = 0
 1244              		@ frame_needed = 0, uses_anonymous_args = 0
 1245              	.LVL117:
 1246 0000 10B5     		push	{r4, lr}
 1247              		.save {r4, lr}
 1248              	.LCFI13:
 1249              		.cfi_def_cfa_offset 8
 1250              		.cfi_offset 4, -8
 1251              		.cfi_offset 14, -4
 1252 0002 0446     		mov	r4, r0
1383:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1253              		.loc 1 1383 0
 1254 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1255              	.LVL118:
 1256              	.LBB118:
 1257              	.LBB119:
 245:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 254:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 1258              		.loc 2 261 0
 1259              		.syntax unified
 1260              	@ 261 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1261 0008 EFF31183 			mrs r3, basepri											
 1262 000c 4FF01002 		mov r2, #16												
 1263 0010 82F31188 		msr basepri, r2											
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 114


 1264 0014 BFF36F8F 		isb														
 1265 0018 BFF34F8F 		dsb														
 1266              	
 1267              	@ 0 "" 2
 1268              		.thumb
 1269              		.syntax unified
 1270              	.LBE119:
 1271              	.LBE118:
1389:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1272              		.loc 1 1389 0
 1273 001c 1CB1     		cbz	r4, .L106
 1274              	.LVL119:
 1275              	.L104:
1390:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 1276              		.loc 1 1390 0 discriminator 4
 1277 001e E06A     		ldr	r0, [r4, #44]
 1278              	.LVL120:
 1279              	.LBB120:
 1280              	.LBB121:
 262:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 266:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 272:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 273:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
 274:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 1281              		.loc 2 274 0 discriminator 4
 1282              		.syntax unified
 1283              	@ 274 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1284 0020 83F31188 			msr basepri, r3	
 1285              	@ 0 "" 2
 1286              	.LVL121:
 1287              		.thumb
 1288              		.syntax unified
 1289              	.LBE121:
 1290              	.LBE120:
1395:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1291              		.loc 1 1395 0 discriminator 4
 1292 0024 10BD     		pop	{r4, pc}
 1293              	.LVL122:
 1294              	.L106:
1389:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1295              		.loc 1 1389 0 discriminator 1
 1296 0026 014A     		ldr	r2, .L107
 1297 0028 1468     		ldr	r4, [r2]
 1298              	.LVL123:
 1299 002a F8E7     		b	.L104
 1300              	.L108:
 1301              		.align	2
 1302              	.L107:
 1303 002c 00000000 		.word	.LANCHOR10
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 115


 1304              		.cfi_endproc
 1305              	.LFE144:
 1306              		.fnend
 1308              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1309              		.align	1
 1310              		.global	vTaskPrioritySet
 1311              		.syntax unified
 1312              		.thumb
 1313              		.thumb_func
 1314              		.fpu fpv4-sp-d16
 1316              	vTaskPrioritySet:
 1317              		.fnstart
 1318              	.LFB145:
1403:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
 1319              		.loc 1 1403 0
 1320              		.cfi_startproc
 1321              		@ args = 0, pretend = 0, frame = 0
 1322              		@ frame_needed = 0, uses_anonymous_args = 0
 1323              	.LVL124:
 1324 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1325              		.save {r3, r4, r5, r6, r7, lr}
 1326              	.LCFI14:
 1327              		.cfi_def_cfa_offset 24
 1328              		.cfi_offset 3, -24
 1329              		.cfi_offset 4, -20
 1330              		.cfi_offset 5, -16
 1331              		.cfi_offset 6, -12
 1332              		.cfi_offset 7, -8
 1333              		.cfi_offset 14, -4
 1334              	.LVL125:
1408:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1335              		.loc 1 1408 0
 1336 0002 0929     		cmp	r1, #9
 1337 0004 08D9     		bls	.L110
 1338              	.LBB122:
 1339              	.LBB123:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1340              		.loc 2 244 0
 1341              		.syntax unified
 1342              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1343 0006 4FF01003 			mov r3, #16												
 1344 000a 83F31188 		msr basepri, r3											
 1345 000e BFF36F8F 		isb														
 1346 0012 BFF34F8F 		dsb														
 1347              	
 1348              	@ 0 "" 2
 1349              	.LVL126:
 1350              		.thumb
 1351              		.syntax unified
 1352              	.L111:
 1353 0016 FEE7     		b	.L111
 1354              	.L110:
 1355 0018 0446     		mov	r4, r0
 1356 001a 0D46     		mov	r5, r1
 1357              	.LVL127:
 1358              	.LBE123:
 1359              	.LBE122:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 116


1420:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 1360              		.loc 1 1420 0
 1361 001c FFF7FEFF 		bl	vPortEnterCritical
 1362              	.LVL128:
1424:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1363              		.loc 1 1424 0
 1364 0020 0CB9     		cbnz	r4, .L112
1424:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1365              		.loc 1 1424 0 is_stmt 0 discriminator 1
 1366 0022 2A4B     		ldr	r3, .L124
 1367 0024 1C68     		ldr	r4, [r3]
 1368              	.LVL129:
 1369              	.L112:
1430:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 1370              		.loc 1 1430 0 is_stmt 1 discriminator 4
 1371 0026 236D     		ldr	r3, [r4, #80]
 1372              	.LVL130:
1438:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 1373              		.loc 1 1438 0 discriminator 4
 1374 0028 9D42     		cmp	r5, r3
 1375 002a 3FD0     		beq	.L113
1442:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 1376              		.loc 1 1442 0
 1377 002c 41D9     		bls	.L114
1444:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 1378              		.loc 1 1444 0
 1379 002e 274A     		ldr	r2, .L124
 1380 0030 1268     		ldr	r2, [r2]
 1381 0032 A242     		cmp	r2, r4
 1382 0034 43D0     		beq	.L120
1449:../Middlewares/FreeRTOS//Source/tasks.c **** 						{
 1383              		.loc 1 1449 0
 1384 0036 254A     		ldr	r2, .L124
 1385 0038 1268     		ldr	r2, [r2]
 1386 003a D26A     		ldr	r2, [r2, #44]
 1387 003c AA42     		cmp	r2, r5
 1388 003e 40D9     		bls	.L121
1406:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1389              		.loc 1 1406 0
 1390 0040 0026     		movs	r6, #0
 1391              	.L115:
 1392              	.LVL131:
1482:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1393              		.loc 1 1482 0
 1394 0042 E76A     		ldr	r7, [r4, #44]
 1395              	.LVL132:
1488:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 1396              		.loc 1 1488 0
 1397 0044 9F42     		cmp	r7, r3
 1398 0046 00D1     		bne	.L116
1490:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 1399              		.loc 1 1490 0
 1400 0048 E562     		str	r5, [r4, #44]
 1401              	.L116:
1498:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 1402              		.loc 1 1498 0
 1403 004a 2565     		str	r5, [r4, #80]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 117


1508:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 1404              		.loc 1 1508 0
 1405 004c A369     		ldr	r3, [r4, #24]
 1406              	.LVL133:
 1407 004e 002B     		cmp	r3, #0
 1408 0050 02DB     		blt	.L117
1510:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 1409              		.loc 1 1510 0
 1410 0052 C5F10A05 		rsb	r5, r5, #10
 1411              	.LVL134:
 1412 0056 A561     		str	r5, [r4, #24]
 1413              	.L117:
1521:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 1414              		.loc 1 1521 0
 1415 0058 6269     		ldr	r2, [r4, #20]
 1416 005a 1D49     		ldr	r1, .L124+4
 1417 005c 1423     		movs	r3, #20
 1418 005e 03FB0713 		mla	r3, r3, r7, r1
 1419 0062 9A42     		cmp	r2, r3
 1420 0064 19D1     		bne	.L118
1526:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 1421              		.loc 1 1526 0
 1422 0066 251D     		adds	r5, r4, #4
 1423 0068 2846     		mov	r0, r5
 1424 006a FFF7FEFF 		bl	uxListRemove
 1425              	.LVL135:
 1426 006e 30B9     		cbnz	r0, .L119
1531:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 1427              		.loc 1 1531 0
 1428 0070 1849     		ldr	r1, .L124+8
 1429 0072 0B68     		ldr	r3, [r1]
 1430 0074 0122     		movs	r2, #1
 1431 0076 BA40     		lsls	r2, r2, r7
 1432 0078 23EA0203 		bic	r3, r3, r2
 1433 007c 0B60     		str	r3, [r1]
 1434              	.L119:
1537:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 1435              		.loc 1 1537 0
 1436 007e 1549     		ldr	r1, .L124+8
 1437 0080 0B68     		ldr	r3, [r1]
 1438 0082 E46A     		ldr	r4, [r4, #44]
 1439              	.LVL136:
 1440 0084 0122     		movs	r2, #1
 1441 0086 A240     		lsls	r2, r2, r4
 1442 0088 1343     		orrs	r3, r3, r2
 1443 008a 0B60     		str	r3, [r1]
 1444 008c 2946     		mov	r1, r5
 1445 008e 104B     		ldr	r3, .L124+4
 1446 0090 1420     		movs	r0, #20
 1447 0092 00FB0430 		mla	r0, r0, r4, r3
 1448 0096 FFF7FEFF 		bl	vListInsertEnd
 1449              	.LVL137:
 1450              	.L118:
1544:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 1451              		.loc 1 1544 0
 1452 009a 3EB1     		cbz	r6, .L113
1546:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 118


 1453              		.loc 1 1546 0
 1454 009c 0E4B     		ldr	r3, .L124+12
 1455 009e 4FF08052 		mov	r2, #268435456
 1456 00a2 1A60     		str	r2, [r3]
 1457              		.syntax unified
 1458              	@ 1546 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 1459 00a4 BFF34F8F 		dsb
 1460              	@ 0 "" 2
 1461              	@ 1546 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 1462 00a8 BFF36F8F 		isb
 1463              	@ 0 "" 2
 1464              	.LVL138:
 1465              		.thumb
 1466              		.syntax unified
 1467              	.L113:
1558:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 1468              		.loc 1 1558 0
 1469 00ac FFF7FEFF 		bl	vPortExitCritical
 1470              	.LVL139:
1559:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1471              		.loc 1 1559 0
 1472 00b0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1473              	.LVL140:
 1474              	.L114:
1465:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 1475              		.loc 1 1465 0
 1476 00b2 064A     		ldr	r2, .L124
 1477 00b4 1268     		ldr	r2, [r2]
 1478 00b6 A242     		cmp	r2, r4
 1479 00b8 05D0     		beq	.L122
1406:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1480              		.loc 1 1406 0
 1481 00ba 0026     		movs	r6, #0
 1482 00bc C1E7     		b	.L115
 1483              	.L120:
 1484 00be 0026     		movs	r6, #0
 1485 00c0 BFE7     		b	.L115
 1486              	.L121:
1451:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
 1487              		.loc 1 1451 0
 1488 00c2 0126     		movs	r6, #1
 1489 00c4 BDE7     		b	.L115
 1490              	.L122:
1470:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 1491              		.loc 1 1470 0
 1492 00c6 0126     		movs	r6, #1
 1493 00c8 BBE7     		b	.L115
 1494              	.L125:
 1495 00ca 00BF     		.align	2
 1496              	.L124:
 1497 00cc 00000000 		.word	.LANCHOR10
 1498 00d0 00000000 		.word	.LANCHOR4
 1499 00d4 00000000 		.word	.LANCHOR13
 1500 00d8 04ED00E0 		.word	-536810236
 1501              		.cfi_endproc
 1502              	.LFE145:
 1503              		.fnend
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 119


 1505              		.section	.text.vTaskResume,"ax",%progbits
 1506              		.align	1
 1507              		.global	vTaskResume
 1508              		.syntax unified
 1509              		.thumb
 1510              		.thumb_func
 1511              		.fpu fpv4-sp-d16
 1513              	vTaskResume:
 1514              		.fnstart
 1515              	.LFB148:
1703:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1516              		.loc 1 1703 0
 1517              		.cfi_startproc
 1518              		@ args = 0, pretend = 0, frame = 0
 1519              		@ frame_needed = 0, uses_anonymous_args = 0
 1520              	.LVL141:
1707:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1521              		.loc 1 1707 0
 1522 0000 70B1     		cbz	r0, .L133
1703:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1523              		.loc 1 1703 0 discriminator 1
 1524 0002 70B5     		push	{r4, r5, r6, lr}
 1525              		.save {r4, r5, r6, lr}
 1526              	.LCFI15:
 1527              		.cfi_def_cfa_offset 16
 1528              		.cfi_offset 4, -16
 1529              		.cfi_offset 5, -12
 1530              		.cfi_offset 6, -8
 1531              		.cfi_offset 14, -4
 1532 0004 0446     		mov	r4, r0
1711:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 1533              		.loc 1 1711 0 discriminator 1
 1534 0006 1B4B     		ldr	r3, .L135
 1535 0008 1B68     		ldr	r3, [r3]
 1536 000a 8342     		cmp	r3, r0
 1537 000c 07D0     		beq	.L126
1713:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 1538              		.loc 1 1713 0
 1539 000e FFF7FEFF 		bl	vPortEnterCritical
 1540              	.LVL142:
1715:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 1541              		.loc 1 1715 0
 1542 0012 2046     		mov	r0, r4
 1543 0014 FFF7FEFF 		bl	_ZL22prvTaskIsTaskSuspendedPv
 1544              	.LVL143:
 1545 0018 58B9     		cbnz	r0, .L134
 1546              	.L130:
1742:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 1547              		.loc 1 1742 0
 1548 001a FFF7FEFF 		bl	vPortExitCritical
 1549              	.LVL144:
 1550              	.L126:
1748:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1551              		.loc 1 1748 0
 1552 001e 70BD     		pop	{r4, r5, r6, pc}
 1553              	.LVL145:
 1554              	.L133:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 120


 1555              	.LCFI16:
 1556              		.cfi_def_cfa_offset 0
 1557              		.cfi_restore 4
 1558              		.cfi_restore 5
 1559              		.cfi_restore 6
 1560              		.cfi_restore 14
 1561              	.LBB124:
 1562              	.LBB125:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1563              		.loc 2 244 0
 1564              		.syntax unified
 1565              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1566 0020 4FF01003 			mov r3, #16												
 1567 0024 83F31188 		msr basepri, r3											
 1568 0028 BFF36F8F 		isb														
 1569 002c BFF34F8F 		dsb														
 1570              	
 1571              	@ 0 "" 2
 1572              	.LVL146:
 1573              		.thumb
 1574              		.syntax unified
 1575              	.L128:
 1576 0030 FEE7     		b	.L128
 1577              	.LVL147:
 1578              	.L134:
 1579              	.LCFI17:
 1580              		.cfi_def_cfa_offset 16
 1581              		.cfi_offset 4, -16
 1582              		.cfi_offset 5, -12
 1583              		.cfi_offset 6, -8
 1584              		.cfi_offset 14, -4
 1585              	.LBE125:
 1586              	.LBE124:
1721:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1587              		.loc 1 1721 0
 1588 0032 261D     		adds	r6, r4, #4
 1589 0034 3046     		mov	r0, r6
 1590 0036 FFF7FEFF 		bl	uxListRemove
 1591              	.LVL148:
1722:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1592              		.loc 1 1722 0
 1593 003a 0F49     		ldr	r1, .L135+4
 1594 003c 0B68     		ldr	r3, [r1]
 1595 003e E56A     		ldr	r5, [r4, #44]
 1596 0040 0122     		movs	r2, #1
 1597 0042 AA40     		lsls	r2, r2, r5
 1598 0044 1343     		orrs	r3, r3, r2
 1599 0046 0B60     		str	r3, [r1]
 1600 0048 3146     		mov	r1, r6
 1601 004a 0C4B     		ldr	r3, .L135+8
 1602 004c 1420     		movs	r0, #20
 1603 004e 00FB0530 		mla	r0, r0, r5, r3
 1604 0052 FFF7FEFF 		bl	vListInsertEnd
 1605              	.LVL149:
1725:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 1606              		.loc 1 1725 0
 1607 0056 E26A     		ldr	r2, [r4, #44]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 121


 1608 0058 064B     		ldr	r3, .L135
 1609 005a 1B68     		ldr	r3, [r3]
 1610 005c DB6A     		ldr	r3, [r3, #44]
 1611 005e 9A42     		cmp	r2, r3
 1612 0060 DBD3     		bcc	.L130
1730:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 1613              		.loc 1 1730 0
 1614 0062 074B     		ldr	r3, .L135+12
 1615 0064 4FF08052 		mov	r2, #268435456
 1616 0068 1A60     		str	r2, [r3]
 1617              		.syntax unified
 1618              	@ 1730 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 1619 006a BFF34F8F 		dsb
 1620              	@ 0 "" 2
 1621              	@ 1730 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 1622 006e BFF36F8F 		isb
 1623              	@ 0 "" 2
 1624              		.thumb
 1625              		.syntax unified
 1626 0072 D2E7     		b	.L130
 1627              	.L136:
 1628              		.align	2
 1629              	.L135:
 1630 0074 00000000 		.word	.LANCHOR10
 1631 0078 00000000 		.word	.LANCHOR13
 1632 007c 00000000 		.word	.LANCHOR4
 1633 0080 04ED00E0 		.word	-536810236
 1634              		.cfi_endproc
 1635              	.LFE148:
 1636              		.fnend
 1638              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1639              		.align	1
 1640              		.global	xTaskResumeFromISR
 1641              		.syntax unified
 1642              		.thumb
 1643              		.thumb_func
 1644              		.fpu fpv4-sp-d16
 1646              	xTaskResumeFromISR:
 1647              		.fnstart
 1648              	.LFB149:
1757:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1649              		.loc 1 1757 0
 1650              		.cfi_startproc
 1651              		@ args = 0, pretend = 0, frame = 0
 1652              		@ frame_needed = 0, uses_anonymous_args = 0
 1653              	.LVL150:
 1654 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1655              		.save {r3, r4, r5, r6, r7, lr}
 1656              	.LCFI18:
 1657              		.cfi_def_cfa_offset 24
 1658              		.cfi_offset 3, -24
 1659              		.cfi_offset 4, -20
 1660              		.cfi_offset 5, -16
 1661              		.cfi_offset 6, -12
 1662              		.cfi_offset 7, -8
 1663              		.cfi_offset 14, -4
 1664              	.LVL151:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 122


1762:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1665              		.loc 1 1762 0
 1666 0002 40B9     		cbnz	r0, .L138
 1667              	.LBB126:
 1668              	.LBB127:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1669              		.loc 2 244 0
 1670              		.syntax unified
 1671              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1672 0004 4FF01003 			mov r3, #16												
 1673 0008 83F31188 		msr basepri, r3											
 1674 000c BFF36F8F 		isb														
 1675 0010 BFF34F8F 		dsb														
 1676              	
 1677              	@ 0 "" 2
 1678              	.LVL152:
 1679              		.thumb
 1680              		.syntax unified
 1681              	.L139:
 1682 0014 FEE7     		b	.L139
 1683              	.L138:
 1684 0016 0446     		mov	r4, r0
 1685              	.LBE127:
 1686              	.LBE126:
1780:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1687              		.loc 1 1780 0
 1688 0018 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1689              	.LVL153:
 1690              	.LBB128:
 1691              	.LBB129:
 261:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1692              		.loc 2 261 0
 1693              		.syntax unified
 1694              	@ 261 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1695 001c EFF31187 			mrs r7, basepri											
 1696 0020 4FF01003 		mov r3, #16												
 1697 0024 83F31188 		msr basepri, r3											
 1698 0028 BFF36F8F 		isb														
 1699 002c BFF34F8F 		dsb														
 1700              	
 1701              	@ 0 "" 2
 1702              		.thumb
 1703              		.syntax unified
 1704              	.LBE129:
 1705              	.LBE128:
1784:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 1706              		.loc 1 1784 0
 1707 0030 2046     		mov	r0, r4
 1708 0032 FFF7FEFF 		bl	_ZL22prvTaskIsTaskSuspendedPv
 1709              	.LVL154:
 1710 0036 0546     		mov	r5, r0
 1711 0038 D8B1     		cbz	r0, .L140
1789:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 1712              		.loc 1 1789 0
 1713 003a 144B     		ldr	r3, .L145
 1714 003c 1B68     		ldr	r3, [r3]
 1715 003e F3B9     		cbnz	r3, .L141
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 123


1793:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 1716              		.loc 1 1793 0
 1717 0040 E26A     		ldr	r2, [r4, #44]
 1718 0042 134B     		ldr	r3, .L145+4
 1719 0044 1B68     		ldr	r3, [r3]
 1720 0046 DB6A     		ldr	r3, [r3, #44]
 1721 0048 9A42     		cmp	r2, r3
 1722 004a 16D2     		bcs	.L143
1758:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1723              		.loc 1 1758 0
 1724 004c 0025     		movs	r5, #0
 1725              	.L142:
 1726              	.LVL155:
1802:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1727              		.loc 1 1802 0
 1728 004e 261D     		adds	r6, r4, #4
 1729 0050 3046     		mov	r0, r6
 1730 0052 FFF7FEFF 		bl	uxListRemove
 1731              	.LVL156:
1803:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 1732              		.loc 1 1803 0
 1733 0056 0F49     		ldr	r1, .L145+8
 1734 0058 0B68     		ldr	r3, [r1]
 1735 005a E46A     		ldr	r4, [r4, #44]
 1736              	.LVL157:
 1737 005c 0122     		movs	r2, #1
 1738 005e A240     		lsls	r2, r2, r4
 1739 0060 1343     		orrs	r3, r3, r2
 1740 0062 0B60     		str	r3, [r1]
 1741 0064 3146     		mov	r1, r6
 1742 0066 0C4B     		ldr	r3, .L145+12
 1743 0068 1420     		movs	r0, #20
 1744 006a 00FB0430 		mla	r0, r0, r4, r3
 1745 006e FFF7FEFF 		bl	vListInsertEnd
 1746              	.LVL158:
 1747              	.L140:
 1748              	.LBB130:
 1749              	.LBB131:
 1750              		.loc 2 274 0
 1751              		.syntax unified
 1752              	@ 274 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1753 0072 87F31188 			msr basepri, r7	
 1754              	@ 0 "" 2
 1755              	.LVL159:
 1756              		.thumb
 1757              		.syntax unified
 1758              	.LBE131:
 1759              	.LBE130:
1821:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1760              		.loc 1 1821 0
 1761 0076 2846     		mov	r0, r5
 1762 0078 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1763              	.LVL160:
 1764              	.L143:
1795:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 1765              		.loc 1 1795 0
 1766 007a 0125     		movs	r5, #1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 124


 1767 007c E7E7     		b	.L142
 1768              	.L141:
1810:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 1769              		.loc 1 1810 0
 1770 007e 04F11801 		add	r1, r4, #24
 1771 0082 0648     		ldr	r0, .L145+16
 1772 0084 FFF7FEFF 		bl	vListInsertEnd
 1773              	.LVL161:
1758:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1774              		.loc 1 1758 0
 1775 0088 0025     		movs	r5, #0
 1776 008a F2E7     		b	.L140
 1777              	.L146:
 1778              		.align	2
 1779              	.L145:
 1780 008c 00000000 		.word	.LANCHOR16
 1781 0090 00000000 		.word	.LANCHOR10
 1782 0094 00000000 		.word	.LANCHOR13
 1783 0098 00000000 		.word	.LANCHOR4
 1784 009c 00000000 		.word	.LANCHOR1
 1785              		.cfi_endproc
 1786              	.LFE149:
 1787              		.fnend
 1789              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1790              		.align	1
 1791              		.global	vTaskStartScheduler
 1792              		.syntax unified
 1793              		.thumb
 1794              		.thumb_func
 1795              		.fpu fpv4-sp-d16
 1797              	vTaskStartScheduler:
 1798              		.fnstart
 1799              	.LFB150:
1827:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xReturn;
 1800              		.loc 1 1827 0
 1801              		.cfi_startproc
 1802              		@ args = 0, pretend = 0, frame = 0
 1803              		@ frame_needed = 0, uses_anonymous_args = 0
 1804 0000 00B5     		push	{lr}
 1805              		.save {lr}
 1806              	.LCFI19:
 1807              		.cfi_def_cfa_offset 4
 1808              		.cfi_offset 14, -4
 1809              		.pad #12
 1810 0002 83B0     		sub	sp, sp, #12
 1811              	.LCFI20:
 1812              		.cfi_def_cfa_offset 16
1860:../Middlewares/FreeRTOS//Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
 1813              		.loc 1 1860 0
 1814 0004 1A4B     		ldr	r3, .L156
 1815 0006 0193     		str	r3, [sp, #4]
 1816 0008 0023     		movs	r3, #0
 1817 000a 0093     		str	r3, [sp]
 1818 000c 8222     		movs	r2, #130
 1819 000e 1949     		ldr	r1, .L156+4
 1820 0010 1948     		ldr	r0, .L156+8
 1821 0012 FFF7FEFF 		bl	xTaskCreate
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 125


 1822              	.LVL162:
1870:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 1823              		.loc 1 1870 0
 1824 0016 0128     		cmp	r0, #1
 1825 0018 07D0     		beq	.L153
 1826              	.L148:
1881:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 1827              		.loc 1 1881 0
 1828 001a 0128     		cmp	r0, #1
 1829 001c 08D0     		beq	.L154
1924:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 1830              		.loc 1 1924 0
 1831 001e B0F1FF3F 		cmp	r0, #-1
 1832 0022 1CD0     		beq	.L155
 1833              	.LVL163:
 1834              	.L147:
1930:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 1835              		.loc 1 1930 0
 1836 0024 03B0     		add	sp, sp, #12
 1837              	.LCFI21:
 1838              		.cfi_remember_state
 1839              		.cfi_def_cfa_offset 4
 1840              		@ sp needed
 1841 0026 5DF804FB 		ldr	pc, [sp], #4
 1842              	.LVL164:
 1843              	.L153:
 1844              	.LCFI22:
 1845              		.cfi_restore_state
1872:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 1846              		.loc 1 1872 0
 1847 002a FFF7FEFF 		bl	xTimerCreateTimerTask
 1848              	.LVL165:
 1849 002e F4E7     		b	.L148
 1850              	.L154:
 1851              	.LBB132:
 1852              	.LBB133:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1853              		.loc 2 244 0
 1854              		.syntax unified
 1855              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1856 0030 4FF01003 			mov r3, #16												
 1857 0034 83F31188 		msr basepri, r3											
 1858 0038 BFF36F8F 		isb														
 1859 003c BFF34F8F 		dsb														
 1860              	
 1861              	@ 0 "" 2
 1862              		.thumb
 1863              		.syntax unified
 1864              	.LBE133:
 1865              	.LBE132:
1898:../Middlewares/FreeRTOS//Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1866              		.loc 1 1898 0
 1867 0040 0E4B     		ldr	r3, .L156+12
 1868 0042 4FF0FF32 		mov	r2, #-1
 1869 0046 1A60     		str	r2, [r3]
1899:../Middlewares/FreeRTOS//Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1870              		.loc 1 1899 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 126


 1871 0048 0D4B     		ldr	r3, .L156+16
 1872 004a 0122     		movs	r2, #1
 1873 004c 1A60     		str	r2, [r3]
1900:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1874              		.loc 1 1900 0
 1875 004e 0023     		movs	r3, #0
 1876 0050 0C4A     		ldr	r2, .L156+20
 1877 0052 1360     		str	r3, [r2]
1905:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1878              		.loc 1 1905 0
 1879 0054 0C4A     		ldr	r2, .L156+24
 1880 0056 1360     		str	r3, [r2]
1909:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 1881              		.loc 1 1909 0
 1882 0058 FFF7FEFF 		bl	xPortStartScheduler
 1883              	.LVL166:
 1884 005c E2E7     		b	.L147
 1885              	.LVL167:
 1886              	.L155:
 1887              	.LBB134:
 1888              	.LBB135:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1889              		.loc 2 244 0
 1890              		.syntax unified
 1891              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1892 005e 4FF01003 			mov r3, #16												
 1893 0062 83F31188 		msr basepri, r3											
 1894 0066 BFF36F8F 		isb														
 1895 006a BFF34F8F 		dsb														
 1896              	
 1897              	@ 0 "" 2
 1898              	.LVL168:
 1899              		.thumb
 1900              		.syntax unified
 1901              	.L151:
 1902 006e FEE7     		b	.L151
 1903              	.L157:
 1904              		.align	2
 1905              	.L156:
 1906 0070 00000000 		.word	.LANCHOR17
 1907 0074 00000000 		.word	.LC0
 1908 0078 00000000 		.word	_ZL11prvIdleTaskPv
 1909 007c 00000000 		.word	.LANCHOR3
 1910 0080 00000000 		.word	.LANCHOR11
 1911 0084 00000000 		.word	.LANCHOR14
 1912 0088 00000000 		.word	ulHighFrequencyTimerTicks
 1913              	.LBE135:
 1914              	.LBE134:
 1915              		.cfi_endproc
 1916              	.LFE150:
 1917              		.fnend
 1919              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1920              		.align	1
 1921              		.global	vTaskEndScheduler
 1922              		.syntax unified
 1923              		.thumb
 1924              		.thumb_func
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 127


 1925              		.fpu fpv4-sp-d16
 1927              	vTaskEndScheduler:
 1928              		.fnstart
 1929              	.LFB151:
1934:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1930              		.loc 1 1934 0
 1931              		.cfi_startproc
 1932              		@ args = 0, pretend = 0, frame = 0
 1933              		@ frame_needed = 0, uses_anonymous_args = 0
 1934 0000 08B5     		push	{r3, lr}
 1935              		.save {r3, lr}
 1936              	.LCFI23:
 1937              		.cfi_def_cfa_offset 8
 1938              		.cfi_offset 3, -8
 1939              		.cfi_offset 14, -4
 1940              	.LBB136:
 1941              	.LBB137:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1942              		.loc 2 244 0
 1943              		.syntax unified
 1944              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1945 0002 4FF01003 			mov r3, #16												
 1946 0006 83F31188 		msr basepri, r3											
 1947 000a BFF36F8F 		isb														
 1948 000e BFF34F8F 		dsb														
 1949              	
 1950              	@ 0 "" 2
 1951              		.thumb
 1952              		.syntax unified
 1953              	.LBE137:
 1954              	.LBE136:
1939:../Middlewares/FreeRTOS//Source/tasks.c **** 	vPortEndScheduler();
 1955              		.loc 1 1939 0
 1956 0012 034B     		ldr	r3, .L160
 1957 0014 0022     		movs	r2, #0
 1958 0016 1A60     		str	r2, [r3]
1940:../Middlewares/FreeRTOS//Source/tasks.c **** }
 1959              		.loc 1 1940 0
 1960 0018 FFF7FEFF 		bl	vPortEndScheduler
 1961              	.LVL169:
1941:../Middlewares/FreeRTOS//Source/tasks.c **** /*----------------------------------------------------------*/
 1962              		.loc 1 1941 0
 1963 001c 08BD     		pop	{r3, pc}
 1964              	.L161:
 1965 001e 00BF     		.align	2
 1966              	.L160:
 1967 0020 00000000 		.word	.LANCHOR11
 1968              		.cfi_endproc
 1969              	.LFE151:
 1970              		.fnend
 1972              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1973              		.align	1
 1974              		.global	vTaskSuspendAll
 1975              		.syntax unified
 1976              		.thumb
 1977              		.thumb_func
 1978              		.fpu fpv4-sp-d16
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 128


 1980              	vTaskSuspendAll:
 1981              		.fnstart
 1982              	.LFB152:
1945:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1983              		.loc 1 1945 0
 1984              		.cfi_startproc
 1985              		@ args = 0, pretend = 0, frame = 0
 1986              		@ frame_needed = 0, uses_anonymous_args = 0
 1987              		@ link register save eliminated.
1950:../Middlewares/FreeRTOS//Source/tasks.c **** }
 1988              		.loc 1 1950 0
 1989 0000 024A     		ldr	r2, .L163
 1990 0002 1368     		ldr	r3, [r2]
 1991 0004 0133     		adds	r3, r3, #1
 1992 0006 1360     		str	r3, [r2]
1951:../Middlewares/FreeRTOS//Source/tasks.c **** /*----------------------------------------------------------*/
 1993              		.loc 1 1951 0
 1994 0008 7047     		bx	lr
 1995              	.L164:
 1996 000a 00BF     		.align	2
 1997              	.L163:
 1998 000c 00000000 		.word	.LANCHOR16
 1999              		.cfi_endproc
 2000              	.LFE152:
 2001              		.cantunwind
 2002              		.fnend
 2004              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2005              		.align	1
 2006              		.global	xTaskGetTickCount
 2007              		.syntax unified
 2008              		.thumb
 2009              		.thumb_func
 2010              		.fpu fpv4-sp-d16
 2012              	xTaskGetTickCount:
 2013              		.fnstart
 2014              	.LFB154:
2128:../Middlewares/FreeRTOS//Source/tasks.c **** TickType_t xTicks;
 2015              		.loc 1 2128 0
 2016              		.cfi_startproc
 2017              		@ args = 0, pretend = 0, frame = 0
 2018              		@ frame_needed = 0, uses_anonymous_args = 0
 2019              		@ link register save eliminated.
2134:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 2020              		.loc 1 2134 0
 2021 0000 014B     		ldr	r3, .L166
 2022 0002 1868     		ldr	r0, [r3]
 2023              	.LVL170:
2139:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 2024              		.loc 1 2139 0
 2025 0004 7047     		bx	lr
 2026              	.L167:
 2027 0006 00BF     		.align	2
 2028              	.L166:
 2029 0008 00000000 		.word	.LANCHOR14
 2030              		.cfi_endproc
 2031              	.LFE154:
 2032              		.cantunwind
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 129


 2033              		.fnend
 2035              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2036              		.align	1
 2037              		.global	xTaskGetTickCountFromISR
 2038              		.syntax unified
 2039              		.thumb
 2040              		.thumb_func
 2041              		.fpu fpv4-sp-d16
 2043              	xTaskGetTickCountFromISR:
 2044              		.fnstart
 2045              	.LFB155:
2143:../Middlewares/FreeRTOS//Source/tasks.c **** TickType_t xReturn;
 2046              		.loc 1 2143 0
 2047              		.cfi_startproc
 2048              		@ args = 0, pretend = 0, frame = 0
 2049              		@ frame_needed = 0, uses_anonymous_args = 0
 2050 0000 08B5     		push	{r3, lr}
 2051              		.save {r3, lr}
 2052              	.LCFI24:
 2053              		.cfi_def_cfa_offset 8
 2054              		.cfi_offset 3, -8
 2055              		.cfi_offset 14, -4
2161:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2056              		.loc 1 2161 0
 2057 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2058              	.LVL171:
2165:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 2059              		.loc 1 2165 0
 2060 0006 014B     		ldr	r3, .L170
 2061 0008 1868     		ldr	r0, [r3]
 2062              	.LVL172:
2170:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 2063              		.loc 1 2170 0
 2064 000a 08BD     		pop	{r3, pc}
 2065              	.L171:
 2066              		.align	2
 2067              	.L170:
 2068 000c 00000000 		.word	.LANCHOR14
 2069              		.cfi_endproc
 2070              	.LFE155:
 2071              		.fnend
 2073              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2074              		.align	1
 2075              		.global	uxTaskGetNumberOfTasks
 2076              		.syntax unified
 2077              		.thumb
 2078              		.thumb_func
 2079              		.fpu fpv4-sp-d16
 2081              	uxTaskGetNumberOfTasks:
 2082              		.fnstart
 2083              	.LFB156:
2174:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 2084              		.loc 1 2174 0
 2085              		.cfi_startproc
 2086              		@ args = 0, pretend = 0, frame = 0
 2087              		@ frame_needed = 0, uses_anonymous_args = 0
 2088              		@ link register save eliminated.
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 130


2177:../Middlewares/FreeRTOS//Source/tasks.c **** }
 2089              		.loc 1 2177 0
 2090 0000 014B     		ldr	r3, .L173
 2091 0002 1868     		ldr	r0, [r3]
2178:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 2092              		.loc 1 2178 0
 2093 0004 7047     		bx	lr
 2094              	.L174:
 2095 0006 00BF     		.align	2
 2096              	.L173:
 2097 0008 00000000 		.word	.LANCHOR9
 2098              		.cfi_endproc
 2099              	.LFE156:
 2100              		.cantunwind
 2101              		.fnend
 2103              		.section	.text.pcTaskGetName,"ax",%progbits
 2104              		.align	1
 2105              		.global	pcTaskGetName
 2106              		.syntax unified
 2107              		.thumb
 2108              		.thumb_func
 2109              		.fpu fpv4-sp-d16
 2111              	pcTaskGetName:
 2112              		.fnstart
 2113              	.LFB157:
2182:../Middlewares/FreeRTOS//Source/tasks.c **** TCB_t *pxTCB;
 2114              		.loc 1 2182 0
 2115              		.cfi_startproc
 2116              		@ args = 0, pretend = 0, frame = 0
 2117              		@ frame_needed = 0, uses_anonymous_args = 0
 2118              		@ link register save eliminated.
 2119              	.LVL173:
2187:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxTCB );
 2120              		.loc 1 2187 0
 2121 0000 0346     		mov	r3, r0
 2122 0002 18B1     		cbz	r0, .L179
 2123              	.LVL174:
 2124              	.L176:
2188:../Middlewares/FreeRTOS//Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2125              		.loc 1 2188 0 discriminator 4
 2126 0004 2BB1     		cbz	r3, .L180
 2127              	.LVL175:
2190:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 2128              		.loc 1 2190 0
 2129 0006 03F13400 		add	r0, r3, #52
 2130 000a 7047     		bx	lr
 2131              	.LVL176:
 2132              	.L179:
2187:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxTCB );
 2133              		.loc 1 2187 0 discriminator 1
 2134 000c 054B     		ldr	r3, .L181
 2135 000e 1B68     		ldr	r3, [r3]
 2136              	.LVL177:
 2137 0010 F8E7     		b	.L176
 2138              	.LVL178:
 2139              	.L180:
 2140              	.LBB138:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 131


 2141              	.LBB139:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2142              		.loc 2 244 0
 2143              		.syntax unified
 2144              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2145 0012 4FF01003 			mov r3, #16												
 2146 0016 83F31188 		msr basepri, r3											
 2147 001a BFF36F8F 		isb														
 2148 001e BFF34F8F 		dsb														
 2149              	
 2150              	@ 0 "" 2
 2151              	.LVL179:
 2152              		.thumb
 2153              		.syntax unified
 2154              	.L178:
 2155 0022 FEE7     		b	.L178
 2156              	.L182:
 2157              		.align	2
 2158              	.L181:
 2159 0024 00000000 		.word	.LANCHOR10
 2160              	.LBE139:
 2161              	.LBE138:
 2162              		.cfi_endproc
 2163              	.LFE157:
 2164              		.cantunwind
 2165              		.fnend
 2167              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2168              		.align	1
 2169              		.global	xTaskIncrementTick
 2170              		.syntax unified
 2171              		.thumb
 2172              		.thumb_func
 2173              		.fpu fpv4-sp-d16
 2175              	xTaskIncrementTick:
 2176              		.fnstart
 2177              	.LFB159:
2500:../Middlewares/FreeRTOS//Source/tasks.c **** TCB_t * pxTCB;
 2178              		.loc 1 2500 0
 2179              		.cfi_startproc
 2180              		@ args = 0, pretend = 0, frame = 0
 2181              		@ frame_needed = 0, uses_anonymous_args = 0
 2182 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2183              		.save {r3, r4, r5, r6, r7, lr}
 2184              	.LCFI25:
 2185              		.cfi_def_cfa_offset 24
 2186              		.cfi_offset 3, -24
 2187              		.cfi_offset 4, -20
 2188              		.cfi_offset 5, -16
 2189              		.cfi_offset 6, -12
 2190              		.cfi_offset 7, -8
 2191              		.cfi_offset 14, -4
 2192              	.LVL180:
 2193              	.LBB140:
2509:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 2194              		.loc 1 2509 0
 2195 0002 3A4B     		ldr	r3, .L204
 2196 0004 1B68     		ldr	r3, [r3]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 132


 2197 0006 002B     		cmp	r3, #0
 2198 0008 64D1     		bne	.L184
 2199              	.LBB141:
2513:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2200              		.loc 1 2513 0
 2201 000a 394B     		ldr	r3, .L204+4
 2202 000c 1D68     		ldr	r5, [r3]
 2203 000e 0135     		adds	r5, r5, #1
 2204              	.LVL181:
2517:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2205              		.loc 1 2517 0
 2206 0010 1D60     		str	r5, [r3]
 2207              	.LBB142:
2519:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 2208              		.loc 1 2519 0
 2209 0012 C5B9     		cbnz	r5, .L185
 2210              	.LBB143:
2521:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 2211              		.loc 1 2521 0
 2212 0014 374B     		ldr	r3, .L204+8
 2213 0016 1B68     		ldr	r3, [r3]
 2214 0018 1B68     		ldr	r3, [r3]
 2215 001a 43B1     		cbz	r3, .L186
 2216              	.LBB144:
 2217              	.LBB145:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2218              		.loc 2 244 0
 2219              		.syntax unified
 2220              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2221 001c 4FF01003 			mov r3, #16												
 2222 0020 83F31188 		msr basepri, r3											
 2223 0024 BFF36F8F 		isb														
 2224 0028 BFF34F8F 		dsb														
 2225              	
 2226              	@ 0 "" 2
 2227              	.LVL182:
 2228              		.thumb
 2229              		.syntax unified
 2230              	.L187:
 2231 002c FEE7     		b	.L187
 2232              	.L186:
 2233              	.LBE145:
 2234              	.LBE144:
2521:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 2235              		.loc 1 2521 0 discriminator 2
 2236 002e 314A     		ldr	r2, .L204+8
 2237 0030 1168     		ldr	r1, [r2]
 2238              	.LVL183:
 2239 0032 314B     		ldr	r3, .L204+12
 2240 0034 1868     		ldr	r0, [r3]
 2241 0036 1060     		str	r0, [r2]
 2242 0038 1960     		str	r1, [r3]
 2243 003a 304A     		ldr	r2, .L204+16
 2244 003c 1368     		ldr	r3, [r2]
 2245 003e 0133     		adds	r3, r3, #1
 2246 0040 1360     		str	r3, [r2]
 2247 0042 FFF7FEFF 		bl	_ZL27prvResetNextTaskUnblockTimev
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 133


 2248              	.LVL184:
 2249              	.L185:
 2250              	.LBE143:
 2251              	.LBE142:
2532:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 2252              		.loc 1 2532 0
 2253 0046 2E4B     		ldr	r3, .L204+20
 2254 0048 1B68     		ldr	r3, [r3]
 2255 004a AB42     		cmp	r3, r5
 2256 004c 38D9     		bls	.L197
 2257              	.LBE141:
 2258              	.LBE140:
2503:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2259              		.loc 1 2503 0
 2260 004e 0024     		movs	r4, #0
 2261              	.LVL185:
 2262              	.L189:
 2263              	.LBB148:
 2264              	.LBB146:
2615:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 2265              		.loc 1 2615 0
 2266 0050 2C4B     		ldr	r3, .L204+24
 2267 0052 1B68     		ldr	r3, [r3]
 2268 0054 DB6A     		ldr	r3, [r3, #44]
 2269 0056 03EB8303 		add	r3, r3, r3, lsl #2
 2270 005a 9A00     		lsls	r2, r3, #2
 2271 005c 2A4B     		ldr	r3, .L204+28
 2272 005e 9B58     		ldr	r3, [r3, r2]
 2273 0060 012B     		cmp	r3, #1
 2274 0062 3CD9     		bls	.L195
2617:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 2275              		.loc 1 2617 0
 2276 0064 0124     		movs	r4, #1
 2277              	.LVL186:
 2278 0066 3AE0     		b	.L195
 2279              	.LVL187:
 2280              	.L198:
2598:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
 2281              		.loc 1 2598 0
 2282 0068 0124     		movs	r4, #1
 2283              	.LVL188:
 2284              	.L188:
2536:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 2285              		.loc 1 2536 0
 2286 006a 224B     		ldr	r3, .L204+8
 2287 006c 1B68     		ldr	r3, [r3]
 2288 006e 1B68     		ldr	r3, [r3]
 2289 0070 43B3     		cbz	r3, .L202
2552:../Middlewares/FreeRTOS//Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2290              		.loc 1 2552 0
 2291 0072 204B     		ldr	r3, .L204+8
 2292 0074 1B68     		ldr	r3, [r3]
 2293 0076 DB68     		ldr	r3, [r3, #12]
 2294 0078 DE68     		ldr	r6, [r3, #12]
 2295              	.LVL189:
2553:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2296              		.loc 1 2553 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 134


 2297 007a 7368     		ldr	r3, [r6, #4]
 2298              	.LVL190:
2555:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 2299              		.loc 1 2555 0
 2300 007c 9D42     		cmp	r5, r3
 2301 007e 26D3     		bcc	.L203
2571:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2302              		.loc 1 2571 0
 2303 0080 371D     		adds	r7, r6, #4
 2304 0082 3846     		mov	r0, r7
 2305 0084 FFF7FEFF 		bl	uxListRemove
 2306              	.LVL191:
2575:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 2307              		.loc 1 2575 0
 2308 0088 B36A     		ldr	r3, [r6, #40]
 2309 008a 1BB1     		cbz	r3, .L192
2577:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 2310              		.loc 1 2577 0
 2311 008c 06F11800 		add	r0, r6, #24
 2312 0090 FFF7FEFF 		bl	uxListRemove
 2313              	.LVL192:
 2314              	.L192:
2586:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2315              		.loc 1 2586 0
 2316 0094 1D48     		ldr	r0, .L204+32
 2317 0096 0268     		ldr	r2, [r0]
 2318 0098 F36A     		ldr	r3, [r6, #44]
 2319 009a 0121     		movs	r1, #1
 2320 009c 9940     		lsls	r1, r1, r3
 2321 009e 0A43     		orrs	r2, r2, r1
 2322 00a0 0260     		str	r2, [r0]
 2323 00a2 03EB8303 		add	r3, r3, r3, lsl #2
 2324 00a6 9A00     		lsls	r2, r3, #2
 2325 00a8 3946     		mov	r1, r7
 2326 00aa 1748     		ldr	r0, .L204+28
 2327 00ac 1044     		add	r0, r0, r2
 2328 00ae FFF7FEFF 		bl	vListInsertEnd
 2329              	.LVL193:
2596:../Middlewares/FreeRTOS//Source/tasks.c **** 						{
 2330              		.loc 1 2596 0
 2331 00b2 F26A     		ldr	r2, [r6, #44]
 2332 00b4 134B     		ldr	r3, .L204+24
 2333 00b6 1B68     		ldr	r3, [r3]
 2334 00b8 DB6A     		ldr	r3, [r3, #44]
 2335 00ba 9A42     		cmp	r2, r3
 2336 00bc D4D2     		bcs	.L198
 2337 00be D4E7     		b	.L188
 2338              	.LVL194:
 2339              	.L197:
 2340              	.LBE146:
 2341              	.LBE148:
2503:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2342              		.loc 1 2503 0
 2343 00c0 0024     		movs	r4, #0
 2344 00c2 D2E7     		b	.L188
 2345              	.LVL195:
 2346              	.L202:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 135


 2347              	.LBB149:
 2348              	.LBB147:
2543:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
 2349              		.loc 1 2543 0
 2350 00c4 0E4B     		ldr	r3, .L204+20
 2351 00c6 4FF0FF32 		mov	r2, #-1
 2352 00ca 1A60     		str	r2, [r3]
2544:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 2353              		.loc 1 2544 0
 2354 00cc C0E7     		b	.L189
 2355              	.LVL196:
 2356              	.L203:
2562:../Middlewares/FreeRTOS//Source/tasks.c **** 						break;
 2357              		.loc 1 2562 0
 2358 00ce 0C4A     		ldr	r2, .L204+20
 2359 00d0 1360     		str	r3, [r2]
2563:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 2360              		.loc 1 2563 0
 2361 00d2 BDE7     		b	.L189
 2362              	.LVL197:
 2363              	.L184:
 2364              	.LBE147:
2643:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2365              		.loc 1 2643 0
 2366 00d4 0E4A     		ldr	r2, .L204+36
 2367 00d6 1368     		ldr	r3, [r2]
 2368 00d8 0133     		adds	r3, r3, #1
 2369 00da 1360     		str	r3, [r2]
 2370              	.LBE149:
2503:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2371              		.loc 1 2503 0
 2372 00dc 0024     		movs	r4, #0
 2373              	.LVL198:
 2374              	.L195:
2656:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 2375              		.loc 1 2656 0
 2376 00de 0D4B     		ldr	r3, .L204+40
 2377 00e0 1B68     		ldr	r3, [r3]
 2378 00e2 03B1     		cbz	r3, .L183
2658:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 2379              		.loc 1 2658 0
 2380 00e4 0124     		movs	r4, #1
 2381              	.LVL199:
 2382              	.L183:
2668:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 2383              		.loc 1 2668 0
 2384 00e6 2046     		mov	r0, r4
 2385 00e8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2386              	.L205:
 2387 00ea 00BF     		.align	2
 2388              	.L204:
 2389 00ec 00000000 		.word	.LANCHOR16
 2390 00f0 00000000 		.word	.LANCHOR14
 2391 00f4 00000000 		.word	.LANCHOR2
 2392 00f8 00000000 		.word	.LANCHOR8
 2393 00fc 00000000 		.word	.LANCHOR18
 2394 0100 00000000 		.word	.LANCHOR3
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 136


 2395 0104 00000000 		.word	.LANCHOR10
 2396 0108 00000000 		.word	.LANCHOR4
 2397 010c 00000000 		.word	.LANCHOR13
 2398 0110 00000000 		.word	.LANCHOR19
 2399 0114 00000000 		.word	.LANCHOR20
 2400              		.cfi_endproc
 2401              	.LFE159:
 2402              		.fnend
 2404              		.section	.text.xTaskResumeAll,"ax",%progbits
 2405              		.align	1
 2406              		.global	xTaskResumeAll
 2407              		.syntax unified
 2408              		.thumb
 2409              		.thumb_func
 2410              		.fpu fpv4-sp-d16
 2412              	xTaskResumeAll:
 2413              		.fnstart
 2414              	.LFB153:
2018:../Middlewares/FreeRTOS//Source/tasks.c **** TCB_t *pxTCB = NULL;
 2415              		.loc 1 2018 0
 2416              		.cfi_startproc
 2417              		@ args = 0, pretend = 0, frame = 0
 2418              		@ frame_needed = 0, uses_anonymous_args = 0
 2419 0000 38B5     		push	{r3, r4, r5, lr}
 2420              		.save {r3, r4, r5, lr}
 2421              	.LCFI26:
 2422              		.cfi_def_cfa_offset 16
 2423              		.cfi_offset 3, -16
 2424              		.cfi_offset 4, -12
 2425              		.cfi_offset 5, -8
 2426              		.cfi_offset 14, -4
 2427              	.LVL200:
2024:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2428              		.loc 1 2024 0
 2429 0002 334B     		ldr	r3, .L221
 2430 0004 1B68     		ldr	r3, [r3]
 2431 0006 43B9     		cbnz	r3, .L207
 2432              	.LBB150:
 2433              	.LBB151:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2434              		.loc 2 244 0
 2435              		.syntax unified
 2436              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2437 0008 4FF01003 			mov r3, #16												
 2438 000c 83F31188 		msr basepri, r3											
 2439 0010 BFF36F8F 		isb														
 2440 0014 BFF34F8F 		dsb														
 2441              	
 2442              	@ 0 "" 2
 2443              	.LVL201:
 2444              		.thumb
 2445              		.syntax unified
 2446              	.L208:
 2447 0018 FEE7     		b	.L208
 2448              	.L207:
 2449              	.LBE151:
 2450              	.LBE150:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 137


2031:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 2451              		.loc 1 2031 0
 2452 001a FFF7FEFF 		bl	vPortEnterCritical
 2453              	.LVL202:
 2454              	.LBB152:
2033:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2455              		.loc 1 2033 0
 2456 001e 2C4B     		ldr	r3, .L221
 2457 0020 1A68     		ldr	r2, [r3]
 2458 0022 013A     		subs	r2, r2, #1
 2459 0024 1A60     		str	r2, [r3]
 2460              	.LBB153:
2035:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 2461              		.loc 1 2035 0
 2462 0026 1B68     		ldr	r3, [r3]
 2463 0028 002B     		cmp	r3, #0
 2464 002a 4DD1     		bne	.L217
 2465              	.LBB154:
2037:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 2466              		.loc 1 2037 0
 2467 002c 294B     		ldr	r3, .L221+4
 2468 002e 1B68     		ldr	r3, [r3]
 2469 0030 23B9     		cbnz	r3, .L218
 2470              	.LBE154:
 2471              	.LBE153:
 2472              	.LBE152:
2020:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2473              		.loc 1 2020 0
 2474 0032 0024     		movs	r4, #0
 2475              	.LVL203:
 2476              	.L209:
2121:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2477              		.loc 1 2121 0
 2478 0034 FFF7FEFF 		bl	vPortExitCritical
 2479              	.LVL204:
2124:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 2480              		.loc 1 2124 0
 2481 0038 2046     		mov	r0, r4
 2482 003a 38BD     		pop	{r3, r4, r5, pc}
 2483              	.LVL205:
 2484              	.L218:
2019:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2485              		.loc 1 2019 0
 2486 003c 0024     		movs	r4, #0
 2487              	.LVL206:
 2488              	.L210:
 2489              	.LBB159:
 2490              	.LBB158:
 2491              	.LBB157:
 2492              	.LBB155:
2041:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 2493              		.loc 1 2041 0
 2494 003e 264B     		ldr	r3, .L221+8
 2495 0040 1B68     		ldr	r3, [r3]
 2496 0042 1BB3     		cbz	r3, .L211
2043:../Middlewares/FreeRTOS//Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2497              		.loc 1 2043 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 138


 2498 0044 244B     		ldr	r3, .L221+8
 2499 0046 DB68     		ldr	r3, [r3, #12]
 2500 0048 DC68     		ldr	r4, [r3, #12]
 2501              	.LVL207:
2044:../Middlewares/FreeRTOS//Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2502              		.loc 1 2044 0
 2503 004a 04F11800 		add	r0, r4, #24
 2504 004e FFF7FEFF 		bl	uxListRemove
 2505              	.LVL208:
2045:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2506              		.loc 1 2045 0
 2507 0052 251D     		adds	r5, r4, #4
 2508 0054 2846     		mov	r0, r5
 2509 0056 FFF7FEFF 		bl	uxListRemove
 2510              	.LVL209:
2046:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2511              		.loc 1 2046 0
 2512 005a 2048     		ldr	r0, .L221+12
 2513 005c 0268     		ldr	r2, [r0]
 2514 005e E36A     		ldr	r3, [r4, #44]
 2515 0060 0121     		movs	r1, #1
 2516 0062 9940     		lsls	r1, r1, r3
 2517 0064 0A43     		orrs	r2, r2, r1
 2518 0066 0260     		str	r2, [r0]
 2519 0068 03EB8303 		add	r3, r3, r3, lsl #2
 2520 006c 9A00     		lsls	r2, r3, #2
 2521 006e 2946     		mov	r1, r5
 2522 0070 1B48     		ldr	r0, .L221+16
 2523 0072 1044     		add	r0, r0, r2
 2524 0074 FFF7FEFF 		bl	vListInsertEnd
 2525              	.LVL210:
2050:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 2526              		.loc 1 2050 0
 2527 0078 E26A     		ldr	r2, [r4, #44]
 2528 007a 1A4B     		ldr	r3, .L221+20
 2529 007c 1B68     		ldr	r3, [r3]
 2530 007e DB6A     		ldr	r3, [r3, #44]
 2531 0080 9A42     		cmp	r2, r3
 2532 0082 DCD3     		bcc	.L210
2052:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 2533              		.loc 1 2052 0
 2534 0084 184B     		ldr	r3, .L221+24
 2535 0086 0122     		movs	r2, #1
 2536 0088 1A60     		str	r2, [r3]
 2537 008a D8E7     		b	.L210
 2538              	.L211:
2060:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 2539              		.loc 1 2060 0
 2540 008c 0CB1     		cbz	r4, .L213
2068:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 2541              		.loc 1 2068 0
 2542 008e FFF7FEFF 		bl	_ZL27prvResetNextTaskUnblockTimev
 2543              	.LVL211:
 2544              	.L213:
 2545              	.LBB156:
2076:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2546              		.loc 1 2076 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 139


 2547 0092 164B     		ldr	r3, .L221+28
 2548 0094 1C68     		ldr	r4, [r3]
 2549              	.LVL212:
2078:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 2550              		.loc 1 2078 0
 2551 0096 54B1     		cbz	r4, .L214
 2552              	.L216:
2082:../Middlewares/FreeRTOS//Source/tasks.c **** 							{
 2553              		.loc 1 2082 0
 2554 0098 FFF7FEFF 		bl	xTaskIncrementTick
 2555              	.LVL213:
 2556 009c 10B1     		cbz	r0, .L215
2084:../Middlewares/FreeRTOS//Source/tasks.c **** 							}
 2557              		.loc 1 2084 0
 2558 009e 124B     		ldr	r3, .L221+24
 2559 00a0 0122     		movs	r2, #1
 2560 00a2 1A60     		str	r2, [r3]
 2561              	.L215:
 2562              	.LVL214:
2091:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2563              		.loc 1 2091 0
 2564 00a4 013C     		subs	r4, r4, #1
 2565              	.LVL215:
 2566 00a6 F7D1     		bne	.L216
2093:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 2567              		.loc 1 2093 0
 2568 00a8 104B     		ldr	r3, .L221+28
 2569 00aa 0022     		movs	r2, #0
 2570 00ac 1A60     		str	r2, [r3]
 2571              	.L214:
 2572              	.LBE156:
2101:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 2573              		.loc 1 2101 0
 2574 00ae 0E4B     		ldr	r3, .L221+24
 2575 00b0 1B68     		ldr	r3, [r3]
 2576 00b2 5BB1     		cbz	r3, .L219
 2577              	.LVL216:
2108:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 2578              		.loc 1 2108 0
 2579 00b4 0E4B     		ldr	r3, .L221+32
 2580 00b6 4FF08052 		mov	r2, #268435456
 2581 00ba 1A60     		str	r2, [r3]
 2582              		.syntax unified
 2583              	@ 2108 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 2584 00bc BFF34F8F 		dsb
 2585              	@ 0 "" 2
 2586              	@ 2108 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 2587 00c0 BFF36F8F 		isb
 2588              	@ 0 "" 2
2105:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 2589              		.loc 1 2105 0
 2590              		.thumb
 2591              		.syntax unified
 2592 00c4 0124     		movs	r4, #1
 2593              	.LVL217:
 2594 00c6 B5E7     		b	.L209
 2595              	.LVL218:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 140


 2596              	.L217:
 2597              	.LBE155:
 2598              	.LBE157:
 2599              	.LBE158:
 2600              	.LBE159:
2020:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2601              		.loc 1 2020 0
 2602 00c8 0024     		movs	r4, #0
 2603 00ca B3E7     		b	.L209
 2604              	.LVL219:
 2605              	.L219:
 2606 00cc 0024     		movs	r4, #0
 2607              	.LVL220:
 2608 00ce B1E7     		b	.L209
 2609              	.L222:
 2610              		.align	2
 2611              	.L221:
 2612 00d0 00000000 		.word	.LANCHOR16
 2613 00d4 00000000 		.word	.LANCHOR9
 2614 00d8 00000000 		.word	.LANCHOR1
 2615 00dc 00000000 		.word	.LANCHOR13
 2616 00e0 00000000 		.word	.LANCHOR4
 2617 00e4 00000000 		.word	.LANCHOR10
 2618 00e8 00000000 		.word	.LANCHOR20
 2619 00ec 00000000 		.word	.LANCHOR19
 2620 00f0 04ED00E0 		.word	-536810236
 2621              		.cfi_endproc
 2622              	.LFE153:
 2623              		.fnend
 2625              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2626              		.align	1
 2627              		.global	vTaskDelayUntil
 2628              		.syntax unified
 2629              		.thumb
 2630              		.thumb_func
 2631              		.fpu fpv4-sp-d16
 2633              	vTaskDelayUntil:
 2634              		.fnstart
 2635              	.LFB140:
1141:../Middlewares/FreeRTOS//Source/tasks.c **** 	TickType_t xTimeToWake;
 2636              		.loc 1 1141 0
 2637              		.cfi_startproc
 2638              		@ args = 0, pretend = 0, frame = 0
 2639              		@ frame_needed = 0, uses_anonymous_args = 0
 2640              	.LVL221:
 2641 0000 38B5     		push	{r3, r4, r5, lr}
 2642              		.save {r3, r4, r5, lr}
 2643              	.LCFI27:
 2644              		.cfi_def_cfa_offset 16
 2645              		.cfi_offset 3, -16
 2646              		.cfi_offset 4, -12
 2647              		.cfi_offset 5, -8
 2648              		.cfi_offset 14, -4
 2649              	.LVL222:
1145:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2650              		.loc 1 1145 0
 2651 0002 50B1     		cbz	r0, .L239
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 141


 2652 0004 0546     		mov	r5, r0
1146:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2653              		.loc 1 1146 0
 2654 0006 89B9     		cbnz	r1, .L226
 2655              	.LBB160:
 2656              	.LBB161:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2657              		.loc 2 244 0
 2658              		.syntax unified
 2659              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2660 0008 4FF01003 			mov r3, #16												
 2661 000c 83F31188 		msr basepri, r3											
 2662 0010 BFF36F8F 		isb														
 2663 0014 BFF34F8F 		dsb														
 2664              	
 2665              	@ 0 "" 2
 2666              	.LVL223:
 2667              		.thumb
 2668              		.syntax unified
 2669              	.L227:
 2670 0018 FEE7     		b	.L227
 2671              	.L239:
 2672              	.LBE161:
 2673              	.LBE160:
 2674              	.LBB162:
 2675              	.LBB163:
 2676              		.syntax unified
 2677              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2678 001a 4FF01003 			mov r3, #16												
 2679 001e 83F31188 		msr basepri, r3											
 2680 0022 BFF36F8F 		isb														
 2681 0026 BFF34F8F 		dsb														
 2682              	
 2683              	@ 0 "" 2
 2684              	.LVL224:
 2685              		.thumb
 2686              		.syntax unified
 2687              	.L225:
 2688 002a FEE7     		b	.L225
 2689              	.L226:
 2690              	.LBE163:
 2691              	.LBE162:
1147:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2692              		.loc 1 1147 0
 2693 002c 1A4B     		ldr	r3, .L240
 2694 002e 1B68     		ldr	r3, [r3]
 2695 0030 43B1     		cbz	r3, .L228
 2696              	.LBB164:
 2697              	.LBB165:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2698              		.loc 2 244 0
 2699              		.syntax unified
 2700              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2701 0032 4FF01003 			mov r3, #16												
 2702 0036 83F31188 		msr basepri, r3											
 2703 003a BFF36F8F 		isb														
 2704 003e BFF34F8F 		dsb														
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 142


 2705              	
 2706              	@ 0 "" 2
 2707              	.LVL225:
 2708              		.thumb
 2709              		.syntax unified
 2710              	.L229:
 2711 0042 FEE7     		b	.L229
 2712              	.L228:
 2713 0044 0C46     		mov	r4, r1
 2714              	.LBE165:
 2715              	.LBE164:
1149:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 2716              		.loc 1 1149 0
 2717 0046 FFF7FEFF 		bl	vTaskSuspendAll
 2718              	.LVL226:
 2719              	.LBB166:
1153:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2720              		.loc 1 1153 0
 2721 004a 144B     		ldr	r3, .L240+4
 2722 004c 1868     		ldr	r0, [r3]
 2723              	.LVL227:
1156:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2724              		.loc 1 1156 0
 2725 004e 2A68     		ldr	r2, [r5]
 2726 0050 1444     		add	r4, r4, r2
 2727              	.LVL228:
1158:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 2728              		.loc 1 1158 0
 2729 0052 8242     		cmp	r2, r0
 2730 0054 18D9     		bls	.L230
1165:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 2731              		.loc 1 1165 0
 2732 0056 A242     		cmp	r2, r4
 2733 0058 0CD8     		bhi	.L231
1190:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2734              		.loc 1 1190 0
 2735 005a 2C60     		str	r4, [r5]
 2736              	.LVL229:
 2737              	.L232:
 2738              	.LBE166:
1205:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2739              		.loc 1 1205 0
 2740 005c FFF7FEFF 		bl	xTaskResumeAll
 2741              	.LVL230:
1209:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 2742              		.loc 1 1209 0
 2743 0060 38B9     		cbnz	r0, .L223
1211:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 2744              		.loc 1 1211 0
 2745 0062 0F4B     		ldr	r3, .L240+8
 2746 0064 4FF08052 		mov	r2, #268435456
 2747 0068 1A60     		str	r2, [r3]
 2748              		.syntax unified
 2749              	@ 1211 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 2750 006a BFF34F8F 		dsb
 2751              	@ 0 "" 2
 2752              	@ 1211 "../Middlewares/FreeRTOS//Source/tasks.c" 1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 143


 2753 006e BFF36F8F 		isb
 2754              	@ 0 "" 2
 2755              		.thumb
 2756              		.syntax unified
 2757              	.L223:
1217:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2758              		.loc 1 1217 0
 2759 0072 38BD     		pop	{r3, r4, r5, pc}
 2760              	.LVL231:
 2761              	.L231:
 2762              	.LBB167:
1165:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 2763              		.loc 1 1165 0 discriminator 1
 2764 0074 A042     		cmp	r0, r4
 2765 0076 01D3     		bcc	.L233
1190:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2766              		.loc 1 1190 0
 2767 0078 2C60     		str	r4, [r5]
 2768 007a EFE7     		b	.L232
 2769              	.L233:
 2770              	.LVL232:
 2771 007c 2C60     		str	r4, [r5]
 2772              	.L234:
1198:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 2773              		.loc 1 1198 0
 2774 007e 0021     		movs	r1, #0
 2775 0080 201A     		subs	r0, r4, r0
 2776              	.LVL233:
 2777 0082 FFF7FEFF 		bl	_ZL30prvAddCurrentTaskToDelayedListml
 2778              	.LVL234:
 2779 0086 E9E7     		b	.L232
 2780              	.LVL235:
 2781              	.L230:
1179:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 2782              		.loc 1 1179 0
 2783 0088 A242     		cmp	r2, r4
 2784 008a 01D8     		bhi	.L235
1179:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 2785              		.loc 1 1179 0 is_stmt 0 discriminator 1
 2786 008c A042     		cmp	r0, r4
 2787 008e 01D2     		bcs	.L236
 2788              	.L235:
 2789              	.LVL236:
1190:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2790              		.loc 1 1190 0 is_stmt 1
 2791 0090 2C60     		str	r4, [r5]
 2792 0092 F4E7     		b	.L234
 2793              	.LVL237:
 2794              	.L236:
 2795 0094 2C60     		str	r4, [r5]
 2796 0096 E1E7     		b	.L232
 2797              	.L241:
 2798              		.align	2
 2799              	.L240:
 2800 0098 00000000 		.word	.LANCHOR16
 2801 009c 00000000 		.word	.LANCHOR14
 2802 00a0 04ED00E0 		.word	-536810236
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 144


 2803              	.LBE167:
 2804              		.cfi_endproc
 2805              	.LFE140:
 2806              		.fnend
 2808              		.section	.text.vTaskDelay,"ax",%progbits
 2809              		.align	1
 2810              		.global	vTaskDelay
 2811              		.syntax unified
 2812              		.thumb
 2813              		.thumb_func
 2814              		.fpu fpv4-sp-d16
 2816              	vTaskDelay:
 2817              		.fnstart
 2818              	.LFB141:
1225:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2819              		.loc 1 1225 0
 2820              		.cfi_startproc
 2821              		@ args = 0, pretend = 0, frame = 0
 2822              		@ frame_needed = 0, uses_anonymous_args = 0
 2823              	.LVL238:
 2824 0000 10B5     		push	{r4, lr}
 2825              		.save {r4, lr}
 2826              	.LCFI28:
 2827              		.cfi_def_cfa_offset 8
 2828              		.cfi_offset 4, -8
 2829              		.cfi_offset 14, -4
 2830              	.LVL239:
1229:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 2831              		.loc 1 1229 0
 2832 0002 A8B1     		cbz	r0, .L243
 2833 0004 0446     		mov	r4, r0
1231:../Middlewares/FreeRTOS//Source/tasks.c **** 			vTaskSuspendAll();
 2834              		.loc 1 1231 0
 2835 0006 0F4B     		ldr	r3, .L248
 2836 0008 1B68     		ldr	r3, [r3]
 2837 000a 43B1     		cbz	r3, .L244
 2838              	.LBB168:
 2839              	.LBB169:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2840              		.loc 2 244 0
 2841              		.syntax unified
 2842              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2843 000c 4FF01003 			mov r3, #16												
 2844 0010 83F31188 		msr basepri, r3											
 2845 0014 BFF36F8F 		isb														
 2846 0018 BFF34F8F 		dsb														
 2847              	
 2848              	@ 0 "" 2
 2849              	.LVL240:
 2850              		.thumb
 2851              		.syntax unified
 2852              	.L245:
 2853 001c FEE7     		b	.L245
 2854              	.L244:
 2855              	.LBE169:
 2856              	.LBE168:
1232:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 145


 2857              		.loc 1 1232 0
 2858 001e FFF7FEFF 		bl	vTaskSuspendAll
 2859              	.LVL241:
1243:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 2860              		.loc 1 1243 0
 2861 0022 0021     		movs	r1, #0
 2862 0024 2046     		mov	r0, r4
 2863 0026 FFF7FEFF 		bl	_ZL30prvAddCurrentTaskToDelayedListml
 2864              	.LVL242:
1245:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 2865              		.loc 1 1245 0
 2866 002a FFF7FEFF 		bl	xTaskResumeAll
 2867              	.LVL243:
1254:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 2868              		.loc 1 1254 0
 2869 002e 38B9     		cbnz	r0, .L242
 2870              	.LVL244:
 2871              	.L243:
1256:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 2872              		.loc 1 1256 0
 2873 0030 054B     		ldr	r3, .L248+4
 2874 0032 4FF08052 		mov	r2, #268435456
 2875 0036 1A60     		str	r2, [r3]
 2876              		.syntax unified
 2877              	@ 1256 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 2878 0038 BFF34F8F 		dsb
 2879              	@ 0 "" 2
 2880              	@ 1256 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 2881 003c BFF36F8F 		isb
 2882              	@ 0 "" 2
 2883              		.thumb
 2884              		.syntax unified
 2885              	.L242:
1262:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2886              		.loc 1 1262 0
 2887 0040 10BD     		pop	{r4, pc}
 2888              	.L249:
 2889 0042 00BF     		.align	2
 2890              	.L248:
 2891 0044 00000000 		.word	.LANCHOR16
 2892 0048 04ED00E0 		.word	-536810236
 2893              		.cfi_endproc
 2894              	.LFE141:
 2895              		.fnend
 2897              		.section	.text._ZL31prvCheckTasksWaitingTerminationv,"ax",%progbits
 2898              		.align	1
 2899              		.syntax unified
 2900              		.thumb
 2901              		.thumb_func
 2902              		.fpu fpv4-sp-d16
 2904              	_ZL31prvCheckTasksWaitingTerminationv:
 2905              		.fnstart
 2906              	.LFB173:
3366:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2907              		.loc 1 3366 0
 2908              		.cfi_startproc
 2909              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 146


 2910              		@ frame_needed = 0, uses_anonymous_args = 0
 2911              	.LBB170:
3376:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 2912              		.loc 1 3376 0
 2913 0000 134B     		ldr	r3, .L260
 2914 0002 1B68     		ldr	r3, [r3]
 2915 0004 1BB3     		cbz	r3, .L259
 2916              	.LBE170:
3366:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2917              		.loc 1 3366 0
 2918 0006 10B5     		push	{r4, lr}
 2919              		.save {r4, lr}
 2920              	.LCFI29:
 2921              		.cfi_def_cfa_offset 8
 2922              		.cfi_offset 4, -8
 2923              		.cfi_offset 14, -4
 2924 0008 02E0     		b	.L255
 2925              	.LVL245:
 2926              	.L252:
 2927              	.LBB174:
3376:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 2928              		.loc 1 3376 0
 2929 000a 114B     		ldr	r3, .L260
 2930 000c 1B68     		ldr	r3, [r3]
 2931 000e EBB1     		cbz	r3, .L250
 2932              	.L255:
 2933              	.LBB171:
3378:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 2934              		.loc 1 3378 0
 2935 0010 FFF7FEFF 		bl	vTaskSuspendAll
 2936              	.LVL246:
3380:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 2937              		.loc 1 3380 0
 2938 0014 0F4B     		ldr	r3, .L260+4
 2939 0016 1C68     		ldr	r4, [r3]
 2940              	.LVL247:
3382:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2941              		.loc 1 3382 0
 2942 0018 FFF7FEFF 		bl	xTaskResumeAll
 2943              	.LVL248:
 2944              	.LBB172:
3384:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 2945              		.loc 1 3384 0
 2946 001c 002C     		cmp	r4, #0
 2947 001e F4D0     		beq	.L252
 2948              	.LBB173:
3388:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 2949              		.loc 1 3388 0
 2950 0020 FFF7FEFF 		bl	vPortEnterCritical
 2951              	.LVL249:
3390:../Middlewares/FreeRTOS//Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2952              		.loc 1 3390 0
 2953 0024 0B4B     		ldr	r3, .L260+4
 2954 0026 DB68     		ldr	r3, [r3, #12]
 2955 0028 DC68     		ldr	r4, [r3, #12]
 2956              	.LVL250:
3391:../Middlewares/FreeRTOS//Source/tasks.c **** 					--uxCurrentNumberOfTasks;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 147


 2957              		.loc 1 3391 0
 2958 002a 201D     		adds	r0, r4, #4
 2959 002c FFF7FEFF 		bl	uxListRemove
 2960              	.LVL251:
3392:../Middlewares/FreeRTOS//Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 2961              		.loc 1 3392 0
 2962 0030 094A     		ldr	r2, .L260+8
 2963 0032 1368     		ldr	r3, [r2]
 2964 0034 013B     		subs	r3, r3, #1
 2965 0036 1360     		str	r3, [r2]
3393:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 2966              		.loc 1 3393 0
 2967 0038 054A     		ldr	r2, .L260
 2968 003a 1368     		ldr	r3, [r2]
 2969 003c 013B     		subs	r3, r3, #1
 2970 003e 1360     		str	r3, [r2]
3395:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2971              		.loc 1 3395 0
 2972 0040 FFF7FEFF 		bl	vPortExitCritical
 2973              	.LVL252:
3397:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 2974              		.loc 1 3397 0
 2975 0044 2046     		mov	r0, r4
 2976 0046 FFF7FEFF 		bl	_ZL12prvDeleteTCBP19tskTaskControlBlock
 2977              	.LVL253:
 2978              	.LBE173:
 2979 004a DEE7     		b	.L252
 2980              	.LVL254:
 2981              	.L250:
 2982              	.LBE172:
 2983              	.LBE171:
 2984              	.LBE174:
3406:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 2985              		.loc 1 3406 0
 2986 004c 10BD     		pop	{r4, pc}
 2987              	.L259:
 2988              	.LCFI30:
 2989              		.cfi_def_cfa_offset 0
 2990              		.cfi_restore 4
 2991              		.cfi_restore 14
 2992 004e 7047     		bx	lr
 2993              	.L261:
 2994              		.align	2
 2995              	.L260:
 2996 0050 00000000 		.word	.LANCHOR15
 2997 0054 00000000 		.word	.LANCHOR7
 2998 0058 00000000 		.word	.LANCHOR9
 2999              		.cfi_endproc
 3000              	.LFE173:
 3001              		.fnend
 3003              		.section	.text._ZL11prvIdleTaskPv,"ax",%progbits
 3004              		.align	1
 3005              		.syntax unified
 3006              		.thumb
 3007              		.thumb_func
 3008              		.fpu fpv4-sp-d16
 3010              	_ZL11prvIdleTaskPv:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 148


 3011              		.fnstart
 3012              	.LFB171:
3132:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Stop warnings. */
 3013              		.loc 1 3132 0
 3014              		.cfi_startproc
 3015              		@ args = 0, pretend = 0, frame = 0
 3016              		@ frame_needed = 0, uses_anonymous_args = 0
 3017              	.LVL255:
 3018 0000 08B5     		push	{r3, lr}
 3019              		.save {r3, lr}
 3020              	.LCFI31:
 3021              		.cfi_def_cfa_offset 8
 3022              		.cfi_offset 3, -8
 3023              		.cfi_offset 14, -4
 3024              	.LVL256:
 3025              	.L263:
3143:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3026              		.loc 1 3143 0
 3027 0002 FFF7FEFF 		bl	_ZL31prvCheckTasksWaitingTerminationv
 3028              	.LVL257:
3166:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 3029              		.loc 1 3166 0
 3030 0006 064B     		ldr	r3, .L266
 3031 0008 1B68     		ldr	r3, [r3]
 3032 000a 012B     		cmp	r3, #1
 3033 000c F9D9     		bls	.L263
3168:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 3034              		.loc 1 3168 0
 3035 000e 054B     		ldr	r3, .L266+4
 3036 0010 4FF08052 		mov	r2, #268435456
 3037 0014 1A60     		str	r2, [r3]
 3038              		.syntax unified
 3039              	@ 3168 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 3040 0016 BFF34F8F 		dsb
 3041              	@ 0 "" 2
 3042              	@ 3168 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 3043 001a BFF36F8F 		isb
 3044              	@ 0 "" 2
 3045              		.thumb
 3046              		.syntax unified
 3047 001e F0E7     		b	.L263
 3048              	.L267:
 3049              		.align	2
 3050              	.L266:
 3051 0020 00000000 		.word	.LANCHOR4
 3052 0024 04ED00E0 		.word	-536810236
 3053              		.cfi_endproc
 3054              	.LFE171:
 3055              		.fnend
 3057              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3058              		.align	1
 3059              		.global	vTaskSwitchContext
 3060              		.syntax unified
 3061              		.thumb
 3062              		.thumb_func
 3063              		.fpu fpv4-sp-d16
 3065              	vTaskSwitchContext:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 149


 3066              		.fnstart
 3067              	.LFB160:
2762:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3068              		.loc 1 2762 0
 3069              		.cfi_startproc
 3070              		@ args = 0, pretend = 0, frame = 0
 3071              		@ frame_needed = 0, uses_anonymous_args = 0
 3072              	.LBB175:
2763:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 3073              		.loc 1 2763 0
 3074 0000 334B     		ldr	r3, .L282
 3075 0002 1B68     		ldr	r3, [r3]
 3076 0004 1BB1     		cbz	r3, .L269
2767:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 3077              		.loc 1 2767 0
 3078 0006 334B     		ldr	r3, .L282+4
 3079 0008 0122     		movs	r2, #1
 3080 000a 1A60     		str	r2, [r3]
 3081 000c 7047     		bx	lr
 3082              	.L269:
 3083              	.LBE175:
2762:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3084              		.loc 1 2762 0
 3085 000e 10B5     		push	{r4, lr}
 3086              		.save {r4, lr}
 3087              	.LCFI32:
 3088              		.cfi_def_cfa_offset 8
 3089              		.cfi_offset 4, -8
 3090              		.cfi_offset 14, -4
 3091              	.LBB189:
 3092              	.LBB176:
2771:../Middlewares/FreeRTOS//Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3093              		.loc 1 2771 0
 3094 0010 304B     		ldr	r3, .L282+4
 3095 0012 0022     		movs	r2, #0
 3096 0014 1A60     		str	r2, [r3]
2779:../Middlewares/FreeRTOS//Source/tasks.c **** 				#endif
 3097              		.loc 1 2779 0
 3098 0016 304B     		ldr	r3, .L282+8
 3099 0018 1A68     		ldr	r2, [r3]
2789:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 3100              		.loc 1 2789 0
 3101 001a 304B     		ldr	r3, .L282+12
 3102 001c 1B68     		ldr	r3, [r3]
 3103 001e 9A42     		cmp	r2, r3
 3104 0020 05D9     		bls	.L271
2791:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 3105              		.loc 1 2791 0
 3106 0022 2F49     		ldr	r1, .L282+16
 3107 0024 0868     		ldr	r0, [r1]
 3108 0026 D31A     		subs	r3, r2, r3
 3109 0028 816D     		ldr	r1, [r0, #88]
 3110 002a 0B44     		add	r3, r3, r1
 3111 002c 8365     		str	r3, [r0, #88]
 3112              	.L271:
2797:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 3113              		.loc 1 2797 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 150


 3114 002e 2B4B     		ldr	r3, .L282+12
 3115 0030 1A60     		str	r2, [r3]
 3116              	.LBB177:
2802:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3117              		.loc 1 2802 0
 3118 0032 2B4B     		ldr	r3, .L282+16
 3119 0034 1B68     		ldr	r3, [r3]
 3120 0036 1B6B     		ldr	r3, [r3, #48]
 3121              	.LVL258:
 3122 0038 1A68     		ldr	r2, [r3]
 3123 003a B2F1A53F 		cmp	r2, #-1515870811
 3124 003e 03D1     		bne	.L272
2802:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3125              		.loc 1 2802 0 is_stmt 0 discriminator 2
 3126 0040 5A68     		ldr	r2, [r3, #4]
 3127 0042 B2F1A53F 		cmp	r2, #-1515870811
 3128 0046 1BD0     		beq	.L280
 3129              	.LVL259:
 3130              	.L272:
2802:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3131              		.loc 1 2802 0 discriminator 7
 3132 0048 254B     		ldr	r3, .L282+16
 3133 004a 1868     		ldr	r0, [r3]
 3134 004c 1968     		ldr	r1, [r3]
 3135 004e 3431     		adds	r1, r1, #52
 3136 0050 FFF7FEFF 		bl	_Z29vApplicationStackOverflowHookPvPc
 3137              	.LVL260:
 3138              	.L273:
 3139              	.LBE177:
 3140              	.LBB178:
2806:../Middlewares/FreeRTOS//Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3141              		.loc 1 2806 0 is_stmt 1
 3142 0054 234B     		ldr	r3, .L282+20
 3143 0056 1B68     		ldr	r3, [r3]
 3144              	.LVL261:
 3145              	.LBB179:
 3146              	.LBB180:
 176:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 3147              		.loc 2 176 0
 3148              		.syntax unified
 3149              	@ 176 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3150 0058 B3FA83F3 		clz r3, r3
 3151              	@ 0 "" 2
 3152              	.LVL262:
 3153              		.thumb
 3154              		.syntax unified
 3155 005c DBB2     		uxtb	r3, r3
 3156              	.LBE180:
 3157              	.LBE179:
2806:../Middlewares/FreeRTOS//Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3158              		.loc 1 2806 0
 3159 005e C3F11F03 		rsb	r3, r3, #31
 3160              	.LVL263:
 3161 0062 03EB8301 		add	r1, r3, r3, lsl #2
 3162 0066 8A00     		lsls	r2, r1, #2
 3163 0068 1F49     		ldr	r1, .L282+24
 3164 006a 8A58     		ldr	r2, [r1, r2]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 151


 3165 006c 8AB9     		cbnz	r2, .L274
 3166              	.LBB181:
 3167              	.LBB182:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 3168              		.loc 2 244 0
 3169              		.syntax unified
 3170              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3171 006e 4FF01003 			mov r3, #16												
 3172 0072 83F31188 		msr basepri, r3											
 3173 0076 BFF36F8F 		isb														
 3174 007a BFF34F8F 		dsb														
 3175              	
 3176              	@ 0 "" 2
 3177              	.LVL264:
 3178              		.thumb
 3179              		.syntax unified
 3180              	.L275:
 3181 007e FEE7     		b	.L275
 3182              	.LVL265:
 3183              	.L280:
 3184              	.LBE182:
 3185              	.LBE181:
 3186              	.LBE178:
 3187              	.LBB185:
2802:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3188              		.loc 1 2802 0 discriminator 4
 3189 0080 9A68     		ldr	r2, [r3, #8]
 3190 0082 B2F1A53F 		cmp	r2, #-1515870811
 3191 0086 DFD1     		bne	.L272
2802:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3192              		.loc 1 2802 0 is_stmt 0 discriminator 6
 3193 0088 DB68     		ldr	r3, [r3, #12]
 3194              	.LVL266:
 3195 008a B3F1A53F 		cmp	r3, #-1515870811
 3196 008e DBD1     		bne	.L272
 3197 0090 E0E7     		b	.L273
 3198              	.LVL267:
 3199              	.L274:
 3200              	.LBE185:
 3201              	.LBB186:
 3202              	.LBB183:
2806:../Middlewares/FreeRTOS//Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3203              		.loc 1 2806 0 is_stmt 1 discriminator 2
 3204 0092 1548     		ldr	r0, .L282+24
 3205 0094 9A00     		lsls	r2, r3, #2
 3206 0096 D418     		adds	r4, r2, r3
 3207 0098 A100     		lsls	r1, r4, #2
 3208 009a 0144     		add	r1, r1, r0
 3209 009c 4C68     		ldr	r4, [r1, #4]
 3210 009e 6468     		ldr	r4, [r4, #4]
 3211 00a0 4C60     		str	r4, [r1, #4]
 3212 00a2 1A44     		add	r2, r2, r3
 3213 00a4 9100     		lsls	r1, r2, #2
 3214 00a6 0831     		adds	r1, r1, #8
 3215 00a8 0844     		add	r0, r0, r1
 3216 00aa 8442     		cmp	r4, r0
 3217 00ac 09D0     		beq	.L281
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 152


 3218              	.L276:
2806:../Middlewares/FreeRTOS//Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3219              		.loc 1 2806 0 is_stmt 0 discriminator 5
 3220 00ae 03EB8303 		add	r3, r3, r3, lsl #2
 3221              	.LVL268:
 3222 00b2 9A00     		lsls	r2, r3, #2
 3223 00b4 0C4B     		ldr	r3, .L282+24
 3224 00b6 1344     		add	r3, r3, r2
 3225 00b8 5B68     		ldr	r3, [r3, #4]
 3226 00ba DA68     		ldr	r2, [r3, #12]
 3227 00bc 084B     		ldr	r3, .L282+16
 3228 00be 1A60     		str	r2, [r3]
 3229              	.LBE183:
 3230              	.LBE186:
 3231              	.LBE176:
 3232              	.LBE189:
2817:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 3233              		.loc 1 2817 0 is_stmt 1 discriminator 5
 3234 00c0 10BD     		pop	{r4, pc}
 3235              	.LVL269:
 3236              	.L281:
 3237              	.LBB190:
 3238              	.LBB188:
 3239              	.LBB187:
 3240              	.LBB184:
2806:../Middlewares/FreeRTOS//Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3241              		.loc 1 2806 0 discriminator 3
 3242 00c2 6168     		ldr	r1, [r4, #4]
 3243 00c4 0848     		ldr	r0, .L282+24
 3244 00c6 1422     		movs	r2, #20
 3245 00c8 02FB0302 		mla	r2, r2, r3, r0
 3246 00cc 5160     		str	r1, [r2, #4]
 3247 00ce EEE7     		b	.L276
 3248              	.L283:
 3249              		.align	2
 3250              	.L282:
 3251 00d0 00000000 		.word	.LANCHOR16
 3252 00d4 00000000 		.word	.LANCHOR20
 3253 00d8 00000000 		.word	ulHighFrequencyTimerTicks
 3254 00dc 00000000 		.word	.LANCHOR21
 3255 00e0 00000000 		.word	.LANCHOR10
 3256 00e4 00000000 		.word	.LANCHOR13
 3257 00e8 00000000 		.word	.LANCHOR4
 3258              	.LBE184:
 3259              	.LBE187:
 3260              	.LBE188:
 3261              	.LBE190:
 3262              		.cfi_endproc
 3263              	.LFE160:
 3264              		.fnend
 3266              		.section	.text.vTaskSuspend,"ax",%progbits
 3267              		.align	1
 3268              		.global	vTaskSuspend
 3269              		.syntax unified
 3270              		.thumb
 3271              		.thumb_func
 3272              		.fpu fpv4-sp-d16
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 153


 3274              	vTaskSuspend:
 3275              		.fnstart
 3276              	.LFB146:
1567:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
 3277              		.loc 1 1567 0
 3278              		.cfi_startproc
 3279              		@ args = 0, pretend = 0, frame = 0
 3280              		@ frame_needed = 0, uses_anonymous_args = 0
 3281              	.LVL270:
 3282 0000 38B5     		push	{r3, r4, r5, lr}
 3283              		.save {r3, r4, r5, lr}
 3284              	.LCFI33:
 3285              		.cfi_def_cfa_offset 16
 3286              		.cfi_offset 3, -16
 3287              		.cfi_offset 4, -12
 3288              		.cfi_offset 5, -8
 3289              		.cfi_offset 14, -4
 3290 0002 0446     		mov	r4, r0
1570:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 3291              		.loc 1 1570 0
 3292 0004 FFF7FEFF 		bl	vPortEnterCritical
 3293              	.LVL271:
1574:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3294              		.loc 1 1574 0
 3295 0008 34B3     		cbz	r4, .L295
 3296              	.LVL272:
 3297              	.L285:
1580:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 3298              		.loc 1 1580 0 discriminator 4
 3299 000a 251D     		adds	r5, r4, #4
 3300 000c 2846     		mov	r0, r5
 3301 000e FFF7FEFF 		bl	uxListRemove
 3302              	.LVL273:
 3303 0012 68B9     		cbnz	r0, .L286
1582:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 3304              		.loc 1 1582 0
 3305 0014 E16A     		ldr	r1, [r4, #44]
 3306 0016 01EB8102 		add	r2, r1, r1, lsl #2
 3307 001a 9300     		lsls	r3, r2, #2
 3308 001c 264A     		ldr	r2, .L298
 3309 001e D358     		ldr	r3, [r2, r3]
 3310 0020 33B9     		cbnz	r3, .L286
1582:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 3311              		.loc 1 1582 0 is_stmt 0 discriminator 1
 3312 0022 2648     		ldr	r0, .L298+4
 3313 0024 0368     		ldr	r3, [r0]
 3314 0026 0122     		movs	r2, #1
 3315 0028 8A40     		lsls	r2, r2, r1
 3316 002a 23EA0203 		bic	r3, r3, r2
 3317 002e 0360     		str	r3, [r0]
 3318              	.L286:
1590:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 3319              		.loc 1 1590 0 is_stmt 1
 3320 0030 A36A     		ldr	r3, [r4, #40]
 3321 0032 1BB1     		cbz	r3, .L287
1592:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 3322              		.loc 1 1592 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 154


 3323 0034 04F11800 		add	r0, r4, #24
 3324 0038 FFF7FEFF 		bl	uxListRemove
 3325              	.LVL274:
 3326              	.L287:
1599:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 3327              		.loc 1 1599 0
 3328 003c 2946     		mov	r1, r5
 3329 003e 2048     		ldr	r0, .L298+8
 3330 0040 FFF7FEFF 		bl	vListInsertEnd
 3331              	.LVL275:
1601:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3332              		.loc 1 1601 0
 3333 0044 FFF7FEFF 		bl	vPortExitCritical
 3334              	.LVL276:
1603:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 3335              		.loc 1 1603 0
 3336 0048 1E4B     		ldr	r3, .L298+12
 3337 004a 1B68     		ldr	r3, [r3]
 3338 004c 3BB9     		cbnz	r3, .L296
 3339              	.L288:
1618:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 3340              		.loc 1 1618 0
 3341 004e 1E4B     		ldr	r3, .L298+16
 3342 0050 1B68     		ldr	r3, [r3]
 3343 0052 A342     		cmp	r3, r4
 3344 0054 0AD0     		beq	.L297
 3345              	.L284:
1649:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3346              		.loc 1 1649 0
 3347 0056 38BD     		pop	{r3, r4, r5, pc}
 3348              	.LVL277:
 3349              	.L295:
1574:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3350              		.loc 1 1574 0 discriminator 1
 3351 0058 1B4B     		ldr	r3, .L298+16
 3352 005a 1C68     		ldr	r4, [r3]
 3353              	.LVL278:
 3354 005c D5E7     		b	.L285
 3355              	.LVL279:
 3356              	.L296:
1607:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 3357              		.loc 1 1607 0
 3358 005e FFF7FEFF 		bl	vPortEnterCritical
 3359              	.LVL280:
1609:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 3360              		.loc 1 1609 0
 3361 0062 FFF7FEFF 		bl	_ZL27prvResetNextTaskUnblockTimev
 3362              	.LVL281:
1611:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 3363              		.loc 1 1611 0
 3364 0066 FFF7FEFF 		bl	vPortExitCritical
 3365              	.LVL282:
 3366 006a F0E7     		b	.L288
 3367              	.L297:
1620:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 3368              		.loc 1 1620 0
 3369 006c 154B     		ldr	r3, .L298+12
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 155


 3370 006e 1B68     		ldr	r3, [r3]
 3371 0070 A3B1     		cbz	r3, .L290
1623:../Middlewares/FreeRTOS//Source/tasks.c **** 				portYIELD_WITHIN_API();
 3372              		.loc 1 1623 0
 3373 0072 164B     		ldr	r3, .L298+20
 3374 0074 1B68     		ldr	r3, [r3]
 3375 0076 43B1     		cbz	r3, .L291
 3376              	.LBB191:
 3377              	.LBB192:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 3378              		.loc 2 244 0
 3379              		.syntax unified
 3380              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3381 0078 4FF01003 			mov r3, #16												
 3382 007c 83F31188 		msr basepri, r3											
 3383 0080 BFF36F8F 		isb														
 3384 0084 BFF34F8F 		dsb														
 3385              	
 3386              	@ 0 "" 2
 3387              	.LVL283:
 3388              		.thumb
 3389              		.syntax unified
 3390              	.L292:
 3391 0088 FEE7     		b	.L292
 3392              	.L291:
 3393              	.LBE192:
 3394              	.LBE191:
1624:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 3395              		.loc 1 1624 0
 3396 008a 114B     		ldr	r3, .L298+24
 3397 008c 4FF08052 		mov	r2, #268435456
 3398 0090 1A60     		str	r2, [r3]
 3399              		.syntax unified
 3400              	@ 1624 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 3401 0092 BFF34F8F 		dsb
 3402              	@ 0 "" 2
 3403              	@ 1624 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 3404 0096 BFF36F8F 		isb
 3405              	@ 0 "" 2
 3406              		.thumb
 3407              		.syntax unified
 3408 009a DCE7     		b	.L284
 3409              	.L290:
1631:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 3410              		.loc 1 1631 0
 3411 009c 084B     		ldr	r3, .L298+8
 3412 009e 1A68     		ldr	r2, [r3]
 3413 00a0 0C4B     		ldr	r3, .L298+28
 3414 00a2 1B68     		ldr	r3, [r3]
 3415 00a4 9A42     		cmp	r2, r3
 3416 00a6 03D1     		bne	.L293
1637:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 3417              		.loc 1 1637 0
 3418 00a8 074B     		ldr	r3, .L298+16
 3419 00aa 0022     		movs	r2, #0
 3420 00ac 1A60     		str	r2, [r3]
 3421 00ae D2E7     		b	.L284
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 156


 3422              	.L293:
1641:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 3423              		.loc 1 1641 0
 3424 00b0 FFF7FEFF 		bl	vTaskSwitchContext
 3425              	.LVL284:
1649:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3426              		.loc 1 1649 0
 3427 00b4 CFE7     		b	.L284
 3428              	.L299:
 3429 00b6 00BF     		.align	2
 3430              	.L298:
 3431 00b8 00000000 		.word	.LANCHOR4
 3432 00bc 00000000 		.word	.LANCHOR13
 3433 00c0 00000000 		.word	.LANCHOR0
 3434 00c4 00000000 		.word	.LANCHOR11
 3435 00c8 00000000 		.word	.LANCHOR10
 3436 00cc 00000000 		.word	.LANCHOR16
 3437 00d0 04ED00E0 		.word	-536810236
 3438 00d4 00000000 		.word	.LANCHOR9
 3439              		.cfi_endproc
 3440              	.LFE146:
 3441              		.fnend
 3443              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3444              		.align	1
 3445              		.global	vTaskPlaceOnEventList
 3446              		.syntax unified
 3447              		.thumb
 3448              		.thumb_func
 3449              		.fpu fpv4-sp-d16
 3451              	vTaskPlaceOnEventList:
 3452              		.fnstart
 3453              	.LFB161:
2821:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxEventList );
 3454              		.loc 1 2821 0
 3455              		.cfi_startproc
 3456              		@ args = 0, pretend = 0, frame = 0
 3457              		@ frame_needed = 0, uses_anonymous_args = 0
 3458              	.LVL285:
2822:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3459              		.loc 1 2822 0
 3460 0000 40B9     		cbnz	r0, .L301
 3461              	.LBB193:
 3462              	.LBB194:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 3463              		.loc 2 244 0
 3464              		.syntax unified
 3465              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3466 0002 4FF01003 			mov r3, #16												
 3467 0006 83F31188 		msr basepri, r3											
 3468 000a BFF36F8F 		isb														
 3469 000e BFF34F8F 		dsb														
 3470              	
 3471              	@ 0 "" 2
 3472              	.LVL286:
 3473              		.thumb
 3474              		.syntax unified
 3475              	.L302:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 157


 3476 0012 FEE7     		b	.L302
 3477              	.L301:
 3478              	.LBE194:
 3479              	.LBE193:
2821:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxEventList );
 3480              		.loc 1 2821 0
 3481 0014 10B5     		push	{r4, lr}
 3482              		.save {r4, lr}
 3483              	.LCFI34:
 3484              		.cfi_def_cfa_offset 8
 3485              		.cfi_offset 4, -8
 3486              		.cfi_offset 14, -4
 3487 0016 0C46     		mov	r4, r1
2831:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3488              		.loc 1 2831 0
 3489 0018 044B     		ldr	r3, .L305
 3490 001a 1968     		ldr	r1, [r3]
 3491              	.LVL287:
 3492 001c 1831     		adds	r1, r1, #24
 3493 001e FFF7FEFF 		bl	vListInsert
 3494              	.LVL288:
2833:../Middlewares/FreeRTOS//Source/tasks.c **** }
 3495              		.loc 1 2833 0
 3496 0022 0121     		movs	r1, #1
 3497 0024 2046     		mov	r0, r4
 3498 0026 FFF7FEFF 		bl	_ZL30prvAddCurrentTaskToDelayedListml
 3499              	.LVL289:
2834:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 3500              		.loc 1 2834 0
 3501 002a 10BD     		pop	{r4, pc}
 3502              	.LVL290:
 3503              	.L306:
 3504              		.align	2
 3505              	.L305:
 3506 002c 00000000 		.word	.LANCHOR10
 3507              		.cfi_endproc
 3508              	.LFE161:
 3509              		.fnend
 3511              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3512              		.align	1
 3513              		.global	vTaskPlaceOnUnorderedEventList
 3514              		.syntax unified
 3515              		.thumb
 3516              		.thumb_func
 3517              		.fpu fpv4-sp-d16
 3519              	vTaskPlaceOnUnorderedEventList:
 3520              		.fnstart
 3521              	.LFB162:
2838:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxEventList );
 3522              		.loc 1 2838 0
 3523              		.cfi_startproc
 3524              		@ args = 0, pretend = 0, frame = 0
 3525              		@ frame_needed = 0, uses_anonymous_args = 0
 3526              	.LVL291:
2839:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3527              		.loc 1 2839 0
 3528 0000 40B9     		cbnz	r0, .L308
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 158


 3529              	.LBB195:
 3530              	.LBB196:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 3531              		.loc 2 244 0
 3532              		.syntax unified
 3533              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3534 0002 4FF01003 			mov r3, #16												
 3535 0006 83F31188 		msr basepri, r3											
 3536 000a BFF36F8F 		isb														
 3537 000e BFF34F8F 		dsb														
 3538              	
 3539              	@ 0 "" 2
 3540              	.LVL292:
 3541              		.thumb
 3542              		.syntax unified
 3543              	.L309:
 3544 0012 FEE7     		b	.L309
 3545              	.L308:
 3546 0014 0346     		mov	r3, r0
 3547              	.LBE196:
 3548              	.LBE195:
2843:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3549              		.loc 1 2843 0
 3550 0016 0F48     		ldr	r0, .L314
 3551              	.LVL293:
 3552 0018 0068     		ldr	r0, [r0]
 3553 001a 40B9     		cbnz	r0, .L310
 3554              	.LBB197:
 3555              	.LBB198:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 3556              		.loc 2 244 0
 3557              		.syntax unified
 3558              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3559 001c 4FF01003 			mov r3, #16												
 3560 0020 83F31188 		msr basepri, r3											
 3561 0024 BFF36F8F 		isb														
 3562 0028 BFF34F8F 		dsb														
 3563              	
 3564              	@ 0 "" 2
 3565              	.LVL294:
 3566              		.thumb
 3567              		.syntax unified
 3568              	.L311:
 3569 002c FEE7     		b	.L311
 3570              	.LVL295:
 3571              	.L310:
 3572              	.LBE198:
 3573              	.LBE197:
2838:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxEventList );
 3574              		.loc 1 2838 0
 3575 002e 10B5     		push	{r4, lr}
 3576              		.save {r4, lr}
 3577              	.LCFI35:
 3578              		.cfi_def_cfa_offset 8
 3579              		.cfi_offset 4, -8
 3580              		.cfi_offset 14, -4
 3581 0030 1846     		mov	r0, r3
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 159


 3582 0032 1446     		mov	r4, r2
 3583 0034 0B46     		mov	r3, r1
 3584              	.LVL296:
2848:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3585              		.loc 1 2848 0
 3586 0036 084A     		ldr	r2, .L314+4
 3587              	.LVL297:
 3588 0038 1168     		ldr	r1, [r2]
 3589              	.LVL298:
 3590 003a 43F00043 		orr	r3, r3, #-2147483648
 3591              	.LVL299:
 3592 003e 8B61     		str	r3, [r1, #24]
2855:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3593              		.loc 1 2855 0
 3594 0040 1168     		ldr	r1, [r2]
 3595 0042 1831     		adds	r1, r1, #24
 3596 0044 FFF7FEFF 		bl	vListInsertEnd
 3597              	.LVL300:
2857:../Middlewares/FreeRTOS//Source/tasks.c **** }
 3598              		.loc 1 2857 0
 3599 0048 0121     		movs	r1, #1
 3600 004a 2046     		mov	r0, r4
 3601 004c FFF7FEFF 		bl	_ZL30prvAddCurrentTaskToDelayedListml
 3602              	.LVL301:
2858:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 3603              		.loc 1 2858 0
 3604 0050 10BD     		pop	{r4, pc}
 3605              	.LVL302:
 3606              	.L315:
 3607 0052 00BF     		.align	2
 3608              	.L314:
 3609 0054 00000000 		.word	.LANCHOR16
 3610 0058 00000000 		.word	.LANCHOR10
 3611              		.cfi_endproc
 3612              	.LFE162:
 3613              		.fnend
 3615              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3616              		.align	1
 3617              		.global	vTaskPlaceOnEventListRestricted
 3618              		.syntax unified
 3619              		.thumb
 3620              		.thumb_func
 3621              		.fpu fpv4-sp-d16
 3623              	vTaskPlaceOnEventListRestricted:
 3624              		.fnstart
 3625              	.LFB163:
2864:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( pxEventList );
 3626              		.loc 1 2864 0
 3627              		.cfi_startproc
 3628              		@ args = 0, pretend = 0, frame = 0
 3629              		@ frame_needed = 0, uses_anonymous_args = 0
 3630              	.LVL303:
 3631 0000 38B5     		push	{r3, r4, r5, lr}
 3632              		.save {r3, r4, r5, lr}
 3633              	.LCFI36:
 3634              		.cfi_def_cfa_offset 16
 3635              		.cfi_offset 3, -16
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 160


 3636              		.cfi_offset 4, -12
 3637              		.cfi_offset 5, -8
 3638              		.cfi_offset 14, -4
2865:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3639              		.loc 1 2865 0
 3640 0002 40B9     		cbnz	r0, .L317
 3641              	.LBB199:
 3642              	.LBB200:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 3643              		.loc 2 244 0
 3644              		.syntax unified
 3645              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3646 0004 4FF01003 			mov r3, #16												
 3647 0008 83F31188 		msr basepri, r3											
 3648 000c BFF36F8F 		isb														
 3649 0010 BFF34F8F 		dsb														
 3650              	
 3651              	@ 0 "" 2
 3652              	.LVL304:
 3653              		.thumb
 3654              		.syntax unified
 3655              	.L318:
 3656 0014 FEE7     		b	.L318
 3657              	.L317:
 3658 0016 0C46     		mov	r4, r1
 3659 0018 1546     		mov	r5, r2
 3660              	.LBE200:
 3661              	.LBE199:
2877:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3662              		.loc 1 2877 0
 3663 001a 064A     		ldr	r2, .L322
 3664              	.LVL305:
 3665 001c 1168     		ldr	r1, [r2]
 3666              	.LVL306:
 3667 001e 1831     		adds	r1, r1, #24
 3668 0020 FFF7FEFF 		bl	vListInsertEnd
 3669              	.LVL307:
2882:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 3670              		.loc 1 2882 0
 3671 0024 0DB1     		cbz	r5, .L319
2884:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 3672              		.loc 1 2884 0
 3673 0026 4FF0FF34 		mov	r4, #-1
 3674              	.LVL308:
 3675              	.L319:
2888:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 3676              		.loc 1 2888 0
 3677 002a 2946     		mov	r1, r5
 3678 002c 2046     		mov	r0, r4
 3679 002e FFF7FEFF 		bl	_ZL30prvAddCurrentTaskToDelayedListml
 3680              	.LVL309:
2889:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3681              		.loc 1 2889 0
 3682 0032 38BD     		pop	{r3, r4, r5, pc}
 3683              	.LVL310:
 3684              	.L323:
 3685              		.align	2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 161


 3686              	.L322:
 3687 0034 00000000 		.word	.LANCHOR10
 3688              		.cfi_endproc
 3689              	.LFE163:
 3690              		.fnend
 3692              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3693              		.align	1
 3694              		.global	xTaskRemoveFromEventList
 3695              		.syntax unified
 3696              		.thumb
 3697              		.thumb_func
 3698              		.fpu fpv4-sp-d16
 3700              	xTaskRemoveFromEventList:
 3701              		.fnstart
 3702              	.LFB164:
2895:../Middlewares/FreeRTOS//Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3703              		.loc 1 2895 0
 3704              		.cfi_startproc
 3705              		@ args = 0, pretend = 0, frame = 0
 3706              		@ frame_needed = 0, uses_anonymous_args = 0
 3707              	.LVL311:
 3708 0000 38B5     		push	{r3, r4, r5, lr}
 3709              		.save {r3, r4, r5, lr}
 3710              	.LCFI37:
 3711              		.cfi_def_cfa_offset 16
 3712              		.cfi_offset 3, -16
 3713              		.cfi_offset 4, -12
 3714              		.cfi_offset 5, -8
 3715              		.cfi_offset 14, -4
2912:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3716              		.loc 1 2912 0
 3717 0002 C368     		ldr	r3, [r0, #12]
 3718 0004 DC68     		ldr	r4, [r3, #12]
 3719              	.LVL312:
2913:../Middlewares/FreeRTOS//Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3720              		.loc 1 2913 0
 3721 0006 44B9     		cbnz	r4, .L325
 3722              	.LBB201:
 3723              	.LBB202:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 3724              		.loc 2 244 0
 3725              		.syntax unified
 3726              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3727 0008 4FF01003 			mov r3, #16												
 3728 000c 83F31188 		msr basepri, r3											
 3729 0010 BFF36F8F 		isb														
 3730 0014 BFF34F8F 		dsb														
 3731              	
 3732              	@ 0 "" 2
 3733              	.LVL313:
 3734              		.thumb
 3735              		.syntax unified
 3736              	.L326:
 3737 0018 FEE7     		b	.L326
 3738              	.L325:
 3739              	.LBE202:
 3740              	.LBE201:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 162


2914:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3741              		.loc 1 2914 0
 3742 001a 04F11805 		add	r5, r4, #24
 3743 001e 2846     		mov	r0, r5
 3744              	.LVL314:
 3745 0020 FFF7FEFF 		bl	uxListRemove
 3746              	.LVL315:
2916:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 3747              		.loc 1 2916 0
 3748 0024 134B     		ldr	r3, .L332
 3749 0026 1B68     		ldr	r3, [r3]
 3750 0028 E3B9     		cbnz	r3, .L327
2918:../Middlewares/FreeRTOS//Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3751              		.loc 1 2918 0
 3752 002a 251D     		adds	r5, r4, #4
 3753 002c 2846     		mov	r0, r5
 3754 002e FFF7FEFF 		bl	uxListRemove
 3755              	.LVL316:
2919:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 3756              		.loc 1 2919 0
 3757 0032 1148     		ldr	r0, .L332+4
 3758 0034 0268     		ldr	r2, [r0]
 3759 0036 E36A     		ldr	r3, [r4, #44]
 3760 0038 0121     		movs	r1, #1
 3761 003a 9940     		lsls	r1, r1, r3
 3762 003c 0A43     		orrs	r2, r2, r1
 3763 003e 0260     		str	r2, [r0]
 3764 0040 03EB8303 		add	r3, r3, r3, lsl #2
 3765 0044 9A00     		lsls	r2, r3, #2
 3766 0046 2946     		mov	r1, r5
 3767 0048 0C48     		ldr	r0, .L332+8
 3768 004a 1044     		add	r0, r0, r2
 3769 004c FFF7FEFF 		bl	vListInsertEnd
 3770              	.LVL317:
 3771              	.L328:
2928:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 3772              		.loc 1 2928 0
 3773 0050 E26A     		ldr	r2, [r4, #44]
 3774 0052 0B4B     		ldr	r3, .L332+12
 3775 0054 1B68     		ldr	r3, [r3]
 3776 0056 DB6A     		ldr	r3, [r3, #44]
 3777 0058 9A42     		cmp	r2, r3
 3778 005a 08D9     		bls	.L330
 3779              	.LVL318:
2937:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 3780              		.loc 1 2937 0
 3781 005c 0120     		movs	r0, #1
 3782 005e 094B     		ldr	r3, .L332+16
 3783 0060 1860     		str	r0, [r3]
 3784              	.LVL319:
 3785              	.L324:
2959:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 3786              		.loc 1 2959 0
 3787 0062 38BD     		pop	{r3, r4, r5, pc}
 3788              	.LVL320:
 3789              	.L327:
2925:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 163


 3790              		.loc 1 2925 0
 3791 0064 2946     		mov	r1, r5
 3792 0066 0848     		ldr	r0, .L332+20
 3793 0068 FFF7FEFF 		bl	vListInsertEnd
 3794              	.LVL321:
 3795 006c F0E7     		b	.L328
 3796              	.L330:
2941:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 3797              		.loc 1 2941 0
 3798 006e 0020     		movs	r0, #0
 3799              	.LVL322:
2958:../Middlewares/FreeRTOS//Source/tasks.c **** }
 3800              		.loc 1 2958 0
 3801 0070 F7E7     		b	.L324
 3802              	.L333:
 3803 0072 00BF     		.align	2
 3804              	.L332:
 3805 0074 00000000 		.word	.LANCHOR16
 3806 0078 00000000 		.word	.LANCHOR13
 3807 007c 00000000 		.word	.LANCHOR4
 3808 0080 00000000 		.word	.LANCHOR10
 3809 0084 00000000 		.word	.LANCHOR20
 3810 0088 00000000 		.word	.LANCHOR1
 3811              		.cfi_endproc
 3812              	.LFE164:
 3813              		.fnend
 3815              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3816              		.align	1
 3817              		.global	xTaskRemoveFromUnorderedEventList
 3818              		.syntax unified
 3819              		.thumb
 3820              		.thumb_func
 3821              		.fpu fpv4-sp-d16
 3823              	xTaskRemoveFromUnorderedEventList:
 3824              		.fnstart
 3825              	.LFB165:
2963:../Middlewares/FreeRTOS//Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3826              		.loc 1 2963 0
 3827              		.cfi_startproc
 3828              		@ args = 0, pretend = 0, frame = 0
 3829              		@ frame_needed = 0, uses_anonymous_args = 0
 3830              	.LVL323:
 3831 0000 38B5     		push	{r3, r4, r5, lr}
 3832              		.save {r3, r4, r5, lr}
 3833              	.LCFI38:
 3834              		.cfi_def_cfa_offset 16
 3835              		.cfi_offset 3, -16
 3836              		.cfi_offset 4, -12
 3837              		.cfi_offset 5, -8
 3838              		.cfi_offset 14, -4
2969:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3839              		.loc 1 2969 0
 3840 0002 1D4B     		ldr	r3, .L343
 3841 0004 1B68     		ldr	r3, [r3]
 3842 0006 43B9     		cbnz	r3, .L335
 3843              	.LBB203:
 3844              	.LBB204:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 164


 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 3845              		.loc 2 244 0
 3846              		.syntax unified
 3847              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3848 0008 4FF01003 			mov r3, #16												
 3849 000c 83F31188 		msr basepri, r3											
 3850 0010 BFF36F8F 		isb														
 3851 0014 BFF34F8F 		dsb														
 3852              	
 3853              	@ 0 "" 2
 3854              	.LVL324:
 3855              		.thumb
 3856              		.syntax unified
 3857              	.L336:
 3858 0018 FEE7     		b	.L336
 3859              	.L335:
 3860              	.LBE204:
 3861              	.LBE203:
2972:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3862              		.loc 1 2972 0
 3863 001a 41F00041 		orr	r1, r1, #-2147483648
 3864              	.LVL325:
 3865 001e 0160     		str	r1, [r0]
2976:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3866              		.loc 1 2976 0
 3867 0020 C468     		ldr	r4, [r0, #12]
 3868              	.LVL326:
2977:../Middlewares/FreeRTOS//Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3869              		.loc 1 2977 0
 3870 0022 F4B1     		cbz	r4, .L342
2978:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3871              		.loc 1 2978 0
 3872 0024 FFF7FEFF 		bl	uxListRemove
 3873              	.LVL327:
2983:../Middlewares/FreeRTOS//Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3874              		.loc 1 2983 0
 3875 0028 251D     		adds	r5, r4, #4
 3876 002a 2846     		mov	r0, r5
 3877 002c FFF7FEFF 		bl	uxListRemove
 3878              	.LVL328:
2984:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3879              		.loc 1 2984 0
 3880 0030 1248     		ldr	r0, .L343+4
 3881 0032 0268     		ldr	r2, [r0]
 3882 0034 E36A     		ldr	r3, [r4, #44]
 3883 0036 0121     		movs	r1, #1
 3884 0038 9940     		lsls	r1, r1, r3
 3885 003a 0A43     		orrs	r2, r2, r1
 3886 003c 0260     		str	r2, [r0]
 3887 003e 03EB8303 		add	r3, r3, r3, lsl #2
 3888 0042 9A00     		lsls	r2, r3, #2
 3889 0044 2946     		mov	r1, r5
 3890 0046 0E48     		ldr	r0, .L343+8
 3891 0048 1044     		add	r0, r0, r2
 3892 004a FFF7FEFF 		bl	vListInsertEnd
 3893              	.LVL329:
2986:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 165


 3894              		.loc 1 2986 0
 3895 004e E26A     		ldr	r2, [r4, #44]
 3896 0050 0C4B     		ldr	r3, .L343+12
 3897 0052 1B68     		ldr	r3, [r3]
 3898 0054 DB6A     		ldr	r3, [r3, #44]
 3899 0056 9A42     		cmp	r2, r3
 3900 0058 0CD9     		bls	.L340
 3901              	.LVL330:
2996:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 3902              		.loc 1 2996 0
 3903 005a 0120     		movs	r0, #1
 3904 005c 0A4B     		ldr	r3, .L343+16
 3905 005e 1860     		str	r0, [r3]
 3906              	.LVL331:
 3907              	.L334:
3004:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 3908              		.loc 1 3004 0
 3909 0060 38BD     		pop	{r3, r4, r5, pc}
 3910              	.LVL332:
 3911              	.L342:
 3912              	.LBB205:
 3913              	.LBB206:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 3914              		.loc 2 244 0
 3915              		.syntax unified
 3916              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3917 0062 4FF01003 			mov r3, #16												
 3918 0066 83F31188 		msr basepri, r3											
 3919 006a BFF36F8F 		isb														
 3920 006e BFF34F8F 		dsb														
 3921              	
 3922              	@ 0 "" 2
 3923              	.LVL333:
 3924              		.thumb
 3925              		.syntax unified
 3926              	.L338:
 3927 0072 FEE7     		b	.L338
 3928              	.LVL334:
 3929              	.L340:
 3930              	.LBE206:
 3931              	.LBE205:
3000:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 3932              		.loc 1 3000 0
 3933 0074 0020     		movs	r0, #0
 3934              	.LVL335:
3003:../Middlewares/FreeRTOS//Source/tasks.c **** }
 3935              		.loc 1 3003 0
 3936 0076 F3E7     		b	.L334
 3937              	.L344:
 3938              		.align	2
 3939              	.L343:
 3940 0078 00000000 		.word	.LANCHOR16
 3941 007c 00000000 		.word	.LANCHOR13
 3942 0080 00000000 		.word	.LANCHOR4
 3943 0084 00000000 		.word	.LANCHOR10
 3944 0088 00000000 		.word	.LANCHOR20
 3945              		.cfi_endproc
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 166


 3946              	.LFE165:
 3947              		.fnend
 3949              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3950              		.align	1
 3951              		.global	vTaskSetTimeOutState
 3952              		.syntax unified
 3953              		.thumb
 3954              		.thumb_func
 3955              		.fpu fpv4-sp-d16
 3957              	vTaskSetTimeOutState:
 3958              		.fnstart
 3959              	.LFB166:
3008:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxTimeOut );
 3960              		.loc 1 3008 0
 3961              		.cfi_startproc
 3962              		@ args = 0, pretend = 0, frame = 0
 3963              		@ frame_needed = 0, uses_anonymous_args = 0
 3964              		@ link register save eliminated.
 3965              	.LVL336:
3009:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3966              		.loc 1 3009 0
 3967 0000 30B1     		cbz	r0, .L348
3010:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3968              		.loc 1 3010 0
 3969 0002 084A     		ldr	r2, .L349
 3970 0004 1268     		ldr	r2, [r2]
 3971 0006 0260     		str	r2, [r0]
3011:../Middlewares/FreeRTOS//Source/tasks.c **** }
 3972              		.loc 1 3011 0
 3973 0008 074A     		ldr	r2, .L349+4
 3974 000a 1268     		ldr	r2, [r2]
 3975 000c 4260     		str	r2, [r0, #4]
3012:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 3976              		.loc 1 3012 0
 3977 000e 7047     		bx	lr
 3978              	.L348:
 3979              	.LBB207:
 3980              	.LBB208:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 3981              		.loc 2 244 0
 3982              		.syntax unified
 3983              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3984 0010 4FF01003 			mov r3, #16												
 3985 0014 83F31188 		msr basepri, r3											
 3986 0018 BFF36F8F 		isb														
 3987 001c BFF34F8F 		dsb														
 3988              	
 3989              	@ 0 "" 2
 3990              	.LVL337:
 3991              		.thumb
 3992              		.syntax unified
 3993              	.L347:
 3994 0020 FEE7     		b	.L347
 3995              	.L350:
 3996 0022 00BF     		.align	2
 3997              	.L349:
 3998 0024 00000000 		.word	.LANCHOR18
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 167


 3999 0028 00000000 		.word	.LANCHOR14
 4000              	.LBE208:
 4001              	.LBE207:
 4002              		.cfi_endproc
 4003              	.LFE166:
 4004              		.cantunwind
 4005              		.fnend
 4007              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4008              		.align	1
 4009              		.global	xTaskCheckForTimeOut
 4010              		.syntax unified
 4011              		.thumb
 4012              		.thumb_func
 4013              		.fpu fpv4-sp-d16
 4015              	xTaskCheckForTimeOut:
 4016              		.fnstart
 4017              	.LFB167:
3016:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xReturn;
 4018              		.loc 1 3016 0
 4019              		.cfi_startproc
 4020              		@ args = 0, pretend = 0, frame = 0
 4021              		@ frame_needed = 0, uses_anonymous_args = 0
 4022              	.LVL338:
 4023 0000 38B5     		push	{r3, r4, r5, lr}
 4024              		.save {r3, r4, r5, lr}
 4025              	.LCFI39:
 4026              		.cfi_def_cfa_offset 16
 4027              		.cfi_offset 3, -16
 4028              		.cfi_offset 4, -12
 4029              		.cfi_offset 5, -8
 4030              		.cfi_offset 14, -4
3019:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4031              		.loc 1 3019 0
 4032 0002 50B1     		cbz	r0, .L362
 4033 0004 0446     		mov	r4, r0
3020:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4034              		.loc 1 3020 0
 4035 0006 89B9     		cbnz	r1, .L354
 4036              	.LBB209:
 4037              	.LBB210:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 4038              		.loc 2 244 0
 4039              		.syntax unified
 4040              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4041 0008 4FF01003 			mov r3, #16												
 4042 000c 83F31188 		msr basepri, r3											
 4043 0010 BFF36F8F 		isb														
 4044 0014 BFF34F8F 		dsb														
 4045              	
 4046              	@ 0 "" 2
 4047              	.LVL339:
 4048              		.thumb
 4049              		.syntax unified
 4050              	.L355:
 4051 0018 FEE7     		b	.L355
 4052              	.L362:
 4053              	.LBE210:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 168


 4054              	.LBE209:
 4055              	.LBB211:
 4056              	.LBB212:
 4057              		.syntax unified
 4058              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4059 001a 4FF01003 			mov r3, #16												
 4060 001e 83F31188 		msr basepri, r3											
 4061 0022 BFF36F8F 		isb														
 4062 0026 BFF34F8F 		dsb														
 4063              	
 4064              	@ 0 "" 2
 4065              	.LVL340:
 4066              		.thumb
 4067              		.syntax unified
 4068              	.L353:
 4069 002a FEE7     		b	.L353
 4070              	.L354:
 4071 002c 0D46     		mov	r5, r1
 4072              	.LBE212:
 4073              	.LBE211:
3022:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 4074              		.loc 1 3022 0
 4075 002e FFF7FEFF 		bl	vPortEnterCritical
 4076              	.LVL341:
 4077              	.LBB213:
3025:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4078              		.loc 1 3025 0
 4079 0032 114B     		ldr	r3, .L364
 4080 0034 1968     		ldr	r1, [r3]
 4081              	.LVL342:
3039:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 4082              		.loc 1 3039 0
 4083 0036 2B68     		ldr	r3, [r5]
 4084 0038 B3F1FF3F 		cmp	r3, #-1
 4085 003c 18D0     		beq	.L358
3049:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 4086              		.loc 1 3049 0
 4087 003e 2068     		ldr	r0, [r4]
 4088 0040 0E4A     		ldr	r2, .L364+4
 4089 0042 1268     		ldr	r2, [r2]
 4090 0044 9042     		cmp	r0, r2
 4091 0046 02D0     		beq	.L357
3049:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 4092              		.loc 1 3049 0 is_stmt 0 discriminator 1
 4093 0048 6268     		ldr	r2, [r4, #4]
 4094 004a 8A42     		cmp	r2, r1
 4095 004c 12D9     		bls	.L359
 4096              	.L357:
3058:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 4097              		.loc 1 3058 0 is_stmt 1
 4098 004e 6268     		ldr	r2, [r4, #4]
 4099 0050 881A     		subs	r0, r1, r2
 4100 0052 8342     		cmp	r3, r0
 4101 0054 04D8     		bhi	.L363
3067:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4102              		.loc 1 3067 0
 4103 0056 0124     		movs	r4, #1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 169


 4104              	.LVL343:
 4105              	.L356:
 4106              	.LBE213:
3070:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4107              		.loc 1 3070 0
 4108 0058 FFF7FEFF 		bl	vPortExitCritical
 4109              	.LVL344:
3073:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 4110              		.loc 1 3073 0
 4111 005c 2046     		mov	r0, r4
 4112 005e 38BD     		pop	{r3, r4, r5, pc}
 4113              	.LVL345:
 4114              	.L363:
 4115              	.LBB214:
3061:../Middlewares/FreeRTOS//Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 4116              		.loc 1 3061 0
 4117 0060 521A     		subs	r2, r2, r1
 4118 0062 1344     		add	r3, r3, r2
 4119 0064 2B60     		str	r3, [r5]
3062:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = pdFALSE;
 4120              		.loc 1 3062 0
 4121 0066 2046     		mov	r0, r4
 4122 0068 FFF7FEFF 		bl	vTaskSetTimeOutState
 4123              	.LVL346:
3063:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4124              		.loc 1 3063 0
 4125 006c 0024     		movs	r4, #0
 4126              	.LVL347:
 4127 006e F3E7     		b	.L356
 4128              	.LVL348:
 4129              	.L358:
3044:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 4130              		.loc 1 3044 0
 4131 0070 0024     		movs	r4, #0
 4132              	.LVL349:
 4133 0072 F1E7     		b	.L356
 4134              	.LVL350:
 4135              	.L359:
3056:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4136              		.loc 1 3056 0
 4137 0074 0124     		movs	r4, #1
 4138              	.LVL351:
 4139 0076 EFE7     		b	.L356
 4140              	.L365:
 4141              		.align	2
 4142              	.L364:
 4143 0078 00000000 		.word	.LANCHOR14
 4144 007c 00000000 		.word	.LANCHOR18
 4145              	.LBE214:
 4146              		.cfi_endproc
 4147              	.LFE167:
 4148              		.fnend
 4150              		.section	.text.vTaskMissedYield,"ax",%progbits
 4151              		.align	1
 4152              		.global	vTaskMissedYield
 4153              		.syntax unified
 4154              		.thumb
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 170


 4155              		.thumb_func
 4156              		.fpu fpv4-sp-d16
 4158              	vTaskMissedYield:
 4159              		.fnstart
 4160              	.LFB168:
3077:../Middlewares/FreeRTOS//Source/tasks.c **** 	xYieldPending = pdTRUE;
 4161              		.loc 1 3077 0
 4162              		.cfi_startproc
 4163              		@ args = 0, pretend = 0, frame = 0
 4164              		@ frame_needed = 0, uses_anonymous_args = 0
 4165              		@ link register save eliminated.
3078:../Middlewares/FreeRTOS//Source/tasks.c **** }
 4166              		.loc 1 3078 0
 4167 0000 014B     		ldr	r3, .L367
 4168 0002 0122     		movs	r2, #1
 4169 0004 1A60     		str	r2, [r3]
3079:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 4170              		.loc 1 3079 0
 4171 0006 7047     		bx	lr
 4172              	.L368:
 4173              		.align	2
 4174              	.L367:
 4175 0008 00000000 		.word	.LANCHOR20
 4176              		.cfi_endproc
 4177              	.LFE168:
 4178              		.cantunwind
 4179              		.fnend
 4181              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4182              		.align	1
 4183              		.global	uxTaskGetTaskNumber
 4184              		.syntax unified
 4185              		.thumb
 4186              		.thumb_func
 4187              		.fpu fpv4-sp-d16
 4189              	uxTaskGetTaskNumber:
 4190              		.fnstart
 4191              	.LFB169:
3085:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxReturn;
 4192              		.loc 1 3085 0
 4193              		.cfi_startproc
 4194              		@ args = 0, pretend = 0, frame = 0
 4195              		@ frame_needed = 0, uses_anonymous_args = 0
 4196              		@ link register save eliminated.
 4197              	.LVL352:
3089:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 4198              		.loc 1 3089 0
 4199 0000 08B1     		cbz	r0, .L371
 4200              	.LVL353:
3092:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4201              		.loc 1 3092 0
 4202 0002 C06C     		ldr	r0, [r0, #76]
 4203              	.LVL354:
 4204 0004 7047     		bx	lr
 4205              	.LVL355:
 4206              	.L371:
3096:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4207              		.loc 1 3096 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 171


 4208 0006 0020     		movs	r0, #0
 4209              	.LVL356:
3100:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4210              		.loc 1 3100 0
 4211 0008 7047     		bx	lr
 4212              		.cfi_endproc
 4213              	.LFE169:
 4214              		.cantunwind
 4215              		.fnend
 4217              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4218              		.align	1
 4219              		.global	vTaskSetTaskNumber
 4220              		.syntax unified
 4221              		.thumb
 4222              		.thumb_func
 4223              		.fpu fpv4-sp-d16
 4225              	vTaskSetTaskNumber:
 4226              		.fnstart
 4227              	.LFB170:
3108:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
 4228              		.loc 1 3108 0
 4229              		.cfi_startproc
 4230              		@ args = 0, pretend = 0, frame = 0
 4231              		@ frame_needed = 0, uses_anonymous_args = 0
 4232              		@ link register save eliminated.
 4233              	.LVL357:
3111:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 4234              		.loc 1 3111 0
 4235 0000 00B1     		cbz	r0, .L372
 4236              	.LVL358:
3114:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4237              		.loc 1 3114 0
 4238 0002 C164     		str	r1, [r0, #76]
 4239              	.LVL359:
 4240              	.L372:
3116:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4241              		.loc 1 3116 0
 4242 0004 7047     		bx	lr
 4243              		.cfi_endproc
 4244              	.LFE170:
 4245              		.cantunwind
 4246              		.fnend
 4248              		.section	.text.vTaskGetInfo,"ax",%progbits
 4249              		.align	1
 4250              		.global	vTaskGetInfo
 4251              		.syntax unified
 4252              		.thumb
 4253              		.thumb_func
 4254              		.fpu fpv4-sp-d16
 4256              	vTaskGetInfo:
 4257              		.fnstart
 4258              	.LFB174:
3412:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
 4259              		.loc 1 3412 0
 4260              		.cfi_startproc
 4261              		@ args = 0, pretend = 0, frame = 0
 4262              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 172


 4263              	.LVL360:
 4264 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4265              		.save {r4, r5, r6, r7, r8, lr}
 4266              	.LCFI40:
 4267              		.cfi_def_cfa_offset 24
 4268              		.cfi_offset 4, -24
 4269              		.cfi_offset 5, -20
 4270              		.cfi_offset 6, -16
 4271              		.cfi_offset 7, -12
 4272              		.cfi_offset 8, -8
 4273              		.cfi_offset 14, -4
 4274 0004 0C46     		mov	r4, r1
 4275 0006 1746     		mov	r7, r2
 4276 0008 1E46     		mov	r6, r3
3416:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4277              		.loc 1 3416 0
 4278 000a 8046     		mov	r8, r0
 4279 000c C8B1     		cbz	r0, .L384
 4280 000e 0546     		mov	r5, r0
 4281              	.LVL361:
 4282              	.L375:
3418:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4283              		.loc 1 3418 0 discriminator 4
 4284 0010 2560     		str	r5, [r4]
3419:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4285              		.loc 1 3419 0 discriminator 4
 4286 0012 05F13403 		add	r3, r5, #52
 4287 0016 6360     		str	r3, [r4, #4]
3420:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4288              		.loc 1 3420 0 discriminator 4
 4289 0018 EB6A     		ldr	r3, [r5, #44]
 4290 001a 2361     		str	r3, [r4, #16]
3421:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4291              		.loc 1 3421 0 discriminator 4
 4292 001c 2B6B     		ldr	r3, [r5, #48]
 4293 001e E361     		str	r3, [r4, #28]
3422:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4294              		.loc 1 3422 0 discriminator 4
 4295 0020 AB6C     		ldr	r3, [r5, #72]
 4296 0022 A360     		str	r3, [r4, #8]
3429:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 4297              		.loc 1 3429 0 discriminator 4
 4298 0024 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 4299 0026 032B     		cmp	r3, #3
 4300 0028 0ED0     		beq	.L385
 4301              	.LVL362:
 4302              	.L376:
3445:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4303              		.loc 1 3445 0
 4304 002a 2B6D     		ldr	r3, [r5, #80]
 4305 002c 6361     		str	r3, [r4, #20]
3455:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4306              		.loc 1 3455 0
 4307 002e AB6D     		ldr	r3, [r5, #88]
 4308 0030 A361     		str	r3, [r4, #24]
3466:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 4309              		.loc 1 3466 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 173


 4310 0032 052E     		cmp	r6, #5
 4311 0034 11D0     		beq	.L378
3468:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4312              		.loc 1 3468 0
 4313 0036 2673     		strb	r6, [r4, #12]
 4314              	.L379:
3477:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 4315              		.loc 1 3477 0
 4316 0038 A7B9     		cbnz	r7, .L386
3491:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4317              		.loc 1 3491 0
 4318 003a 0023     		movs	r3, #0
 4319 003c 2384     		strh	r3, [r4, #32]	@ movhi
 4320              	.L374:
3493:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4321              		.loc 1 3493 0
 4322 003e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4323              	.LVL363:
 4324              	.L384:
3416:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4325              		.loc 1 3416 0 discriminator 1
 4326 0042 0B4B     		ldr	r3, .L387
 4327              	.LVL364:
 4328 0044 1D68     		ldr	r5, [r3]
 4329 0046 E3E7     		b	.L375
 4330              	.LVL365:
 4331              	.L385:
3431:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 4332              		.loc 1 3431 0
 4333 0048 FFF7FEFF 		bl	vTaskSuspendAll
 4334              	.LVL366:
3433:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 4335              		.loc 1 3433 0
 4336 004c AB6A     		ldr	r3, [r5, #40]
 4337 004e 0BB1     		cbz	r3, .L377
3435:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 4338              		.loc 1 3435 0
 4339 0050 0223     		movs	r3, #2
 4340 0052 2373     		strb	r3, [r4, #12]
 4341              	.L377:
3438:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 4342              		.loc 1 3438 0
 4343 0054 FFF7FEFF 		bl	xTaskResumeAll
 4344              	.LVL367:
 4345 0058 E7E7     		b	.L376
 4346              	.L378:
3472:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4347              		.loc 1 3472 0
 4348 005a 4046     		mov	r0, r8
 4349 005c FFF7FEFF 		bl	eTaskGetState
 4350              	.LVL368:
 4351 0060 2073     		strb	r0, [r4, #12]
 4352 0062 E9E7     		b	.L379
 4353              	.L386:
3485:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 4354              		.loc 1 3485 0
 4355 0064 286B     		ldr	r0, [r5, #48]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 174


 4356 0066 FFF7FEFF 		bl	_ZL26prvTaskCheckFreeStackSpacePKh
 4357              	.LVL369:
 4358 006a 2084     		strh	r0, [r4, #32]	@ movhi
 4359 006c E7E7     		b	.L374
 4360              	.L388:
 4361 006e 00BF     		.align	2
 4362              	.L387:
 4363 0070 00000000 		.word	.LANCHOR10
 4364              		.cfi_endproc
 4365              	.LFE174:
 4366              		.fnend
 4368              		.section	.text._ZL28prvListTasksWithinSingleListP12xTASK_STATUSP5xLIST10eTaskState,"ax",%progbits
 4369              		.align	1
 4370              		.syntax unified
 4371              		.thumb
 4372              		.thumb_func
 4373              		.fpu fpv4-sp-d16
 4375              	_ZL28prvListTasksWithinSingleListP12xTASK_STATUSP5xLIST10eTaskState:
 4376              		.fnstart
 4377              	.LFB175:
3501:../Middlewares/FreeRTOS//Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
 4378              		.loc 1 3501 0
 4379              		.cfi_startproc
 4380              		@ args = 0, pretend = 0, frame = 0
 4381              		@ frame_needed = 0, uses_anonymous_args = 0
 4382              	.LVL370:
 4383 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 4384              		.save {r4, r5, r6, r7, r8, r9, r10, lr}
 4385              	.LCFI41:
 4386              		.cfi_def_cfa_offset 32
 4387              		.cfi_offset 4, -32
 4388              		.cfi_offset 5, -28
 4389              		.cfi_offset 6, -24
 4390              		.cfi_offset 7, -20
 4391              		.cfi_offset 8, -16
 4392              		.cfi_offset 9, -12
 4393              		.cfi_offset 10, -8
 4394              		.cfi_offset 14, -4
 4395              	.LVL371:
 4396              	.LBB215:
3505:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 4397              		.loc 1 3505 0
 4398 0004 0C68     		ldr	r4, [r1]
 4399 0006 3CB3     		cbz	r4, .L389
 4400              	.LVL372:
 4401              	.LBB216:
 4402              	.LBB217:
3507:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4403              		.loc 1 3507 0
 4404 0008 4B68     		ldr	r3, [r1, #4]
 4405 000a 5B68     		ldr	r3, [r3, #4]
 4406 000c 4B60     		str	r3, [r1, #4]
 4407 000e 01F10809 		add	r9, r1, #8
 4408 0012 4B45     		cmp	r3, r9
 4409 0014 07D0     		beq	.L395
 4410              	.L391:
 4411 0016 9046     		mov	r8, r2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 175


 4412 0018 0D46     		mov	r5, r1
 4413 001a 0746     		mov	r7, r0
3507:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4414              		.loc 1 3507 0 is_stmt 0 discriminator 3
 4415 001c 4B68     		ldr	r3, [r1, #4]
 4416 001e D3F80CA0 		ldr	r10, [r3, #12]
 4417              	.LVL373:
 4418              	.LBE217:
 4419              	.LBE216:
 4420              	.LBE215:
3503:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4421              		.loc 1 3503 0 is_stmt 1 discriminator 3
 4422 0022 0024     		movs	r4, #0
 4423 0024 10E0     		b	.L393
 4424              	.LVL374:
 4425              	.L395:
 4426              	.LBB224:
 4427              	.LBB223:
 4428              	.LBB218:
3507:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4429              		.loc 1 3507 0 discriminator 1
 4430 0026 5B68     		ldr	r3, [r3, #4]
 4431 0028 4B60     		str	r3, [r1, #4]
 4432 002a F4E7     		b	.L391
 4433              	.LVL375:
 4434              	.L392:
 4435              	.LBE218:
 4436              	.LBB219:
 4437              	.LBB220:
3515:../Middlewares/FreeRTOS//Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4438              		.loc 1 3515 0 discriminator 3
 4439 002c 6B68     		ldr	r3, [r5, #4]
 4440 002e DE68     		ldr	r6, [r3, #12]
 4441              	.LVL376:
 4442              	.LBE220:
3516:../Middlewares/FreeRTOS//Source/tasks.c **** 				uxTask++;
 4443              		.loc 1 3516 0 discriminator 3
 4444 0030 04EBC403 		add	r3, r4, r4, lsl #3
 4445 0034 9900     		lsls	r1, r3, #2
 4446 0036 4346     		mov	r3, r8
 4447 0038 0122     		movs	r2, #1
 4448 003a 3944     		add	r1, r1, r7
 4449 003c 3046     		mov	r0, r6
 4450 003e FFF7FEFF 		bl	vTaskGetInfo
 4451              	.LVL377:
3517:../Middlewares/FreeRTOS//Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4452              		.loc 1 3517 0 discriminator 3
 4453 0042 0134     		adds	r4, r4, #1
 4454              	.LVL378:
 4455              	.LBE219:
3518:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4456              		.loc 1 3518 0 discriminator 3
 4457 0044 B245     		cmp	r10, r6
 4458 0046 07D0     		beq	.L389
 4459              	.LVL379:
 4460              	.L393:
 4461              	.LBB222:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 176


 4462              	.LBB221:
3515:../Middlewares/FreeRTOS//Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4463              		.loc 1 3515 0
 4464 0048 6B68     		ldr	r3, [r5, #4]
 4465 004a 5B68     		ldr	r3, [r3, #4]
 4466 004c 6B60     		str	r3, [r5, #4]
 4467 004e 9945     		cmp	r9, r3
 4468 0050 ECD1     		bne	.L392
3515:../Middlewares/FreeRTOS//Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4469              		.loc 1 3515 0 is_stmt 0 discriminator 1
 4470 0052 5B68     		ldr	r3, [r3, #4]
 4471 0054 6B60     		str	r3, [r5, #4]
 4472 0056 E9E7     		b	.L392
 4473              	.LVL380:
 4474              	.L389:
 4475              	.LBE221:
 4476              	.LBE222:
 4477              	.LBE223:
 4478              	.LBE224:
3526:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4479              		.loc 1 3526 0 is_stmt 1
 4480 0058 2046     		mov	r0, r4
 4481 005a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4482              		.cfi_endproc
 4483              	.LFE175:
 4484              		.fnend
 4486              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 4487              		.align	1
 4488              		.global	uxTaskGetSystemState
 4489              		.syntax unified
 4490              		.thumb
 4491              		.thumb_func
 4492              		.fpu fpv4-sp-d16
 4494              	uxTaskGetSystemState:
 4495              		.fnstart
 4496              	.LFB158:
2322:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4497              		.loc 1 2322 0
 4498              		.cfi_startproc
 4499              		@ args = 0, pretend = 0, frame = 0
 4500              		@ frame_needed = 0, uses_anonymous_args = 0
 4501              	.LVL381:
 4502 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4503              		.save {r3, r4, r5, r6, r7, lr}
 4504              	.LCFI42:
 4505              		.cfi_def_cfa_offset 24
 4506              		.cfi_offset 3, -24
 4507              		.cfi_offset 4, -20
 4508              		.cfi_offset 5, -16
 4509              		.cfi_offset 6, -12
 4510              		.cfi_offset 7, -8
 4511              		.cfi_offset 14, -4
 4512 0002 0746     		mov	r7, r0
 4513 0004 0C46     		mov	r4, r1
 4514 0006 1646     		mov	r6, r2
 4515              	.LVL382:
2325:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 177


 4516              		.loc 1 2325 0
 4517 0008 FFF7FEFF 		bl	vTaskSuspendAll
 4518              	.LVL383:
2328:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 4519              		.loc 1 2328 0
 4520 000c 224B     		ldr	r3, .L401
 4521 000e 1B68     		ldr	r3, [r3]
 4522 0010 A342     		cmp	r3, r4
 4523 0012 3CD8     		bhi	.L399
2323:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4524              		.loc 1 2323 0
 4525 0014 0A25     		movs	r5, #10
 4526 0016 0024     		movs	r4, #0
 4527              	.LVL384:
 4528              	.L398:
2334:../Middlewares/FreeRTOS//Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 4529              		.loc 1 2334 0
 4530 0018 013D     		subs	r5, r5, #1
 4531              	.LVL385:
2335:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4532              		.loc 1 2335 0
 4533 001a 04EBC403 		add	r3, r4, r4, lsl #3
 4534 001e 9800     		lsls	r0, r3, #2
 4535 0020 05EB8502 		add	r2, r5, r5, lsl #2
 4536 0024 9300     		lsls	r3, r2, #2
 4537 0026 0122     		movs	r2, #1
 4538 0028 1C49     		ldr	r1, .L401+4
 4539 002a 1944     		add	r1, r1, r3
 4540 002c 3844     		add	r0, r0, r7
 4541 002e FFF7FEFF 		bl	_ZL28prvListTasksWithinSingleListP12xTASK_STATUSP5xLIST10eTaskState
 4542              	.LVL386:
 4543 0032 0444     		add	r4, r4, r0
 4544              	.LVL387:
2337:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4545              		.loc 1 2337 0
 4546 0034 002D     		cmp	r5, #0
 4547 0036 EFD1     		bne	.L398
2341:../Middlewares/FreeRTOS//Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4548              		.loc 1 2341 0
 4549 0038 04EBC403 		add	r3, r4, r4, lsl #3
 4550 003c 9800     		lsls	r0, r3, #2
 4551 003e 184B     		ldr	r3, .L401+8
 4552 0040 1968     		ldr	r1, [r3]
 4553 0042 0222     		movs	r2, #2
 4554 0044 3844     		add	r0, r0, r7
 4555 0046 FFF7FEFF 		bl	_ZL28prvListTasksWithinSingleListP12xTASK_STATUSP5xLIST10eTaskState
 4556              	.LVL388:
 4557 004a 0444     		add	r4, r4, r0
 4558              	.LVL389:
2342:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4559              		.loc 1 2342 0
 4560 004c 04EBC403 		add	r3, r4, r4, lsl #3
 4561 0050 9800     		lsls	r0, r3, #2
 4562 0052 144B     		ldr	r3, .L401+12
 4563 0054 1968     		ldr	r1, [r3]
 4564 0056 0222     		movs	r2, #2
 4565 0058 3844     		add	r0, r0, r7
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 178


 4566 005a FFF7FEFF 		bl	_ZL28prvListTasksWithinSingleListP12xTASK_STATUSP5xLIST10eTaskState
 4567              	.LVL390:
 4568 005e 0444     		add	r4, r4, r0
 4569              	.LVL391:
2348:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 4570              		.loc 1 2348 0
 4571 0060 04EBC403 		add	r3, r4, r4, lsl #3
 4572 0064 9800     		lsls	r0, r3, #2
 4573 0066 0422     		movs	r2, #4
 4574 0068 0F49     		ldr	r1, .L401+16
 4575 006a 3844     		add	r0, r0, r7
 4576 006c FFF7FEFF 		bl	_ZL28prvListTasksWithinSingleListP12xTASK_STATUSP5xLIST10eTaskState
 4577              	.LVL392:
 4578 0070 0444     		add	r4, r4, r0
 4579              	.LVL393:
2356:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 4580              		.loc 1 2356 0
 4581 0072 04EBC403 		add	r3, r4, r4, lsl #3
 4582 0076 9800     		lsls	r0, r3, #2
 4583 0078 0322     		movs	r2, #3
 4584 007a 0C49     		ldr	r1, .L401+20
 4585 007c 3844     		add	r0, r0, r7
 4586 007e FFF7FEFF 		bl	_ZL28prvListTasksWithinSingleListP12xTASK_STATUSP5xLIST10eTaskState
 4587              	.LVL394:
 4588 0082 0444     		add	r4, r4, r0
 4589              	.LVL395:
2362:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 4590              		.loc 1 2362 0
 4591 0084 26B1     		cbz	r6, .L397
2367:../Middlewares/FreeRTOS//Source/tasks.c **** 						#endif
 4592              		.loc 1 2367 0
 4593 0086 0A4B     		ldr	r3, .L401+24
 4594 0088 1B68     		ldr	r3, [r3]
 4595 008a 3360     		str	r3, [r6]
 4596 008c 00E0     		b	.L397
 4597              	.LVL396:
 4598              	.L399:
2323:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4599              		.loc 1 2323 0
 4600 008e 0024     		movs	r4, #0
 4601              	.LVL397:
 4602              	.L397:
2385:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4603              		.loc 1 2385 0
 4604 0090 FFF7FEFF 		bl	xTaskResumeAll
 4605              	.LVL398:
2388:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4606              		.loc 1 2388 0
 4607 0094 2046     		mov	r0, r4
 4608 0096 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4609              	.LVL399:
 4610              	.L402:
 4611              		.align	2
 4612              	.L401:
 4613 0098 00000000 		.word	.LANCHOR9
 4614 009c 00000000 		.word	.LANCHOR4
 4615 00a0 00000000 		.word	.LANCHOR2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 179


 4616 00a4 00000000 		.word	.LANCHOR8
 4617 00a8 00000000 		.word	.LANCHOR7
 4618 00ac 00000000 		.word	.LANCHOR0
 4619 00b0 00000000 		.word	ulHighFrequencyTimerTicks
 4620              		.cfi_endproc
 4621              	.LFE158:
 4622              		.fnend
 4624              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4625              		.align	1
 4626              		.global	xTaskGetCurrentTaskHandle
 4627              		.syntax unified
 4628              		.thumb
 4629              		.thumb_func
 4630              		.fpu fpv4-sp-d16
 4632              	xTaskGetCurrentTaskHandle:
 4633              		.fnstart
 4634              	.LFB179:
3662:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskHandle_t xReturn;
 4635              		.loc 1 3662 0
 4636              		.cfi_startproc
 4637              		@ args = 0, pretend = 0, frame = 0
 4638              		@ frame_needed = 0, uses_anonymous_args = 0
 4639              		@ link register save eliminated.
3668:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4640              		.loc 1 3668 0
 4641 0000 014B     		ldr	r3, .L404
 4642 0002 1868     		ldr	r0, [r3]
 4643              	.LVL400:
3671:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4644              		.loc 1 3671 0
 4645 0004 7047     		bx	lr
 4646              	.L405:
 4647 0006 00BF     		.align	2
 4648              	.L404:
 4649 0008 00000000 		.word	.LANCHOR10
 4650              		.cfi_endproc
 4651              	.LFE179:
 4652              		.cantunwind
 4653              		.fnend
 4655              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4656              		.align	1
 4657              		.global	xTaskGetSchedulerState
 4658              		.syntax unified
 4659              		.thumb
 4660              		.thumb_func
 4661              		.fpu fpv4-sp-d16
 4663              	xTaskGetSchedulerState:
 4664              		.fnstart
 4665              	.LFB180:
3679:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn;
 4666              		.loc 1 3679 0
 4667              		.cfi_startproc
 4668              		@ args = 0, pretend = 0, frame = 0
 4669              		@ frame_needed = 0, uses_anonymous_args = 0
 4670              		@ link register save eliminated.
3682:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 4671              		.loc 1 3682 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 180


 4672 0000 054B     		ldr	r3, .L411
 4673 0002 1B68     		ldr	r3, [r3]
 4674 0004 33B1     		cbz	r3, .L408
3688:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 4675              		.loc 1 3688 0
 4676 0006 054B     		ldr	r3, .L411+4
 4677 0008 1B68     		ldr	r3, [r3]
 4678 000a 0BB1     		cbz	r3, .L410
3694:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 4679              		.loc 1 3694 0
 4680 000c 0020     		movs	r0, #0
 4681              	.LVL401:
3699:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4682              		.loc 1 3699 0
 4683 000e 7047     		bx	lr
 4684              	.LVL402:
 4685              	.L410:
3690:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 4686              		.loc 1 3690 0
 4687 0010 0220     		movs	r0, #2
 4688 0012 7047     		bx	lr
 4689              	.L408:
3684:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4690              		.loc 1 3684 0
 4691 0014 0120     		movs	r0, #1
 4692 0016 7047     		bx	lr
 4693              	.L412:
 4694              		.align	2
 4695              	.L411:
 4696 0018 00000000 		.word	.LANCHOR11
 4697 001c 00000000 		.word	.LANCHOR16
 4698              		.cfi_endproc
 4699              	.LFE180:
 4700              		.cantunwind
 4701              		.fnend
 4703              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 4704              		.align	1
 4705              		.global	vTaskPriorityInherit
 4706              		.syntax unified
 4707              		.thumb
 4708              		.thumb_func
 4709              		.fpu fpv4-sp-d16
 4711              	vTaskPriorityInherit:
 4712              		.fnstart
 4713              	.LFB181:
3707:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4714              		.loc 1 3707 0
 4715              		.cfi_startproc
 4716              		@ args = 0, pretend = 0, frame = 0
 4717              		@ frame_needed = 0, uses_anonymous_args = 0
 4718              	.LVL403:
3712:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 4719              		.loc 1 3712 0
 4720 0000 0028     		cmp	r0, #0
 4721 0002 46D0     		beq	.L420
3707:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4722              		.loc 1 3707 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 181


 4723 0004 38B5     		push	{r3, r4, r5, lr}
 4724              		.save {r3, r4, r5, lr}
 4725              	.LCFI43:
 4726              		.cfi_def_cfa_offset 16
 4727              		.cfi_offset 3, -16
 4728              		.cfi_offset 4, -12
 4729              		.cfi_offset 5, -8
 4730              		.cfi_offset 14, -4
 4731 0006 0446     		mov	r4, r0
3717:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 4732              		.loc 1 3717 0
 4733 0008 C26A     		ldr	r2, [r0, #44]
 4734 000a 2249     		ldr	r1, .L424
 4735 000c 0968     		ldr	r1, [r1]
 4736 000e C96A     		ldr	r1, [r1, #44]
 4737 0010 8A42     		cmp	r2, r1
 4738 0012 14D2     		bcs	.L413
3722:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 4739              		.loc 1 3722 0
 4740 0014 8169     		ldr	r1, [r0, #24]
 4741 0016 0029     		cmp	r1, #0
 4742 0018 05DB     		blt	.L415
3724:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 4743              		.loc 1 3724 0
 4744 001a 1E49     		ldr	r1, .L424
 4745 001c 0968     		ldr	r1, [r1]
 4746 001e C96A     		ldr	r1, [r1, #44]
 4747 0020 C1F10A01 		rsb	r1, r1, #10
 4748 0024 8161     		str	r1, [r0, #24]
 4749              	.L415:
3733:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 4750              		.loc 1 3733 0
 4751 0026 6069     		ldr	r0, [r4, #20]
 4752              	.LVL404:
 4753 0028 02EB8202 		add	r2, r2, r2, lsl #2
 4754 002c 9100     		lsls	r1, r2, #2
 4755 002e 1A4A     		ldr	r2, .L424+4
 4756 0030 0A44     		add	r2, r2, r1
 4757 0032 9042     		cmp	r0, r2
 4758 0034 04D0     		beq	.L423
3751:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 4759              		.loc 1 3751 0
 4760 0036 174A     		ldr	r2, .L424
 4761 0038 1268     		ldr	r2, [r2]
 4762 003a D26A     		ldr	r2, [r2, #44]
 4763 003c E262     		str	r2, [r4, #44]
 4764              	.LVL405:
 4765              	.L413:
3765:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4766              		.loc 1 3765 0
 4767 003e 38BD     		pop	{r3, r4, r5, pc}
 4768              	.LVL406:
 4769              	.L423:
3735:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 4770              		.loc 1 3735 0
 4771 0040 251D     		adds	r5, r4, #4
 4772 0042 2846     		mov	r0, r5
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 182


 4773 0044 FFF7FEFF 		bl	uxListRemove
 4774              	.LVL407:
 4775 0048 90B1     		cbz	r0, .L417
 4776              	.L418:
3745:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4777              		.loc 1 3745 0
 4778 004a 124B     		ldr	r3, .L424
 4779 004c 1B68     		ldr	r3, [r3]
 4780 004e DB6A     		ldr	r3, [r3, #44]
 4781 0050 E362     		str	r3, [r4, #44]
3746:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 4782              		.loc 1 3746 0
 4783 0052 1248     		ldr	r0, .L424+8
 4784 0054 0268     		ldr	r2, [r0]
 4785 0056 0121     		movs	r1, #1
 4786 0058 9940     		lsls	r1, r1, r3
 4787 005a 0A43     		orrs	r2, r2, r1
 4788 005c 0260     		str	r2, [r0]
 4789 005e 03EB8303 		add	r3, r3, r3, lsl #2
 4790 0062 9A00     		lsls	r2, r3, #2
 4791 0064 2946     		mov	r1, r5
 4792 0066 0C48     		ldr	r0, .L424+4
 4793 0068 1044     		add	r0, r0, r2
 4794 006a FFF7FEFF 		bl	vListInsertEnd
 4795              	.LVL408:
3765:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4796              		.loc 1 3765 0
 4797 006e E6E7     		b	.L413
 4798              	.LVL409:
 4799              	.L417:
3737:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 4800              		.loc 1 3737 0
 4801 0070 E36A     		ldr	r3, [r4, #44]
 4802 0072 03EB8301 		add	r1, r3, r3, lsl #2
 4803 0076 8A00     		lsls	r2, r1, #2
 4804 0078 0749     		ldr	r1, .L424+4
 4805 007a 8A58     		ldr	r2, [r1, r2]
 4806 007c 002A     		cmp	r2, #0
 4807 007e E4D1     		bne	.L418
3737:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 4808              		.loc 1 3737 0 is_stmt 0 discriminator 1
 4809 0080 0648     		ldr	r0, .L424+8
 4810 0082 0268     		ldr	r2, [r0]
 4811 0084 0121     		movs	r1, #1
 4812 0086 01FA03F3 		lsl	r3, r1, r3
 4813 008a 22EA0303 		bic	r3, r2, r3
 4814 008e 0360     		str	r3, [r0]
 4815 0090 DBE7     		b	.L418
 4816              	.LVL410:
 4817              	.L420:
 4818              	.LCFI44:
 4819              		.cfi_def_cfa_offset 0
 4820              		.cfi_restore 3
 4821              		.cfi_restore 4
 4822              		.cfi_restore 5
 4823              		.cfi_restore 14
 4824 0092 7047     		bx	lr
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 183


 4825              	.L425:
 4826              		.align	2
 4827              	.L424:
 4828 0094 00000000 		.word	.LANCHOR10
 4829 0098 00000000 		.word	.LANCHOR4
 4830 009c 00000000 		.word	.LANCHOR13
 4831              		.cfi_endproc
 4832              	.LFE181:
 4833              		.fnend
 4835              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4836              		.align	1
 4837              		.global	xTaskPriorityDisinherit
 4838              		.syntax unified
 4839              		.thumb
 4840              		.thumb_func
 4841              		.fpu fpv4-sp-d16
 4843              	xTaskPriorityDisinherit:
 4844              		.fnstart
 4845              	.LFB182:
3773:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4846              		.loc 1 3773 0 is_stmt 1
 4847              		.cfi_startproc
 4848              		@ args = 0, pretend = 0, frame = 0
 4849              		@ frame_needed = 0, uses_anonymous_args = 0
 4850              	.LVL411:
3777:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 4851              		.loc 1 3777 0
 4852 0000 0028     		cmp	r0, #0
 4853 0002 48D0     		beq	.L433
3773:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4854              		.loc 1 3773 0
 4855 0004 38B5     		push	{r3, r4, r5, lr}
 4856              		.save {r3, r4, r5, lr}
 4857              	.LCFI45:
 4858              		.cfi_def_cfa_offset 16
 4859              		.cfi_offset 3, -16
 4860              		.cfi_offset 4, -12
 4861              		.cfi_offset 5, -8
 4862              		.cfi_offset 14, -4
 4863 0006 0446     		mov	r4, r0
3783:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4864              		.loc 1 3783 0
 4865 0008 264A     		ldr	r2, .L440
 4866 000a 1268     		ldr	r2, [r2]
 4867 000c 8242     		cmp	r2, r0
 4868 000e 08D0     		beq	.L428
 4869              	.LBB225:
 4870              	.LBB226:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 4871              		.loc 2 244 0
 4872              		.syntax unified
 4873              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4874 0010 4FF01003 			mov r3, #16												
 4875 0014 83F31188 		msr basepri, r3											
 4876 0018 BFF36F8F 		isb														
 4877 001c BFF34F8F 		dsb														
 4878              	
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 184


 4879              	@ 0 "" 2
 4880              	.LVL412:
 4881              		.thumb
 4882              		.syntax unified
 4883              	.L429:
 4884 0020 FEE7     		b	.L429
 4885              	.L428:
 4886              	.LBE226:
 4887              	.LBE225:
3785:../Middlewares/FreeRTOS//Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4888              		.loc 1 3785 0
 4889 0022 426D     		ldr	r2, [r0, #84]
 4890 0024 42B9     		cbnz	r2, .L430
 4891              	.LBB227:
 4892              	.LBB228:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 4893              		.loc 2 244 0
 4894              		.syntax unified
 4895              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4896 0026 4FF01003 			mov r3, #16												
 4897 002a 83F31188 		msr basepri, r3											
 4898 002e BFF36F8F 		isb														
 4899 0032 BFF34F8F 		dsb														
 4900              	
 4901              	@ 0 "" 2
 4902              	.LVL413:
 4903              		.thumb
 4904              		.syntax unified
 4905              	.L431:
 4906 0036 FEE7     		b	.L431
 4907              	.L430:
 4908              	.LBE228:
 4909              	.LBE227:
3786:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4910              		.loc 1 3786 0
 4911 0038 013A     		subs	r2, r2, #1
 4912 003a 4265     		str	r2, [r0, #84]
3790:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 4913              		.loc 1 3790 0
 4914 003c C06A     		ldr	r0, [r0, #44]
 4915              	.LVL414:
 4916 003e 216D     		ldr	r1, [r4, #80]
 4917 0040 8842     		cmp	r0, r1
 4918 0042 2AD0     		beq	.L434
3793:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 4919              		.loc 1 3793 0
 4920 0044 5ABB     		cbnz	r2, .L435
3800:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 4921              		.loc 1 3800 0
 4922 0046 251D     		adds	r5, r4, #4
 4923 0048 2846     		mov	r0, r5
 4924 004a FFF7FEFF 		bl	uxListRemove
 4925              	.LVL415:
 4926 004e 68B9     		cbnz	r0, .L432
3802:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 4927              		.loc 1 3802 0
 4928 0050 E06A     		ldr	r0, [r4, #44]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 185


 4929 0052 1423     		movs	r3, #20
 4930 0054 03FB00F3 		mul	r3, r3, r0
 4931 0058 134A     		ldr	r2, .L440+4
 4932 005a D358     		ldr	r3, [r2, r3]
 4933 005c 33B9     		cbnz	r3, .L432
3802:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 4934              		.loc 1 3802 0 is_stmt 0 discriminator 1
 4935 005e 1349     		ldr	r1, .L440+8
 4936 0060 0B68     		ldr	r3, [r1]
 4937 0062 0122     		movs	r2, #1
 4938 0064 8240     		lsls	r2, r2, r0
 4939 0066 23EA0203 		bic	r3, r3, r2
 4940 006a 0B60     		str	r3, [r1]
 4941              	.L432:
3812:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4942              		.loc 1 3812 0 is_stmt 1
 4943 006c 236D     		ldr	r3, [r4, #80]
 4944 006e E362     		str	r3, [r4, #44]
3817:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4945              		.loc 1 3817 0
 4946 0070 C3F10A02 		rsb	r2, r3, #10
 4947 0074 A261     		str	r2, [r4, #24]
3818:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4948              		.loc 1 3818 0
 4949 0076 0D49     		ldr	r1, .L440+8
 4950 0078 0A68     		ldr	r2, [r1]
 4951 007a 0124     		movs	r4, #1
 4952              	.LVL416:
 4953 007c 04FA03F0 		lsl	r0, r4, r3
 4954 0080 0243     		orrs	r2, r2, r0
 4955 0082 0A60     		str	r2, [r1]
 4956 0084 2946     		mov	r1, r5
 4957 0086 084A     		ldr	r2, .L440+4
 4958 0088 1420     		movs	r0, #20
 4959 008a 00FB0320 		mla	r0, r0, r3, r2
 4960 008e FFF7FEFF 		bl	vListInsertEnd
 4961              	.LVL417:
3828:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 4962              		.loc 1 3828 0
 4963 0092 2046     		mov	r0, r4
 4964              	.LVL418:
 4965              	.L426:
3846:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4966              		.loc 1 3846 0
 4967 0094 38BD     		pop	{r3, r4, r5, pc}
 4968              	.LVL419:
 4969              	.L433:
 4970              	.LCFI46:
 4971              		.cfi_def_cfa_offset 0
 4972              		.cfi_restore 3
 4973              		.cfi_restore 4
 4974              		.cfi_restore 5
 4975              		.cfi_restore 14
3775:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4976              		.loc 1 3775 0
 4977 0096 0020     		movs	r0, #0
 4978              	.LVL420:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 186


3846:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4979              		.loc 1 3846 0
 4980 0098 7047     		bx	lr
 4981              	.LVL421:
 4982              	.L434:
 4983              	.LCFI47:
 4984              		.cfi_def_cfa_offset 16
 4985              		.cfi_offset 3, -16
 4986              		.cfi_offset 4, -12
 4987              		.cfi_offset 5, -8
 4988              		.cfi_offset 14, -4
3775:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4989              		.loc 1 3775 0
 4990 009a 0020     		movs	r0, #0
 4991 009c FAE7     		b	.L426
 4992              	.L435:
 4993 009e 0020     		movs	r0, #0
 4994              	.LVL422:
3845:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 4995              		.loc 1 3845 0
 4996 00a0 F8E7     		b	.L426
 4997              	.L441:
 4998 00a2 00BF     		.align	2
 4999              	.L440:
 5000 00a4 00000000 		.word	.LANCHOR10
 5001 00a8 00000000 		.word	.LANCHOR4
 5002 00ac 00000000 		.word	.LANCHOR13
 5003              		.cfi_endproc
 5004              	.LFE182:
 5005              		.fnend
 5007              		.section	.text.vTaskList,"ax",%progbits
 5008              		.align	1
 5009              		.global	vTaskList
 5010              		.syntax unified
 5011              		.thumb
 5012              		.thumb_func
 5013              		.fpu fpv4-sp-d16
 5015              	vTaskList:
 5016              		.fnstart
 5017              	.LFB184:
3943:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 5018              		.loc 1 3943 0
 5019              		.cfi_startproc
 5020              		@ args = 0, pretend = 0, frame = 8
 5021              		@ frame_needed = 0, uses_anonymous_args = 0
 5022              	.LVL423:
 5023 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5024              		.save {r4, r5, r6, r7, lr}
 5025              	.LCFI48:
 5026              		.cfi_def_cfa_offset 20
 5027              		.cfi_offset 4, -20
 5028              		.cfi_offset 5, -16
 5029              		.cfi_offset 6, -12
 5030              		.cfi_offset 7, -8
 5031              		.cfi_offset 14, -4
 5032              		.pad #20
 5033 0002 85B0     		sub	sp, sp, #20
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 187


 5034              	.LCFI49:
 5035              		.cfi_def_cfa_offset 40
 5036 0004 0546     		mov	r5, r0
3974:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5037              		.loc 1 3974 0
 5038 0006 0023     		movs	r3, #0
 5039 0008 0370     		strb	r3, [r0]
3978:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5040              		.loc 1 3978 0
 5041 000a 324B     		ldr	r3, .L454
 5042 000c 1A68     		ldr	r2, [r3]
 5043 000e 0392     		str	r2, [sp, #12]
3983:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5044              		.loc 1 3983 0
 5045 0010 1B68     		ldr	r3, [r3]
 5046 0012 03EBC303 		add	r3, r3, r3, lsl #3
 5047 0016 9800     		lsls	r0, r3, #2
 5048              	.LVL424:
 5049 0018 FFF7FEFF 		bl	pvPortMalloc
 5050              	.LVL425:
3985:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 5051              		.loc 1 3985 0
 5052 001c 0028     		cmp	r0, #0
 5053 001e 56D0     		beq	.L442
 5054 0020 0446     		mov	r4, r0
3988:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5055              		.loc 1 3988 0
 5056 0022 0399     		ldr	r1, [sp, #12]
 5057 0024 0022     		movs	r2, #0
 5058 0026 FFF7FEFF 		bl	uxTaskGetSystemState
 5059              	.LVL426:
 5060 002a 0390     		str	r0, [sp, #12]
3991:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5061              		.loc 1 3991 0
 5062 002c 0023     		movs	r3, #0
 5063 002e 0293     		str	r3, [sp, #8]
 5064 0030 31E0     		b	.L451
 5065              	.L446:
3995:../Middlewares/FreeRTOS//Source/tasks.c **** 										break;
 5066              		.loc 1 3995 0
 5067 0032 5226     		movs	r6, #82
 5068 0034 06E0     		b	.L448
 5069              	.L449:
 5070              	.LVL427:
4001:../Middlewares/FreeRTOS//Source/tasks.c **** 										break;
 5071              		.loc 1 4001 0
 5072 0036 5326     		movs	r6, #83
4002:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5073              		.loc 1 4002 0
 5074 0038 04E0     		b	.L448
 5075              	.LVL428:
 5076              	.L450:
4004:../Middlewares/FreeRTOS//Source/tasks.c **** 										break;
 5077              		.loc 1 4004 0
 5078 003a 4426     		movs	r6, #68
4005:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5079              		.loc 1 4005 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 188


 5080 003c 02E0     		b	.L448
 5081              	.LVL429:
 5082              	.L445:
4009:../Middlewares/FreeRTOS//Source/tasks.c **** 										break;
 5083              		.loc 1 4009 0
 5084 003e 0026     		movs	r6, #0
4010:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 5085              		.loc 1 4010 0
 5086 0040 00E0     		b	.L448
 5087              	.LVL430:
 5088              	.L452:
3998:../Middlewares/FreeRTOS//Source/tasks.c **** 										break;
 5089              		.loc 1 3998 0
 5090 0042 4226     		movs	r6, #66
 5091              	.L448:
 5092              	.LVL431:
4015:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5093              		.loc 1 4015 0 discriminator 2
 5094 0044 029B     		ldr	r3, [sp, #8]
 5095 0046 03EBC303 		add	r3, r3, r3, lsl #3
 5096 004a 9A00     		lsls	r2, r3, #2
 5097 004c 2244     		add	r2, r2, r4
 5098 004e 5168     		ldr	r1, [r2, #4]
 5099 0050 2846     		mov	r0, r5
 5100 0052 FFF7FEFF 		bl	_ZL20prvWriteNameToBufferPcPKc
 5101              	.LVL432:
 5102 0056 0546     		mov	r5, r0
 5103              	.LVL433:
4018:../Middlewares/FreeRTOS//Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
 5104              		.loc 1 4018 0 discriminator 2
 5105 0058 029B     		ldr	r3, [sp, #8]
 5106 005a 03EBC303 		add	r3, r3, r3, lsl #3
 5107 005e 9A00     		lsls	r2, r3, #2
 5108 0060 2244     		add	r2, r2, r4
 5109 0062 1369     		ldr	r3, [r2, #16]
 5110 0064 029A     		ldr	r2, [sp, #8]
 5111 0066 02EBC202 		add	r2, r2, r2, lsl #3
 5112 006a 9100     		lsls	r1, r2, #2
 5113 006c 2144     		add	r1, r1, r4
 5114 006e 0F8C     		ldrh	r7, [r1, #32]
 5115 0070 029A     		ldr	r2, [sp, #8]
 5116 0072 02EBC202 		add	r2, r2, r2, lsl #3
 5117 0076 9100     		lsls	r1, r2, #2
 5118 0078 2144     		add	r1, r1, r4
 5119 007a 8A68     		ldr	r2, [r1, #8]
 5120 007c 0192     		str	r2, [sp, #4]
 5121 007e 0097     		str	r7, [sp]
 5122 0080 3246     		mov	r2, r6
 5123 0082 1549     		ldr	r1, .L454+4
 5124 0084 FFF7FEFF 		bl	sprintf
 5125              	.LVL434:
4019:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 5126              		.loc 1 4019 0 discriminator 2
 5127 0088 2846     		mov	r0, r5
 5128 008a FFF7FEFF 		bl	strlen
 5129              	.LVL435:
 5130 008e 0544     		add	r5, r5, r0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 189


 5131              	.LVL436:
3991:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5132              		.loc 1 3991 0 discriminator 2
 5133 0090 029B     		ldr	r3, [sp, #8]
 5134 0092 0133     		adds	r3, r3, #1
 5135 0094 0293     		str	r3, [sp, #8]
 5136              	.LVL437:
 5137              	.L451:
3991:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5138              		.loc 1 3991 0 is_stmt 0 discriminator 1
 5139 0096 029A     		ldr	r2, [sp, #8]
 5140 0098 039B     		ldr	r3, [sp, #12]
 5141 009a 9A42     		cmp	r2, r3
 5142 009c 14D2     		bcs	.L444
3993:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 5143              		.loc 1 3993 0 is_stmt 1
 5144 009e 029B     		ldr	r3, [sp, #8]
 5145 00a0 03EBC303 		add	r3, r3, r3, lsl #3
 5146 00a4 9A00     		lsls	r2, r3, #2
 5147 00a6 2244     		add	r2, r2, r4
 5148 00a8 137B     		ldrb	r3, [r2, #12]	@ zero_extendqisi2
 5149 00aa 013B     		subs	r3, r3, #1
 5150 00ac 032B     		cmp	r3, #3
 5151 00ae C6D8     		bhi	.L445
 5152 00b0 01A2     		adr	r2, .L447
 5153 00b2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5154 00b6 00BF     		.p2align 2
 5155              	.L447:
 5156 00b8 33000000 		.word	.L446+1
 5157 00bc 43000000 		.word	.L452+1
 5158 00c0 37000000 		.word	.L449+1
 5159 00c4 3B000000 		.word	.L450+1
 5160              		.p2align 1
 5161              	.L444:
4024:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 5162              		.loc 1 4024 0
 5163 00c8 2046     		mov	r0, r4
 5164 00ca FFF7FEFF 		bl	vPortFree
 5165              	.LVL438:
 5166              	.L442:
4030:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5167              		.loc 1 4030 0
 5168 00ce 05B0     		add	sp, sp, #20
 5169              	.LCFI50:
 5170              		.cfi_def_cfa_offset 20
 5171              		@ sp needed
 5172 00d0 F0BD     		pop	{r4, r5, r6, r7, pc}
 5173              	.LVL439:
 5174              	.L455:
 5175 00d2 00BF     		.align	2
 5176              	.L454:
 5177 00d4 00000000 		.word	.LANCHOR9
 5178 00d8 00000000 		.word	.LC1
 5179              		.cfi_endproc
 5180              	.LFE184:
 5181              		.fnend
 5183              		.section	.text.vTaskGetRunTimeStats,"ax",%progbits
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 190


 5184              		.align	1
 5185              		.global	vTaskGetRunTimeStats
 5186              		.syntax unified
 5187              		.thumb
 5188              		.thumb_func
 5189              		.fpu fpv4-sp-d16
 5191              	vTaskGetRunTimeStats:
 5192              		.fnstart
 5193              	.LFB185:
4038:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 5194              		.loc 1 4038 0
 5195              		.cfi_startproc
 5196              		@ args = 0, pretend = 0, frame = 16
 5197              		@ frame_needed = 0, uses_anonymous_args = 0
 5198              	.LVL440:
 5199 0000 70B5     		push	{r4, r5, r6, lr}
 5200              		.save {r4, r5, r6, lr}
 5201              	.LCFI51:
 5202              		.cfi_def_cfa_offset 16
 5203              		.cfi_offset 4, -16
 5204              		.cfi_offset 5, -12
 5205              		.cfi_offset 6, -8
 5206              		.cfi_offset 14, -4
 5207              		.pad #16
 5208 0002 84B0     		sub	sp, sp, #16
 5209              	.LCFI52:
 5210              		.cfi_def_cfa_offset 32
 5211 0004 0446     		mov	r4, r0
4075:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5212              		.loc 1 4075 0
 5213 0006 0023     		movs	r3, #0
 5214 0008 0370     		strb	r3, [r0]
4079:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5215              		.loc 1 4079 0
 5216 000a 2A4B     		ldr	r3, .L463
 5217 000c 1A68     		ldr	r2, [r3]
 5218 000e 0392     		str	r2, [sp, #12]
4084:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5219              		.loc 1 4084 0
 5220 0010 1B68     		ldr	r3, [r3]
 5221 0012 03EBC303 		add	r3, r3, r3, lsl #3
 5222 0016 9800     		lsls	r0, r3, #2
 5223              	.LVL441:
 5224 0018 FFF7FEFF 		bl	pvPortMalloc
 5225              	.LVL442:
4086:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 5226              		.loc 1 4086 0
 5227 001c 0028     		cmp	r0, #0
 5228 001e 47D0     		beq	.L456
 5229 0020 0546     		mov	r5, r0
4089:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5230              		.loc 1 4089 0
 5231 0022 0399     		ldr	r1, [sp, #12]
 5232 0024 01AA     		add	r2, sp, #4
 5233 0026 FFF7FEFF 		bl	uxTaskGetSystemState
 5234              	.LVL443:
 5235 002a 0390     		str	r0, [sp, #12]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 191


4092:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5236              		.loc 1 4092 0
 5237 002c 019B     		ldr	r3, [sp, #4]
 5238 002e 224A     		ldr	r2, .L463+4
 5239 0030 A2FB0323 		umull	r2, r3, r2, r3
 5240 0034 5B09     		lsrs	r3, r3, #5
 5241 0036 0193     		str	r3, [sp, #4]
4095:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5242              		.loc 1 4095 0
 5243 0038 002B     		cmp	r3, #0
 5244 003a 36D0     		beq	.L458
4098:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 5245              		.loc 1 4098 0
 5246 003c 0023     		movs	r3, #0
 5247 003e 0293     		str	r3, [sp, #8]
 5248 0040 0FE0     		b	.L461
 5249              	.LVL444:
 5250              	.L459:
4136:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
 5251              		.loc 1 4136 0
 5252 0042 029B     		ldr	r3, [sp, #8]
 5253 0044 03EBC303 		add	r3, r3, r3, lsl #3
 5254 0048 9A00     		lsls	r2, r3, #2
 5255 004a 2A44     		add	r2, r2, r5
 5256 004c 9269     		ldr	r2, [r2, #24]
 5257 004e 1B49     		ldr	r1, .L463+8
 5258 0050 FFF7FEFF 		bl	sprintf
 5259              	.LVL445:
 5260              	.L460:
4141:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 5261              		.loc 1 4141 0 discriminator 2
 5262 0054 2046     		mov	r0, r4
 5263 0056 FFF7FEFF 		bl	strlen
 5264              	.LVL446:
 5265 005a 0444     		add	r4, r4, r0
 5266              	.LVL447:
4098:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 5267              		.loc 1 4098 0 discriminator 2
 5268 005c 029B     		ldr	r3, [sp, #8]
 5269 005e 0133     		adds	r3, r3, #1
 5270 0060 0293     		str	r3, [sp, #8]
 5271              	.LVL448:
 5272              	.L461:
4098:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 5273              		.loc 1 4098 0 is_stmt 0 discriminator 1
 5274 0062 029A     		ldr	r2, [sp, #8]
 5275 0064 039B     		ldr	r3, [sp, #12]
 5276 0066 9A42     		cmp	r2, r3
 5277 0068 1FD2     		bcs	.L458
4103:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5278              		.loc 1 4103 0 is_stmt 1
 5279 006a 029B     		ldr	r3, [sp, #8]
 5280 006c 03EBC303 		add	r3, r3, r3, lsl #3
 5281 0070 9A00     		lsls	r2, r3, #2
 5282 0072 2A44     		add	r2, r2, r5
 5283 0074 9669     		ldr	r6, [r2, #24]
 5284 0076 019B     		ldr	r3, [sp, #4]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 192


 5285 0078 B6FBF3F6 		udiv	r6, r6, r3
 5286              	.LVL449:
4108:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5287              		.loc 1 4108 0
 5288 007c 029B     		ldr	r3, [sp, #8]
 5289 007e 03EBC303 		add	r3, r3, r3, lsl #3
 5290 0082 9A00     		lsls	r2, r3, #2
 5291 0084 2A44     		add	r2, r2, r5
 5292 0086 5168     		ldr	r1, [r2, #4]
 5293 0088 2046     		mov	r0, r4
 5294 008a FFF7FEFF 		bl	_ZL20prvWriteNameToBufferPcPKc
 5295              	.LVL450:
 5296 008e 0446     		mov	r4, r0
 5297              	.LVL451:
4110:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 5298              		.loc 1 4110 0
 5299 0090 002E     		cmp	r6, #0
 5300 0092 D6D0     		beq	.L459
4120:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
 5301              		.loc 1 4120 0
 5302 0094 029B     		ldr	r3, [sp, #8]
 5303 0096 03EBC303 		add	r3, r3, r3, lsl #3
 5304 009a 9A00     		lsls	r2, r3, #2
 5305 009c 2A44     		add	r2, r2, r5
 5306 009e 3346     		mov	r3, r6
 5307 00a0 9269     		ldr	r2, [r2, #24]
 5308 00a2 0749     		ldr	r1, .L463+12
 5309 00a4 FFF7FEFF 		bl	sprintf
 5310              	.LVL452:
 5311 00a8 D4E7     		b	.L460
 5312              	.LVL453:
 5313              	.L458:
4151:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 5314              		.loc 1 4151 0
 5315 00aa 2846     		mov	r0, r5
 5316 00ac FFF7FEFF 		bl	vPortFree
 5317              	.LVL454:
 5318              	.L456:
4157:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5319              		.loc 1 4157 0
 5320 00b0 04B0     		add	sp, sp, #16
 5321              	.LCFI53:
 5322              		.cfi_def_cfa_offset 16
 5323              		@ sp needed
 5324 00b2 70BD     		pop	{r4, r5, r6, pc}
 5325              	.LVL455:
 5326              	.L464:
 5327              		.align	2
 5328              	.L463:
 5329 00b4 00000000 		.word	.LANCHOR9
 5330 00b8 1F85EB51 		.word	1374389535
 5331 00bc 0C000000 		.word	.LC3
 5332 00c0 00000000 		.word	.LC2
 5333              		.cfi_endproc
 5334              	.LFE185:
 5335              		.fnend
 5337              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 193


 5338              		.align	1
 5339              		.global	uxTaskResetEventItemValue
 5340              		.syntax unified
 5341              		.thumb
 5342              		.thumb_func
 5343              		.fpu fpv4-sp-d16
 5345              	uxTaskResetEventItemValue:
 5346              		.fnstart
 5347              	.LFB186:
4163:../Middlewares/FreeRTOS//Source/tasks.c **** TickType_t uxReturn;
 5348              		.loc 1 4163 0
 5349              		.cfi_startproc
 5350              		@ args = 0, pretend = 0, frame = 0
 5351              		@ frame_needed = 0, uses_anonymous_args = 0
 5352              		@ link register save eliminated.
4166:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5353              		.loc 1 4166 0
 5354 0000 044A     		ldr	r2, .L466
 5355 0002 1368     		ldr	r3, [r2]
 5356 0004 9869     		ldr	r0, [r3, #24]
 5357              	.LVL456:
4170:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5358              		.loc 1 4170 0
 5359 0006 1368     		ldr	r3, [r2]
 5360 0008 DB6A     		ldr	r3, [r3, #44]
 5361 000a 1268     		ldr	r2, [r2]
 5362 000c C3F10A03 		rsb	r3, r3, #10
 5363 0010 9361     		str	r3, [r2, #24]
4173:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 5364              		.loc 1 4173 0
 5365 0012 7047     		bx	lr
 5366              	.L467:
 5367              		.align	2
 5368              	.L466:
 5369 0014 00000000 		.word	.LANCHOR10
 5370              		.cfi_endproc
 5371              	.LFE186:
 5372              		.cantunwind
 5373              		.fnend
 5375              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5376              		.align	1
 5377              		.global	pvTaskIncrementMutexHeldCount
 5378              		.syntax unified
 5379              		.thumb
 5380              		.thumb_func
 5381              		.fpu fpv4-sp-d16
 5383              	pvTaskIncrementMutexHeldCount:
 5384              		.fnstart
 5385              	.LFB187:
4179:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 5386              		.loc 1 4179 0
 5387              		.cfi_startproc
 5388              		@ args = 0, pretend = 0, frame = 0
 5389              		@ frame_needed = 0, uses_anonymous_args = 0
 5390              		@ link register save eliminated.
4182:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 5391              		.loc 1 4182 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 194


 5392 0000 054B     		ldr	r3, .L470
 5393 0002 1B68     		ldr	r3, [r3]
 5394 0004 23B1     		cbz	r3, .L469
4184:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 5395              		.loc 1 4184 0
 5396 0006 044B     		ldr	r3, .L470
 5397 0008 1A68     		ldr	r2, [r3]
 5398 000a 536D     		ldr	r3, [r2, #84]
 5399 000c 0133     		adds	r3, r3, #1
 5400 000e 5365     		str	r3, [r2, #84]
 5401              	.L469:
4187:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 5402              		.loc 1 4187 0
 5403 0010 014B     		ldr	r3, .L470
 5404 0012 1868     		ldr	r0, [r3]
4188:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5405              		.loc 1 4188 0
 5406 0014 7047     		bx	lr
 5407              	.L471:
 5408 0016 00BF     		.align	2
 5409              	.L470:
 5410 0018 00000000 		.word	.LANCHOR10
 5411              		.cfi_endproc
 5412              	.LFE187:
 5413              		.cantunwind
 5414              		.fnend
 5416              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5417              		.align	1
 5418              		.global	ulTaskNotifyTake
 5419              		.syntax unified
 5420              		.thumb
 5421              		.thumb_func
 5422              		.fpu fpv4-sp-d16
 5424              	ulTaskNotifyTake:
 5425              		.fnstart
 5426              	.LFB188:
4196:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint32_t ulReturn;
 5427              		.loc 1 4196 0
 5428              		.cfi_startproc
 5429              		@ args = 0, pretend = 0, frame = 0
 5430              		@ frame_needed = 0, uses_anonymous_args = 0
 5431              	.LVL457:
 5432 0000 38B5     		push	{r3, r4, r5, lr}
 5433              		.save {r3, r4, r5, lr}
 5434              	.LCFI54:
 5435              		.cfi_def_cfa_offset 16
 5436              		.cfi_offset 3, -16
 5437              		.cfi_offset 4, -12
 5438              		.cfi_offset 5, -8
 5439              		.cfi_offset 14, -4
 5440 0002 0546     		mov	r5, r0
 5441 0004 0C46     		mov	r4, r1
4199:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 5442              		.loc 1 4199 0
 5443 0006 FFF7FEFF 		bl	vPortEnterCritical
 5444              	.LVL458:
4202:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 195


 5445              		.loc 1 4202 0
 5446 000a 194B     		ldr	r3, .L479
 5447 000c 1B68     		ldr	r3, [r3]
 5448 000e DB6D     		ldr	r3, [r3, #92]
 5449 0010 2BB9     		cbnz	r3, .L473
4205:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5450              		.loc 1 4205 0
 5451 0012 174B     		ldr	r3, .L479
 5452 0014 1B68     		ldr	r3, [r3]
 5453 0016 0122     		movs	r2, #1
 5454 0018 83F86020 		strb	r2, [r3, #96]
4207:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 5455              		.loc 1 4207 0
 5456 001c ACB9     		cbnz	r4, .L477
 5457              	.L473:
4228:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5458              		.loc 1 4228 0
 5459 001e FFF7FEFF 		bl	vPortExitCritical
 5460              	.LVL459:
4230:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 5461              		.loc 1 4230 0
 5462 0022 FFF7FEFF 		bl	vPortEnterCritical
 5463              	.LVL460:
4233:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5464              		.loc 1 4233 0
 5465 0026 124B     		ldr	r3, .L479
 5466 0028 1B68     		ldr	r3, [r3]
 5467 002a DC6D     		ldr	r4, [r3, #92]
 5468              	.LVL461:
4235:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5469              		.loc 1 4235 0
 5470 002c 24B1     		cbz	r4, .L474
4237:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 5471              		.loc 1 4237 0
 5472 002e CDB9     		cbnz	r5, .L478
4243:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 5473              		.loc 1 4243 0
 5474 0030 0F4B     		ldr	r3, .L479
 5475 0032 1B68     		ldr	r3, [r3]
 5476 0034 621E     		subs	r2, r4, #1
 5477 0036 DA65     		str	r2, [r3, #92]
 5478              	.L474:
4251:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 5479              		.loc 1 4251 0
 5480 0038 0D4B     		ldr	r3, .L479
 5481 003a 1B68     		ldr	r3, [r3]
 5482 003c 0022     		movs	r2, #0
 5483 003e 83F86020 		strb	r2, [r3, #96]
4253:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5484              		.loc 1 4253 0
 5485 0042 FFF7FEFF 		bl	vPortExitCritical
 5486              	.LVL462:
4256:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5487              		.loc 1 4256 0
 5488 0046 2046     		mov	r0, r4
 5489 0048 38BD     		pop	{r3, r4, r5, pc}
 5490              	.LVL463:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 196


 5491              	.L477:
4209:../Middlewares/FreeRTOS//Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 5492              		.loc 1 4209 0
 5493 004a 1146     		mov	r1, r2
 5494 004c 2046     		mov	r0, r4
 5495 004e FFF7FEFF 		bl	_ZL30prvAddCurrentTaskToDelayedListml
 5496              	.LVL464:
4216:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 5497              		.loc 1 4216 0
 5498 0052 084B     		ldr	r3, .L479+4
 5499 0054 4FF08052 		mov	r2, #268435456
 5500 0058 1A60     		str	r2, [r3]
 5501              		.syntax unified
 5502              	@ 4216 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 5503 005a BFF34F8F 		dsb
 5504              	@ 0 "" 2
 5505              	@ 4216 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 5506 005e BFF36F8F 		isb
 5507              	@ 0 "" 2
 5508              		.thumb
 5509              		.syntax unified
 5510 0062 DCE7     		b	.L473
 5511              	.LVL465:
 5512              	.L478:
4239:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 5513              		.loc 1 4239 0
 5514 0064 024B     		ldr	r3, .L479
 5515 0066 1B68     		ldr	r3, [r3]
 5516 0068 0022     		movs	r2, #0
 5517 006a DA65     		str	r2, [r3, #92]
 5518 006c E4E7     		b	.L474
 5519              	.L480:
 5520 006e 00BF     		.align	2
 5521              	.L479:
 5522 0070 00000000 		.word	.LANCHOR10
 5523 0074 04ED00E0 		.word	-536810236
 5524              		.cfi_endproc
 5525              	.LFE188:
 5526              		.fnend
 5528              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5529              		.align	1
 5530              		.global	xTaskNotifyWait
 5531              		.syntax unified
 5532              		.thumb
 5533              		.thumb_func
 5534              		.fpu fpv4-sp-d16
 5536              	xTaskNotifyWait:
 5537              		.fnstart
 5538              	.LFB189:
4264:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn;
 5539              		.loc 1 4264 0
 5540              		.cfi_startproc
 5541              		@ args = 0, pretend = 0, frame = 0
 5542              		@ frame_needed = 0, uses_anonymous_args = 0
 5543              	.LVL466:
 5544 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5545              		.save {r3, r4, r5, r6, r7, lr}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 197


 5546              	.LCFI55:
 5547              		.cfi_def_cfa_offset 24
 5548              		.cfi_offset 3, -24
 5549              		.cfi_offset 4, -20
 5550              		.cfi_offset 5, -16
 5551              		.cfi_offset 6, -12
 5552              		.cfi_offset 7, -8
 5553              		.cfi_offset 14, -4
 5554 0002 0746     		mov	r7, r0
 5555 0004 0D46     		mov	r5, r1
 5556 0006 1446     		mov	r4, r2
 5557 0008 1E46     		mov	r6, r3
4267:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 5558              		.loc 1 4267 0
 5559 000a FFF7FEFF 		bl	vPortEnterCritical
 5560              	.LVL467:
4270:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5561              		.loc 1 4270 0
 5562 000e 204B     		ldr	r3, .L488
 5563 0010 1B68     		ldr	r3, [r3]
 5564 0012 93F86030 		ldrb	r3, [r3, #96]	@ zero_extendqisi2
 5565 0016 DBB2     		uxtb	r3, r3
 5566 0018 022B     		cmp	r3, #2
 5567 001a 0AD0     		beq	.L482
4275:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5568              		.loc 1 4275 0
 5569 001c 1C4B     		ldr	r3, .L488
 5570 001e 1A68     		ldr	r2, [r3]
 5571 0020 D06D     		ldr	r0, [r2, #92]
 5572 0022 20EA0700 		bic	r0, r0, r7
 5573 0026 D065     		str	r0, [r2, #92]
4278:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5574              		.loc 1 4278 0
 5575 0028 1B68     		ldr	r3, [r3]
 5576 002a 0122     		movs	r2, #1
 5577 002c 83F86020 		strb	r2, [r3, #96]
4280:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 5578              		.loc 1 4280 0
 5579 0030 FEB9     		cbnz	r6, .L487
 5580              	.L482:
4301:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5581              		.loc 1 4301 0
 5582 0032 FFF7FEFF 		bl	vPortExitCritical
 5583              	.LVL468:
4303:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 5584              		.loc 1 4303 0
 5585 0036 FFF7FEFF 		bl	vPortEnterCritical
 5586              	.LVL469:
4307:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5587              		.loc 1 4307 0
 5588 003a 1CB1     		cbz	r4, .L483
4311:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 5589              		.loc 1 4311 0
 5590 003c 144B     		ldr	r3, .L488
 5591 003e 1B68     		ldr	r3, [r3]
 5592 0040 DB6D     		ldr	r3, [r3, #92]
 5593 0042 2360     		str	r3, [r4]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 198


 5594              	.L483:
4318:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5595              		.loc 1 4318 0
 5596 0044 124B     		ldr	r3, .L488
 5597 0046 1B68     		ldr	r3, [r3]
 5598 0048 93F86030 		ldrb	r3, [r3, #96]	@ zero_extendqisi2
 5599 004c DBB2     		uxtb	r3, r3
 5600 004e 012B     		cmp	r3, #1
 5601 0050 1CD0     		beq	.L485
4327:../Middlewares/FreeRTOS//Source/tasks.c **** 				xReturn = pdTRUE;
 5602              		.loc 1 4327 0
 5603 0052 0F4B     		ldr	r3, .L488
 5604 0054 1B68     		ldr	r3, [r3]
 5605 0056 D96D     		ldr	r1, [r3, #92]
 5606 0058 21EA0501 		bic	r1, r1, r5
 5607 005c D965     		str	r1, [r3, #92]
 5608              	.LVL470:
4328:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 5609              		.loc 1 4328 0
 5610 005e 0124     		movs	r4, #1
 5611              	.LVL471:
 5612              	.L484:
4331:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 5613              		.loc 1 4331 0
 5614 0060 0B4B     		ldr	r3, .L488
 5615 0062 1B68     		ldr	r3, [r3]
 5616 0064 0022     		movs	r2, #0
 5617 0066 83F86020 		strb	r2, [r3, #96]
4333:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5618              		.loc 1 4333 0
 5619 006a FFF7FEFF 		bl	vPortExitCritical
 5620              	.LVL472:
4336:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5621              		.loc 1 4336 0
 5622 006e 2046     		mov	r0, r4
 5623 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5624              	.LVL473:
 5625              	.L487:
4282:../Middlewares/FreeRTOS//Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 5626              		.loc 1 4282 0
 5627 0072 1146     		mov	r1, r2
 5628 0074 3046     		mov	r0, r6
 5629 0076 FFF7FEFF 		bl	_ZL30prvAddCurrentTaskToDelayedListml
 5630              	.LVL474:
4289:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 5631              		.loc 1 4289 0
 5632 007a 064B     		ldr	r3, .L488+4
 5633 007c 4FF08052 		mov	r2, #268435456
 5634 0080 1A60     		str	r2, [r3]
 5635              		.syntax unified
 5636              	@ 4289 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 5637 0082 BFF34F8F 		dsb
 5638              	@ 0 "" 2
 5639              	@ 4289 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 5640 0086 BFF36F8F 		isb
 5641              	@ 0 "" 2
 5642              		.thumb
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 199


 5643              		.syntax unified
 5644 008a D2E7     		b	.L482
 5645              	.L485:
4321:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 5646              		.loc 1 4321 0
 5647 008c 0024     		movs	r4, #0
 5648              	.LVL475:
 5649 008e E7E7     		b	.L484
 5650              	.L489:
 5651              		.align	2
 5652              	.L488:
 5653 0090 00000000 		.word	.LANCHOR10
 5654 0094 04ED00E0 		.word	-536810236
 5655              		.cfi_endproc
 5656              	.LFE189:
 5657              		.fnend
 5659              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5660              		.align	1
 5661              		.global	xTaskGenericNotify
 5662              		.syntax unified
 5663              		.thumb
 5664              		.thumb_func
 5665              		.fpu fpv4-sp-d16
 5667              	xTaskGenericNotify:
 5668              		.fnstart
 5669              	.LFB190:
4344:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * pxTCB;
 5670              		.loc 1 4344 0
 5671              		.cfi_startproc
 5672              		@ args = 0, pretend = 0, frame = 0
 5673              		@ frame_needed = 0, uses_anonymous_args = 0
 5674              	.LVL476:
 5675 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5676              		.save {r3, r4, r5, r6, r7, lr}
 5677              	.LCFI56:
 5678              		.cfi_def_cfa_offset 24
 5679              		.cfi_offset 3, -24
 5680              		.cfi_offset 4, -20
 5681              		.cfi_offset 5, -16
 5682              		.cfi_offset 6, -12
 5683              		.cfi_offset 7, -8
 5684              		.cfi_offset 14, -4
 5685              	.LVL477:
4349:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5686              		.loc 1 4349 0
 5687 0002 40B9     		cbnz	r0, .L491
 5688              	.LBB229:
 5689              	.LBB230:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 5690              		.loc 2 244 0
 5691              		.syntax unified
 5692              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5693 0004 4FF01003 			mov r3, #16												
 5694 0008 83F31188 		msr basepri, r3											
 5695 000c BFF36F8F 		isb														
 5696 0010 BFF34F8F 		dsb														
 5697              	
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 200


 5698              	@ 0 "" 2
 5699              	.LVL478:
 5700              		.thumb
 5701              		.syntax unified
 5702              	.L492:
 5703 0014 FEE7     		b	.L492
 5704              	.LVL479:
 5705              	.L491:
 5706 0016 0446     		mov	r4, r0
 5707 0018 1F46     		mov	r7, r3
 5708 001a 1546     		mov	r5, r2
 5709 001c 0E46     		mov	r6, r1
 5710              	.LVL480:
 5711              	.LBE230:
 5712              	.LBE229:
4352:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 5713              		.loc 1 4352 0
 5714 001e FFF7FEFF 		bl	vPortEnterCritical
 5715              	.LVL481:
4354:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5716              		.loc 1 4354 0
 5717 0022 0FB1     		cbz	r7, .L493
4356:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 5718              		.loc 1 4356 0
 5719 0024 E36D     		ldr	r3, [r4, #92]
 5720 0026 3B60     		str	r3, [r7]
 5721              	.L493:
4359:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5722              		.loc 1 4359 0
 5723 0028 94F86030 		ldrb	r3, [r4, #96]	@ zero_extendqisi2
 5724 002c DBB2     		uxtb	r3, r3
 5725              	.LVL482:
4361:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5726              		.loc 1 4361 0
 5727 002e 0222     		movs	r2, #2
 5728 0030 84F86020 		strb	r2, [r4, #96]
4363:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5729              		.loc 1 4363 0
 5730 0034 6A1E     		subs	r2, r5, #1
 5731 0036 032A     		cmp	r2, #3
 5732 0038 1AD8     		bhi	.L503
 5733 003a DFE802F0 		tbb	[pc, r2]
 5734              	.L496:
 5735 003e 02       		.byte	(.L495-.L496)/2
 5736 003f 0C       		.byte	(.L497-.L496)/2
 5737 0040 11       		.byte	(.L498-.L496)/2
 5738 0041 14       		.byte	(.L499-.L496)/2
 5739              		.p2align 1
 5740              	.L495:
4366:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
 5741              		.loc 1 4366 0
 5742 0042 E26D     		ldr	r2, [r4, #92]
 5743 0044 1643     		orrs	r6, r6, r2
 5744              	.LVL483:
 5745 0046 E665     		str	r6, [r4, #92]
4346:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5746              		.loc 1 4346 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 201


 5747 0048 0125     		movs	r5, #1
 5748              	.L494:
 5749              	.LVL484:
4399:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5750              		.loc 1 4399 0
 5751 004a 012B     		cmp	r3, #1
 5752 004c 14D0     		beq	.L506
 5753              	.LVL485:
 5754              	.L500:
4439:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5755              		.loc 1 4439 0
 5756 004e FFF7FEFF 		bl	vPortExitCritical
 5757              	.LVL486:
4442:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5758              		.loc 1 4442 0
 5759 0052 2846     		mov	r0, r5
 5760 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5761              	.LVL487:
 5762              	.L497:
4370:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
 5763              		.loc 1 4370 0
 5764 0056 E26D     		ldr	r2, [r4, #92]
 5765 0058 0132     		adds	r2, r2, #1
 5766 005a E265     		str	r2, [r4, #92]
4346:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5767              		.loc 1 4346 0
 5768 005c 0125     		movs	r5, #1
4371:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5769              		.loc 1 4371 0
 5770 005e F4E7     		b	.L494
 5771              	.L498:
4374:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
 5772              		.loc 1 4374 0
 5773 0060 E665     		str	r6, [r4, #92]
4346:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5774              		.loc 1 4346 0
 5775 0062 0125     		movs	r5, #1
4375:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5776              		.loc 1 4375 0
 5777 0064 F1E7     		b	.L494
 5778              	.L499:
4378:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 5779              		.loc 1 4378 0
 5780 0066 022B     		cmp	r3, #2
 5781 0068 04D0     		beq	.L504
4380:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 5782              		.loc 1 4380 0
 5783 006a E665     		str	r6, [r4, #92]
4346:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5784              		.loc 1 4346 0
 5785 006c 0125     		movs	r5, #1
 5786 006e ECE7     		b	.L494
 5787              	.L503:
 5788 0070 0125     		movs	r5, #1
 5789 0072 EAE7     		b	.L494
 5790              	.L504:
4385:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 202


 5791              		.loc 1 4385 0
 5792 0074 0025     		movs	r5, #0
 5793 0076 E8E7     		b	.L494
 5794              	.LVL488:
 5795              	.L506:
4401:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5796              		.loc 1 4401 0
 5797 0078 271D     		adds	r7, r4, #4
 5798              	.LVL489:
 5799 007a 3846     		mov	r0, r7
 5800 007c FFF7FEFF 		bl	uxListRemove
 5801              	.LVL490:
4402:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5802              		.loc 1 4402 0
 5803 0080 1349     		ldr	r1, .L507
 5804 0082 0B68     		ldr	r3, [r1]
 5805 0084 E66A     		ldr	r6, [r4, #44]
 5806 0086 0122     		movs	r2, #1
 5807 0088 B240     		lsls	r2, r2, r6
 5808 008a 1343     		orrs	r3, r3, r2
 5809 008c 0B60     		str	r3, [r1]
 5810 008e 3946     		mov	r1, r7
 5811 0090 104B     		ldr	r3, .L507+4
 5812 0092 1420     		movs	r0, #20
 5813 0094 00FB0630 		mla	r0, r0, r6, r3
 5814 0098 FFF7FEFF 		bl	vListInsertEnd
 5815              	.LVL491:
4405:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5816              		.loc 1 4405 0
 5817 009c A36A     		ldr	r3, [r4, #40]
 5818 009e 43B1     		cbz	r3, .L501
 5819              	.LBB231:
 5820              	.LBB232:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 5821              		.loc 2 244 0
 5822              		.syntax unified
 5823              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5824 00a0 4FF01003 			mov r3, #16												
 5825 00a4 83F31188 		msr basepri, r3											
 5826 00a8 BFF36F8F 		isb														
 5827 00ac BFF34F8F 		dsb														
 5828              	
 5829              	@ 0 "" 2
 5830              	.LVL492:
 5831              		.thumb
 5832              		.syntax unified
 5833              	.L502:
 5834 00b0 FEE7     		b	.L502
 5835              	.L501:
 5836              	.LBE232:
 5837              	.LBE231:
4423:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 5838              		.loc 1 4423 0
 5839 00b2 E26A     		ldr	r2, [r4, #44]
 5840 00b4 084B     		ldr	r3, .L507+8
 5841 00b6 1B68     		ldr	r3, [r3]
 5842 00b8 DB6A     		ldr	r3, [r3, #44]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 203


 5843 00ba 9A42     		cmp	r2, r3
 5844 00bc C7D9     		bls	.L500
4427:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 5845              		.loc 1 4427 0
 5846 00be 074B     		ldr	r3, .L507+12
 5847 00c0 4FF08052 		mov	r2, #268435456
 5848 00c4 1A60     		str	r2, [r3]
 5849              		.syntax unified
 5850              	@ 4427 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 5851 00c6 BFF34F8F 		dsb
 5852              	@ 0 "" 2
 5853              	@ 4427 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 5854 00ca BFF36F8F 		isb
 5855              	@ 0 "" 2
 5856              		.thumb
 5857              		.syntax unified
 5858 00ce BEE7     		b	.L500
 5859              	.L508:
 5860              		.align	2
 5861              	.L507:
 5862 00d0 00000000 		.word	.LANCHOR13
 5863 00d4 00000000 		.word	.LANCHOR4
 5864 00d8 00000000 		.word	.LANCHOR10
 5865 00dc 04ED00E0 		.word	-536810236
 5866              		.cfi_endproc
 5867              	.LFE190:
 5868              		.fnend
 5870              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5871              		.align	1
 5872              		.global	xTaskGenericNotifyFromISR
 5873              		.syntax unified
 5874              		.thumb
 5875              		.thumb_func
 5876              		.fpu fpv4-sp-d16
 5878              	xTaskGenericNotifyFromISR:
 5879              		.fnstart
 5880              	.LFB191:
4450:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * pxTCB;
 5881              		.loc 1 4450 0
 5882              		.cfi_startproc
 5883              		@ args = 4, pretend = 0, frame = 0
 5884              		@ frame_needed = 0, uses_anonymous_args = 0
 5885              	.LVL493:
 5886 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5887              		.save {r3, r4, r5, r6, r7, r8, r9, lr}
 5888              	.LCFI57:
 5889              		.cfi_def_cfa_offset 32
 5890              		.cfi_offset 3, -32
 5891              		.cfi_offset 4, -28
 5892              		.cfi_offset 5, -24
 5893              		.cfi_offset 6, -20
 5894              		.cfi_offset 7, -16
 5895              		.cfi_offset 8, -12
 5896              		.cfi_offset 9, -8
 5897              		.cfi_offset 14, -4
 5898 0004 089E     		ldr	r6, [sp, #32]
 5899              	.LVL494:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 204


4456:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5900              		.loc 1 4456 0
 5901 0006 40B9     		cbnz	r0, .L510
 5902              	.LBB233:
 5903              	.LBB234:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 5904              		.loc 2 244 0
 5905              		.syntax unified
 5906              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5907 0008 4FF01003 			mov r3, #16												
 5908 000c 83F31188 		msr basepri, r3											
 5909 0010 BFF36F8F 		isb														
 5910 0014 BFF34F8F 		dsb														
 5911              	
 5912              	@ 0 "" 2
 5913              	.LVL495:
 5914              		.thumb
 5915              		.syntax unified
 5916              	.L511:
 5917 0018 FEE7     		b	.L511
 5918              	.LVL496:
 5919              	.L510:
 5920 001a 0446     		mov	r4, r0
 5921 001c 9946     		mov	r9, r3
 5922 001e 1546     		mov	r5, r2
 5923 0020 8846     		mov	r8, r1
 5924              	.LBE234:
 5925              	.LBE233:
4474:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5926              		.loc 1 4474 0
 5927 0022 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5928              	.LVL497:
 5929              	.LBB235:
 5930              	.LBB236:
 261:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5931              		.loc 2 261 0
 5932              		.syntax unified
 5933              	@ 261 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5934 0026 EFF31187 			mrs r7, basepri											
 5935 002a 4FF01003 		mov r3, #16												
 5936 002e 83F31188 		msr basepri, r3											
 5937 0032 BFF36F8F 		isb														
 5938 0036 BFF34F8F 		dsb														
 5939              	
 5940              	@ 0 "" 2
 5941              		.thumb
 5942              		.syntax unified
 5943              	.LBE236:
 5944              	.LBE235:
4480:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5945              		.loc 1 4480 0
 5946 003a B9F1000F 		cmp	r9, #0
 5947 003e 02D0     		beq	.L512
4482:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 5948              		.loc 1 4482 0
 5949 0040 E36D     		ldr	r3, [r4, #92]
 5950 0042 C9F80030 		str	r3, [r9]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 205


 5951              	.L512:
4485:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5952              		.loc 1 4485 0
 5953 0046 94F86030 		ldrb	r3, [r4, #96]	@ zero_extendqisi2
 5954 004a DBB2     		uxtb	r3, r3
 5955              	.LVL498:
4486:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5956              		.loc 1 4486 0
 5957 004c 0222     		movs	r2, #2
 5958 004e 84F86020 		strb	r2, [r4, #96]
4488:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5959              		.loc 1 4488 0
 5960 0052 6A1E     		subs	r2, r5, #1
 5961 0054 032A     		cmp	r2, #3
 5962 0056 1ED8     		bhi	.L525
 5963 0058 DFE802F0 		tbb	[pc, r2]
 5964              	.L515:
 5965 005c 02       		.byte	(.L514-.L515)/2
 5966 005d 0E       		.byte	(.L516-.L515)/2
 5967 005e 13       		.byte	(.L517-.L515)/2
 5968 005f 17       		.byte	(.L518-.L515)/2
 5969              		.p2align 1
 5970              	.L514:
4491:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
 5971              		.loc 1 4491 0
 5972 0060 E26D     		ldr	r2, [r4, #92]
 5973 0062 42EA0802 		orr	r2, r2, r8
 5974 0066 E265     		str	r2, [r4, #92]
4453:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5975              		.loc 1 4453 0
 5976 0068 0125     		movs	r5, #1
 5977              	.L513:
 5978              	.LVL499:
4524:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5979              		.loc 1 4524 0
 5980 006a 012B     		cmp	r3, #1
 5981 006c 17D0     		beq	.L528
 5982              	.LVL500:
 5983              	.L519:
 5984              	.LBB237:
 5985              	.LBB238:
 5986              		.loc 2 274 0
 5987              		.syntax unified
 5988              	@ 274 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5989 006e 87F31188 			msr basepri, r7	
 5990              	@ 0 "" 2
 5991              	.LVL501:
 5992              		.thumb
 5993              		.syntax unified
 5994              	.LBE238:
 5995              	.LBE237:
4566:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5996              		.loc 1 4566 0
 5997 0072 2846     		mov	r0, r5
 5998 0074 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5999              	.LVL502:
 6000              	.L516:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 206


4495:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
 6001              		.loc 1 4495 0
 6002 0078 E26D     		ldr	r2, [r4, #92]
 6003 007a 0132     		adds	r2, r2, #1
 6004 007c E265     		str	r2, [r4, #92]
4453:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 6005              		.loc 1 4453 0
 6006 007e 0125     		movs	r5, #1
4496:../Middlewares/FreeRTOS//Source/tasks.c **** 
 6007              		.loc 1 4496 0
 6008 0080 F3E7     		b	.L513
 6009              	.L517:
4499:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
 6010              		.loc 1 4499 0
 6011 0082 C4F85C80 		str	r8, [r4, #92]
4453:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 6012              		.loc 1 4453 0
 6013 0086 0125     		movs	r5, #1
4500:../Middlewares/FreeRTOS//Source/tasks.c **** 
 6014              		.loc 1 4500 0
 6015 0088 EFE7     		b	.L513
 6016              	.L518:
4503:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 6017              		.loc 1 4503 0
 6018 008a 022B     		cmp	r3, #2
 6019 008c 05D0     		beq	.L526
4505:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 6020              		.loc 1 4505 0
 6021 008e C4F85C80 		str	r8, [r4, #92]
4453:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 6022              		.loc 1 4453 0
 6023 0092 0125     		movs	r5, #1
 6024 0094 E9E7     		b	.L513
 6025              	.L525:
 6026 0096 0125     		movs	r5, #1
 6027 0098 E7E7     		b	.L513
 6028              	.L526:
4510:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 6029              		.loc 1 4510 0
 6030 009a 0025     		movs	r5, #0
 6031 009c E5E7     		b	.L513
 6032              	.LVL503:
 6033              	.L528:
4527:../Middlewares/FreeRTOS//Source/tasks.c **** 
 6034              		.loc 1 4527 0
 6035 009e A36A     		ldr	r3, [r4, #40]
 6036              	.LVL504:
 6037 00a0 43B1     		cbz	r3, .L520
 6038              	.LBB239:
 6039              	.LBB240:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 6040              		.loc 2 244 0
 6041              		.syntax unified
 6042              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6043 00a2 4FF01003 			mov r3, #16												
 6044 00a6 83F31188 		msr basepri, r3											
 6045 00aa BFF36F8F 		isb														
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 207


 6046 00ae BFF34F8F 		dsb														
 6047              	
 6048              	@ 0 "" 2
 6049              	.LVL505:
 6050              		.thumb
 6051              		.syntax unified
 6052              	.L521:
 6053 00b2 FEE7     		b	.L521
 6054              	.L520:
 6055              	.LBE240:
 6056              	.LBE239:
4529:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 6057              		.loc 1 4529 0
 6058 00b4 144B     		ldr	r3, .L529
 6059 00b6 1B68     		ldr	r3, [r3]
 6060 00b8 E3B9     		cbnz	r3, .L522
4531:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6061              		.loc 1 4531 0
 6062 00ba 04F10408 		add	r8, r4, #4
 6063              	.LVL506:
 6064 00be 4046     		mov	r0, r8
 6065 00c0 FFF7FEFF 		bl	uxListRemove
 6066              	.LVL507:
4532:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 6067              		.loc 1 4532 0
 6068 00c4 1149     		ldr	r1, .L529+4
 6069 00c6 0B68     		ldr	r3, [r1]
 6070 00c8 E06A     		ldr	r0, [r4, #44]
 6071 00ca 0122     		movs	r2, #1
 6072 00cc 8240     		lsls	r2, r2, r0
 6073 00ce 1343     		orrs	r3, r3, r2
 6074 00d0 0B60     		str	r3, [r1]
 6075 00d2 4146     		mov	r1, r8
 6076 00d4 0E4B     		ldr	r3, .L529+8
 6077 00d6 1422     		movs	r2, #20
 6078 00d8 02FB0030 		mla	r0, r2, r0, r3
 6079 00dc FFF7FEFF 		bl	vListInsertEnd
 6080              	.LVL508:
 6081              	.L523:
4541:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 6082              		.loc 1 4541 0
 6083 00e0 E26A     		ldr	r2, [r4, #44]
 6084 00e2 0C4B     		ldr	r3, .L529+12
 6085 00e4 1B68     		ldr	r3, [r3]
 6086 00e6 DB6A     		ldr	r3, [r3, #44]
 6087 00e8 9A42     		cmp	r2, r3
 6088 00ea C0D9     		bls	.L519
4545:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 6089              		.loc 1 4545 0
 6090 00ec 46B1     		cbz	r6, .L524
4547:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 6091              		.loc 1 4547 0
 6092 00ee 0123     		movs	r3, #1
 6093 00f0 3360     		str	r3, [r6]
 6094 00f2 BCE7     		b	.L519
 6095              	.LVL509:
 6096              	.L522:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 208


4538:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 6097              		.loc 1 4538 0
 6098 00f4 04F11801 		add	r1, r4, #24
 6099 00f8 0748     		ldr	r0, .L529+16
 6100 00fa FFF7FEFF 		bl	vListInsertEnd
 6101              	.LVL510:
 6102 00fe EFE7     		b	.L523
 6103              	.LVL511:
 6104              	.L524:
4554:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 6105              		.loc 1 4554 0
 6106 0100 064B     		ldr	r3, .L529+20
 6107 0102 0122     		movs	r2, #1
 6108 0104 1A60     		str	r2, [r3]
 6109 0106 B2E7     		b	.L519
 6110              	.L530:
 6111              		.align	2
 6112              	.L529:
 6113 0108 00000000 		.word	.LANCHOR16
 6114 010c 00000000 		.word	.LANCHOR13
 6115 0110 00000000 		.word	.LANCHOR4
 6116 0114 00000000 		.word	.LANCHOR10
 6117 0118 00000000 		.word	.LANCHOR1
 6118 011c 00000000 		.word	.LANCHOR20
 6119              		.cfi_endproc
 6120              	.LFE191:
 6121              		.fnend
 6123              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 6124              		.align	1
 6125              		.global	vTaskNotifyGiveFromISR
 6126              		.syntax unified
 6127              		.thumb
 6128              		.thumb_func
 6129              		.fpu fpv4-sp-d16
 6131              	vTaskNotifyGiveFromISR:
 6132              		.fnstart
 6133              	.LFB192:
4574:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * pxTCB;
 6134              		.loc 1 4574 0
 6135              		.cfi_startproc
 6136              		@ args = 0, pretend = 0, frame = 0
 6137              		@ frame_needed = 0, uses_anonymous_args = 0
 6138              	.LVL512:
 6139 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6140              		.save {r3, r4, r5, r6, r7, lr}
 6141              	.LCFI58:
 6142              		.cfi_def_cfa_offset 24
 6143              		.cfi_offset 3, -24
 6144              		.cfi_offset 4, -20
 6145              		.cfi_offset 5, -16
 6146              		.cfi_offset 6, -12
 6147              		.cfi_offset 7, -8
 6148              		.cfi_offset 14, -4
4579:../Middlewares/FreeRTOS//Source/tasks.c **** 
 6149              		.loc 1 4579 0
 6150 0002 40B9     		cbnz	r0, .L532
 6151              	.LBB241:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 209


 6152              	.LBB242:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 6153              		.loc 2 244 0
 6154              		.syntax unified
 6155              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6156 0004 4FF01003 			mov r3, #16												
 6157 0008 83F31188 		msr basepri, r3											
 6158 000c BFF36F8F 		isb														
 6159 0010 BFF34F8F 		dsb														
 6160              	
 6161              	@ 0 "" 2
 6162              	.LVL513:
 6163              		.thumb
 6164              		.syntax unified
 6165              	.L533:
 6166 0014 FEE7     		b	.L533
 6167              	.L532:
 6168 0016 0446     		mov	r4, r0
 6169 0018 0D46     		mov	r5, r1
 6170              	.LBE242:
 6171              	.LBE241:
4597:../Middlewares/FreeRTOS//Source/tasks.c **** 
 6172              		.loc 1 4597 0
 6173 001a FFF7FEFF 		bl	vPortValidateInterruptPriority
 6174              	.LVL514:
 6175              	.LBB243:
 6176              	.LBB244:
 261:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6177              		.loc 2 261 0
 6178              		.syntax unified
 6179              	@ 261 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6180 001e EFF31186 			mrs r6, basepri											
 6181 0022 4FF01003 		mov r3, #16												
 6182 0026 83F31188 		msr basepri, r3											
 6183 002a BFF36F8F 		isb														
 6184 002e BFF34F8F 		dsb														
 6185              	
 6186              	@ 0 "" 2
 6187              		.thumb
 6188              		.syntax unified
 6189              	.LBE244:
 6190              	.LBE243:
4603:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6191              		.loc 1 4603 0
 6192 0032 94F86030 		ldrb	r3, [r4, #96]	@ zero_extendqisi2
 6193 0036 DBB2     		uxtb	r3, r3
 6194              	.LVL515:
4604:../Middlewares/FreeRTOS//Source/tasks.c **** 
 6195              		.loc 1 4604 0
 6196 0038 0222     		movs	r2, #2
 6197 003a 84F86020 		strb	r2, [r4, #96]
4608:../Middlewares/FreeRTOS//Source/tasks.c **** 
 6198              		.loc 1 4608 0
 6199 003e E26D     		ldr	r2, [r4, #92]
 6200 0040 0132     		adds	r2, r2, #1
 6201 0042 E265     		str	r2, [r4, #92]
4614:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 210


 6202              		.loc 1 4614 0
 6203 0044 012B     		cmp	r3, #1
 6204 0046 02D0     		beq	.L541
 6205              	.LVL516:
 6206              	.L534:
 6207              	.LBB245:
 6208              	.LBB246:
 6209              		.loc 2 274 0
 6210              		.syntax unified
 6211              	@ 274 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6212 0048 86F31188 			msr basepri, r6	
 6213              	@ 0 "" 2
 6214              	.LVL517:
 6215              		.thumb
 6216              		.syntax unified
 6217              	.LBE246:
 6218              	.LBE245:
4654:../Middlewares/FreeRTOS//Source/tasks.c **** 
 6219              		.loc 1 4654 0
 6220 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6221              	.LVL518:
 6222              	.L541:
4617:../Middlewares/FreeRTOS//Source/tasks.c **** 
 6223              		.loc 1 4617 0
 6224 004e A36A     		ldr	r3, [r4, #40]
 6225              	.LVL519:
 6226 0050 43B1     		cbz	r3, .L535
 6227              	.LBB247:
 6228              	.LBB248:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 6229              		.loc 2 244 0
 6230              		.syntax unified
 6231              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6232 0052 4FF01003 			mov r3, #16												
 6233 0056 83F31188 		msr basepri, r3											
 6234 005a BFF36F8F 		isb														
 6235 005e BFF34F8F 		dsb														
 6236              	
 6237              	@ 0 "" 2
 6238              	.LVL520:
 6239              		.thumb
 6240              		.syntax unified
 6241              	.L536:
 6242 0062 FEE7     		b	.L536
 6243              	.L535:
 6244              	.LBE248:
 6245              	.LBE247:
4619:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 6246              		.loc 1 4619 0
 6247 0064 144B     		ldr	r3, .L542
 6248 0066 1B68     		ldr	r3, [r3]
 6249 0068 DBB9     		cbnz	r3, .L537
4621:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6250              		.loc 1 4621 0
 6251 006a 271D     		adds	r7, r4, #4
 6252 006c 3846     		mov	r0, r7
 6253 006e FFF7FEFF 		bl	uxListRemove
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 211


 6254              	.LVL521:
4622:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 6255              		.loc 1 4622 0
 6256 0072 1249     		ldr	r1, .L542+4
 6257 0074 0B68     		ldr	r3, [r1]
 6258 0076 E06A     		ldr	r0, [r4, #44]
 6259 0078 0122     		movs	r2, #1
 6260 007a 8240     		lsls	r2, r2, r0
 6261 007c 1343     		orrs	r3, r3, r2
 6262 007e 0B60     		str	r3, [r1]
 6263 0080 3946     		mov	r1, r7
 6264 0082 0F4B     		ldr	r3, .L542+8
 6265 0084 1422     		movs	r2, #20
 6266 0086 02FB0030 		mla	r0, r2, r0, r3
 6267 008a FFF7FEFF 		bl	vListInsertEnd
 6268              	.LVL522:
 6269              	.L538:
4631:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 6270              		.loc 1 4631 0
 6271 008e E26A     		ldr	r2, [r4, #44]
 6272 0090 0C4B     		ldr	r3, .L542+12
 6273 0092 1B68     		ldr	r3, [r3]
 6274 0094 DB6A     		ldr	r3, [r3, #44]
 6275 0096 9A42     		cmp	r2, r3
 6276 0098 D6D9     		bls	.L534
4635:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 6277              		.loc 1 4635 0
 6278 009a 45B1     		cbz	r5, .L539
4637:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 6279              		.loc 1 4637 0
 6280 009c 0123     		movs	r3, #1
 6281 009e 2B60     		str	r3, [r5]
 6282 00a0 D2E7     		b	.L534
 6283              	.L537:
4628:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 6284              		.loc 1 4628 0
 6285 00a2 04F11801 		add	r1, r4, #24
 6286 00a6 0848     		ldr	r0, .L542+16
 6287 00a8 FFF7FEFF 		bl	vListInsertEnd
 6288              	.LVL523:
 6289 00ac EFE7     		b	.L538
 6290              	.L539:
4644:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 6291              		.loc 1 4644 0
 6292 00ae 074B     		ldr	r3, .L542+20
 6293 00b0 0122     		movs	r2, #1
 6294 00b2 1A60     		str	r2, [r3]
 6295 00b4 C8E7     		b	.L534
 6296              	.L543:
 6297 00b6 00BF     		.align	2
 6298              	.L542:
 6299 00b8 00000000 		.word	.LANCHOR16
 6300 00bc 00000000 		.word	.LANCHOR13
 6301 00c0 00000000 		.word	.LANCHOR4
 6302 00c4 00000000 		.word	.LANCHOR10
 6303 00c8 00000000 		.word	.LANCHOR1
 6304 00cc 00000000 		.word	.LANCHOR20
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 212


 6305              		.cfi_endproc
 6306              	.LFE192:
 6307              		.fnend
 6309              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 6310              		.align	1
 6311              		.global	xTaskNotifyStateClear
 6312              		.syntax unified
 6313              		.thumb
 6314              		.thumb_func
 6315              		.fpu fpv4-sp-d16
 6317              	xTaskNotifyStateClear:
 6318              		.fnstart
 6319              	.LFB193:
4663:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
 6320              		.loc 1 4663 0
 6321              		.cfi_startproc
 6322              		@ args = 0, pretend = 0, frame = 0
 6323              		@ frame_needed = 0, uses_anonymous_args = 0
 6324              	.LVL524:
 6325 0000 10B5     		push	{r4, lr}
 6326              		.save {r4, lr}
 6327              	.LCFI59:
 6328              		.cfi_def_cfa_offset 8
 6329              		.cfi_offset 4, -8
 6330              		.cfi_offset 14, -4
4669:../Middlewares/FreeRTOS//Source/tasks.c **** 
 6331              		.loc 1 4669 0
 6332 0002 0446     		mov	r4, r0
 6333 0004 58B1     		cbz	r0, .L549
 6334              	.LVL525:
 6335              	.L545:
4671:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 6336              		.loc 1 4671 0 discriminator 4
 6337 0006 FFF7FEFF 		bl	vPortEnterCritical
 6338              	.LVL526:
4673:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 6339              		.loc 1 4673 0 discriminator 4
 6340 000a 94F86030 		ldrb	r3, [r4, #96]	@ zero_extendqisi2
 6341 000e DBB2     		uxtb	r3, r3
 6342 0010 022B     		cmp	r3, #2
 6343 0012 07D0     		beq	.L550
4680:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 6344              		.loc 1 4680 0
 6345 0014 0024     		movs	r4, #0
 6346              	.LVL527:
 6347              	.L546:
4683:../Middlewares/FreeRTOS//Source/tasks.c **** 
 6348              		.loc 1 4683 0
 6349 0016 FFF7FEFF 		bl	vPortExitCritical
 6350              	.LVL528:
4686:../Middlewares/FreeRTOS//Source/tasks.c **** 
 6351              		.loc 1 4686 0
 6352 001a 2046     		mov	r0, r4
 6353 001c 10BD     		pop	{r4, pc}
 6354              	.LVL529:
 6355              	.L549:
4669:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 213


 6356              		.loc 1 4669 0 discriminator 1
 6357 001e 044B     		ldr	r3, .L551
 6358 0020 1C68     		ldr	r4, [r3]
 6359              	.LVL530:
 6360 0022 F0E7     		b	.L545
 6361              	.LVL531:
 6362              	.L550:
4675:../Middlewares/FreeRTOS//Source/tasks.c **** 				xReturn = pdPASS;
 6363              		.loc 1 4675 0
 6364 0024 0023     		movs	r3, #0
 6365 0026 84F86030 		strb	r3, [r4, #96]
 6366              	.LVL532:
4676:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 6367              		.loc 1 4676 0
 6368 002a 0124     		movs	r4, #1
 6369              	.LVL533:
 6370 002c F3E7     		b	.L546
 6371              	.L552:
 6372 002e 00BF     		.align	2
 6373              	.L551:
 6374 0030 00000000 		.word	.LANCHOR10
 6375              		.cfi_endproc
 6376              	.LFE193:
 6377              		.fnend
 6379              		.global	pxCurrentTCB
 6380              		.section	.bss._ZL10xTickCount,"aw",%nobits
 6381              		.align	2
 6382              		.set	.LANCHOR14,. + 0
 6385              	_ZL10xTickCount:
 6386 0000 00000000 		.space	4
 6387              		.section	.bss._ZL12uxTaskNumber,"aw",%nobits
 6388              		.align	2
 6389              		.set	.LANCHOR12,. + 0
 6392              	_ZL12uxTaskNumber:
 6393 0000 00000000 		.space	4
 6394              		.section	.bss._ZL13uxPendedTicks,"aw",%nobits
 6395              		.align	2
 6396              		.set	.LANCHOR19,. + 0
 6399              	_ZL13uxPendedTicks:
 6400 0000 00000000 		.space	4
 6401              		.section	.bss._ZL13xYieldPending,"aw",%nobits
 6402              		.align	2
 6403              		.set	.LANCHOR20,. + 0
 6406              	_ZL13xYieldPending:
 6407 0000 00000000 		.space	4
 6408              		.section	.bss._ZL15xIdleTaskHandle,"aw",%nobits
 6409              		.align	2
 6410              		.set	.LANCHOR17,. + 0
 6413              	_ZL15xIdleTaskHandle:
 6414 0000 00000000 		.space	4
 6415              		.section	.bss._ZL15xNumOfOverflows,"aw",%nobits
 6416              		.align	2
 6417              		.set	.LANCHOR18,. + 0
 6420              	_ZL15xNumOfOverflows:
 6421 0000 00000000 		.space	4
 6422              		.section	.bss._ZL17pxDelayedTaskList,"aw",%nobits
 6423              		.align	2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 214


 6424              		.set	.LANCHOR2,. + 0
 6427              	_ZL17pxDelayedTaskList:
 6428 0000 00000000 		.space	4
 6429              		.section	.bss._ZL17pxReadyTasksLists,"aw",%nobits
 6430              		.align	2
 6431              		.set	.LANCHOR4,. + 0
 6434              	_ZL17pxReadyTasksLists:
 6435 0000 00000000 		.space	200
 6435      00000000 
 6435      00000000 
 6435      00000000 
 6435      00000000 
 6436              		.section	.bss._ZL17xDelayedTaskList1,"aw",%nobits
 6437              		.align	2
 6438              		.set	.LANCHOR5,. + 0
 6441              	_ZL17xDelayedTaskList1:
 6442 0000 00000000 		.space	20
 6442      00000000 
 6442      00000000 
 6442      00000000 
 6442      00000000 
 6443              		.section	.bss._ZL17xDelayedTaskList2,"aw",%nobits
 6444              		.align	2
 6445              		.set	.LANCHOR6,. + 0
 6448              	_ZL17xDelayedTaskList2:
 6449 0000 00000000 		.space	20
 6449      00000000 
 6449      00000000 
 6449      00000000 
 6449      00000000 
 6450              		.section	.bss._ZL17xPendingReadyList,"aw",%nobits
 6451              		.align	2
 6452              		.set	.LANCHOR1,. + 0
 6455              	_ZL17xPendingReadyList:
 6456 0000 00000000 		.space	20
 6456      00000000 
 6456      00000000 
 6456      00000000 
 6456      00000000 
 6457              		.section	.bss._ZL17xSchedulerRunning,"aw",%nobits
 6458              		.align	2
 6459              		.set	.LANCHOR11,. + 0
 6462              	_ZL17xSchedulerRunning:
 6463 0000 00000000 		.space	4
 6464              		.section	.bss._ZL18uxTopReadyPriority,"aw",%nobits
 6465              		.align	2
 6466              		.set	.LANCHOR13,. + 0
 6469              	_ZL18uxTopReadyPriority:
 6470 0000 00000000 		.space	4
 6471              		.section	.bss._ZL18xSuspendedTaskList,"aw",%nobits
 6472              		.align	2
 6473              		.set	.LANCHOR0,. + 0
 6476              	_ZL18xSuspendedTaskList:
 6477 0000 00000000 		.space	20
 6477      00000000 
 6477      00000000 
 6477      00000000 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 215


 6477      00000000 
 6478              		.section	.bss._ZL20ulTaskSwitchedInTime,"aw",%nobits
 6479              		.align	2
 6480              		.set	.LANCHOR21,. + 0
 6483              	_ZL20ulTaskSwitchedInTime:
 6484 0000 00000000 		.space	4
 6485              		.section	.bss._ZL20uxSchedulerSuspended,"aw",%nobits
 6486              		.align	2
 6487              		.set	.LANCHOR16,. + 0
 6490              	_ZL20uxSchedulerSuspended:
 6491 0000 00000000 		.space	4
 6492              		.section	.bss._ZL20xNextTaskUnblockTime,"aw",%nobits
 6493              		.align	2
 6494              		.set	.LANCHOR3,. + 0
 6497              	_ZL20xNextTaskUnblockTime:
 6498 0000 00000000 		.space	4
 6499              		.section	.bss._ZL22uxCurrentNumberOfTasks,"aw",%nobits
 6500              		.align	2
 6501              		.set	.LANCHOR9,. + 0
 6504              	_ZL22uxCurrentNumberOfTasks:
 6505 0000 00000000 		.space	4
 6506              		.section	.bss._ZL24xTasksWaitingTermination,"aw",%nobits
 6507              		.align	2
 6508              		.set	.LANCHOR7,. + 0
 6511              	_ZL24xTasksWaitingTermination:
 6512 0000 00000000 		.space	20
 6512      00000000 
 6512      00000000 
 6512      00000000 
 6512      00000000 
 6513              		.section	.bss._ZL25pxOverflowDelayedTaskList,"aw",%nobits
 6514              		.align	2
 6515              		.set	.LANCHOR8,. + 0
 6518              	_ZL25pxOverflowDelayedTaskList:
 6519 0000 00000000 		.space	4
 6520              		.section	.bss._ZL28uxDeletedTasksWaitingCleanUp,"aw",%nobits
 6521              		.align	2
 6522              		.set	.LANCHOR15,. + 0
 6525              	_ZL28uxDeletedTasksWaitingCleanUp:
 6526 0000 00000000 		.space	4
 6527              		.section	.bss.pxCurrentTCB,"aw",%nobits
 6528              		.align	2
 6529              		.set	.LANCHOR10,. + 0
 6532              	pxCurrentTCB:
 6533 0000 00000000 		.space	4
 6534              		.section	.rodata.vTaskGetRunTimeStats.str1.4,"aMS",%progbits,1
 6535              		.align	2
 6536              	.LC2:
 6537 0000 09257509 		.ascii	"\011%u\011\011%u%%\015\012\000"
 6537      09257525 
 6537      250D0A00 
 6538              	.LC3:
 6539 000c 09257509 		.ascii	"\011%u\011\011<1%%\015\012\000"
 6539      093C3125 
 6539      250D0A00 
 6540              		.section	.rodata.vTaskList.str1.4,"aMS",%progbits,1
 6541              		.align	2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 216


 6542              	.LC1:
 6543 0000 09256309 		.ascii	"\011%c\011%u\011%u\011%u\015\012\000"
 6543      25750925 
 6543      75092575 
 6543      0D0A00
 6544              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 6545              		.align	2
 6546              	.LC0:
 6547 0000 49444C45 		.ascii	"IDLE\000"
 6547      00
 6548              		.text
 6549              	.Letext0:
 6550              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/cstdlib"
 6551              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/arm-none-eab
 6552              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 6553              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 6554              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 6555              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 6556              		.file 9 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 6557              		.file 10 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 6558              		.file 11 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/stdlib.h"
 6559              		.file 12 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 6560              		.file 13 "../Libraries/CMSIS/CM4/CoreSupport/core_cm4.h"
 6561              		.file 14 "../Libraries/CMSIS/CM4/DeviceSupport/system_at32f4xx.h"
 6562              		.file 15 "../Libraries/CMSIS/CM4/DeviceSupport/at32f4xx.h"
 6563              		.file 16 "Inc/FreeRTOSConfig.h"
 6564              		.file 17 "../Middlewares/FreeRTOS//Source/include/projdefs.h"
 6565              		.file 18 "../Middlewares/FreeRTOS//Source/include/list.h"
 6566              		.file 19 "../Middlewares/FreeRTOS//Source/include/task.h"
 6567              		.file 20 "../Middlewares/FreeRTOS//Source/include/portable.h"
 6568              		.file 21 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdio.h"
 6569              		.file 22 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/string.h"
 6570              		.file 23 "../Middlewares/FreeRTOS//Source/include/timers.h"
 6571              		.file 24 "<built-in>"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 217


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:17     .text._ZL22prvTaskIsTaskSuspendedPv:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:23     .text._ZL22prvTaskIsTaskSuspendedPv:0000000000000000 _ZL22prvTaskIsTaskSuspendedPv
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:92     .text._ZL22prvTaskIsTaskSuspendedPv:0000000000000038 $d
.ARM.exidx.text._ZL22prvTaskIsTaskSuspendedPv:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:100    .text._ZL26prvTaskCheckFreeStackSpacePKh:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:106    .text._ZL26prvTaskCheckFreeStackSpacePKh:0000000000000000 _ZL26prvTaskCheckFreeStackSpacePKh
.ARM.exidx.text._ZL26prvTaskCheckFreeStackSpacePKh:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:143    .text._ZL27prvResetNextTaskUnblockTimev:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:149    .text._ZL27prvResetNextTaskUnblockTimev:0000000000000000 _ZL27prvResetNextTaskUnblockTimev
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:184    .text._ZL27prvResetNextTaskUnblockTimev:0000000000000024 $d
.ARM.exidx.text._ZL27prvResetNextTaskUnblockTimev:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:192    .text._ZL12prvDeleteTCBP19tskTaskControlBlock:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:198    .text._ZL12prvDeleteTCBP19tskTaskControlBlock:0000000000000000 _ZL12prvDeleteTCBP19tskTaskControlBlock
.ARM.exidx.text._ZL12prvDeleteTCBP19tskTaskControlBlock:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:229    .text._ZL20prvInitialiseNewTaskPFvPvEPKcmS_mPS_P19tskTaskControlBlockPK14xMEMORY_REGION:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:235    .text._ZL20prvInitialiseNewTaskPFvPvEPKcmS_mPS_P19tskTaskControlBlockPK14xMEMORY_REGION:0000000000000000 _ZL20prvInitialiseNewTaskPFvPvEPKcmS_mPS_P19tskTaskControlBlockPK14xMEMORY_REGION
.ARM.exidx.text._ZL20prvInitialiseNewTaskPFvPvEPKcmS_mPS_P19tskTaskControlBlockPK14xMEMORY_REGION:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:360    .text._ZL22prvInitialiseTaskListsv:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:366    .text._ZL22prvInitialiseTaskListsv:0000000000000000 _ZL22prvInitialiseTaskListsv
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:435    .text._ZL22prvInitialiseTaskListsv:0000000000000048 $d
.ARM.exidx.text._ZL22prvInitialiseTaskListsv:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:448    .text._ZL24prvAddNewTaskToReadyListP19tskTaskControlBlock:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:454    .text._ZL24prvAddNewTaskToReadyListP19tskTaskControlBlock:0000000000000000 _ZL24prvAddNewTaskToReadyListP19tskTaskControlBlock
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:566    .text._ZL24prvAddNewTaskToReadyListP19tskTaskControlBlock:0000000000000090 $d
.ARM.exidx.text._ZL24prvAddNewTaskToReadyListP19tskTaskControlBlock:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:578    .text._ZL30prvAddCurrentTaskToDelayedListml:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:584    .text._ZL30prvAddCurrentTaskToDelayedListml:0000000000000000 _ZL30prvAddCurrentTaskToDelayedListml
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:688    .text._ZL30prvAddCurrentTaskToDelayedListml:000000000000007c $d
.ARM.exidx.text._ZL30prvAddCurrentTaskToDelayedListml:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:700    .text._ZL20prvWriteNameToBufferPcPKc:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:706    .text._ZL20prvWriteNameToBufferPcPKc:0000000000000000 _ZL20prvWriteNameToBufferPcPKc
.ARM.exidx.text._ZL20prvWriteNameToBufferPcPKc:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:752    .text.xTaskCreate:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:759    .text.xTaskCreate:0000000000000000 xTaskCreate
      .ARM.exidx.text.xTaskCreate:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:868    .text.vTaskDelete:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:875    .text.vTaskDelete:0000000000000000 vTaskDelete
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1029   .text.vTaskDelete:00000000000000b8 $d
      .ARM.exidx.text.vTaskDelete:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1044   .text.eTaskGetState:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1051   .text.eTaskGetState:0000000000000000 eTaskGetState
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1167   .text.eTaskGetState:000000000000006c $d
    .ARM.exidx.text.eTaskGetState:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1177   .text.uxTaskPriorityGet:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1184   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1225   .text.uxTaskPriorityGet:000000000000001c $d
.ARM.exidx.text.uxTaskPriorityGet:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1231   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1238   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1303   .text.uxTaskPriorityGetFromISR:000000000000002c $d
.ARM.exidx.text.uxTaskPriorityGetFromISR:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1309   .text.vTaskPrioritySet:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1316   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1497   .text.vTaskPrioritySet:00000000000000cc $d
 .ARM.exidx.text.vTaskPrioritySet:0000000000000000 $d
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 218


/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1506   .text.vTaskResume:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1513   .text.vTaskResume:0000000000000000 vTaskResume
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1630   .text.vTaskResume:0000000000000074 $d
      .ARM.exidx.text.vTaskResume:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1639   .text.xTaskResumeFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1646   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1780   .text.xTaskResumeFromISR:000000000000008c $d
.ARM.exidx.text.xTaskResumeFromISR:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1790   .text.vTaskStartScheduler:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1797   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1906   .text.vTaskStartScheduler:0000000000000070 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3010   .text._ZL11prvIdleTaskPv:0000000000000000 _ZL11prvIdleTaskPv
.ARM.exidx.text.vTaskStartScheduler:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1920   .text.vTaskEndScheduler:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1927   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1967   .text.vTaskEndScheduler:0000000000000020 $d
.ARM.extab.text.vTaskEndScheduler:0000000000000000 $d
.ARM.exidx.text.vTaskEndScheduler:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1973   .text.vTaskSuspendAll:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1980   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:1998   .text.vTaskSuspendAll:000000000000000c $d
  .ARM.exidx.text.vTaskSuspendAll:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2005   .text.xTaskGetTickCount:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2012   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2029   .text.xTaskGetTickCount:0000000000000008 $d
.ARM.exidx.text.xTaskGetTickCount:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2036   .text.xTaskGetTickCountFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2043   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2068   .text.xTaskGetTickCountFromISR:000000000000000c $d
.ARM.extab.text.xTaskGetTickCountFromISR:0000000000000000 $d
.ARM.exidx.text.xTaskGetTickCountFromISR:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2074   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2081   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2097   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
.ARM.exidx.text.uxTaskGetNumberOfTasks:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2104   .text.pcTaskGetName:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2111   .text.pcTaskGetName:0000000000000000 pcTaskGetName
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2159   .text.pcTaskGetName:0000000000000024 $d
    .ARM.exidx.text.pcTaskGetName:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2168   .text.xTaskIncrementTick:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2175   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2389   .text.xTaskIncrementTick:00000000000000ec $d
.ARM.exidx.text.xTaskIncrementTick:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2405   .text.xTaskResumeAll:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2412   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2612   .text.xTaskResumeAll:00000000000000d0 $d
   .ARM.exidx.text.xTaskResumeAll:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2626   .text.vTaskDelayUntil:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2633   .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2800   .text.vTaskDelayUntil:0000000000000098 $d
  .ARM.exidx.text.vTaskDelayUntil:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2809   .text.vTaskDelay:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2816   .text.vTaskDelay:0000000000000000 vTaskDelay
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2891   .text.vTaskDelay:0000000000000044 $d
       .ARM.exidx.text.vTaskDelay:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2898   .text._ZL31prvCheckTasksWaitingTerminationv:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2904   .text._ZL31prvCheckTasksWaitingTerminationv:0000000000000000 _ZL31prvCheckTasksWaitingTerminationv
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 219


/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:2996   .text._ZL31prvCheckTasksWaitingTerminationv:0000000000000050 $d
.ARM.exidx.text._ZL31prvCheckTasksWaitingTerminationv:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3004   .text._ZL11prvIdleTaskPv:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3051   .text._ZL11prvIdleTaskPv:0000000000000020 $d
.ARM.extab.text._ZL11prvIdleTaskPv:0000000000000000 $d
.ARM.exidx.text._ZL11prvIdleTaskPv:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3058   .text.vTaskSwitchContext:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3065   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3251   .text.vTaskSwitchContext:00000000000000d0 $d
.ARM.exidx.text.vTaskSwitchContext:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3267   .text.vTaskSuspend:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3274   .text.vTaskSuspend:0000000000000000 vTaskSuspend
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3431   .text.vTaskSuspend:00000000000000b8 $d
     .ARM.exidx.text.vTaskSuspend:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3444   .text.vTaskPlaceOnEventList:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3451   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3506   .text.vTaskPlaceOnEventList:000000000000002c $d
.ARM.exidx.text.vTaskPlaceOnEventList:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3512   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3519   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3609   .text.vTaskPlaceOnUnorderedEventList:0000000000000054 $d
.ARM.exidx.text.vTaskPlaceOnUnorderedEventList:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3616   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3623   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3687   .text.vTaskPlaceOnEventListRestricted:0000000000000034 $d
.ARM.exidx.text.vTaskPlaceOnEventListRestricted:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3693   .text.xTaskRemoveFromEventList:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3700   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3805   .text.xTaskRemoveFromEventList:0000000000000074 $d
.ARM.exidx.text.xTaskRemoveFromEventList:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3816   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3823   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 xTaskRemoveFromUnorderedEventList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3940   .text.xTaskRemoveFromUnorderedEventList:0000000000000078 $d
.ARM.exidx.text.xTaskRemoveFromUnorderedEventList:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3950   .text.vTaskSetTimeOutState:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3957   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:3998   .text.vTaskSetTimeOutState:0000000000000024 $d
.ARM.exidx.text.vTaskSetTimeOutState:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4008   .text.xTaskCheckForTimeOut:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4015   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4143   .text.xTaskCheckForTimeOut:0000000000000078 $d
.ARM.exidx.text.xTaskCheckForTimeOut:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4151   .text.vTaskMissedYield:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4158   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4175   .text.vTaskMissedYield:0000000000000008 $d
 .ARM.exidx.text.vTaskMissedYield:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4182   .text.uxTaskGetTaskNumber:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4189   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
.ARM.exidx.text.uxTaskGetTaskNumber:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4218   .text.vTaskSetTaskNumber:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4225   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
.ARM.exidx.text.vTaskSetTaskNumber:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4249   .text.vTaskGetInfo:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4256   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4363   .text.vTaskGetInfo:0000000000000070 $d
     .ARM.exidx.text.vTaskGetInfo:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4369   .text._ZL28prvListTasksWithinSingleListP12xTASK_STATUSP5xLIST10eTaskState:0000000000000000 $t
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 220


/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4375   .text._ZL28prvListTasksWithinSingleListP12xTASK_STATUSP5xLIST10eTaskState:0000000000000000 _ZL28prvListTasksWithinSingleListP12xTASK_STATUSP5xLIST10eTaskState
.ARM.exidx.text._ZL28prvListTasksWithinSingleListP12xTASK_STATUSP5xLIST10eTaskState:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4487   .text.uxTaskGetSystemState:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4494   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4613   .text.uxTaskGetSystemState:0000000000000098 $d
.ARM.exidx.text.uxTaskGetSystemState:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4625   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4632   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4649   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
.ARM.exidx.text.xTaskGetCurrentTaskHandle:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4656   .text.xTaskGetSchedulerState:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4663   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4696   .text.xTaskGetSchedulerState:0000000000000018 $d
.ARM.exidx.text.xTaskGetSchedulerState:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4704   .text.vTaskPriorityInherit:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4711   .text.vTaskPriorityInherit:0000000000000000 vTaskPriorityInherit
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4828   .text.vTaskPriorityInherit:0000000000000094 $d
.ARM.exidx.text.vTaskPriorityInherit:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4836   .text.xTaskPriorityDisinherit:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:4843   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5000   .text.xTaskPriorityDisinherit:00000000000000a4 $d
.ARM.exidx.text.xTaskPriorityDisinherit:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5008   .text.vTaskList:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5015   .text.vTaskList:0000000000000000 vTaskList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5156   .text.vTaskList:00000000000000b8 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5160   .text.vTaskList:00000000000000c8 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5177   .text.vTaskList:00000000000000d4 $d
        .ARM.exidx.text.vTaskList:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5184   .text.vTaskGetRunTimeStats:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5191   .text.vTaskGetRunTimeStats:0000000000000000 vTaskGetRunTimeStats
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5329   .text.vTaskGetRunTimeStats:00000000000000b4 $d
.ARM.exidx.text.vTaskGetRunTimeStats:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5338   .text.uxTaskResetEventItemValue:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5345   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5369   .text.uxTaskResetEventItemValue:0000000000000014 $d
.ARM.exidx.text.uxTaskResetEventItemValue:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5376   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5383   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5410   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
.ARM.exidx.text.pvTaskIncrementMutexHeldCount:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5417   .text.ulTaskNotifyTake:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5424   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5522   .text.ulTaskNotifyTake:0000000000000070 $d
 .ARM.exidx.text.ulTaskNotifyTake:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5529   .text.xTaskNotifyWait:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5536   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5653   .text.xTaskNotifyWait:0000000000000090 $d
  .ARM.exidx.text.xTaskNotifyWait:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5660   .text.xTaskGenericNotify:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5667   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5735   .text.xTaskGenericNotify:000000000000003e $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5739   .text.xTaskGenericNotify:0000000000000042 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5862   .text.xTaskGenericNotify:00000000000000d0 $d
.ARM.exidx.text.xTaskGenericNotify:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5871   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5878   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5965   .text.xTaskGenericNotifyFromISR:000000000000005c $d
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 221


/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:5969   .text.xTaskGenericNotifyFromISR:0000000000000060 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6113   .text.xTaskGenericNotifyFromISR:0000000000000108 $d
.ARM.exidx.text.xTaskGenericNotifyFromISR:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6124   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6131   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6299   .text.vTaskNotifyGiveFromISR:00000000000000b8 $d
.ARM.exidx.text.vTaskNotifyGiveFromISR:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6310   .text.xTaskNotifyStateClear:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6317   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6374   .text.xTaskNotifyStateClear:0000000000000030 $d
.ARM.exidx.text.xTaskNotifyStateClear:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6532   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6381   .bss._ZL10xTickCount:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6385   .bss._ZL10xTickCount:0000000000000000 _ZL10xTickCount
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6388   .bss._ZL12uxTaskNumber:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6392   .bss._ZL12uxTaskNumber:0000000000000000 _ZL12uxTaskNumber
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6395   .bss._ZL13uxPendedTicks:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6399   .bss._ZL13uxPendedTicks:0000000000000000 _ZL13uxPendedTicks
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6402   .bss._ZL13xYieldPending:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6406   .bss._ZL13xYieldPending:0000000000000000 _ZL13xYieldPending
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6409   .bss._ZL15xIdleTaskHandle:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6413   .bss._ZL15xIdleTaskHandle:0000000000000000 _ZL15xIdleTaskHandle
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6416   .bss._ZL15xNumOfOverflows:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6420   .bss._ZL15xNumOfOverflows:0000000000000000 _ZL15xNumOfOverflows
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6423   .bss._ZL17pxDelayedTaskList:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6427   .bss._ZL17pxDelayedTaskList:0000000000000000 _ZL17pxDelayedTaskList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6430   .bss._ZL17pxReadyTasksLists:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6434   .bss._ZL17pxReadyTasksLists:0000000000000000 _ZL17pxReadyTasksLists
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6437   .bss._ZL17xDelayedTaskList1:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6441   .bss._ZL17xDelayedTaskList1:0000000000000000 _ZL17xDelayedTaskList1
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6444   .bss._ZL17xDelayedTaskList2:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6448   .bss._ZL17xDelayedTaskList2:0000000000000000 _ZL17xDelayedTaskList2
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6451   .bss._ZL17xPendingReadyList:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6455   .bss._ZL17xPendingReadyList:0000000000000000 _ZL17xPendingReadyList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6458   .bss._ZL17xSchedulerRunning:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6462   .bss._ZL17xSchedulerRunning:0000000000000000 _ZL17xSchedulerRunning
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6465   .bss._ZL18uxTopReadyPriority:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6469   .bss._ZL18uxTopReadyPriority:0000000000000000 _ZL18uxTopReadyPriority
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6472   .bss._ZL18xSuspendedTaskList:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6476   .bss._ZL18xSuspendedTaskList:0000000000000000 _ZL18xSuspendedTaskList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6479   .bss._ZL20ulTaskSwitchedInTime:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6483   .bss._ZL20ulTaskSwitchedInTime:0000000000000000 _ZL20ulTaskSwitchedInTime
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6486   .bss._ZL20uxSchedulerSuspended:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6490   .bss._ZL20uxSchedulerSuspended:0000000000000000 _ZL20uxSchedulerSuspended
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6493   .bss._ZL20xNextTaskUnblockTime:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6497   .bss._ZL20xNextTaskUnblockTime:0000000000000000 _ZL20xNextTaskUnblockTime
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6500   .bss._ZL22uxCurrentNumberOfTasks:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6504   .bss._ZL22uxCurrentNumberOfTasks:0000000000000000 _ZL22uxCurrentNumberOfTasks
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6507   .bss._ZL24xTasksWaitingTermination:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6511   .bss._ZL24xTasksWaitingTermination:0000000000000000 _ZL24xTasksWaitingTermination
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6514   .bss._ZL25pxOverflowDelayedTaskList:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6518   .bss._ZL25pxOverflowDelayedTaskList:0000000000000000 _ZL25pxOverflowDelayedTaskList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6521   .bss._ZL28uxDeletedTasksWaitingCleanUp:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6525   .bss._ZL28uxDeletedTasksWaitingCleanUp:0000000000000000 _ZL28uxDeletedTasksWaitingCleanUp
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6528   .bss.pxCurrentTCB:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6535   .rodata.vTaskGetRunTimeStats.str1.4:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6541   .rodata.vTaskList.str1.4:0000000000000000 $d
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s 			page 222


/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNtGmG0.s:6545   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
vPortFree
__aeabi_unwind_cpp_pr0
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vListInsert
strcpy
strlen
pvPortMalloc
vPortValidateInterruptPriority
xTimerCreateTimerTask
xPortStartScheduler
ulHighFrequencyTimerTicks
vPortEndScheduler
__aeabi_unwind_cpp_pr1
_Z29vApplicationStackOverflowHookPvPc
sprintf
