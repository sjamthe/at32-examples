ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"tasks.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv4-sp-d16
  23              	prvTaskIsTaskSuspended:
  24              	.LFB142:
  25              		.file 1 "../Middlewares/FreeRTOS//Source/tasks.c"
   1:../Middlewares/FreeRTOS//Source/tasks.c **** /*
   2:../Middlewares/FreeRTOS//Source/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/tasks.c ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/tasks.c **** 
   5:../Middlewares/FreeRTOS//Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/tasks.c **** 
   7:../Middlewares/FreeRTOS//Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/tasks.c **** 
   9:../Middlewares/FreeRTOS//Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/tasks.c **** 
  13:../Middlewares/FreeRTOS//Source/tasks.c ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Middlewares/FreeRTOS//Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/tasks.c ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/tasks.c **** 
  20:../Middlewares/FreeRTOS//Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/tasks.c **** 
  25:../Middlewares/FreeRTOS//Source/tasks.c ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/tasks.c ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/tasks.c ****      *                                                                       *
  32:../Middlewares/FreeRTOS//Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Middlewares/FreeRTOS//Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 2


  34:../Middlewares/FreeRTOS//Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/tasks.c ****      *                                                                       *
  37:../Middlewares/FreeRTOS//Source/tasks.c ****     ***************************************************************************
  38:../Middlewares/FreeRTOS//Source/tasks.c **** 
  39:../Middlewares/FreeRTOS//Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/tasks.c ****     defined configASSERT()?
  42:../Middlewares/FreeRTOS//Source/tasks.c **** 
  43:../Middlewares/FreeRTOS//Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Middlewares/FreeRTOS//Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/tasks.c ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/tasks.c **** 
  47:../Middlewares/FreeRTOS//Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Middlewares/FreeRTOS//Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/tasks.c **** 
  52:../Middlewares/FreeRTOS//Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/tasks.c **** 
  56:../Middlewares/FreeRTOS//Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Middlewares/FreeRTOS//Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/tasks.c **** 
  59:../Middlewares/FreeRTOS//Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/tasks.c **** 
  63:../Middlewares/FreeRTOS//Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/tasks.c ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/tasks.c **** 
  67:../Middlewares/FreeRTOS//Source/tasks.c ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/tasks.c **** */
  69:../Middlewares/FreeRTOS//Source/tasks.c **** 
  70:../Middlewares/FreeRTOS//Source/tasks.c **** /* Standard includes. */
  71:../Middlewares/FreeRTOS//Source/tasks.c **** #include <stdlib.h>
  72:../Middlewares/FreeRTOS//Source/tasks.c **** #include <string.h>
  73:../Middlewares/FreeRTOS//Source/tasks.c **** 
  74:../Middlewares/FreeRTOS//Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:../Middlewares/FreeRTOS//Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:../Middlewares/FreeRTOS//Source/tasks.c **** task.h is included from an application file. */
  77:../Middlewares/FreeRTOS//Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:../Middlewares/FreeRTOS//Source/tasks.c **** 
  79:../Middlewares/FreeRTOS//Source/tasks.c **** /* FreeRTOS includes. */
  80:../Middlewares/FreeRTOS//Source/tasks.c **** #include "FreeRTOS.h"
  81:../Middlewares/FreeRTOS//Source/tasks.c **** #include "task.h"
  82:../Middlewares/FreeRTOS//Source/tasks.c **** #include "timers.h"
  83:../Middlewares/FreeRTOS//Source/tasks.c **** #include "StackMacros.h"
  84:../Middlewares/FreeRTOS//Source/tasks.c **** 
  85:../Middlewares/FreeRTOS//Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:../Middlewares/FreeRTOS//Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:../Middlewares/FreeRTOS//Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:../Middlewares/FreeRTOS//Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:../Middlewares/FreeRTOS//Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 3


  91:../Middlewares/FreeRTOS//Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:../Middlewares/FreeRTOS//Source/tasks.c **** functions but without including stdio.h here. */
  93:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:../Middlewares/FreeRTOS//Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:../Middlewares/FreeRTOS//Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:../Middlewares/FreeRTOS//Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:../Middlewares/FreeRTOS//Source/tasks.c **** 	#include <stdio.h>
  99:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:../Middlewares/FreeRTOS//Source/tasks.c **** 
 101:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:../Middlewares/FreeRTOS//Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:../Middlewares/FreeRTOS//Source/tasks.c **** #else
 106:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 108:../Middlewares/FreeRTOS//Source/tasks.c **** 
 109:../Middlewares/FreeRTOS//Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:../Middlewares/FreeRTOS//Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:../Middlewares/FreeRTOS//Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:../Middlewares/FreeRTOS//Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:../Middlewares/FreeRTOS//Source/tasks.c **** 
 114:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 115:../Middlewares/FreeRTOS//Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:../Middlewares/FreeRTOS//Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 118:../Middlewares/FreeRTOS//Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:../Middlewares/FreeRTOS//Source/tasks.c **** 
 120:../Middlewares/FreeRTOS//Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:../Middlewares/FreeRTOS//Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:../Middlewares/FreeRTOS//Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:../Middlewares/FreeRTOS//Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:../Middlewares/FreeRTOS//Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:../Middlewares/FreeRTOS//Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:../Middlewares/FreeRTOS//Source/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:../Middlewares/FreeRTOS//Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:../Middlewares/FreeRTOS//Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:../Middlewares/FreeRTOS//Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:../Middlewares/FreeRTOS//Source/tasks.c **** made to free the RAM that was allocated statically.
 131:../Middlewares/FreeRTOS//Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:../Middlewares/FreeRTOS//Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:../Middlewares/FreeRTOS//Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:../Middlewares/FreeRTOS//Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:../Middlewares/FreeRTOS//Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:../Middlewares/FreeRTOS//Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:../Middlewares/FreeRTOS//Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:../Middlewares/FreeRTOS//Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:../Middlewares/FreeRTOS//Source/tasks.c **** 
 140:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 141:../Middlewares/FreeRTOS//Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 143:../Middlewares/FreeRTOS//Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:../Middlewares/FreeRTOS//Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:../Middlewares/FreeRTOS//Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 146:../Middlewares/FreeRTOS//Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 147:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 4


 148:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 149:../Middlewares/FreeRTOS//Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 150:../Middlewares/FreeRTOS//Source/tasks.c ****  * global, rather than file scope.
 151:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 152:../Middlewares/FreeRTOS//Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define static
 154:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 155:../Middlewares/FreeRTOS//Source/tasks.c **** 
 156:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:../Middlewares/FreeRTOS//Source/tasks.c **** 
 158:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:../Middlewares/FreeRTOS//Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:../Middlewares/FreeRTOS//Source/tasks.c **** 	microcontroller architecture. */
 161:../Middlewares/FreeRTOS//Source/tasks.c **** 
 162:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:../Middlewares/FreeRTOS//Source/tasks.c **** 	state task. */
 164:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:../Middlewares/FreeRTOS//Source/tasks.c **** 	{																									\
 166:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:../Middlewares/FreeRTOS//Source/tasks.c **** 		{																								\
 168:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:../Middlewares/FreeRTOS//Source/tasks.c **** 		}																								\
 170:../Middlewares/FreeRTOS//Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:../Middlewares/FreeRTOS//Source/tasks.c **** 
 172:../Middlewares/FreeRTOS//Source/tasks.c **** 	/*-----------------------------------------------------------*/
 173:../Middlewares/FreeRTOS//Source/tasks.c **** 
 174:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:../Middlewares/FreeRTOS//Source/tasks.c **** 	{																									\
 176:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:../Middlewares/FreeRTOS//Source/tasks.c **** 																										\
 178:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:../Middlewares/FreeRTOS//Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:../Middlewares/FreeRTOS//Source/tasks.c **** 		{																								\
 181:../Middlewares/FreeRTOS//Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:../Middlewares/FreeRTOS//Source/tasks.c **** 			--uxTopPriority;																			\
 183:../Middlewares/FreeRTOS//Source/tasks.c **** 		}																								\
 184:../Middlewares/FreeRTOS//Source/tasks.c **** 																										\
 185:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:../Middlewares/FreeRTOS//Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:../Middlewares/FreeRTOS//Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:../Middlewares/FreeRTOS//Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:../Middlewares/FreeRTOS//Source/tasks.c **** 
 191:../Middlewares/FreeRTOS//Source/tasks.c **** 	/*-----------------------------------------------------------*/
 192:../Middlewares/FreeRTOS//Source/tasks.c **** 
 193:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:../Middlewares/FreeRTOS//Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:../Middlewares/FreeRTOS//Source/tasks.c **** 	being used. */
 196:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:../Middlewares/FreeRTOS//Source/tasks.c **** 
 199:../Middlewares/FreeRTOS//Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:../Middlewares/FreeRTOS//Source/tasks.c **** 
 201:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:../Middlewares/FreeRTOS//Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 203:../Middlewares/FreeRTOS//Source/tasks.c **** 	architecture being used. */
 204:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 5


 205:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 207:../Middlewares/FreeRTOS//Source/tasks.c **** 
 208:../Middlewares/FreeRTOS//Source/tasks.c **** 	/*-----------------------------------------------------------*/
 209:../Middlewares/FreeRTOS//Source/tasks.c **** 
 210:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:../Middlewares/FreeRTOS//Source/tasks.c **** 	{																								\
 212:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:../Middlewares/FreeRTOS//Source/tasks.c **** 																									\
 214:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:../Middlewares/FreeRTOS//Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:../Middlewares/FreeRTOS//Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:../Middlewares/FreeRTOS//Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:../Middlewares/FreeRTOS//Source/tasks.c **** 
 220:../Middlewares/FreeRTOS//Source/tasks.c **** 	/*-----------------------------------------------------------*/
 221:../Middlewares/FreeRTOS//Source/tasks.c **** 
 222:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:../Middlewares/FreeRTOS//Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:../Middlewares/FreeRTOS//Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:../Middlewares/FreeRTOS//Source/tasks.c **** 	{																									\
 227:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:../Middlewares/FreeRTOS//Source/tasks.c **** 		{																								\
 229:../Middlewares/FreeRTOS//Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:../Middlewares/FreeRTOS//Source/tasks.c **** 		}																								\
 231:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 232:../Middlewares/FreeRTOS//Source/tasks.c **** 
 233:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:../Middlewares/FreeRTOS//Source/tasks.c **** 
 235:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 236:../Middlewares/FreeRTOS//Source/tasks.c **** 
 237:../Middlewares/FreeRTOS//Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:../Middlewares/FreeRTOS//Source/tasks.c **** count overflows. */
 239:../Middlewares/FreeRTOS//Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:../Middlewares/FreeRTOS//Source/tasks.c **** {																									\
 241:../Middlewares/FreeRTOS//Source/tasks.c **** 	List_t *pxTemp;																					\
 242:../Middlewares/FreeRTOS//Source/tasks.c **** 																									\
 243:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:../Middlewares/FreeRTOS//Source/tasks.c **** 																									\
 246:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:../Middlewares/FreeRTOS//Source/tasks.c **** 	xNumOfOverflows++;																				\
 250:../Middlewares/FreeRTOS//Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:../Middlewares/FreeRTOS//Source/tasks.c **** }
 252:../Middlewares/FreeRTOS//Source/tasks.c **** 
 253:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 254:../Middlewares/FreeRTOS//Source/tasks.c **** 
 255:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 256:../Middlewares/FreeRTOS//Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:../Middlewares/FreeRTOS//Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 259:../Middlewares/FreeRTOS//Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 260:../Middlewares/FreeRTOS//Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 261:../Middlewares/FreeRTOS//Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 6


 262:../Middlewares/FreeRTOS//Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:../Middlewares/FreeRTOS//Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 264:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 265:../Middlewares/FreeRTOS//Source/tasks.c **** 
 266:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 267:../Middlewares/FreeRTOS//Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:../Middlewares/FreeRTOS//Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:../Middlewares/FreeRTOS//Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:../Middlewares/FreeRTOS//Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 272:../Middlewares/FreeRTOS//Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:../Middlewares/FreeRTOS//Source/tasks.c **** 
 274:../Middlewares/FreeRTOS//Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:../Middlewares/FreeRTOS//Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:../Middlewares/FreeRTOS//Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:../Middlewares/FreeRTOS//Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:../Middlewares/FreeRTOS//Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 279:../Middlewares/FreeRTOS//Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:../Middlewares/FreeRTOS//Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 281:../Middlewares/FreeRTOS//Source/tasks.c **** to its original value when it is released. */
 282:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:../Middlewares/FreeRTOS//Source/tasks.c **** #else
 285:../Middlewares/FreeRTOS//Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 287:../Middlewares/FreeRTOS//Source/tasks.c **** 
 288:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 289:../Middlewares/FreeRTOS//Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:../Middlewares/FreeRTOS//Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:../Middlewares/FreeRTOS//Source/tasks.c ****  * (the task's run time environment, including register values)
 292:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 293:../Middlewares/FreeRTOS//Source/tasks.c **** typedef struct tskTaskControlBlock
 294:../Middlewares/FreeRTOS//Source/tasks.c **** {
 295:../Middlewares/FreeRTOS//Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:../Middlewares/FreeRTOS//Source/tasks.c **** 
 297:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:../Middlewares/FreeRTOS//Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 300:../Middlewares/FreeRTOS//Source/tasks.c **** 
 301:../Middlewares/FreeRTOS//Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:../Middlewares/FreeRTOS//Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:../Middlewares/FreeRTOS//Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:../Middlewares/FreeRTOS//Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:../Middlewares/FreeRTOS//Source/tasks.c **** 
 307:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:../Middlewares/FreeRTOS//Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 310:../Middlewares/FreeRTOS//Source/tasks.c **** 
 311:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:../Middlewares/FreeRTOS//Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 314:../Middlewares/FreeRTOS//Source/tasks.c **** 
 315:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 316:../Middlewares/FreeRTOS//Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 317:../Middlewares/FreeRTOS//Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 318:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 7


 319:../Middlewares/FreeRTOS//Source/tasks.c **** 
 320:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 321:../Middlewares/FreeRTOS//Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 322:../Middlewares/FreeRTOS//Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 324:../Middlewares/FreeRTOS//Source/tasks.c **** 
 325:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:../Middlewares/FreeRTOS//Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 328:../Middlewares/FreeRTOS//Source/tasks.c **** 
 329:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:../Middlewares/FreeRTOS//Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 332:../Middlewares/FreeRTOS//Source/tasks.c **** 
 333:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:../Middlewares/FreeRTOS//Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 336:../Middlewares/FreeRTOS//Source/tasks.c **** 
 337:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 338:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:../Middlewares/FreeRTOS//Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:../Middlewares/FreeRTOS//Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:../Middlewares/FreeRTOS//Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:../Middlewares/FreeRTOS//Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:../Middlewares/FreeRTOS//Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:../Middlewares/FreeRTOS//Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:../Middlewares/FreeRTOS//Source/tasks.c **** 		struct	_reent xNewLib_reent;
 346:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 347:../Middlewares/FreeRTOS//Source/tasks.c **** 
 348:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:../Middlewares/FreeRTOS//Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:../Middlewares/FreeRTOS//Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 352:../Middlewares/FreeRTOS//Source/tasks.c **** 
 353:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* See the comments above the definition of
 354:../Middlewares/FreeRTOS//Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:../Middlewares/FreeRTOS//Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 358:../Middlewares/FreeRTOS//Source/tasks.c **** 
 359:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:../Middlewares/FreeRTOS//Source/tasks.c **** 		uint8_t ucDelayAborted;
 361:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 362:../Middlewares/FreeRTOS//Source/tasks.c **** 
 363:../Middlewares/FreeRTOS//Source/tasks.c **** } tskTCB;
 364:../Middlewares/FreeRTOS//Source/tasks.c **** 
 365:../Middlewares/FreeRTOS//Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:../Middlewares/FreeRTOS//Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:../Middlewares/FreeRTOS//Source/tasks.c **** typedef tskTCB TCB_t;
 368:../Middlewares/FreeRTOS//Source/tasks.c **** 
 369:../Middlewares/FreeRTOS//Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:../Middlewares/FreeRTOS//Source/tasks.c **** static variables must be declared volatile. */
 371:../Middlewares/FreeRTOS//Source/tasks.c **** 
 372:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 373:../Middlewares/FreeRTOS//Source/tasks.c **** 
 374:../Middlewares/FreeRTOS//Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 375:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 8


 376:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 377:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 378:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 379:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:../Middlewares/FreeRTOS//Source/tasks.c **** 
 382:../Middlewares/FreeRTOS//Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:../Middlewares/FreeRTOS//Source/tasks.c **** 
 384:../Middlewares/FreeRTOS//Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:../Middlewares/FreeRTOS//Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 386:../Middlewares/FreeRTOS//Source/tasks.c **** 
 387:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 388:../Middlewares/FreeRTOS//Source/tasks.c **** 
 389:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:../Middlewares/FreeRTOS//Source/tasks.c **** 
 391:../Middlewares/FreeRTOS//Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:../Middlewares/FreeRTOS//Source/tasks.c **** 
 393:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 394:../Middlewares/FreeRTOS//Source/tasks.c **** 
 395:../Middlewares/FreeRTOS//Source/tasks.c **** /* Other file private variables. --------------------------------*/
 396:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 397:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 405:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 406:../Middlewares/FreeRTOS//Source/tasks.c **** 
 407:../Middlewares/FreeRTOS//Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:../Middlewares/FreeRTOS//Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:../Middlewares/FreeRTOS//Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:../Middlewares/FreeRTOS//Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:../Middlewares/FreeRTOS//Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:../Middlewares/FreeRTOS//Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:../Middlewares/FreeRTOS//Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:../Middlewares/FreeRTOS//Source/tasks.c **** accessed from a critical section. */
 415:../Middlewares/FreeRTOS//Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 416:../Middlewares/FreeRTOS//Source/tasks.c **** 
 417:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:../Middlewares/FreeRTOS//Source/tasks.c **** 
 419:../Middlewares/FreeRTOS//Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 420:../Middlewares/FreeRTOS//Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 421:../Middlewares/FreeRTOS//Source/tasks.c **** 
 422:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 423:../Middlewares/FreeRTOS//Source/tasks.c **** 
 424:../Middlewares/FreeRTOS//Source/tasks.c **** /*lint +e956 */
 425:../Middlewares/FreeRTOS//Source/tasks.c **** 
 426:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 427:../Middlewares/FreeRTOS//Source/tasks.c **** 
 428:../Middlewares/FreeRTOS//Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:../Middlewares/FreeRTOS//Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 430:../Middlewares/FreeRTOS//Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 431:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 432:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 9


 433:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 434:../Middlewares/FreeRTOS//Source/tasks.c **** 	extern void vApplicationTickHook( void );
 435:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 436:../Middlewares/FreeRTOS//Source/tasks.c **** 
 437:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:../Middlewares/FreeRTOS//Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 440:../Middlewares/FreeRTOS//Source/tasks.c **** 
 441:../Middlewares/FreeRTOS//Source/tasks.c **** /* File private functions. --------------------------------*/
 442:../Middlewares/FreeRTOS//Source/tasks.c **** 
 443:../Middlewares/FreeRTOS//Source/tasks.c **** /**
 444:../Middlewares/FreeRTOS//Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:../Middlewares/FreeRTOS//Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:../Middlewares/FreeRTOS//Source/tasks.c ****  * is in any other state.
 447:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 448:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:../Middlewares/FreeRTOS//Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 450:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:../Middlewares/FreeRTOS//Source/tasks.c **** 
 452:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 453:../Middlewares/FreeRTOS//Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:../Middlewares/FreeRTOS//Source/tasks.c ****  * automatically upon the creation of the first task.
 455:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 456:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 457:../Middlewares/FreeRTOS//Source/tasks.c **** 
 458:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 459:../Middlewares/FreeRTOS//Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:../Middlewares/FreeRTOS//Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:../Middlewares/FreeRTOS//Source/tasks.c ****  * creation of the first user task.
 462:../Middlewares/FreeRTOS//Source/tasks.c ****  *
 463:../Middlewares/FreeRTOS//Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:../Middlewares/FreeRTOS//Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:../Middlewares/FreeRTOS//Source/tasks.c ****  *
 466:../Middlewares/FreeRTOS//Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:../Middlewares/FreeRTOS//Source/tasks.c ****  *
 468:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 469:../Middlewares/FreeRTOS//Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:../Middlewares/FreeRTOS//Source/tasks.c **** 
 471:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 472:../Middlewares/FreeRTOS//Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:../Middlewares/FreeRTOS//Source/tasks.c ****  * including the stack pointed to by the TCB.
 474:../Middlewares/FreeRTOS//Source/tasks.c ****  *
 475:../Middlewares/FreeRTOS//Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:../Middlewares/FreeRTOS//Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 478:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:../Middlewares/FreeRTOS//Source/tasks.c **** 
 480:../Middlewares/FreeRTOS//Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 481:../Middlewares/FreeRTOS//Source/tasks.c **** 
 482:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 483:../Middlewares/FreeRTOS//Source/tasks.c **** 
 484:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 485:../Middlewares/FreeRTOS//Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:../Middlewares/FreeRTOS//Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 487:../Middlewares/FreeRTOS//Source/tasks.c ****  * and its TCB deleted.
 488:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 489:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 10


 490:../Middlewares/FreeRTOS//Source/tasks.c **** 
 491:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 492:../Middlewares/FreeRTOS//Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 493:../Middlewares/FreeRTOS//Source/tasks.c ****  * either the current or the overflow delayed task list.
 494:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 495:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 496:../Middlewares/FreeRTOS//Source/tasks.c **** 
 497:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 498:../Middlewares/FreeRTOS//Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:../Middlewares/FreeRTOS//Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:../Middlewares/FreeRTOS//Source/tasks.c ****  * a suspended list, etc.).
 501:../Middlewares/FreeRTOS//Source/tasks.c ****  *
 502:../Middlewares/FreeRTOS//Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:../Middlewares/FreeRTOS//Source/tasks.c ****  * NORMAL APPLICATION CODE.
 504:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 505:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:../Middlewares/FreeRTOS//Source/tasks.c **** 
 507:../Middlewares/FreeRTOS//Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 508:../Middlewares/FreeRTOS//Source/tasks.c **** 
 509:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 510:../Middlewares/FreeRTOS//Source/tasks.c **** 
 511:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 512:../Middlewares/FreeRTOS//Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:../Middlewares/FreeRTOS//Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 515:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:../Middlewares/FreeRTOS//Source/tasks.c **** 
 517:../Middlewares/FreeRTOS//Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 518:../Middlewares/FreeRTOS//Source/tasks.c **** 
 519:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 520:../Middlewares/FreeRTOS//Source/tasks.c **** 
 521:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 522:../Middlewares/FreeRTOS//Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:../Middlewares/FreeRTOS//Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:../Middlewares/FreeRTOS//Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 526:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:../Middlewares/FreeRTOS//Source/tasks.c **** 
 528:../Middlewares/FreeRTOS//Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 529:../Middlewares/FreeRTOS//Source/tasks.c **** 
 530:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 531:../Middlewares/FreeRTOS//Source/tasks.c **** 
 532:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 533:../Middlewares/FreeRTOS//Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:../Middlewares/FreeRTOS//Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:../Middlewares/FreeRTOS//Source/tasks.c ****  *
 536:../Middlewares/FreeRTOS//Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:../Middlewares/FreeRTOS//Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:../Middlewares/FreeRTOS//Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:../Middlewares/FreeRTOS//Source/tasks.c ****  * set to a value other than 1.
 540:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 541:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:../Middlewares/FreeRTOS//Source/tasks.c **** 
 543:../Middlewares/FreeRTOS//Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 544:../Middlewares/FreeRTOS//Source/tasks.c **** 
 545:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 546:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 11


 547:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 548:../Middlewares/FreeRTOS//Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 549:../Middlewares/FreeRTOS//Source/tasks.c ****  * will exit the Blocked state.
 550:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 551:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:../Middlewares/FreeRTOS//Source/tasks.c **** 
 553:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:../Middlewares/FreeRTOS//Source/tasks.c **** 
 555:../Middlewares/FreeRTOS//Source/tasks.c **** 	/*
 556:../Middlewares/FreeRTOS//Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:../Middlewares/FreeRTOS//Source/tasks.c **** 	 * human readable tables of task information.
 558:../Middlewares/FreeRTOS//Source/tasks.c **** 	 */
 559:../Middlewares/FreeRTOS//Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 560:../Middlewares/FreeRTOS//Source/tasks.c **** 
 561:../Middlewares/FreeRTOS//Source/tasks.c **** #endif
 562:../Middlewares/FreeRTOS//Source/tasks.c **** 
 563:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 564:../Middlewares/FreeRTOS//Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:../Middlewares/FreeRTOS//Source/tasks.c ****  * dynamically to fill in the structure's members.
 566:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 567:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:../Middlewares/FreeRTOS//Source/tasks.c **** 									const char * const pcName,
 569:../Middlewares/FreeRTOS//Source/tasks.c **** 									const uint32_t ulStackDepth,
 570:../Middlewares/FreeRTOS//Source/tasks.c **** 									void * const pvParameters,
 571:../Middlewares/FreeRTOS//Source/tasks.c **** 									UBaseType_t uxPriority,
 572:../Middlewares/FreeRTOS//Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:../Middlewares/FreeRTOS//Source/tasks.c **** 									TCB_t *pxNewTCB,
 574:../Middlewares/FreeRTOS//Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char
 575:../Middlewares/FreeRTOS//Source/tasks.c **** 
 576:../Middlewares/FreeRTOS//Source/tasks.c **** /*
 577:../Middlewares/FreeRTOS//Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:../Middlewares/FreeRTOS//Source/tasks.c ****  * under the control of the scheduler.
 579:../Middlewares/FreeRTOS//Source/tasks.c ****  */
 580:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 581:../Middlewares/FreeRTOS//Source/tasks.c **** 
 582:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 583:../Middlewares/FreeRTOS//Source/tasks.c **** 
 584:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:../Middlewares/FreeRTOS//Source/tasks.c **** 
 586:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:../Middlewares/FreeRTOS//Source/tasks.c **** 									const char * const pcName,
 588:../Middlewares/FreeRTOS//Source/tasks.c **** 									const uint32_t ulStackDepth,
 589:../Middlewares/FreeRTOS//Source/tasks.c **** 									void * const pvParameters,
 590:../Middlewares/FreeRTOS//Source/tasks.c **** 									UBaseType_t uxPriority,
 591:../Middlewares/FreeRTOS//Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:../Middlewares/FreeRTOS//Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 594:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxNewTCB;
 595:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskHandle_t xReturn;
 596:../Middlewares/FreeRTOS//Source/tasks.c **** 
 597:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:../Middlewares/FreeRTOS//Source/tasks.c **** 
 600:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 602:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 603:../Middlewares/FreeRTOS//Source/tasks.c **** 			function - use them. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 12


 604:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:../Middlewares/FreeRTOS//Source/tasks.c **** 
 607:../Middlewares/FreeRTOS//Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 609:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:../Middlewares/FreeRTOS//Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 613:../Middlewares/FreeRTOS//Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:../Middlewares/FreeRTOS//Source/tasks.c **** 
 615:../Middlewares/FreeRTOS//Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:../Middlewares/FreeRTOS//Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 618:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
 619:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 620:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = NULL;
 621:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 622:../Middlewares/FreeRTOS//Source/tasks.c **** 
 623:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
 624:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 625:../Middlewares/FreeRTOS//Source/tasks.c **** 
 626:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 628:../Middlewares/FreeRTOS//Source/tasks.c **** 
 629:../Middlewares/FreeRTOS//Source/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:../Middlewares/FreeRTOS//Source/tasks.c **** 
 631:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 633:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:../Middlewares/FreeRTOS//Source/tasks.c **** 
 636:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:../Middlewares/FreeRTOS//Source/tasks.c **** 
 638:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 640:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:../Middlewares/FreeRTOS//Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:../Middlewares/FreeRTOS//Source/tasks.c **** 			not static allocation is being used. */
 643:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:../Middlewares/FreeRTOS//Source/tasks.c **** 
 645:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxNewTCB != NULL )
 646:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 647:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Store the stack location in the TCB. */
 648:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:../Middlewares/FreeRTOS//Source/tasks.c **** 
 650:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:../Middlewares/FreeRTOS//Source/tasks.c **** 				this task had a statically allocated stack in case it is
 652:../Middlewares/FreeRTOS//Source/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:../Middlewares/FreeRTOS//Source/tasks.c **** 
 655:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:../Middlewares/FreeRTOS//Source/tasks.c **** 										pxTaskDefinition->pcName,
 657:../Middlewares/FreeRTOS//Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 658:../Middlewares/FreeRTOS//Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 659:../Middlewares/FreeRTOS//Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 660:../Middlewares/FreeRTOS//Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 13


 661:../Middlewares/FreeRTOS//Source/tasks.c **** 										pxTaskDefinition->xRegions );
 662:../Middlewares/FreeRTOS//Source/tasks.c **** 
 663:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 664:../Middlewares/FreeRTOS//Source/tasks.c **** 				xReturn = pdPASS;
 665:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 666:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 667:../Middlewares/FreeRTOS//Source/tasks.c **** 
 668:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
 669:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 670:../Middlewares/FreeRTOS//Source/tasks.c **** 
 671:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 673:../Middlewares/FreeRTOS//Source/tasks.c **** 
 674:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:../Middlewares/FreeRTOS//Source/tasks.c **** 
 676:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:../Middlewares/FreeRTOS//Source/tasks.c **** 							const char * const pcName,
 678:../Middlewares/FreeRTOS//Source/tasks.c **** 							const uint16_t usStackDepth,
 679:../Middlewares/FreeRTOS//Source/tasks.c **** 							void * const pvParameters,
 680:../Middlewares/FreeRTOS//Source/tasks.c **** 							UBaseType_t uxPriority,
 681:../Middlewares/FreeRTOS//Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 683:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn;
 685:../Middlewares/FreeRTOS//Source/tasks.c **** 
 686:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:../Middlewares/FreeRTOS//Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:../Middlewares/FreeRTOS//Source/tasks.c **** 		the TCB then the stack. */
 689:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 691:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:../Middlewares/FreeRTOS//Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:../Middlewares/FreeRTOS//Source/tasks.c **** 			allocation is being used. */
 694:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:../Middlewares/FreeRTOS//Source/tasks.c **** 
 696:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxNewTCB != NULL )
 697:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 698:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 699:../Middlewares/FreeRTOS//Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 700:../Middlewares/FreeRTOS//Source/tasks.c **** 				be deleted later if required. */
 701:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:../Middlewares/FreeRTOS//Source/tasks.c **** 
 703:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 705:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:../Middlewares/FreeRTOS//Source/tasks.c **** 					vPortFree( pxNewTCB );
 707:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxNewTCB = NULL;
 708:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 709:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 710:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 711:../Middlewares/FreeRTOS//Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 713:../Middlewares/FreeRTOS//Source/tasks.c **** 		StackType_t *pxStack;
 714:../Middlewares/FreeRTOS//Source/tasks.c **** 
 715:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 716:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 717:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 14


 718:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxStack != NULL )
 719:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 720:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Allocate space for the TCB. */
 721:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 722:../Middlewares/FreeRTOS//Source/tasks.c **** 
 723:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxNewTCB != NULL )
 724:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 725:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Store the stack location in the TCB. */
 726:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 727:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 728:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
 729:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 730:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:../Middlewares/FreeRTOS//Source/tasks.c **** 					it again. */
 732:../Middlewares/FreeRTOS//Source/tasks.c **** 					vPortFree( pxStack );
 733:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 734:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 735:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
 736:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 737:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxNewTCB = NULL;
 738:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 739:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 740:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:../Middlewares/FreeRTOS//Source/tasks.c **** 
 742:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxNewTCB != NULL )
 743:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 744:../Middlewares/FreeRTOS//Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 746:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:../Middlewares/FreeRTOS//Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 750:../Middlewares/FreeRTOS//Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:../Middlewares/FreeRTOS//Source/tasks.c **** 
 752:../Middlewares/FreeRTOS//Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 753:../Middlewares/FreeRTOS//Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 754:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = pdPASS;
 755:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 756:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
 757:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 758:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 759:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 760:../Middlewares/FreeRTOS//Source/tasks.c **** 
 761:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
 762:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 763:../Middlewares/FreeRTOS//Source/tasks.c **** 
 764:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 766:../Middlewares/FreeRTOS//Source/tasks.c **** 
 767:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:../Middlewares/FreeRTOS//Source/tasks.c **** 									const char * const pcName,
 769:../Middlewares/FreeRTOS//Source/tasks.c **** 									const uint32_t ulStackDepth,
 770:../Middlewares/FreeRTOS//Source/tasks.c **** 									void * const pvParameters,
 771:../Middlewares/FreeRTOS//Source/tasks.c **** 									UBaseType_t uxPriority,
 772:../Middlewares/FreeRTOS//Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 773:../Middlewares/FreeRTOS//Source/tasks.c **** 									TCB_t *pxNewTCB,
 774:../Middlewares/FreeRTOS//Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 15


 775:../Middlewares/FreeRTOS//Source/tasks.c **** {
 776:../Middlewares/FreeRTOS//Source/tasks.c **** StackType_t *pxTopOfStack;
 777:../Middlewares/FreeRTOS//Source/tasks.c **** UBaseType_t x;
 778:../Middlewares/FreeRTOS//Source/tasks.c **** 
 779:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:../Middlewares/FreeRTOS//Source/tasks.c **** 		BaseType_t xRunPrivileged;
 782:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 784:../Middlewares/FreeRTOS//Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 786:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
 787:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 788:../Middlewares/FreeRTOS//Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 790:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:../Middlewares/FreeRTOS//Source/tasks.c **** 
 793:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 796:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:../Middlewares/FreeRTOS//Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 798:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 799:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:../Middlewares/FreeRTOS//Source/tasks.c **** 
 801:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:../Middlewares/FreeRTOS//Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:../Middlewares/FreeRTOS//Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:../Middlewares/FreeRTOS//Source/tasks.c **** 	by the port. */
 805:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 807:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 808:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 809:../Middlewares/FreeRTOS//Source/tasks.c **** 
 810:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 811:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 812:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 813:../Middlewares/FreeRTOS//Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 815:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:../Middlewares/FreeRTOS//Source/tasks.c **** 
 817:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:../Middlewares/FreeRTOS//Source/tasks.c **** 
 820:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:../Middlewares/FreeRTOS//Source/tasks.c **** 		performed. */
 822:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 824:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:../Middlewares/FreeRTOS//Source/tasks.c **** 
 826:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Store the task name in the TCB. */
 827:../Middlewares/FreeRTOS//Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 828:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 829:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 830:../Middlewares/FreeRTOS//Source/tasks.c **** 
 831:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 16


 832:../Middlewares/FreeRTOS//Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 833:../Middlewares/FreeRTOS//Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 834:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 835:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 836:../Middlewares/FreeRTOS//Source/tasks.c **** 			break;
 837:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 838:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
 839:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 840:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 842:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 843:../Middlewares/FreeRTOS//Source/tasks.c **** 
 844:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:../Middlewares/FreeRTOS//Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 847:../Middlewares/FreeRTOS//Source/tasks.c **** 
 848:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:../Middlewares/FreeRTOS//Source/tasks.c **** 	remove the privilege bit if one is present. */
 850:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 851:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 852:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 853:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 854:../Middlewares/FreeRTOS//Source/tasks.c **** 	else
 855:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 856:../Middlewares/FreeRTOS//Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 858:../Middlewares/FreeRTOS//Source/tasks.c **** 
 859:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 860:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 862:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 863:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 864:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 865:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:../Middlewares/FreeRTOS//Source/tasks.c **** 
 867:../Middlewares/FreeRTOS//Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 868:../Middlewares/FreeRTOS//Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 869:../Middlewares/FreeRTOS//Source/tasks.c **** 
 870:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 871:../Middlewares/FreeRTOS//Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:../Middlewares/FreeRTOS//Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 873:../Middlewares/FreeRTOS//Source/tasks.c **** 
 874:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Event lists are always in priority order. */
 875:../Middlewares/FreeRTOS//Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 876:../Middlewares/FreeRTOS//Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 877:../Middlewares/FreeRTOS//Source/tasks.c **** 
 878:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 880:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 882:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:../Middlewares/FreeRTOS//Source/tasks.c **** 
 884:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 886:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 887:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 888:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 17


 889:../Middlewares/FreeRTOS//Source/tasks.c **** 
 890:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 891:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 892:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 894:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:../Middlewares/FreeRTOS//Source/tasks.c **** 
 896:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 898:../Middlewares/FreeRTOS//Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 900:../Middlewares/FreeRTOS//Source/tasks.c **** 	#else
 901:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 902:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:../Middlewares/FreeRTOS//Source/tasks.c **** 		( void ) xRegions;
 904:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 905:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 906:../Middlewares/FreeRTOS//Source/tasks.c **** 
 907:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 909:../Middlewares/FreeRTOS//Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 910:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 911:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 912:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 913:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 914:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 915:../Middlewares/FreeRTOS//Source/tasks.c **** 
 916:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 917:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 918:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 919:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 920:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 921:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 922:../Middlewares/FreeRTOS//Source/tasks.c **** 
 923:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 925:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:../Middlewares/FreeRTOS//Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 928:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 929:../Middlewares/FreeRTOS//Source/tasks.c **** 
 930:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 932:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 934:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
 935:../Middlewares/FreeRTOS//Source/tasks.c **** 
 936:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:../Middlewares/FreeRTOS//Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:../Middlewares/FreeRTOS//Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:../Middlewares/FreeRTOS//Source/tasks.c **** 	the	top of stack variable is updated. */
 940:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 942:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 943:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 944:../Middlewares/FreeRTOS//Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
 945:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 18


 946:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 947:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 948:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:../Middlewares/FreeRTOS//Source/tasks.c **** 
 950:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 951:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 952:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:../Middlewares/FreeRTOS//Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 954:../Middlewares/FreeRTOS//Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 955:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 956:../Middlewares/FreeRTOS//Source/tasks.c **** 	else
 957:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 958:../Middlewares/FreeRTOS//Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 960:../Middlewares/FreeRTOS//Source/tasks.c **** }
 961:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 962:../Middlewares/FreeRTOS//Source/tasks.c **** 
 963:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:../Middlewares/FreeRTOS//Source/tasks.c **** {
 965:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:../Middlewares/FreeRTOS//Source/tasks.c **** 	updated. */
 967:../Middlewares/FreeRTOS//Source/tasks.c **** 	taskENTER_CRITICAL();
 968:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 969:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 970:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 971:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 972:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:../Middlewares/FreeRTOS//Source/tasks.c **** 			the suspended state - make this the current task. */
 974:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 975:../Middlewares/FreeRTOS//Source/tasks.c **** 
 976:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 977:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 978:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:../Middlewares/FreeRTOS//Source/tasks.c **** 				initialisation required.  We will not recover if this call
 980:../Middlewares/FreeRTOS//Source/tasks.c **** 				fails, but we will report the failure. */
 981:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvInitialiseTaskLists();
 982:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 983:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
 984:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 985:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 987:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 988:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
 989:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 990:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:../Middlewares/FreeRTOS//Source/tasks.c **** 			current task if it is the highest priority task to be created
 992:../Middlewares/FreeRTOS//Source/tasks.c **** 			so far. */
 993:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 994:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 995:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 996:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 997:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 998:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 999:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
1000:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1001:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1002:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 19


1003:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1004:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1005:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1006:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1008:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1009:../Middlewares/FreeRTOS//Source/tasks.c **** 
1010:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxTaskNumber++;
1011:../Middlewares/FreeRTOS//Source/tasks.c **** 
1012:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1014:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1016:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1017:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:../Middlewares/FreeRTOS//Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1019:../Middlewares/FreeRTOS//Source/tasks.c **** 
1020:../Middlewares/FreeRTOS//Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1021:../Middlewares/FreeRTOS//Source/tasks.c **** 
1022:../Middlewares/FreeRTOS//Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1024:../Middlewares/FreeRTOS//Source/tasks.c **** 	taskEXIT_CRITICAL();
1025:../Middlewares/FreeRTOS//Source/tasks.c **** 
1026:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1027:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1028:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:../Middlewares/FreeRTOS//Source/tasks.c **** 		then it should run now. */
1030:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1031:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1032:../Middlewares/FreeRTOS//Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1033:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1034:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1035:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1036:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1037:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1038:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1039:../Middlewares/FreeRTOS//Source/tasks.c **** 	else
1040:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1041:../Middlewares/FreeRTOS//Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1043:../Middlewares/FreeRTOS//Source/tasks.c **** }
1044:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1045:../Middlewares/FreeRTOS//Source/tasks.c **** 
1046:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:../Middlewares/FreeRTOS//Source/tasks.c **** 
1048:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1050:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
1051:../Middlewares/FreeRTOS//Source/tasks.c **** 
1052:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
1053:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1054:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:../Middlewares/FreeRTOS//Source/tasks.c **** 			being deleted. */
1056:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1057:../Middlewares/FreeRTOS//Source/tasks.c **** 
1058:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Remove task from the ready list. */
1059:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 20


1060:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1061:../Middlewares/FreeRTOS//Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1062:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1063:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1064:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1065:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1067:../Middlewares/FreeRTOS//Source/tasks.c **** 
1068:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Is the task waiting on an event also? */
1069:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1070:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1071:../Middlewares/FreeRTOS//Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1072:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1073:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1074:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1075:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1077:../Middlewares/FreeRTOS//Source/tasks.c **** 
1078:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:../Middlewares/FreeRTOS//Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:../Middlewares/FreeRTOS//Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:../Middlewares/FreeRTOS//Source/tasks.c **** 			not return. */
1082:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxTaskNumber++;
1083:../Middlewares/FreeRTOS//Source/tasks.c **** 
1084:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1085:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1086:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:../Middlewares/FreeRTOS//Source/tasks.c **** 				task itself, as a context switch to another task is required.
1088:../Middlewares/FreeRTOS//Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:../Middlewares/FreeRTOS//Source/tasks.c **** 				check the termination list and free up any memory allocated by
1090:../Middlewares/FreeRTOS//Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:../Middlewares/FreeRTOS//Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1092:../Middlewares/FreeRTOS//Source/tasks.c **** 
1093:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:../Middlewares/FreeRTOS//Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:../Middlewares/FreeRTOS//Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1096:../Middlewares/FreeRTOS//Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1097:../Middlewares/FreeRTOS//Source/tasks.c **** 
1098:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:../Middlewares/FreeRTOS//Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:../Middlewares/FreeRTOS//Source/tasks.c **** 				after which it is not possible to yield away from this task -
1101:../Middlewares/FreeRTOS//Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:../Middlewares/FreeRTOS//Source/tasks.c **** 				required. */
1103:../Middlewares/FreeRTOS//Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1105:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1106:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1107:../Middlewares/FreeRTOS//Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1108:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1109:../Middlewares/FreeRTOS//Source/tasks.c **** 
1110:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:../Middlewares/FreeRTOS//Source/tasks.c **** 				the task that has just been deleted. */
1112:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1113:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1114:../Middlewares/FreeRTOS//Source/tasks.c **** 
1115:../Middlewares/FreeRTOS//Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1116:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 21


1117:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
1118:../Middlewares/FreeRTOS//Source/tasks.c **** 
1119:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:../Middlewares/FreeRTOS//Source/tasks.c **** 		been deleted. */
1121:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1122:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1123:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1124:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1125:../Middlewares/FreeRTOS//Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1126:../Middlewares/FreeRTOS//Source/tasks.c **** 				portYIELD_WITHIN_API();
1127:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1128:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1129:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1130:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1132:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1133:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1134:../Middlewares/FreeRTOS//Source/tasks.c **** 
1135:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1137:../Middlewares/FreeRTOS//Source/tasks.c **** 
1138:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1139:../Middlewares/FreeRTOS//Source/tasks.c **** 
1140:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1142:../Middlewares/FreeRTOS//Source/tasks.c **** 	TickType_t xTimeToWake;
1143:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1144:../Middlewares/FreeRTOS//Source/tasks.c **** 
1145:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1146:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1147:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1148:../Middlewares/FreeRTOS//Source/tasks.c **** 
1149:../Middlewares/FreeRTOS//Source/tasks.c **** 		vTaskSuspendAll();
1150:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1151:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:../Middlewares/FreeRTOS//Source/tasks.c **** 			block. */
1153:../Middlewares/FreeRTOS//Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1154:../Middlewares/FreeRTOS//Source/tasks.c **** 
1155:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:../Middlewares/FreeRTOS//Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1157:../Middlewares/FreeRTOS//Source/tasks.c **** 
1158:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1159:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1160:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The tick count has overflowed since this function was
1161:../Middlewares/FreeRTOS//Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:../Middlewares/FreeRTOS//Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:../Middlewares/FreeRTOS//Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:../Middlewares/FreeRTOS//Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1166:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1167:../Middlewares/FreeRTOS//Source/tasks.c **** 					xShouldDelay = pdTRUE;
1168:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1169:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
1170:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1171:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1173:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 22


1174:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1175:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1176:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:../Middlewares/FreeRTOS//Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1178:../Middlewares/FreeRTOS//Source/tasks.c **** 				tick time is less than the wake time. */
1179:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1180:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1181:../Middlewares/FreeRTOS//Source/tasks.c **** 					xShouldDelay = pdTRUE;
1182:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1183:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
1184:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1185:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1187:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1188:../Middlewares/FreeRTOS//Source/tasks.c **** 
1189:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:../Middlewares/FreeRTOS//Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1191:../Middlewares/FreeRTOS//Source/tasks.c **** 
1192:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1193:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1194:../Middlewares/FreeRTOS//Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1195:../Middlewares/FreeRTOS//Source/tasks.c **** 
1196:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:../Middlewares/FreeRTOS//Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1199:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1200:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1201:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1202:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1204:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1205:../Middlewares/FreeRTOS//Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1206:../Middlewares/FreeRTOS//Source/tasks.c **** 
1207:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1208:../Middlewares/FreeRTOS//Source/tasks.c **** 		have put ourselves to sleep. */
1209:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1210:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1211:../Middlewares/FreeRTOS//Source/tasks.c **** 			portYIELD_WITHIN_API();
1212:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1213:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1214:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1215:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1217:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1218:../Middlewares/FreeRTOS//Source/tasks.c **** 
1219:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1221:../Middlewares/FreeRTOS//Source/tasks.c **** 
1222:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:../Middlewares/FreeRTOS//Source/tasks.c **** 
1224:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1226:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1227:../Middlewares/FreeRTOS//Source/tasks.c **** 
1228:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1229:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1230:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 23


1231:../Middlewares/FreeRTOS//Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1232:../Middlewares/FreeRTOS//Source/tasks.c **** 			vTaskSuspendAll();
1233:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1234:../Middlewares/FreeRTOS//Source/tasks.c **** 				traceTASK_DELAY();
1235:../Middlewares/FreeRTOS//Source/tasks.c **** 
1236:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* A task that is removed from the event list while the
1237:../Middlewares/FreeRTOS//Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1238:../Middlewares/FreeRTOS//Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:../Middlewares/FreeRTOS//Source/tasks.c **** 				is resumed.
1240:../Middlewares/FreeRTOS//Source/tasks.c **** 
1241:../Middlewares/FreeRTOS//Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:../Middlewares/FreeRTOS//Source/tasks.c **** 				executing task. */
1243:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1244:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1245:../Middlewares/FreeRTOS//Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1246:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1247:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1248:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1249:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1251:../Middlewares/FreeRTOS//Source/tasks.c **** 
1252:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:../Middlewares/FreeRTOS//Source/tasks.c **** 		have put ourselves to sleep. */
1254:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1255:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1256:../Middlewares/FreeRTOS//Source/tasks.c **** 			portYIELD_WITHIN_API();
1257:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1258:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1259:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1260:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1262:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1263:../Middlewares/FreeRTOS//Source/tasks.c **** 
1264:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1266:../Middlewares/FreeRTOS//Source/tasks.c **** 
1267:../Middlewares/FreeRTOS//Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:../Middlewares/FreeRTOS//Source/tasks.c **** 
1269:../Middlewares/FreeRTOS//Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1271:../Middlewares/FreeRTOS//Source/tasks.c **** 	eTaskState eReturn;
1272:../Middlewares/FreeRTOS//Source/tasks.c **** 	List_t *pxStateList;
1273:../Middlewares/FreeRTOS//Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1274:../Middlewares/FreeRTOS//Source/tasks.c **** 
1275:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( pxTCB );
1276:../Middlewares/FreeRTOS//Source/tasks.c **** 
1277:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1278:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1279:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1280:../Middlewares/FreeRTOS//Source/tasks.c **** 			eReturn = eRunning;
1281:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1282:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1283:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1284:../Middlewares/FreeRTOS//Source/tasks.c **** 			taskENTER_CRITICAL();
1285:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1286:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1287:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 24


1288:../Middlewares/FreeRTOS//Source/tasks.c **** 			taskEXIT_CRITICAL();
1289:../Middlewares/FreeRTOS//Source/tasks.c **** 
1290:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1291:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1292:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:../Middlewares/FreeRTOS//Source/tasks.c **** 				lists. */
1294:../Middlewares/FreeRTOS//Source/tasks.c **** 				eReturn = eBlocked;
1295:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1296:../Middlewares/FreeRTOS//Source/tasks.c **** 
1297:../Middlewares/FreeRTOS//Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:../Middlewares/FreeRTOS//Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1299:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1300:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1301:../Middlewares/FreeRTOS//Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:../Middlewares/FreeRTOS//Source/tasks.c **** 					indefinitely? */
1303:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1304:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1305:../Middlewares/FreeRTOS//Source/tasks.c **** 						eReturn = eSuspended;
1306:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1307:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
1308:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1309:../Middlewares/FreeRTOS//Source/tasks.c **** 						eReturn = eBlocked;
1310:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1311:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1312:../Middlewares/FreeRTOS//Source/tasks.c **** 			#endif
1313:../Middlewares/FreeRTOS//Source/tasks.c **** 
1314:../Middlewares/FreeRTOS//Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:../Middlewares/FreeRTOS//Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1316:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1317:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:../Middlewares/FreeRTOS//Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:../Middlewares/FreeRTOS//Source/tasks.c **** 					all. */
1320:../Middlewares/FreeRTOS//Source/tasks.c **** 					eReturn = eDeleted;
1321:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1322:../Middlewares/FreeRTOS//Source/tasks.c **** 			#endif
1323:../Middlewares/FreeRTOS//Source/tasks.c **** 
1324:../Middlewares/FreeRTOS//Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1326:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:../Middlewares/FreeRTOS//Source/tasks.c **** 				Ready (including pending ready) state. */
1328:../Middlewares/FreeRTOS//Source/tasks.c **** 				eReturn = eReady;
1329:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1330:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1331:../Middlewares/FreeRTOS//Source/tasks.c **** 
1332:../Middlewares/FreeRTOS//Source/tasks.c **** 		return eReturn;
1333:../Middlewares/FreeRTOS//Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1334:../Middlewares/FreeRTOS//Source/tasks.c **** 
1335:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1337:../Middlewares/FreeRTOS//Source/tasks.c **** 
1338:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:../Middlewares/FreeRTOS//Source/tasks.c **** 
1340:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1342:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
1343:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxReturn;
1344:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 25


1345:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
1346:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1347:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:../Middlewares/FreeRTOS//Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1350:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1351:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1352:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
1353:../Middlewares/FreeRTOS//Source/tasks.c **** 
1354:../Middlewares/FreeRTOS//Source/tasks.c **** 		return uxReturn;
1355:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1356:../Middlewares/FreeRTOS//Source/tasks.c **** 
1357:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1359:../Middlewares/FreeRTOS//Source/tasks.c **** 
1360:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:../Middlewares/FreeRTOS//Source/tasks.c **** 
1362:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1364:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
1365:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1366:../Middlewares/FreeRTOS//Source/tasks.c **** 
1367:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:../Middlewares/FreeRTOS//Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:../Middlewares/FreeRTOS//Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:../Middlewares/FreeRTOS//Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:../Middlewares/FreeRTOS//Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:../Middlewares/FreeRTOS//Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:../Middlewares/FreeRTOS//Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:../Middlewares/FreeRTOS//Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:../Middlewares/FreeRTOS//Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:../Middlewares/FreeRTOS//Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:../Middlewares/FreeRTOS//Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:../Middlewares/FreeRTOS//Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:../Middlewares/FreeRTOS//Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:../Middlewares/FreeRTOS//Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:../Middlewares/FreeRTOS//Source/tasks.c **** 		provided on the following link:
1382:../Middlewares/FreeRTOS//Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:../Middlewares/FreeRTOS//Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1384:../Middlewares/FreeRTOS//Source/tasks.c **** 
1385:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1386:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1387:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:../Middlewares/FreeRTOS//Source/tasks.c **** 			task that is being queried. */
1389:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1390:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1391:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1392:../Middlewares/FreeRTOS//Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:../Middlewares/FreeRTOS//Source/tasks.c **** 
1394:../Middlewares/FreeRTOS//Source/tasks.c **** 		return uxReturn;
1395:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1396:../Middlewares/FreeRTOS//Source/tasks.c **** 
1397:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1399:../Middlewares/FreeRTOS//Source/tasks.c **** 
1400:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1401:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 26


1402:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1403:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1404:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
1405:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1407:../Middlewares/FreeRTOS//Source/tasks.c **** 
1408:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1409:../Middlewares/FreeRTOS//Source/tasks.c **** 
1410:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Ensure the new priority is valid. */
1411:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1412:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1413:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1414:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1415:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1416:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1417:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1419:../Middlewares/FreeRTOS//Source/tasks.c **** 
1420:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
1421:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1422:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1423:../Middlewares/FreeRTOS//Source/tasks.c **** 			task that is being changed. */
1424:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1425:../Middlewares/FreeRTOS//Source/tasks.c **** 
1426:../Middlewares/FreeRTOS//Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1427:../Middlewares/FreeRTOS//Source/tasks.c **** 
1428:../Middlewares/FreeRTOS//Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1430:../Middlewares/FreeRTOS//Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1431:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1432:../Middlewares/FreeRTOS//Source/tasks.c **** 			#else
1433:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1434:../Middlewares/FreeRTOS//Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1435:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1436:../Middlewares/FreeRTOS//Source/tasks.c **** 			#endif
1437:../Middlewares/FreeRTOS//Source/tasks.c **** 
1438:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1439:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1440:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The priority change may have readied a task of higher
1441:../Middlewares/FreeRTOS//Source/tasks.c **** 				priority than the calling task. */
1442:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1443:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1444:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1445:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1446:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* The priority of a task other than the currently
1447:../Middlewares/FreeRTOS//Source/tasks.c **** 						running task is being raised.  Is the priority being
1448:../Middlewares/FreeRTOS//Source/tasks.c **** 						raised above that of the running task? */
1449:../Middlewares/FreeRTOS//Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1450:../Middlewares/FreeRTOS//Source/tasks.c **** 						{
1451:../Middlewares/FreeRTOS//Source/tasks.c **** 							xYieldRequired = pdTRUE;
1452:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
1453:../Middlewares/FreeRTOS//Source/tasks.c **** 						else
1454:../Middlewares/FreeRTOS//Source/tasks.c **** 						{
1455:../Middlewares/FreeRTOS//Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1456:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
1457:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1458:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 27


1459:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1460:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* The priority of the running task is being raised,
1461:../Middlewares/FreeRTOS//Source/tasks.c **** 						but the running task must already be the highest
1462:../Middlewares/FreeRTOS//Source/tasks.c **** 						priority task able to run so no yield is required. */
1463:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1464:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1465:../Middlewares/FreeRTOS//Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1466:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1467:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Setting the priority of the running task down means
1468:../Middlewares/FreeRTOS//Source/tasks.c **** 					there may now be another task of higher priority that
1469:../Middlewares/FreeRTOS//Source/tasks.c **** 					is ready to execute. */
1470:../Middlewares/FreeRTOS//Source/tasks.c **** 					xYieldRequired = pdTRUE;
1471:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1472:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
1473:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1474:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Setting the priority of any other task down does not
1475:../Middlewares/FreeRTOS//Source/tasks.c **** 					require a yield as the running task must be above the
1476:../Middlewares/FreeRTOS//Source/tasks.c **** 					new priority of the task being modified. */
1477:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1478:../Middlewares/FreeRTOS//Source/tasks.c **** 
1479:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:../Middlewares/FreeRTOS//Source/tasks.c **** 				before its uxPriority member is changed so the
1481:../Middlewares/FreeRTOS//Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:../Middlewares/FreeRTOS//Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1483:../Middlewares/FreeRTOS//Source/tasks.c **** 
1484:../Middlewares/FreeRTOS//Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1486:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Only change the priority being used if the task is not
1487:../Middlewares/FreeRTOS//Source/tasks.c **** 					currently using an inherited priority. */
1488:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1489:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1490:../Middlewares/FreeRTOS//Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1491:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1492:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
1493:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1494:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1496:../Middlewares/FreeRTOS//Source/tasks.c **** 
1497:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The base priority gets set whatever. */
1498:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1499:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1500:../Middlewares/FreeRTOS//Source/tasks.c **** 				#else
1501:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1502:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1503:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1504:../Middlewares/FreeRTOS//Source/tasks.c **** 				#endif
1505:../Middlewares/FreeRTOS//Source/tasks.c **** 
1506:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:../Middlewares/FreeRTOS//Source/tasks.c **** 				being used for anything else. */
1508:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1509:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1510:../Middlewares/FreeRTOS//Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1511:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1512:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
1513:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1514:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1515:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 28


1516:../Middlewares/FreeRTOS//Source/tasks.c **** 
1517:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1518:../Middlewares/FreeRTOS//Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:../Middlewares/FreeRTOS//Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:../Middlewares/FreeRTOS//Source/tasks.c **** 				in the list appropriate to its new priority. */
1521:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1522:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1523:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:../Middlewares/FreeRTOS//Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:../Middlewares/FreeRTOS//Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1527:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1528:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* It is known that the task is in its ready list so
1529:../Middlewares/FreeRTOS//Source/tasks.c **** 						there is no need to check again and the port level
1530:../Middlewares/FreeRTOS//Source/tasks.c **** 						reset macro can be called directly. */
1531:../Middlewares/FreeRTOS//Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1532:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1533:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
1534:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1535:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1537:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1538:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1539:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
1540:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1541:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1542:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1543:../Middlewares/FreeRTOS//Source/tasks.c **** 
1544:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1545:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1546:../Middlewares/FreeRTOS//Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1547:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1548:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
1549:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1550:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1552:../Middlewares/FreeRTOS//Source/tasks.c **** 
1553:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:../Middlewares/FreeRTOS//Source/tasks.c **** 				optimised task selection is not being used. */
1555:../Middlewares/FreeRTOS//Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1557:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1558:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
1559:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1560:../Middlewares/FreeRTOS//Source/tasks.c **** 
1561:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1563:../Middlewares/FreeRTOS//Source/tasks.c **** 
1564:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1565:../Middlewares/FreeRTOS//Source/tasks.c **** 
1566:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1568:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
1569:../Middlewares/FreeRTOS//Source/tasks.c **** 
1570:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
1571:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1572:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 29


1573:../Middlewares/FreeRTOS//Source/tasks.c **** 			being suspended. */
1574:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1575:../Middlewares/FreeRTOS//Source/tasks.c **** 
1576:../Middlewares/FreeRTOS//Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1577:../Middlewares/FreeRTOS//Source/tasks.c **** 
1578:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:../Middlewares/FreeRTOS//Source/tasks.c **** 			suspended list. */
1580:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1581:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1582:../Middlewares/FreeRTOS//Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1583:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1584:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1585:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1586:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1588:../Middlewares/FreeRTOS//Source/tasks.c **** 
1589:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Is the task waiting on an event also? */
1590:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1591:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1592:../Middlewares/FreeRTOS//Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1593:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1594:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1595:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1596:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1598:../Middlewares/FreeRTOS//Source/tasks.c **** 
1599:../Middlewares/FreeRTOS//Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1600:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1601:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
1602:../Middlewares/FreeRTOS//Source/tasks.c **** 
1603:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1604:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1605:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:../Middlewares/FreeRTOS//Source/tasks.c **** 			task that is now in the Suspended state. */
1607:../Middlewares/FreeRTOS//Source/tasks.c **** 			taskENTER_CRITICAL();
1608:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1609:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1610:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1611:../Middlewares/FreeRTOS//Source/tasks.c **** 			taskEXIT_CRITICAL();
1612:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1613:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1614:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1615:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1617:../Middlewares/FreeRTOS//Source/tasks.c **** 
1618:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1619:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1620:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1621:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1622:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The current task has just been suspended. */
1623:../Middlewares/FreeRTOS//Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1624:../Middlewares/FreeRTOS//Source/tasks.c **** 				portYIELD_WITHIN_API();
1625:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1626:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1627:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1628:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1629:../Middlewares/FreeRTOS//Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 30


1630:../Middlewares/FreeRTOS//Source/tasks.c **** 				must be adjusted to point to a different task. */
1631:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1632:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1633:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1634:../Middlewares/FreeRTOS//Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:../Middlewares/FreeRTOS//Source/tasks.c **** 					be set to point to it no matter what its relative priority
1636:../Middlewares/FreeRTOS//Source/tasks.c **** 					is. */
1637:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxCurrentTCB = NULL;
1638:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1639:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
1640:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1641:../Middlewares/FreeRTOS//Source/tasks.c **** 					vTaskSwitchContext();
1642:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1643:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1644:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1645:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1646:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1647:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1649:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1650:../Middlewares/FreeRTOS//Source/tasks.c **** 
1651:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1653:../Middlewares/FreeRTOS//Source/tasks.c **** 
1654:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:../Middlewares/FreeRTOS//Source/tasks.c **** 
1656:../Middlewares/FreeRTOS//Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
  26              		.loc 1 1657 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
1658:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1659:../Middlewares/FreeRTOS//Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1660:../Middlewares/FreeRTOS//Source/tasks.c **** 
1661:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:../Middlewares/FreeRTOS//Source/tasks.c **** 		section. */
1663:../Middlewares/FreeRTOS//Source/tasks.c **** 
1664:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( xTask );
  32              		.loc 1 1665 0
  33 0000 50B1     		cbz	r0, .L8
1666:../Middlewares/FreeRTOS//Source/tasks.c **** 
1667:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  34              		.loc 1 1668 0
  35 0002 4169     		ldr	r1, [r0, #20]
  36 0004 0C4A     		ldr	r2, .L9
  37 0006 9142     		cmp	r1, r2
  38 0008 0FD1     		bne	.L5
1669:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1670:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  39              		.loc 1 1671 0
  40 000a 836A     		ldr	r3, [r0, #40]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 31


  41 000c 0B4A     		ldr	r2, .L9+4
  42 000e 9342     		cmp	r3, r2
  43 0010 0DD0     		beq	.L6
1672:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1673:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:../Middlewares/FreeRTOS//Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
  44              		.loc 1 1675 0
  45 0012 73B1     		cbz	r3, .L7
1658:../Middlewares/FreeRTOS//Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  46              		.loc 1 1658 0
  47 0014 0020     		movs	r0, #0
  48              	.LVL1:
  49 0016 7047     		bx	lr
  50              	.LVL2:
  51              	.L8:
  52              	.LBB102:
  53              	.LBB103:
  54              		.file 2 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 32


  39:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 33


  96:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 34


 153:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 35


 210:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  55              		.loc 2 237 0
  56              		.syntax unified
  57              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  58 0018 4FF01003 			mov r3, #16												
  59 001c 83F31188 		msr basepri, r3											
  60 0020 BFF36F8F 		isb														
  61 0024 BFF34F8F 		dsb														
  62              	
  63              	@ 0 "" 2
  64              	.LVL3:
  65              		.thumb
  66              		.syntax unified
  67              	.L3:
  68 0028 FEE7     		b	.L3
  69              	.L5:
  70              	.LBE103:
  71              	.LBE102:
1658:../Middlewares/FreeRTOS//Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  72              		.loc 1 1658 0
  73 002a 0020     		movs	r0, #0
  74              	.LVL4:
  75 002c 7047     		bx	lr
  76              	.LVL5:
  77              	.L6:
  78 002e 0020     		movs	r0, #0
  79              	.LVL6:
  80 0030 7047     		bx	lr
  81              	.LVL7:
  82              	.L7:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 36


1676:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1677:../Middlewares/FreeRTOS//Source/tasks.c **** 					xReturn = pdTRUE;
  83              		.loc 1 1677 0
  84 0032 0120     		movs	r0, #1
  85              	.LVL8:
1678:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1679:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
1680:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1681:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1683:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1684:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1685:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1686:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1688:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1689:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1690:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1691:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1692:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1693:../Middlewares/FreeRTOS//Source/tasks.c **** 
1694:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
1695:../Middlewares/FreeRTOS//Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  86              		.loc 1 1695 0
  87 0034 7047     		bx	lr
  88              	.L10:
  89 0036 00BF     		.align	2
  90              	.L9:
  91 0038 00000000 		.word	.LANCHOR0
  92 003c 00000000 		.word	.LANCHOR1
  93              		.cfi_endproc
  94              	.LFE142:
  96              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  97              		.align	1
  98              		.syntax unified
  99              		.thumb
 100              		.thumb_func
 101              		.fpu fpv4-sp-d16
 103              	prvTaskCheckFreeStackSpace:
 104              	.LFB171:
1696:../Middlewares/FreeRTOS//Source/tasks.c **** 
1697:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1698:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1699:../Middlewares/FreeRTOS//Source/tasks.c **** 
1700:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:../Middlewares/FreeRTOS//Source/tasks.c **** 
1702:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1704:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1705:../Middlewares/FreeRTOS//Source/tasks.c **** 
1706:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( xTaskToResume );
1708:../Middlewares/FreeRTOS//Source/tasks.c **** 
1709:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1710:../Middlewares/FreeRTOS//Source/tasks.c **** 		currently executing task. */
1711:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1712:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 37


1713:../Middlewares/FreeRTOS//Source/tasks.c **** 			taskENTER_CRITICAL();
1714:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1715:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1716:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1717:../Middlewares/FreeRTOS//Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1718:../Middlewares/FreeRTOS//Source/tasks.c **** 
1719:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:../Middlewares/FreeRTOS//Source/tasks.c **** 					lists even if the scheduler is suspended. */
1721:../Middlewares/FreeRTOS//Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1722:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1723:../Middlewares/FreeRTOS//Source/tasks.c **** 
1724:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1726:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1727:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1728:../Middlewares/FreeRTOS//Source/tasks.c **** 						but will leave the lists in the correct state for the
1729:../Middlewares/FreeRTOS//Source/tasks.c **** 						next yield. */
1730:../Middlewares/FreeRTOS//Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1731:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1732:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
1733:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1734:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1736:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1737:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
1738:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1739:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1741:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1742:../Middlewares/FreeRTOS//Source/tasks.c **** 			taskEXIT_CRITICAL();
1743:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1744:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1745:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1746:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1748:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1749:../Middlewares/FreeRTOS//Source/tasks.c **** 
1750:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:../Middlewares/FreeRTOS//Source/tasks.c **** 
1752:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1753:../Middlewares/FreeRTOS//Source/tasks.c **** 
1754:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1755:../Middlewares/FreeRTOS//Source/tasks.c **** 
1756:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1757:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1758:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1759:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1760:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1761:../Middlewares/FreeRTOS//Source/tasks.c **** 
1762:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( xTaskToResume );
1763:../Middlewares/FreeRTOS//Source/tasks.c **** 
1764:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:../Middlewares/FreeRTOS//Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:../Middlewares/FreeRTOS//Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1767:../Middlewares/FreeRTOS//Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:../Middlewares/FreeRTOS//Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1769:../Middlewares/FreeRTOS//Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 38


1770:../Middlewares/FreeRTOS//Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1771:../Middlewares/FreeRTOS//Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:../Middlewares/FreeRTOS//Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:../Middlewares/FreeRTOS//Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1774:../Middlewares/FreeRTOS//Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1775:../Middlewares/FreeRTOS//Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:../Middlewares/FreeRTOS//Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:../Middlewares/FreeRTOS//Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:../Middlewares/FreeRTOS//Source/tasks.c **** 		provided on the following link:
1779:../Middlewares/FreeRTOS//Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1780:../Middlewares/FreeRTOS//Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1781:../Middlewares/FreeRTOS//Source/tasks.c **** 
1782:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1783:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1784:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1786:../Middlewares/FreeRTOS//Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1787:../Middlewares/FreeRTOS//Source/tasks.c **** 
1788:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1790:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1791:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:../Middlewares/FreeRTOS//Source/tasks.c **** 					suspended list to the ready list directly. */
1793:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1794:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1795:../Middlewares/FreeRTOS//Source/tasks.c **** 						xYieldRequired = pdTRUE;
1796:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1797:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
1798:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
1799:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
1801:../Middlewares/FreeRTOS//Source/tasks.c **** 
1802:../Middlewares/FreeRTOS//Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1803:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1804:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1805:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
1806:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
1807:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1808:../Middlewares/FreeRTOS//Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:../Middlewares/FreeRTOS//Source/tasks.c **** 					unsuspended. */
1810:../Middlewares/FreeRTOS//Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1811:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
1812:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1813:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
1814:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1815:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1816:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1817:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1818:../Middlewares/FreeRTOS//Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:../Middlewares/FreeRTOS//Source/tasks.c **** 
1820:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xYieldRequired;
1821:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1822:../Middlewares/FreeRTOS//Source/tasks.c **** 
1823:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1824:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1825:../Middlewares/FreeRTOS//Source/tasks.c **** 
1826:../Middlewares/FreeRTOS//Source/tasks.c **** void vTaskStartScheduler( void )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 39


1827:../Middlewares/FreeRTOS//Source/tasks.c **** {
1828:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xReturn;
1829:../Middlewares/FreeRTOS//Source/tasks.c **** 
1830:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1831:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1833:../Middlewares/FreeRTOS//Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:../Middlewares/FreeRTOS//Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:../Middlewares/FreeRTOS//Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1836:../Middlewares/FreeRTOS//Source/tasks.c **** 
1837:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:../Middlewares/FreeRTOS//Source/tasks.c **** 		address of the RAM then create the idle task. */
1839:../Middlewares/FreeRTOS//Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:../Middlewares/FreeRTOS//Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1841:../Middlewares/FreeRTOS//Source/tasks.c **** 												"IDLE",
1842:../Middlewares/FreeRTOS//Source/tasks.c **** 												ulIdleTaskStackSize,
1843:../Middlewares/FreeRTOS//Source/tasks.c **** 												( void * ) NULL,
1844:../Middlewares/FreeRTOS//Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:../Middlewares/FreeRTOS//Source/tasks.c **** 												pxIdleTaskStackBuffer,
1846:../Middlewares/FreeRTOS//Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:../Middlewares/FreeRTOS//Source/tasks.c **** 
1848:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1850:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = pdPASS;
1851:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1852:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1853:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1854:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = pdFAIL;
1855:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1856:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1857:../Middlewares/FreeRTOS//Source/tasks.c **** 	#else
1858:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1859:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:../Middlewares/FreeRTOS//Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1861:../Middlewares/FreeRTOS//Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:../Middlewares/FreeRTOS//Source/tasks.c **** 								( void * ) NULL,
1863:../Middlewares/FreeRTOS//Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:../Middlewares/FreeRTOS//Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1866:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:../Middlewares/FreeRTOS//Source/tasks.c **** 
1868:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1869:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1870:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xReturn == pdPASS )
1871:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1872:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1873:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1874:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1875:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1876:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1878:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1879:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:../Middlewares/FreeRTOS//Source/tasks.c **** 
1881:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( xReturn == pdPASS )
1882:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1883:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 40


1884:../Middlewares/FreeRTOS//Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1885:../Middlewares/FreeRTOS//Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:../Middlewares/FreeRTOS//Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:../Middlewares/FreeRTOS//Source/tasks.c **** 		starts to run. */
1888:../Middlewares/FreeRTOS//Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1889:../Middlewares/FreeRTOS//Source/tasks.c **** 
1890:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1892:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:../Middlewares/FreeRTOS//Source/tasks.c **** 			structure specific to the task that will run first. */
1894:../Middlewares/FreeRTOS//Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1896:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:../Middlewares/FreeRTOS//Source/tasks.c **** 
1898:../Middlewares/FreeRTOS//Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1899:../Middlewares/FreeRTOS//Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1900:../Middlewares/FreeRTOS//Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1901:../Middlewares/FreeRTOS//Source/tasks.c **** 
1902:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1903:../Middlewares/FreeRTOS//Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:../Middlewares/FreeRTOS//Source/tasks.c **** 		the run time counter time base. */
1905:../Middlewares/FreeRTOS//Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1906:../Middlewares/FreeRTOS//Source/tasks.c **** 
1907:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:../Middlewares/FreeRTOS//Source/tasks.c **** 		portable interface. */
1909:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1910:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1911:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:../Middlewares/FreeRTOS//Source/tasks.c **** 			function will not return. */
1913:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1914:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
1915:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1916:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1918:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1919:../Middlewares/FreeRTOS//Source/tasks.c **** 	else
1920:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1921:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:../Middlewares/FreeRTOS//Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:../Middlewares/FreeRTOS//Source/tasks.c **** 		or the timer task. */
1924:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1925:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
1926:../Middlewares/FreeRTOS//Source/tasks.c **** 
1927:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1928:../Middlewares/FreeRTOS//Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:../Middlewares/FreeRTOS//Source/tasks.c **** 	( void ) xIdleTaskHandle;
1930:../Middlewares/FreeRTOS//Source/tasks.c **** }
1931:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
1932:../Middlewares/FreeRTOS//Source/tasks.c **** 
1933:../Middlewares/FreeRTOS//Source/tasks.c **** void vTaskEndScheduler( void )
1934:../Middlewares/FreeRTOS//Source/tasks.c **** {
1935:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1936:../Middlewares/FreeRTOS//Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:../Middlewares/FreeRTOS//Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1938:../Middlewares/FreeRTOS//Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1939:../Middlewares/FreeRTOS//Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
1940:../Middlewares/FreeRTOS//Source/tasks.c **** 	vPortEndScheduler();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 41


1941:../Middlewares/FreeRTOS//Source/tasks.c **** }
1942:../Middlewares/FreeRTOS//Source/tasks.c **** /*----------------------------------------------------------*/
1943:../Middlewares/FreeRTOS//Source/tasks.c **** 
1944:../Middlewares/FreeRTOS//Source/tasks.c **** void vTaskSuspendAll( void )
1945:../Middlewares/FreeRTOS//Source/tasks.c **** {
1946:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1948:../Middlewares/FreeRTOS//Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:../Middlewares/FreeRTOS//Source/tasks.c **** 	http://goo.gl/wu4acr */
1950:../Middlewares/FreeRTOS//Source/tasks.c **** 	++uxSchedulerSuspended;
1951:../Middlewares/FreeRTOS//Source/tasks.c **** }
1952:../Middlewares/FreeRTOS//Source/tasks.c **** /*----------------------------------------------------------*/
1953:../Middlewares/FreeRTOS//Source/tasks.c **** 
1954:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1955:../Middlewares/FreeRTOS//Source/tasks.c **** 
1956:../Middlewares/FreeRTOS//Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
1958:../Middlewares/FreeRTOS//Source/tasks.c **** 	TickType_t xReturn;
1959:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:../Middlewares/FreeRTOS//Source/tasks.c **** 
1961:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:../Middlewares/FreeRTOS//Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:../Middlewares/FreeRTOS//Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:../Middlewares/FreeRTOS//Source/tasks.c **** 		running. */
1965:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1967:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1969:../Middlewares/FreeRTOS//Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1970:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1971:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1972:../Middlewares/FreeRTOS//Source/tasks.c **** 		#else
1973:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1974:../Middlewares/FreeRTOS//Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:../Middlewares/FreeRTOS//Source/tasks.c **** 
1976:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:../Middlewares/FreeRTOS//Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:../Middlewares/FreeRTOS//Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:../Middlewares/FreeRTOS//Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:../Middlewares/FreeRTOS//Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1981:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
1983:../Middlewares/FreeRTOS//Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1984:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
1985:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1986:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif
1987:../Middlewares/FreeRTOS//Source/tasks.c **** 
1988:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1989:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1990:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = 0;
1991:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1992:../Middlewares/FreeRTOS//Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1993:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
1994:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1995:../Middlewares/FreeRTOS//Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:../Middlewares/FreeRTOS//Source/tasks.c **** 			processed. */
1997:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = 0;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 42


1998:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
1999:../Middlewares/FreeRTOS//Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2001:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:../Middlewares/FreeRTOS//Source/tasks.c **** 			idle priority.  This path can only be reached if
2003:../Middlewares/FreeRTOS//Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = 0;
2005:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2006:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
2007:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2008:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2010:../Middlewares/FreeRTOS//Source/tasks.c **** 
2011:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
2012:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2013:../Middlewares/FreeRTOS//Source/tasks.c **** 
2014:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:../Middlewares/FreeRTOS//Source/tasks.c **** /*----------------------------------------------------------*/
2016:../Middlewares/FreeRTOS//Source/tasks.c **** 
2017:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:../Middlewares/FreeRTOS//Source/tasks.c **** {
2019:../Middlewares/FreeRTOS//Source/tasks.c **** TCB_t *pxTCB = NULL;
2020:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2021:../Middlewares/FreeRTOS//Source/tasks.c **** 
2022:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:../Middlewares/FreeRTOS//Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2025:../Middlewares/FreeRTOS//Source/tasks.c **** 
2026:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2027:../Middlewares/FreeRTOS//Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:../Middlewares/FreeRTOS//Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:../Middlewares/FreeRTOS//Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:../Middlewares/FreeRTOS//Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:../Middlewares/FreeRTOS//Source/tasks.c **** 	taskENTER_CRITICAL();
2032:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2033:../Middlewares/FreeRTOS//Source/tasks.c **** 		--uxSchedulerSuspended;
2034:../Middlewares/FreeRTOS//Source/tasks.c **** 
2035:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2036:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2037:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2038:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2039:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2040:../Middlewares/FreeRTOS//Source/tasks.c **** 				appropriate ready list. */
2041:../Middlewares/FreeRTOS//Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2042:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2043:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2044:../Middlewares/FreeRTOS//Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2045:../Middlewares/FreeRTOS//Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2046:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2047:../Middlewares/FreeRTOS//Source/tasks.c **** 
2048:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:../Middlewares/FreeRTOS//Source/tasks.c **** 					task then a yield must be performed. */
2050:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2051:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2052:../Middlewares/FreeRTOS//Source/tasks.c **** 						xYieldPending = pdTRUE;
2053:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2054:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 43


2055:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2056:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2058:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2059:../Middlewares/FreeRTOS//Source/tasks.c **** 
2060:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxTCB != NULL )
2061:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2062:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:../Middlewares/FreeRTOS//Source/tasks.c **** 					which may have prevented the next unblock time from being
2064:../Middlewares/FreeRTOS//Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2065:../Middlewares/FreeRTOS//Source/tasks.c **** 					important for low power tickless implementations, where
2066:../Middlewares/FreeRTOS//Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:../Middlewares/FreeRTOS//Source/tasks.c **** 					state. */
2068:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2069:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2070:../Middlewares/FreeRTOS//Source/tasks.c **** 
2071:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:../Middlewares/FreeRTOS//Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:../Middlewares/FreeRTOS//Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:../Middlewares/FreeRTOS//Source/tasks.c **** 				time. */
2075:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2076:../Middlewares/FreeRTOS//Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2077:../Middlewares/FreeRTOS//Source/tasks.c **** 
2078:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2079:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2080:../Middlewares/FreeRTOS//Source/tasks.c **** 						do
2081:../Middlewares/FreeRTOS//Source/tasks.c **** 						{
2082:../Middlewares/FreeRTOS//Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2083:../Middlewares/FreeRTOS//Source/tasks.c **** 							{
2084:../Middlewares/FreeRTOS//Source/tasks.c **** 								xYieldPending = pdTRUE;
2085:../Middlewares/FreeRTOS//Source/tasks.c **** 							}
2086:../Middlewares/FreeRTOS//Source/tasks.c **** 							else
2087:../Middlewares/FreeRTOS//Source/tasks.c **** 							{
2088:../Middlewares/FreeRTOS//Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:../Middlewares/FreeRTOS//Source/tasks.c **** 							}
2090:../Middlewares/FreeRTOS//Source/tasks.c **** 							--uxPendedCounts;
2091:../Middlewares/FreeRTOS//Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2092:../Middlewares/FreeRTOS//Source/tasks.c **** 
2093:../Middlewares/FreeRTOS//Source/tasks.c **** 						uxPendedTicks = 0;
2094:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2095:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
2096:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2097:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2098:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2099:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2100:../Middlewares/FreeRTOS//Source/tasks.c **** 
2101:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2102:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2103:../Middlewares/FreeRTOS//Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2105:../Middlewares/FreeRTOS//Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2106:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2107:../Middlewares/FreeRTOS//Source/tasks.c **** 					#endif
2108:../Middlewares/FreeRTOS//Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2109:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2110:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
2111:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 44


2112:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2113:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2114:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2115:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2116:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
2117:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2118:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2119:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2120:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2121:../Middlewares/FreeRTOS//Source/tasks.c **** 	taskEXIT_CRITICAL();
2122:../Middlewares/FreeRTOS//Source/tasks.c **** 
2123:../Middlewares/FreeRTOS//Source/tasks.c **** 	return xAlreadyYielded;
2124:../Middlewares/FreeRTOS//Source/tasks.c **** }
2125:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2126:../Middlewares/FreeRTOS//Source/tasks.c **** 
2127:../Middlewares/FreeRTOS//Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2128:../Middlewares/FreeRTOS//Source/tasks.c **** {
2129:../Middlewares/FreeRTOS//Source/tasks.c **** TickType_t xTicks;
2130:../Middlewares/FreeRTOS//Source/tasks.c **** 
2131:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:../Middlewares/FreeRTOS//Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2134:../Middlewares/FreeRTOS//Source/tasks.c **** 		xTicks = xTickCount;
2135:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2136:../Middlewares/FreeRTOS//Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:../Middlewares/FreeRTOS//Source/tasks.c **** 
2138:../Middlewares/FreeRTOS//Source/tasks.c **** 	return xTicks;
2139:../Middlewares/FreeRTOS//Source/tasks.c **** }
2140:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2141:../Middlewares/FreeRTOS//Source/tasks.c **** 
2142:../Middlewares/FreeRTOS//Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:../Middlewares/FreeRTOS//Source/tasks.c **** {
2144:../Middlewares/FreeRTOS//Source/tasks.c **** TickType_t xReturn;
2145:../Middlewares/FreeRTOS//Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:../Middlewares/FreeRTOS//Source/tasks.c **** 
2147:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:../Middlewares/FreeRTOS//Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:../Middlewares/FreeRTOS//Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:../Middlewares/FreeRTOS//Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:../Middlewares/FreeRTOS//Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:../Middlewares/FreeRTOS//Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:../Middlewares/FreeRTOS//Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2154:../Middlewares/FreeRTOS//Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2155:../Middlewares/FreeRTOS//Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2156:../Middlewares/FreeRTOS//Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:../Middlewares/FreeRTOS//Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2158:../Middlewares/FreeRTOS//Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:../Middlewares/FreeRTOS//Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2160:../Middlewares/FreeRTOS//Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:../Middlewares/FreeRTOS//Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2162:../Middlewares/FreeRTOS//Source/tasks.c **** 
2163:../Middlewares/FreeRTOS//Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2164:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2165:../Middlewares/FreeRTOS//Source/tasks.c **** 		xReturn = xTickCount;
2166:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2167:../Middlewares/FreeRTOS//Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2168:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 45


2169:../Middlewares/FreeRTOS//Source/tasks.c **** 	return xReturn;
2170:../Middlewares/FreeRTOS//Source/tasks.c **** }
2171:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2172:../Middlewares/FreeRTOS//Source/tasks.c **** 
2173:../Middlewares/FreeRTOS//Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:../Middlewares/FreeRTOS//Source/tasks.c **** {
2175:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t. */
2177:../Middlewares/FreeRTOS//Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2178:../Middlewares/FreeRTOS//Source/tasks.c **** }
2179:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2180:../Middlewares/FreeRTOS//Source/tasks.c **** 
2181:../Middlewares/FreeRTOS//Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:../Middlewares/FreeRTOS//Source/tasks.c **** {
2183:../Middlewares/FreeRTOS//Source/tasks.c **** TCB_t *pxTCB;
2184:../Middlewares/FreeRTOS//Source/tasks.c **** 
2185:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:../Middlewares/FreeRTOS//Source/tasks.c **** 	queried. */
2187:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2188:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxTCB );
2189:../Middlewares/FreeRTOS//Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2190:../Middlewares/FreeRTOS//Source/tasks.c **** }
2191:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2192:../Middlewares/FreeRTOS//Source/tasks.c **** 
2193:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:../Middlewares/FreeRTOS//Source/tasks.c **** 
2195:../Middlewares/FreeRTOS//Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2197:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2198:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t x;
2199:../Middlewares/FreeRTOS//Source/tasks.c **** 	char cNextChar;
2200:../Middlewares/FreeRTOS//Source/tasks.c **** 
2201:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:../Middlewares/FreeRTOS//Source/tasks.c **** 
2203:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2204:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2205:../Middlewares/FreeRTOS//Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2206:../Middlewares/FreeRTOS//Source/tasks.c **** 
2207:../Middlewares/FreeRTOS//Source/tasks.c **** 			do
2208:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2209:../Middlewares/FreeRTOS//Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2210:../Middlewares/FreeRTOS//Source/tasks.c **** 
2211:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Check each character in the name looking for a match or
2212:../Middlewares/FreeRTOS//Source/tasks.c **** 				mismatch. */
2213:../Middlewares/FreeRTOS//Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2214:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2215:../Middlewares/FreeRTOS//Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2216:../Middlewares/FreeRTOS//Source/tasks.c **** 
2217:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2218:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2219:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* Characters didn't match. */
2220:../Middlewares/FreeRTOS//Source/tasks.c **** 						break;
2221:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2222:../Middlewares/FreeRTOS//Source/tasks.c **** 					else if( cNextChar == 0x00 )
2223:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2224:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* Both strings terminated, a match must have been
2225:../Middlewares/FreeRTOS//Source/tasks.c **** 						found. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 46


2226:../Middlewares/FreeRTOS//Source/tasks.c **** 						pxReturn = pxNextTCB;
2227:../Middlewares/FreeRTOS//Source/tasks.c **** 						break;
2228:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2229:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
2230:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2231:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2233:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2234:../Middlewares/FreeRTOS//Source/tasks.c **** 
2235:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxReturn != NULL )
2236:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2237:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The handle has been found. */
2238:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
2239:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2240:../Middlewares/FreeRTOS//Source/tasks.c **** 
2241:../Middlewares/FreeRTOS//Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2242:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2243:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
2244:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2245:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2247:../Middlewares/FreeRTOS//Source/tasks.c **** 
2248:../Middlewares/FreeRTOS//Source/tasks.c **** 		return pxReturn;
2249:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2250:../Middlewares/FreeRTOS//Source/tasks.c **** 
2251:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2252:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2253:../Middlewares/FreeRTOS//Source/tasks.c **** 
2254:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2255:../Middlewares/FreeRTOS//Source/tasks.c **** 
2256:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2258:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t* pxTCB;
2260:../Middlewares/FreeRTOS//Source/tasks.c **** 
2261:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:../Middlewares/FreeRTOS//Source/tasks.c **** 
2264:../Middlewares/FreeRTOS//Source/tasks.c **** 		vTaskSuspendAll();
2265:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2266:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Search the ready lists. */
2267:../Middlewares/FreeRTOS//Source/tasks.c **** 			do
2268:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2269:../Middlewares/FreeRTOS//Source/tasks.c **** 				uxQueue--;
2270:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:../Middlewares/FreeRTOS//Source/tasks.c **** 
2272:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxTCB != NULL )
2273:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2274:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Found the handle. */
2275:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
2276:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2277:../Middlewares/FreeRTOS//Source/tasks.c **** 
2278:../Middlewares/FreeRTOS//Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:../Middlewares/FreeRTOS//Source/tasks.c **** 
2280:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Search the delayed lists. */
2281:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxTCB == NULL )
2282:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 47


2283:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2284:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2285:../Middlewares/FreeRTOS//Source/tasks.c **** 
2286:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxTCB == NULL )
2287:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2288:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2290:../Middlewares/FreeRTOS//Source/tasks.c **** 
2291:../Middlewares/FreeRTOS//Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2293:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxTCB == NULL )
2294:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2295:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Search the suspended list. */
2296:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2297:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2298:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2299:../Middlewares/FreeRTOS//Source/tasks.c **** 			#endif
2300:../Middlewares/FreeRTOS//Source/tasks.c **** 
2301:../Middlewares/FreeRTOS//Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2303:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxTCB == NULL )
2304:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2305:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Search the deleted list. */
2306:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2308:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2309:../Middlewares/FreeRTOS//Source/tasks.c **** 			#endif
2310:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2311:../Middlewares/FreeRTOS//Source/tasks.c **** 		( void ) xTaskResumeAll();
2312:../Middlewares/FreeRTOS//Source/tasks.c **** 
2313:../Middlewares/FreeRTOS//Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2315:../Middlewares/FreeRTOS//Source/tasks.c **** 
2316:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2318:../Middlewares/FreeRTOS//Source/tasks.c **** 
2319:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:../Middlewares/FreeRTOS//Source/tasks.c **** 
2321:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2323:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2324:../Middlewares/FreeRTOS//Source/tasks.c **** 
2325:../Middlewares/FreeRTOS//Source/tasks.c **** 		vTaskSuspendAll();
2326:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2327:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2329:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2330:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2331:../Middlewares/FreeRTOS//Source/tasks.c **** 				task in the Ready state. */
2332:../Middlewares/FreeRTOS//Source/tasks.c **** 				do
2333:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2334:../Middlewares/FreeRTOS//Source/tasks.c **** 					uxQueue--;
2335:../Middlewares/FreeRTOS//Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2336:../Middlewares/FreeRTOS//Source/tasks.c **** 
2337:../Middlewares/FreeRTOS//Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2338:../Middlewares/FreeRTOS//Source/tasks.c **** 
2339:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 48


2340:../Middlewares/FreeRTOS//Source/tasks.c **** 				task in the Blocked state. */
2341:../Middlewares/FreeRTOS//Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2342:../Middlewares/FreeRTOS//Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2343:../Middlewares/FreeRTOS//Source/tasks.c **** 
2344:../Middlewares/FreeRTOS//Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2346:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2347:../Middlewares/FreeRTOS//Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:../Middlewares/FreeRTOS//Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2349:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2350:../Middlewares/FreeRTOS//Source/tasks.c **** 				#endif
2351:../Middlewares/FreeRTOS//Source/tasks.c **** 
2352:../Middlewares/FreeRTOS//Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2354:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2355:../Middlewares/FreeRTOS//Source/tasks.c **** 					each task in the Suspended state. */
2356:../Middlewares/FreeRTOS//Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2357:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2358:../Middlewares/FreeRTOS//Source/tasks.c **** 				#endif
2359:../Middlewares/FreeRTOS//Source/tasks.c **** 
2360:../Middlewares/FreeRTOS//Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2362:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2364:../Middlewares/FreeRTOS//Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:../Middlewares/FreeRTOS//Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2366:../Middlewares/FreeRTOS//Source/tasks.c **** 						#else
2367:../Middlewares/FreeRTOS//Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:../Middlewares/FreeRTOS//Source/tasks.c **** 						#endif
2369:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2370:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2371:../Middlewares/FreeRTOS//Source/tasks.c **** 				#else
2372:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2373:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2374:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2375:../Middlewares/FreeRTOS//Source/tasks.c **** 						*pulTotalRunTime = 0;
2376:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2377:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2378:../Middlewares/FreeRTOS//Source/tasks.c **** 				#endif
2379:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2380:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
2381:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2382:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2383:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2384:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2385:../Middlewares/FreeRTOS//Source/tasks.c **** 		( void ) xTaskResumeAll();
2386:../Middlewares/FreeRTOS//Source/tasks.c **** 
2387:../Middlewares/FreeRTOS//Source/tasks.c **** 		return uxTask;
2388:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2389:../Middlewares/FreeRTOS//Source/tasks.c **** 
2390:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:../Middlewares/FreeRTOS//Source/tasks.c **** /*----------------------------------------------------------*/
2392:../Middlewares/FreeRTOS//Source/tasks.c **** 
2393:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2394:../Middlewares/FreeRTOS//Source/tasks.c **** 
2395:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2396:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 49


2397:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2398:../Middlewares/FreeRTOS//Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xIdleTaskHandle;
2401:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2402:../Middlewares/FreeRTOS//Source/tasks.c **** 
2403:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2404:../Middlewares/FreeRTOS//Source/tasks.c **** /*----------------------------------------------------------*/
2405:../Middlewares/FreeRTOS//Source/tasks.c **** 
2406:../Middlewares/FreeRTOS//Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2407:../Middlewares/FreeRTOS//Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2408:../Middlewares/FreeRTOS//Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:../Middlewares/FreeRTOS//Source/tasks.c **** 1. */
2410:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2411:../Middlewares/FreeRTOS//Source/tasks.c **** 
2412:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2414:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:../Middlewares/FreeRTOS//Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:../Middlewares/FreeRTOS//Source/tasks.c **** 		each stepped tick. */
2417:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:../Middlewares/FreeRTOS//Source/tasks.c **** 		xTickCount += xTicksToJump;
2419:../Middlewares/FreeRTOS//Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2421:../Middlewares/FreeRTOS//Source/tasks.c **** 
2422:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2423:../Middlewares/FreeRTOS//Source/tasks.c **** /*----------------------------------------------------------*/
2424:../Middlewares/FreeRTOS//Source/tasks.c **** 
2425:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2426:../Middlewares/FreeRTOS//Source/tasks.c **** 
2427:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2429:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:../Middlewares/FreeRTOS//Source/tasks.c **** 
2432:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( pxTCB );
2433:../Middlewares/FreeRTOS//Source/tasks.c **** 
2434:../Middlewares/FreeRTOS//Source/tasks.c **** 		vTaskSuspendAll();
2435:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2436:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:../Middlewares/FreeRTOS//Source/tasks.c **** 			it is actually in the Blocked state. */
2438:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2439:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2440:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2441:../Middlewares/FreeRTOS//Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:../Middlewares/FreeRTOS//Source/tasks.c **** 				scheduler is suspended. */
2443:../Middlewares/FreeRTOS//Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2444:../Middlewares/FreeRTOS//Source/tasks.c **** 
2445:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2446:../Middlewares/FreeRTOS//Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2447:../Middlewares/FreeRTOS//Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:../Middlewares/FreeRTOS//Source/tasks.c **** 				is used. */
2449:../Middlewares/FreeRTOS//Source/tasks.c **** 				taskENTER_CRITICAL();
2450:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2451:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2453:../Middlewares/FreeRTOS//Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 50


2454:../Middlewares/FreeRTOS//Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2455:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2456:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
2457:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2458:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2460:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2461:../Middlewares/FreeRTOS//Source/tasks.c **** 				taskEXIT_CRITICAL();
2462:../Middlewares/FreeRTOS//Source/tasks.c **** 
2463:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2464:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2465:../Middlewares/FreeRTOS//Source/tasks.c **** 
2466:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:../Middlewares/FreeRTOS//Source/tasks.c **** 				switch if preemption is turned off. */
2468:../Middlewares/FreeRTOS//Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2469:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2470:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:../Middlewares/FreeRTOS//Source/tasks.c **** 					performed if the unblocked task has a priority that is
2472:../Middlewares/FreeRTOS//Source/tasks.c **** 					equal to or higher than the currently executing task. */
2473:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2475:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2476:../Middlewares/FreeRTOS//Source/tasks.c **** 						is unsuspended. */
2477:../Middlewares/FreeRTOS//Source/tasks.c **** 						xYieldPending = pdTRUE;
2478:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2479:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
2480:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2481:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2483:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2484:../Middlewares/FreeRTOS//Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2486:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
2487:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2488:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2490:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2491:../Middlewares/FreeRTOS//Source/tasks.c **** 		xTaskResumeAll();
2492:../Middlewares/FreeRTOS//Source/tasks.c **** 
2493:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
2494:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2495:../Middlewares/FreeRTOS//Source/tasks.c **** 
2496:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2497:../Middlewares/FreeRTOS//Source/tasks.c **** /*----------------------------------------------------------*/
2498:../Middlewares/FreeRTOS//Source/tasks.c **** 
2499:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2500:../Middlewares/FreeRTOS//Source/tasks.c **** {
2501:../Middlewares/FreeRTOS//Source/tasks.c **** TCB_t * pxTCB;
2502:../Middlewares/FreeRTOS//Source/tasks.c **** TickType_t xItemValue;
2503:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2504:../Middlewares/FreeRTOS//Source/tasks.c **** 
2505:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:../Middlewares/FreeRTOS//Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:../Middlewares/FreeRTOS//Source/tasks.c **** 	tasks to be unblocked. */
2508:../Middlewares/FreeRTOS//Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2509:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2510:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 51


2511:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2512:../Middlewares/FreeRTOS//Source/tasks.c **** 		block. */
2513:../Middlewares/FreeRTOS//Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
2514:../Middlewares/FreeRTOS//Source/tasks.c **** 
2515:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:../Middlewares/FreeRTOS//Source/tasks.c **** 		delayed lists if it wraps to 0. */
2517:../Middlewares/FreeRTOS//Source/tasks.c **** 		xTickCount = xConstTickCount;
2518:../Middlewares/FreeRTOS//Source/tasks.c **** 
2519:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
2520:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2521:../Middlewares/FreeRTOS//Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2522:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2523:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
2524:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2525:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2526:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2527:../Middlewares/FreeRTOS//Source/tasks.c **** 
2528:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:../Middlewares/FreeRTOS//Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:../Middlewares/FreeRTOS//Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:../Middlewares/FreeRTOS//Source/tasks.c **** 		look any further down the list. */
2532:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2533:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2534:../Middlewares/FreeRTOS//Source/tasks.c **** 			for( ;; )
2535:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2536:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2537:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2538:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:../Middlewares/FreeRTOS//Source/tasks.c **** 					to the maximum possible value so it is extremely
2540:../Middlewares/FreeRTOS//Source/tasks.c **** 					unlikely that the
2541:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2542:../Middlewares/FreeRTOS//Source/tasks.c **** 					next time through. */
2543:../Middlewares/FreeRTOS//Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2544:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
2545:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2546:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
2547:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2548:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:../Middlewares/FreeRTOS//Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:../Middlewares/FreeRTOS//Source/tasks.c **** 					at which the task at the head of the delayed list must
2551:../Middlewares/FreeRTOS//Source/tasks.c **** 					be removed from the Blocked state. */
2552:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2553:../Middlewares/FreeRTOS//Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2554:../Middlewares/FreeRTOS//Source/tasks.c **** 
2555:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2556:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2557:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:../Middlewares/FreeRTOS//Source/tasks.c **** 						item value is the time at which the task at the head
2559:../Middlewares/FreeRTOS//Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2560:../Middlewares/FreeRTOS//Source/tasks.c **** 						state -	so record the item value in
2561:../Middlewares/FreeRTOS//Source/tasks.c **** 						xNextTaskUnblockTime. */
2562:../Middlewares/FreeRTOS//Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2563:../Middlewares/FreeRTOS//Source/tasks.c **** 						break;
2564:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2565:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
2566:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2567:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 52


2568:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2569:../Middlewares/FreeRTOS//Source/tasks.c **** 
2570:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:../Middlewares/FreeRTOS//Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2572:../Middlewares/FreeRTOS//Source/tasks.c **** 
2573:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:../Middlewares/FreeRTOS//Source/tasks.c **** 					it from the event list. */
2575:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2576:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2577:../Middlewares/FreeRTOS//Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2578:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2579:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
2580:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2581:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2583:../Middlewares/FreeRTOS//Source/tasks.c **** 
2584:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:../Middlewares/FreeRTOS//Source/tasks.c **** 					list. */
2586:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2587:../Middlewares/FreeRTOS//Source/tasks.c **** 
2588:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:../Middlewares/FreeRTOS//Source/tasks.c **** 					context switch if preemption is turned off. */
2590:../Middlewares/FreeRTOS//Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
2592:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* Preemption is on, but a context switch should
2593:../Middlewares/FreeRTOS//Source/tasks.c **** 						only be performed if the unblocked task has a
2594:../Middlewares/FreeRTOS//Source/tasks.c **** 						priority that is equal to or higher than the
2595:../Middlewares/FreeRTOS//Source/tasks.c **** 						currently executing task. */
2596:../Middlewares/FreeRTOS//Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2597:../Middlewares/FreeRTOS//Source/tasks.c **** 						{
2598:../Middlewares/FreeRTOS//Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2599:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
2600:../Middlewares/FreeRTOS//Source/tasks.c **** 						else
2601:../Middlewares/FreeRTOS//Source/tasks.c **** 						{
2602:../Middlewares/FreeRTOS//Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
2604:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
2605:../Middlewares/FreeRTOS//Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2607:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2608:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2609:../Middlewares/FreeRTOS//Source/tasks.c **** 
2610:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2611:../Middlewares/FreeRTOS//Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2612:../Middlewares/FreeRTOS//Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2613:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2614:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2615:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2616:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2617:../Middlewares/FreeRTOS//Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2618:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2619:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
2620:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2621:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2622:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2623:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2624:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 53


2625:../Middlewares/FreeRTOS//Source/tasks.c **** 
2626:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2627:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2628:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:../Middlewares/FreeRTOS//Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2632:../Middlewares/FreeRTOS//Source/tasks.c **** 				vApplicationTickHook();
2633:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2634:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
2635:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
2636:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
2638:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2639:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2640:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2641:../Middlewares/FreeRTOS//Source/tasks.c **** 	else
2642:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2643:../Middlewares/FreeRTOS//Source/tasks.c **** 		++uxPendedTicks;
2644:../Middlewares/FreeRTOS//Source/tasks.c **** 
2645:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:../Middlewares/FreeRTOS//Source/tasks.c **** 		scheduler is locked. */
2647:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2649:../Middlewares/FreeRTOS//Source/tasks.c **** 			vApplicationTickHook();
2650:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2651:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif
2652:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2653:../Middlewares/FreeRTOS//Source/tasks.c **** 
2654:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2656:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2657:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2658:../Middlewares/FreeRTOS//Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2659:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2660:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
2661:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2662:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2664:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2665:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:../Middlewares/FreeRTOS//Source/tasks.c **** 
2667:../Middlewares/FreeRTOS//Source/tasks.c **** 	return xSwitchRequired;
2668:../Middlewares/FreeRTOS//Source/tasks.c **** }
2669:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2670:../Middlewares/FreeRTOS//Source/tasks.c **** 
2671:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2672:../Middlewares/FreeRTOS//Source/tasks.c **** 
2673:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2674:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2675:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *xTCB;
2676:../Middlewares/FreeRTOS//Source/tasks.c **** 
2677:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:../Middlewares/FreeRTOS//Source/tasks.c **** 		getting set. */
2679:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xTask == NULL )
2680:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2681:../Middlewares/FreeRTOS//Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 54


2682:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2683:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
2684:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2685:../Middlewares/FreeRTOS//Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2687:../Middlewares/FreeRTOS//Source/tasks.c **** 
2688:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:../Middlewares/FreeRTOS//Source/tasks.c **** 		the value can be accessed from an interrupt. */
2690:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
2691:../Middlewares/FreeRTOS//Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2692:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
2693:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2694:../Middlewares/FreeRTOS//Source/tasks.c **** 
2695:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2696:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2697:../Middlewares/FreeRTOS//Source/tasks.c **** 
2698:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2699:../Middlewares/FreeRTOS//Source/tasks.c **** 
2700:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2702:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *xTCB;
2703:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskHookFunction_t xReturn;
2704:../Middlewares/FreeRTOS//Source/tasks.c **** 
2705:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xTask == NULL )
2707:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2708:../Middlewares/FreeRTOS//Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2710:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
2711:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2712:../Middlewares/FreeRTOS//Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2714:../Middlewares/FreeRTOS//Source/tasks.c **** 
2715:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:../Middlewares/FreeRTOS//Source/tasks.c **** 		the value can be accessed from an interrupt. */
2717:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
2718:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2719:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2721:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
2722:../Middlewares/FreeRTOS//Source/tasks.c **** 
2723:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
2724:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2725:../Middlewares/FreeRTOS//Source/tasks.c **** 
2726:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2728:../Middlewares/FreeRTOS//Source/tasks.c **** 
2729:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2730:../Middlewares/FreeRTOS//Source/tasks.c **** 
2731:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2732:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2733:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *xTCB;
2734:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn;
2735:../Middlewares/FreeRTOS//Source/tasks.c **** 
2736:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xTask == NULL )
2738:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 55


2739:../Middlewares/FreeRTOS//Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2740:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2741:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
2742:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2743:../Middlewares/FreeRTOS//Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2745:../Middlewares/FreeRTOS//Source/tasks.c **** 
2746:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2748:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2749:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2750:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
2751:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2752:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = pdFAIL;
2753:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2754:../Middlewares/FreeRTOS//Source/tasks.c **** 
2755:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
2756:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2757:../Middlewares/FreeRTOS//Source/tasks.c **** 
2758:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2760:../Middlewares/FreeRTOS//Source/tasks.c **** 
2761:../Middlewares/FreeRTOS//Source/tasks.c **** void vTaskSwitchContext( void )
2762:../Middlewares/FreeRTOS//Source/tasks.c **** {
2763:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2764:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2765:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2766:../Middlewares/FreeRTOS//Source/tasks.c **** 		switch. */
2767:../Middlewares/FreeRTOS//Source/tasks.c **** 		xYieldPending = pdTRUE;
2768:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2769:../Middlewares/FreeRTOS//Source/tasks.c **** 	else
2770:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2771:../Middlewares/FreeRTOS//Source/tasks.c **** 		xYieldPending = pdFALSE;
2772:../Middlewares/FreeRTOS//Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:../Middlewares/FreeRTOS//Source/tasks.c **** 
2774:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2776:../Middlewares/FreeRTOS//Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:../Middlewares/FreeRTOS//Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:../Middlewares/FreeRTOS//Source/tasks.c **** 				#else
2779:../Middlewares/FreeRTOS//Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:../Middlewares/FreeRTOS//Source/tasks.c **** 				#endif
2781:../Middlewares/FreeRTOS//Source/tasks.c **** 
2782:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2783:../Middlewares/FreeRTOS//Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:../Middlewares/FreeRTOS//Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2785:../Middlewares/FreeRTOS//Source/tasks.c **** 				protection here so count values are only valid until the timer
2786:../Middlewares/FreeRTOS//Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2787:../Middlewares/FreeRTOS//Source/tasks.c **** 				against suspect run time stat counter implementations - which
2788:../Middlewares/FreeRTOS//Source/tasks.c **** 				are provided by the application, not the kernel. */
2789:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2791:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2793:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
2794:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
2795:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 56


2796:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
2797:../Middlewares/FreeRTOS//Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2799:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:../Middlewares/FreeRTOS//Source/tasks.c **** 
2801:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2802:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2803:../Middlewares/FreeRTOS//Source/tasks.c **** 
2804:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2805:../Middlewares/FreeRTOS//Source/tasks.c **** 		optimised asm code. */
2806:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2807:../Middlewares/FreeRTOS//Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2808:../Middlewares/FreeRTOS//Source/tasks.c **** 
2809:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2810:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2811:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2812:../Middlewares/FreeRTOS//Source/tasks.c **** 			structure specific to this task. */
2813:../Middlewares/FreeRTOS//Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2814:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2815:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2816:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2817:../Middlewares/FreeRTOS//Source/tasks.c **** }
2818:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2819:../Middlewares/FreeRTOS//Source/tasks.c **** 
2820:../Middlewares/FreeRTOS//Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2821:../Middlewares/FreeRTOS//Source/tasks.c **** {
2822:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxEventList );
2823:../Middlewares/FreeRTOS//Source/tasks.c **** 
2824:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2825:../Middlewares/FreeRTOS//Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2826:../Middlewares/FreeRTOS//Source/tasks.c **** 
2827:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2828:../Middlewares/FreeRTOS//Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2829:../Middlewares/FreeRTOS//Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2830:../Middlewares/FreeRTOS//Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2831:../Middlewares/FreeRTOS//Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2832:../Middlewares/FreeRTOS//Source/tasks.c **** 
2833:../Middlewares/FreeRTOS//Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2834:../Middlewares/FreeRTOS//Source/tasks.c **** }
2835:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2836:../Middlewares/FreeRTOS//Source/tasks.c **** 
2837:../Middlewares/FreeRTOS//Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2838:../Middlewares/FreeRTOS//Source/tasks.c **** {
2839:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxEventList );
2840:../Middlewares/FreeRTOS//Source/tasks.c **** 
2841:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2842:../Middlewares/FreeRTOS//Source/tasks.c **** 	the event groups implementation. */
2843:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2844:../Middlewares/FreeRTOS//Source/tasks.c **** 
2845:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2846:../Middlewares/FreeRTOS//Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2847:../Middlewares/FreeRTOS//Source/tasks.c **** 	task that is not in the Blocked state. */
2848:../Middlewares/FreeRTOS//Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2849:../Middlewares/FreeRTOS//Source/tasks.c **** 
2850:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2851:../Middlewares/FreeRTOS//Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2852:../Middlewares/FreeRTOS//Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 57


2853:../Middlewares/FreeRTOS//Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2854:../Middlewares/FreeRTOS//Source/tasks.c **** 	the task level). */
2855:../Middlewares/FreeRTOS//Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2856:../Middlewares/FreeRTOS//Source/tasks.c **** 
2857:../Middlewares/FreeRTOS//Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2858:../Middlewares/FreeRTOS//Source/tasks.c **** }
2859:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2860:../Middlewares/FreeRTOS//Source/tasks.c **** 
2861:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2862:../Middlewares/FreeRTOS//Source/tasks.c **** 
2863:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2864:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2865:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( pxEventList );
2866:../Middlewares/FreeRTOS//Source/tasks.c **** 
2867:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* This function should not be called by application code hence the
2868:../Middlewares/FreeRTOS//Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2869:../Middlewares/FreeRTOS//Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2870:../Middlewares/FreeRTOS//Source/tasks.c **** 		it should be called with the scheduler suspended. */
2871:../Middlewares/FreeRTOS//Source/tasks.c **** 
2872:../Middlewares/FreeRTOS//Source/tasks.c **** 
2873:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2874:../Middlewares/FreeRTOS//Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2875:../Middlewares/FreeRTOS//Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2876:../Middlewares/FreeRTOS//Source/tasks.c **** 		can be used in place of vListInsert. */
2877:../Middlewares/FreeRTOS//Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2878:../Middlewares/FreeRTOS//Source/tasks.c **** 
2879:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2880:../Middlewares/FreeRTOS//Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2881:../Middlewares/FreeRTOS//Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2882:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2883:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
2884:../Middlewares/FreeRTOS//Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2885:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
2886:../Middlewares/FreeRTOS//Source/tasks.c **** 
2887:../Middlewares/FreeRTOS//Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2888:../Middlewares/FreeRTOS//Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2889:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2890:../Middlewares/FreeRTOS//Source/tasks.c **** 
2891:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TIMERS */
2892:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2893:../Middlewares/FreeRTOS//Source/tasks.c **** 
2894:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2895:../Middlewares/FreeRTOS//Source/tasks.c **** {
2896:../Middlewares/FreeRTOS//Source/tasks.c **** TCB_t *pxUnblockedTCB;
2897:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xReturn;
2898:../Middlewares/FreeRTOS//Source/tasks.c **** 
2899:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2900:../Middlewares/FreeRTOS//Source/tasks.c **** 	called from a critical section within an ISR. */
2901:../Middlewares/FreeRTOS//Source/tasks.c **** 
2902:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2903:../Middlewares/FreeRTOS//Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2904:../Middlewares/FreeRTOS//Source/tasks.c **** 	the delayed list, and add it to the ready list.
2905:../Middlewares/FreeRTOS//Source/tasks.c **** 
2906:../Middlewares/FreeRTOS//Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2907:../Middlewares/FreeRTOS//Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2908:../Middlewares/FreeRTOS//Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2909:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 58


2910:../Middlewares/FreeRTOS//Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2911:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxEventList is not empty. */
2912:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2913:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2914:../Middlewares/FreeRTOS//Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2915:../Middlewares/FreeRTOS//Source/tasks.c **** 
2916:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2917:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2918:../Middlewares/FreeRTOS//Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2919:../Middlewares/FreeRTOS//Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
2920:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2921:../Middlewares/FreeRTOS//Source/tasks.c **** 	else
2922:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2923:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2924:../Middlewares/FreeRTOS//Source/tasks.c **** 		pending until the scheduler is resumed. */
2925:../Middlewares/FreeRTOS//Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2926:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2927:../Middlewares/FreeRTOS//Source/tasks.c **** 
2928:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2929:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2930:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2931:../Middlewares/FreeRTOS//Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2932:../Middlewares/FreeRTOS//Source/tasks.c **** 		it should force a context switch now. */
2933:../Middlewares/FreeRTOS//Source/tasks.c **** 		xReturn = pdTRUE;
2934:../Middlewares/FreeRTOS//Source/tasks.c **** 
2935:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2936:../Middlewares/FreeRTOS//Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2937:../Middlewares/FreeRTOS//Source/tasks.c **** 		xYieldPending = pdTRUE;
2938:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2939:../Middlewares/FreeRTOS//Source/tasks.c **** 	else
2940:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2941:../Middlewares/FreeRTOS//Source/tasks.c **** 		xReturn = pdFALSE;
2942:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2943:../Middlewares/FreeRTOS//Source/tasks.c **** 
2944:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2945:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2946:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2947:../Middlewares/FreeRTOS//Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2948:../Middlewares/FreeRTOS//Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2949:../Middlewares/FreeRTOS//Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2950:../Middlewares/FreeRTOS//Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2951:../Middlewares/FreeRTOS//Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2952:../Middlewares/FreeRTOS//Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2953:../Middlewares/FreeRTOS//Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2954:../Middlewares/FreeRTOS//Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2955:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2956:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
2957:../Middlewares/FreeRTOS//Source/tasks.c **** 
2958:../Middlewares/FreeRTOS//Source/tasks.c **** 	return xReturn;
2959:../Middlewares/FreeRTOS//Source/tasks.c **** }
2960:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
2961:../Middlewares/FreeRTOS//Source/tasks.c **** 
2962:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2963:../Middlewares/FreeRTOS//Source/tasks.c **** {
2964:../Middlewares/FreeRTOS//Source/tasks.c **** TCB_t *pxUnblockedTCB;
2965:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xReturn;
2966:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 59


2967:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2968:../Middlewares/FreeRTOS//Source/tasks.c **** 	the event flags implementation. */
2969:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2970:../Middlewares/FreeRTOS//Source/tasks.c **** 
2971:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Store the new item value in the event list. */
2972:../Middlewares/FreeRTOS//Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
2973:../Middlewares/FreeRTOS//Source/tasks.c **** 
2974:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2975:../Middlewares/FreeRTOS//Source/tasks.c **** 	event flags. */
2976:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
2977:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2978:../Middlewares/FreeRTOS//Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
2979:../Middlewares/FreeRTOS//Source/tasks.c **** 
2980:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2981:../Middlewares/FreeRTOS//Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2982:../Middlewares/FreeRTOS//Source/tasks.c **** 	lists. */
2983:../Middlewares/FreeRTOS//Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2984:../Middlewares/FreeRTOS//Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
2985:../Middlewares/FreeRTOS//Source/tasks.c **** 
2986:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2987:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
2988:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Return true if the task removed from the event list has
2989:../Middlewares/FreeRTOS//Source/tasks.c **** 		a higher priority than the calling task.  This allows
2990:../Middlewares/FreeRTOS//Source/tasks.c **** 		the calling task to know if it should force a context
2991:../Middlewares/FreeRTOS//Source/tasks.c **** 		switch now. */
2992:../Middlewares/FreeRTOS//Source/tasks.c **** 		xReturn = pdTRUE;
2993:../Middlewares/FreeRTOS//Source/tasks.c **** 
2994:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2995:../Middlewares/FreeRTOS//Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2996:../Middlewares/FreeRTOS//Source/tasks.c **** 		xYieldPending = pdTRUE;
2997:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
2998:../Middlewares/FreeRTOS//Source/tasks.c **** 	else
2999:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3000:../Middlewares/FreeRTOS//Source/tasks.c **** 		xReturn = pdFALSE;
3001:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3002:../Middlewares/FreeRTOS//Source/tasks.c **** 
3003:../Middlewares/FreeRTOS//Source/tasks.c **** 	return xReturn;
3004:../Middlewares/FreeRTOS//Source/tasks.c **** }
3005:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3006:../Middlewares/FreeRTOS//Source/tasks.c **** 
3007:../Middlewares/FreeRTOS//Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3008:../Middlewares/FreeRTOS//Source/tasks.c **** {
3009:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxTimeOut );
3010:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3011:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3012:../Middlewares/FreeRTOS//Source/tasks.c **** }
3013:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3014:../Middlewares/FreeRTOS//Source/tasks.c **** 
3015:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3016:../Middlewares/FreeRTOS//Source/tasks.c **** {
3017:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xReturn;
3018:../Middlewares/FreeRTOS//Source/tasks.c **** 
3019:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxTimeOut );
3020:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxTicksToWait );
3021:../Middlewares/FreeRTOS//Source/tasks.c **** 
3022:../Middlewares/FreeRTOS//Source/tasks.c **** 	taskENTER_CRITICAL();
3023:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 60


3024:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3025:../Middlewares/FreeRTOS//Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3026:../Middlewares/FreeRTOS//Source/tasks.c **** 
3027:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3028:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3029:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3030:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3031:../Middlewares/FreeRTOS//Source/tasks.c **** 				but has the same result. */
3032:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3033:../Middlewares/FreeRTOS//Source/tasks.c **** 				xReturn = pdTRUE;
3034:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3035:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
3036:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif
3037:../Middlewares/FreeRTOS//Source/tasks.c **** 
3038:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3039:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3040:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3041:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3042:../Middlewares/FreeRTOS//Source/tasks.c **** 				specified is the maximum block time then the task should block
3043:../Middlewares/FreeRTOS//Source/tasks.c **** 				indefinitely, and therefore never time out. */
3044:../Middlewares/FreeRTOS//Source/tasks.c **** 				xReturn = pdFALSE;
3045:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3046:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
3047:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif
3048:../Middlewares/FreeRTOS//Source/tasks.c **** 
3049:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3050:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3051:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* The tick count is greater than the time at which
3052:../Middlewares/FreeRTOS//Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3053:../Middlewares/FreeRTOS//Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3054:../Middlewares/FreeRTOS//Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3055:../Middlewares/FreeRTOS//Source/tasks.c **** 			was called. */
3056:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = pdTRUE;
3057:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3058:../Middlewares/FreeRTOS//Source/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
3059:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3060:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3061:../Middlewares/FreeRTOS//Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
3062:../Middlewares/FreeRTOS//Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
3063:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = pdFALSE;
3064:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3065:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3066:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3067:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = pdTRUE;
3068:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3069:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3070:../Middlewares/FreeRTOS//Source/tasks.c **** 	taskEXIT_CRITICAL();
3071:../Middlewares/FreeRTOS//Source/tasks.c **** 
3072:../Middlewares/FreeRTOS//Source/tasks.c **** 	return xReturn;
3073:../Middlewares/FreeRTOS//Source/tasks.c **** }
3074:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3075:../Middlewares/FreeRTOS//Source/tasks.c **** 
3076:../Middlewares/FreeRTOS//Source/tasks.c **** void vTaskMissedYield( void )
3077:../Middlewares/FreeRTOS//Source/tasks.c **** {
3078:../Middlewares/FreeRTOS//Source/tasks.c **** 	xYieldPending = pdTRUE;
3079:../Middlewares/FreeRTOS//Source/tasks.c **** }
3080:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 61


3081:../Middlewares/FreeRTOS//Source/tasks.c **** 
3082:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3083:../Middlewares/FreeRTOS//Source/tasks.c **** 
3084:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3085:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3086:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxReturn;
3087:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
3088:../Middlewares/FreeRTOS//Source/tasks.c **** 
3089:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xTask != NULL )
3090:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3091:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3092:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3093:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3094:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3095:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3096:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxReturn = 0U;
3097:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3098:../Middlewares/FreeRTOS//Source/tasks.c **** 
3099:../Middlewares/FreeRTOS//Source/tasks.c **** 		return uxReturn;
3100:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3101:../Middlewares/FreeRTOS//Source/tasks.c **** 
3102:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3103:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3104:../Middlewares/FreeRTOS//Source/tasks.c **** 
3105:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3106:../Middlewares/FreeRTOS//Source/tasks.c **** 
3107:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3108:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3109:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
3110:../Middlewares/FreeRTOS//Source/tasks.c **** 
3111:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xTask != NULL )
3112:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3113:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3114:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3115:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3116:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3117:../Middlewares/FreeRTOS//Source/tasks.c **** 
3118:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3119:../Middlewares/FreeRTOS//Source/tasks.c **** 
3120:../Middlewares/FreeRTOS//Source/tasks.c **** /*
3121:../Middlewares/FreeRTOS//Source/tasks.c ****  * -----------------------------------------------------------
3122:../Middlewares/FreeRTOS//Source/tasks.c ****  * The Idle task.
3123:../Middlewares/FreeRTOS//Source/tasks.c ****  * ----------------------------------------------------------
3124:../Middlewares/FreeRTOS//Source/tasks.c ****  *
3125:../Middlewares/FreeRTOS//Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3126:../Middlewares/FreeRTOS//Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3127:../Middlewares/FreeRTOS//Source/tasks.c ****  *
3128:../Middlewares/FreeRTOS//Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3129:../Middlewares/FreeRTOS//Source/tasks.c ****  *
3130:../Middlewares/FreeRTOS//Source/tasks.c ****  */
3131:../Middlewares/FreeRTOS//Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3132:../Middlewares/FreeRTOS//Source/tasks.c **** {
3133:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Stop warnings. */
3134:../Middlewares/FreeRTOS//Source/tasks.c **** 	( void ) pvParameters;
3135:../Middlewares/FreeRTOS//Source/tasks.c **** 
3136:../Middlewares/FreeRTOS//Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3137:../Middlewares/FreeRTOS//Source/tasks.c **** 	SCHEDULER IS STARTED. **/
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 62


3138:../Middlewares/FreeRTOS//Source/tasks.c **** 
3139:../Middlewares/FreeRTOS//Source/tasks.c **** 	for( ;; )
3140:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3141:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3142:../Middlewares/FreeRTOS//Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3143:../Middlewares/FreeRTOS//Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3144:../Middlewares/FreeRTOS//Source/tasks.c **** 
3145:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3146:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3147:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3148:../Middlewares/FreeRTOS//Source/tasks.c **** 			see if any other task has become available.  If we are using
3149:../Middlewares/FreeRTOS//Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3150:../Middlewares/FreeRTOS//Source/tasks.c **** 			will automatically get the processor anyway. */
3151:../Middlewares/FreeRTOS//Source/tasks.c **** 			taskYIELD();
3152:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3153:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3154:../Middlewares/FreeRTOS//Source/tasks.c **** 
3155:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3156:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3157:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3158:../Middlewares/FreeRTOS//Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3159:../Middlewares/FreeRTOS//Source/tasks.c **** 			to run then the idle task should yield before the end of the
3160:../Middlewares/FreeRTOS//Source/tasks.c **** 			timeslice.
3161:../Middlewares/FreeRTOS//Source/tasks.c **** 
3162:../Middlewares/FreeRTOS//Source/tasks.c **** 			A critical region is not required here as we are just reading from
3163:../Middlewares/FreeRTOS//Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3164:../Middlewares/FreeRTOS//Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3165:../Middlewares/FreeRTOS//Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3166:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3167:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3168:../Middlewares/FreeRTOS//Source/tasks.c **** 				taskYIELD();
3169:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3170:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
3171:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3172:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3173:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3174:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3175:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3176:../Middlewares/FreeRTOS//Source/tasks.c **** 
3177:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3178:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3179:../Middlewares/FreeRTOS//Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3180:../Middlewares/FreeRTOS//Source/tasks.c **** 
3181:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3182:../Middlewares/FreeRTOS//Source/tasks.c **** 			allows the application designer to add background functionality
3183:../Middlewares/FreeRTOS//Source/tasks.c **** 			without the overhead of a separate task.
3184:../Middlewares/FreeRTOS//Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3185:../Middlewares/FreeRTOS//Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3186:../Middlewares/FreeRTOS//Source/tasks.c **** 			vApplicationIdleHook();
3187:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3188:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3189:../Middlewares/FreeRTOS//Source/tasks.c **** 
3190:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3191:../Middlewares/FreeRTOS//Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3192:../Middlewares/FreeRTOS//Source/tasks.c **** 		user defined low power mode	implementations require
3193:../Middlewares/FreeRTOS//Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3194:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 63


3195:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3196:../Middlewares/FreeRTOS//Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3197:../Middlewares/FreeRTOS//Source/tasks.c **** 
3198:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3199:../Middlewares/FreeRTOS//Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3200:../Middlewares/FreeRTOS//Source/tasks.c **** 			test of the expected idle time is performed without the
3201:../Middlewares/FreeRTOS//Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3202:../Middlewares/FreeRTOS//Source/tasks.c **** 			valid. */
3203:../Middlewares/FreeRTOS//Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3204:../Middlewares/FreeRTOS//Source/tasks.c **** 
3205:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3206:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3207:../Middlewares/FreeRTOS//Source/tasks.c **** 				vTaskSuspendAll();
3208:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3209:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3210:../Middlewares/FreeRTOS//Source/tasks.c **** 					time can be sampled again, and this time its value can
3211:../Middlewares/FreeRTOS//Source/tasks.c **** 					be used. */
3212:../Middlewares/FreeRTOS//Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3213:../Middlewares/FreeRTOS//Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3214:../Middlewares/FreeRTOS//Source/tasks.c **** 
3215:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3216:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
3217:../Middlewares/FreeRTOS//Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3218:../Middlewares/FreeRTOS//Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3219:../Middlewares/FreeRTOS//Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3220:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
3221:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
3222:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
3223:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3224:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
3225:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
3226:../Middlewares/FreeRTOS//Source/tasks.c **** 				( void ) xTaskResumeAll();
3227:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3228:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
3229:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3230:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3231:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3232:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3233:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3234:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3235:../Middlewares/FreeRTOS//Source/tasks.c **** }
3236:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3237:../Middlewares/FreeRTOS//Source/tasks.c **** 
3238:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3239:../Middlewares/FreeRTOS//Source/tasks.c **** 
3240:../Middlewares/FreeRTOS//Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3241:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3242:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3243:../Middlewares/FreeRTOS//Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3244:../Middlewares/FreeRTOS//Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3245:../Middlewares/FreeRTOS//Source/tasks.c **** 
3246:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3247:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3248:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3249:../Middlewares/FreeRTOS//Source/tasks.c **** 			eReturn = eAbortSleep;
3250:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3251:../Middlewares/FreeRTOS//Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 64


3252:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3253:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3254:../Middlewares/FreeRTOS//Source/tasks.c **** 			eReturn = eAbortSleep;
3255:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3256:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3257:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3258:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3259:../Middlewares/FreeRTOS//Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3260:../Middlewares/FreeRTOS//Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3261:../Middlewares/FreeRTOS//Source/tasks.c **** 			interrupts. */
3262:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3263:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3264:../Middlewares/FreeRTOS//Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3265:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3266:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
3267:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3268:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3269:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3270:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3271:../Middlewares/FreeRTOS//Source/tasks.c **** 
3272:../Middlewares/FreeRTOS//Source/tasks.c **** 		return eReturn;
3273:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3274:../Middlewares/FreeRTOS//Source/tasks.c **** 
3275:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3276:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3277:../Middlewares/FreeRTOS//Source/tasks.c **** 
3278:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3279:../Middlewares/FreeRTOS//Source/tasks.c **** 
3280:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3281:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3282:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
3283:../Middlewares/FreeRTOS//Source/tasks.c **** 
3284:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3285:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3286:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3287:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3288:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3289:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3290:../Middlewares/FreeRTOS//Source/tasks.c **** 
3291:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3292:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3293:../Middlewares/FreeRTOS//Source/tasks.c **** 
3294:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3295:../Middlewares/FreeRTOS//Source/tasks.c **** 
3296:../Middlewares/FreeRTOS//Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3297:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3298:../Middlewares/FreeRTOS//Source/tasks.c **** 	void *pvReturn = NULL;
3299:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
3300:../Middlewares/FreeRTOS//Source/tasks.c **** 
3301:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3302:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3303:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3304:../Middlewares/FreeRTOS//Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3305:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3306:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3307:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3308:../Middlewares/FreeRTOS//Source/tasks.c **** 			pvReturn = NULL;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 65


3309:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3310:../Middlewares/FreeRTOS//Source/tasks.c **** 
3311:../Middlewares/FreeRTOS//Source/tasks.c **** 		return pvReturn;
3312:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3313:../Middlewares/FreeRTOS//Source/tasks.c **** 
3314:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3315:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3316:../Middlewares/FreeRTOS//Source/tasks.c **** 
3317:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3318:../Middlewares/FreeRTOS//Source/tasks.c **** 
3319:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3320:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3321:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
3322:../Middlewares/FreeRTOS//Source/tasks.c **** 
3323:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3324:../Middlewares/FreeRTOS//Source/tasks.c **** 		the calling task. */
3325:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3326:../Middlewares/FreeRTOS//Source/tasks.c **** 
3327:../Middlewares/FreeRTOS//Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3328:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3329:../Middlewares/FreeRTOS//Source/tasks.c **** 
3330:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3331:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3332:../Middlewares/FreeRTOS//Source/tasks.c **** 
3333:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvInitialiseTaskLists( void )
3334:../Middlewares/FreeRTOS//Source/tasks.c **** {
3335:../Middlewares/FreeRTOS//Source/tasks.c **** UBaseType_t uxPriority;
3336:../Middlewares/FreeRTOS//Source/tasks.c **** 
3337:../Middlewares/FreeRTOS//Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3338:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3339:../Middlewares/FreeRTOS//Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3340:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3341:../Middlewares/FreeRTOS//Source/tasks.c **** 
3342:../Middlewares/FreeRTOS//Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3343:../Middlewares/FreeRTOS//Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3344:../Middlewares/FreeRTOS//Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3345:../Middlewares/FreeRTOS//Source/tasks.c **** 
3346:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3347:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3348:../Middlewares/FreeRTOS//Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3349:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3350:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3351:../Middlewares/FreeRTOS//Source/tasks.c **** 
3352:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3353:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3354:../Middlewares/FreeRTOS//Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3355:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3356:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3357:../Middlewares/FreeRTOS//Source/tasks.c **** 
3358:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3359:../Middlewares/FreeRTOS//Source/tasks.c **** 	using list2. */
3360:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3361:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3362:../Middlewares/FreeRTOS//Source/tasks.c **** }
3363:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3364:../Middlewares/FreeRTOS//Source/tasks.c **** 
3365:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 66


3366:../Middlewares/FreeRTOS//Source/tasks.c **** {
3367:../Middlewares/FreeRTOS//Source/tasks.c **** 
3368:../Middlewares/FreeRTOS//Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3369:../Middlewares/FreeRTOS//Source/tasks.c **** 
3370:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3371:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3372:../Middlewares/FreeRTOS//Source/tasks.c **** 		BaseType_t xListIsEmpty;
3373:../Middlewares/FreeRTOS//Source/tasks.c **** 
3374:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3375:../Middlewares/FreeRTOS//Source/tasks.c **** 		too often in the idle task. */
3376:../Middlewares/FreeRTOS//Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3377:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3378:../Middlewares/FreeRTOS//Source/tasks.c **** 			vTaskSuspendAll();
3379:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3380:../Middlewares/FreeRTOS//Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
3381:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3382:../Middlewares/FreeRTOS//Source/tasks.c **** 			( void ) xTaskResumeAll();
3383:../Middlewares/FreeRTOS//Source/tasks.c **** 
3384:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
3385:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3386:../Middlewares/FreeRTOS//Source/tasks.c **** 				TCB_t *pxTCB;
3387:../Middlewares/FreeRTOS//Source/tasks.c **** 
3388:../Middlewares/FreeRTOS//Source/tasks.c **** 				taskENTER_CRITICAL();
3389:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3390:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3391:../Middlewares/FreeRTOS//Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3392:../Middlewares/FreeRTOS//Source/tasks.c **** 					--uxCurrentNumberOfTasks;
3393:../Middlewares/FreeRTOS//Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
3394:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
3395:../Middlewares/FreeRTOS//Source/tasks.c **** 				taskEXIT_CRITICAL();
3396:../Middlewares/FreeRTOS//Source/tasks.c **** 
3397:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvDeleteTCB( pxTCB );
3398:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3399:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
3400:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3401:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3402:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3403:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3404:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3405:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3406:../Middlewares/FreeRTOS//Source/tasks.c **** }
3407:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3408:../Middlewares/FreeRTOS//Source/tasks.c **** 
3409:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3410:../Middlewares/FreeRTOS//Source/tasks.c **** 
3411:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3412:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3413:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
3414:../Middlewares/FreeRTOS//Source/tasks.c **** 
3415:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3416:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3417:../Middlewares/FreeRTOS//Source/tasks.c **** 
3418:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3419:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3420:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3421:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3422:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 67


3423:../Middlewares/FreeRTOS//Source/tasks.c **** 
3424:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3425:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3426:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3427:../Middlewares/FreeRTOS//Source/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3428:../Middlewares/FreeRTOS//Source/tasks.c **** 			being in the Blocked state. */
3429:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
3430:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3431:../Middlewares/FreeRTOS//Source/tasks.c **** 				vTaskSuspendAll();
3432:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3433:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3434:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
3435:../Middlewares/FreeRTOS//Source/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
3436:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
3437:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
3438:../Middlewares/FreeRTOS//Source/tasks.c **** 				xTaskResumeAll();
3439:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3440:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3441:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3442:../Middlewares/FreeRTOS//Source/tasks.c **** 
3443:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3444:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3445:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3446:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3447:../Middlewares/FreeRTOS//Source/tasks.c **** 		#else
3448:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3449:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3450:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3451:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif
3452:../Middlewares/FreeRTOS//Source/tasks.c **** 
3453:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3454:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3455:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3456:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3457:../Middlewares/FreeRTOS//Source/tasks.c **** 		#else
3458:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3459:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3460:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3461:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif
3462:../Middlewares/FreeRTOS//Source/tasks.c **** 
3463:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3464:../Middlewares/FreeRTOS//Source/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3465:../Middlewares/FreeRTOS//Source/tasks.c **** 		just set to whatever is passed in. */
3466:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( eState != eInvalid )
3467:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3468:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
3469:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3470:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3471:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3472:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
3473:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3474:../Middlewares/FreeRTOS//Source/tasks.c **** 
3475:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3476:../Middlewares/FreeRTOS//Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3477:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3478:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3479:../Middlewares/FreeRTOS//Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 68


3480:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3481:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3482:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3483:../Middlewares/FreeRTOS//Source/tasks.c **** 			#else
3484:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3485:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3486:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3487:../Middlewares/FreeRTOS//Source/tasks.c **** 			#endif
3488:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3489:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3490:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3491:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3492:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3493:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3494:../Middlewares/FreeRTOS//Source/tasks.c **** 
3495:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3496:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3497:../Middlewares/FreeRTOS//Source/tasks.c **** 
3498:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3499:../Middlewares/FreeRTOS//Source/tasks.c **** 
3500:../Middlewares/FreeRTOS//Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3501:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3502:../Middlewares/FreeRTOS//Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3503:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxTask = 0;
3504:../Middlewares/FreeRTOS//Source/tasks.c **** 
3505:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3506:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3507:../Middlewares/FreeRTOS//Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3508:../Middlewares/FreeRTOS//Source/tasks.c **** 
3509:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3510:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3511:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3512:../Middlewares/FreeRTOS//Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3513:../Middlewares/FreeRTOS//Source/tasks.c **** 			do
3514:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3515:../Middlewares/FreeRTOS//Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3516:../Middlewares/FreeRTOS//Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3517:../Middlewares/FreeRTOS//Source/tasks.c **** 				uxTask++;
3518:../Middlewares/FreeRTOS//Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3519:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3520:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3521:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3522:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3523:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3524:../Middlewares/FreeRTOS//Source/tasks.c **** 
3525:../Middlewares/FreeRTOS//Source/tasks.c **** 		return uxTask;
3526:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3527:../Middlewares/FreeRTOS//Source/tasks.c **** 
3528:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3529:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3530:../Middlewares/FreeRTOS//Source/tasks.c **** 
3531:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3532:../Middlewares/FreeRTOS//Source/tasks.c **** 
3533:../Middlewares/FreeRTOS//Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3534:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 105              		.loc 1 3534 0
 106              		.cfi_startproc
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 69


 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              		@ link register save eliminated.
 110              	.LVL9:
3535:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint32_t ulCount = 0U;
 111              		.loc 1 3535 0
 112 0000 0023     		movs	r3, #0
3536:../Middlewares/FreeRTOS//Source/tasks.c **** 
3537:../Middlewares/FreeRTOS//Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 113              		.loc 1 3537 0
 114 0002 01E0     		b	.L12
 115              	.LVL10:
 116              	.L13:
3538:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3539:../Middlewares/FreeRTOS//Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 117              		.loc 1 3539 0
 118 0004 0130     		adds	r0, r0, #1
 119              	.LVL11:
3540:../Middlewares/FreeRTOS//Source/tasks.c **** 			ulCount++;
 120              		.loc 1 3540 0
 121 0006 0133     		adds	r3, r3, #1
 122              	.LVL12:
 123              	.L12:
3537:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 124              		.loc 1 3537 0
 125 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 126 000a A52A     		cmp	r2, #165
 127 000c FAD0     		beq	.L13
 128              	.LVL13:
3541:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3542:../Middlewares/FreeRTOS//Source/tasks.c **** 
3543:../Middlewares/FreeRTOS//Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3544:../Middlewares/FreeRTOS//Source/tasks.c **** 
3545:../Middlewares/FreeRTOS//Source/tasks.c **** 		return ( uint16_t ) ulCount;
3546:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 129              		.loc 1 3546 0
 130 000e C3F38F00 		ubfx	r0, r3, #2, #16
 131              	.LVL14:
 132 0012 7047     		bx	lr
 133              		.cfi_endproc
 134              	.LFE171:
 136              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 137              		.align	1
 138              		.syntax unified
 139              		.thumb
 140              		.thumb_func
 141              		.fpu fpv4-sp-d16
 143              	prvResetNextTaskUnblockTime:
 144              	.LFB173:
3547:../Middlewares/FreeRTOS//Source/tasks.c **** 
3548:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3549:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3550:../Middlewares/FreeRTOS//Source/tasks.c **** 
3551:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3552:../Middlewares/FreeRTOS//Source/tasks.c **** 
3553:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3554:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 70


3555:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
3556:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint8_t *pucEndOfStack;
3557:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxReturn;
3558:../Middlewares/FreeRTOS//Source/tasks.c **** 
3559:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3560:../Middlewares/FreeRTOS//Source/tasks.c **** 
3561:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3562:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3563:../Middlewares/FreeRTOS//Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3564:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3565:../Middlewares/FreeRTOS//Source/tasks.c **** 		#else
3566:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3567:../Middlewares/FreeRTOS//Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3568:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3569:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif
3570:../Middlewares/FreeRTOS//Source/tasks.c **** 
3571:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3572:../Middlewares/FreeRTOS//Source/tasks.c **** 
3573:../Middlewares/FreeRTOS//Source/tasks.c **** 		return uxReturn;
3574:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3575:../Middlewares/FreeRTOS//Source/tasks.c **** 
3576:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3577:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3578:../Middlewares/FreeRTOS//Source/tasks.c **** 
3579:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3580:../Middlewares/FreeRTOS//Source/tasks.c **** 
3581:../Middlewares/FreeRTOS//Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3582:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3583:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3584:../Middlewares/FreeRTOS//Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3585:../Middlewares/FreeRTOS//Source/tasks.c **** 		want to allocate and clean RAM statically. */
3586:../Middlewares/FreeRTOS//Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3587:../Middlewares/FreeRTOS//Source/tasks.c **** 
3588:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3589:../Middlewares/FreeRTOS//Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3590:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3591:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3592:../Middlewares/FreeRTOS//Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3593:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3594:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3595:../Middlewares/FreeRTOS//Source/tasks.c **** 
3596:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3597:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3598:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3599:../Middlewares/FreeRTOS//Source/tasks.c **** 			the stack and TCB. */
3600:../Middlewares/FreeRTOS//Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3601:../Middlewares/FreeRTOS//Source/tasks.c **** 			vPortFree( pxTCB );
3602:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3603:../Middlewares/FreeRTOS//Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3604:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3605:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3606:../Middlewares/FreeRTOS//Source/tasks.c **** 			check what was statically allocated before trying to free the
3607:../Middlewares/FreeRTOS//Source/tasks.c **** 			memory. */
3608:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3609:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3610:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3611:../Middlewares/FreeRTOS//Source/tasks.c **** 				must be freed. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 71


3612:../Middlewares/FreeRTOS//Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3613:../Middlewares/FreeRTOS//Source/tasks.c **** 				vPortFree( pxTCB );
3614:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3615:../Middlewares/FreeRTOS//Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3616:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3617:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3618:../Middlewares/FreeRTOS//Source/tasks.c **** 				only memory that must be freed. */
3619:../Middlewares/FreeRTOS//Source/tasks.c **** 				vPortFree( pxTCB );
3620:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3621:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
3622:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3623:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3624:../Middlewares/FreeRTOS//Source/tasks.c **** 				nothing needs to be freed. */
3625:../Middlewares/FreeRTOS//Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3626:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3627:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3628:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3629:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3630:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3631:../Middlewares/FreeRTOS//Source/tasks.c **** 
3632:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3633:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3634:../Middlewares/FreeRTOS//Source/tasks.c **** 
3635:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3636:../Middlewares/FreeRTOS//Source/tasks.c **** {
 145              		.loc 1 3636 0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 0
 148              		@ frame_needed = 0, uses_anonymous_args = 0
 149              		@ link register save eliminated.
3637:../Middlewares/FreeRTOS//Source/tasks.c **** TCB_t *pxTCB;
3638:../Middlewares/FreeRTOS//Source/tasks.c **** 
3639:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 150              		.loc 1 3639 0
 151 0000 084B     		ldr	r3, .L18
 152 0002 1B68     		ldr	r3, [r3]
 153 0004 1B68     		ldr	r3, [r3]
 154 0006 3BB1     		cbz	r3, .L17
3640:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3641:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3642:../Middlewares/FreeRTOS//Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3643:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3644:../Middlewares/FreeRTOS//Source/tasks.c **** 		there is an item in the delayed list. */
3645:../Middlewares/FreeRTOS//Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3646:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3647:../Middlewares/FreeRTOS//Source/tasks.c **** 	else
3648:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3649:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3650:../Middlewares/FreeRTOS//Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3651:../Middlewares/FreeRTOS//Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3652:../Middlewares/FreeRTOS//Source/tasks.c **** 		from the Blocked state. */
3653:../Middlewares/FreeRTOS//Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 155              		.loc 1 3653 0
 156 0008 064B     		ldr	r3, .L18
 157 000a 1B68     		ldr	r3, [r3]
 158 000c DB68     		ldr	r3, [r3, #12]
 159 000e DB68     		ldr	r3, [r3, #12]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 72


 160              	.LVL15:
3654:../Middlewares/FreeRTOS//Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 161              		.loc 1 3654 0
 162 0010 5A68     		ldr	r2, [r3, #4]
 163 0012 054B     		ldr	r3, .L18+4
 164              	.LVL16:
 165 0014 1A60     		str	r2, [r3]
3655:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3656:../Middlewares/FreeRTOS//Source/tasks.c **** }
 166              		.loc 1 3656 0
 167 0016 7047     		bx	lr
 168              	.L17:
3645:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 169              		.loc 1 3645 0
 170 0018 034B     		ldr	r3, .L18+4
 171 001a 4FF0FF32 		mov	r2, #-1
 172 001e 1A60     		str	r2, [r3]
 173 0020 7047     		bx	lr
 174              	.L19:
 175 0022 00BF     		.align	2
 176              	.L18:
 177 0024 00000000 		.word	.LANCHOR2
 178 0028 00000000 		.word	.LANCHOR3
 179              		.cfi_endproc
 180              	.LFE173:
 182              		.section	.text.prvDeleteTCB,"ax",%progbits
 183              		.align	1
 184              		.syntax unified
 185              		.thumb
 186              		.thumb_func
 187              		.fpu fpv4-sp-d16
 189              	prvDeleteTCB:
 190              	.LFB172:
3582:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 191              		.loc 1 3582 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              	.LVL17:
 196 0000 10B5     		push	{r4, lr}
 197              	.LCFI0:
 198              		.cfi_def_cfa_offset 8
 199              		.cfi_offset 4, -8
 200              		.cfi_offset 14, -4
 201 0002 0446     		mov	r4, r0
3600:../Middlewares/FreeRTOS//Source/tasks.c **** 			vPortFree( pxTCB );
 202              		.loc 1 3600 0
 203 0004 006B     		ldr	r0, [r0, #48]
 204              	.LVL18:
 205 0006 FFF7FEFF 		bl	vPortFree
 206              	.LVL19:
3601:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 207              		.loc 1 3601 0
 208 000a 2046     		mov	r0, r4
 209 000c FFF7FEFF 		bl	vPortFree
 210              	.LVL20:
3630:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 73


 211              		.loc 1 3630 0
 212 0010 10BD     		pop	{r4, pc}
 213              		.cfi_endproc
 214              	.LFE172:
 216              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 217              		.align	1
 218              		.syntax unified
 219              		.thumb
 220              		.thumb_func
 221              		.fpu fpv4-sp-d16
 223              	prvInitialiseNewTask:
 224              	.LFB132:
 775:../Middlewares/FreeRTOS//Source/tasks.c **** StackType_t *pxTopOfStack;
 225              		.loc 1 775 0
 226              		.cfi_startproc
 227              		@ args = 16, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
 229              	.LVL21:
 230 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 231              	.LCFI1:
 232              		.cfi_def_cfa_offset 32
 233              		.cfi_offset 4, -32
 234              		.cfi_offset 5, -28
 235              		.cfi_offset 6, -24
 236              		.cfi_offset 7, -20
 237              		.cfi_offset 8, -16
 238              		.cfi_offset 9, -12
 239              		.cfi_offset 10, -8
 240              		.cfi_offset 14, -4
 241 0004 8146     		mov	r9, r0
 242 0006 0D46     		mov	r5, r1
 243 0008 1746     		mov	r7, r2
 244 000a 9A46     		mov	r10, r3
 245 000c 089E     		ldr	r6, [sp, #32]
 246 000e DDF82480 		ldr	r8, [sp, #36]
 247 0012 0A9C     		ldr	r4, [sp, #40]
 797:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 248              		.loc 1 797 0
 249 0014 9200     		lsls	r2, r2, #2
 250              	.LVL22:
 251 0016 A521     		movs	r1, #165
 252              	.LVL23:
 253 0018 206B     		ldr	r0, [r4, #48]
 254              	.LVL24:
 255 001a FFF7FEFF 		bl	memset
 256              	.LVL25:
 807:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 257              		.loc 1 807 0
 258 001e 236B     		ldr	r3, [r4, #48]
 259 0020 07F18042 		add	r2, r7, #1073741824
 260 0024 013A     		subs	r2, r2, #1
 261 0026 03EB8207 		add	r7, r3, r2, lsl #2
 262              	.LVL26:
 808:../Middlewares/FreeRTOS//Source/tasks.c **** 
 263              		.loc 1 808 0
 264 002a 27F00707 		bic	r7, r7, #7
 265              	.LVL27:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 74


 827:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 266              		.loc 1 827 0
 267 002e 0023     		movs	r3, #0
 268              	.LVL28:
 269              	.L23:
 827:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 270              		.loc 1 827 0 is_stmt 0 discriminator 1
 271 0030 132B     		cmp	r3, #19
 272 0032 07D8     		bhi	.L24
 829:../Middlewares/FreeRTOS//Source/tasks.c **** 
 273              		.loc 1 829 0 is_stmt 1
 274 0034 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 275 0036 E218     		adds	r2, r4, r3
 276 0038 82F83410 		strb	r1, [r2, #52]
 834:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 277              		.loc 1 834 0
 278 003c EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 279 003e 0AB1     		cbz	r2, .L24
 827:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 280              		.loc 1 827 0 discriminator 2
 281 0040 0133     		adds	r3, r3, #1
 282              	.LVL29:
 283 0042 F5E7     		b	.L23
 284              	.L24:
 846:../Middlewares/FreeRTOS//Source/tasks.c **** 
 285              		.loc 1 846 0
 286 0044 0023     		movs	r3, #0
 287              	.LVL30:
 288 0046 84F84730 		strb	r3, [r4, #71]
 850:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 289              		.loc 1 850 0
 290 004a 092E     		cmp	r6, #9
 291 004c 00D9     		bls	.L26
 852:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 292              		.loc 1 852 0
 293 004e 0926     		movs	r6, #9
 294              	.L26:
 295              	.LVL31:
 859:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 296              		.loc 1 859 0
 297 0050 E662     		str	r6, [r4, #44]
 862:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 298              		.loc 1 862 0
 299 0052 2665     		str	r6, [r4, #80]
 863:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 300              		.loc 1 863 0
 301 0054 0025     		movs	r5, #0
 302              	.LVL32:
 303 0056 6565     		str	r5, [r4, #84]
 867:../Middlewares/FreeRTOS//Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 304              		.loc 1 867 0
 305 0058 201D     		adds	r0, r4, #4
 306 005a FFF7FEFF 		bl	vListInitialiseItem
 307              	.LVL33:
 868:../Middlewares/FreeRTOS//Source/tasks.c **** 
 308              		.loc 1 868 0
 309 005e 04F11800 		add	r0, r4, #24
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 75


 310 0062 FFF7FEFF 		bl	vListInitialiseItem
 311              	.LVL34:
 872:../Middlewares/FreeRTOS//Source/tasks.c **** 
 312              		.loc 1 872 0
 313 0066 2461     		str	r4, [r4, #16]
 875:../Middlewares/FreeRTOS//Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 314              		.loc 1 875 0
 315 0068 C6F10A06 		rsb	r6, r6, #10
 316              	.LVL35:
 317 006c A661     		str	r6, [r4, #24]
 876:../Middlewares/FreeRTOS//Source/tasks.c **** 
 318              		.loc 1 876 0
 319 006e 6462     		str	r4, [r4, #36]
 892:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 320              		.loc 1 892 0
 321 0070 A565     		str	r5, [r4, #88]
 918:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 322              		.loc 1 918 0
 323 0072 E565     		str	r5, [r4, #92]
 919:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 324              		.loc 1 919 0
 325 0074 84F86050 		strb	r5, [r4, #96]
 946:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 326              		.loc 1 946 0
 327 0078 5246     		mov	r2, r10
 328 007a 4946     		mov	r1, r9
 329 007c 3846     		mov	r0, r7
 330 007e FFF7FEFF 		bl	pxPortInitialiseStack
 331              	.LVL36:
 332 0082 2060     		str	r0, [r4]
 950:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 333              		.loc 1 950 0
 334 0084 B8F1000F 		cmp	r8, #0
 335 0088 01D0     		beq	.L22
 954:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 336              		.loc 1 954 0
 337 008a C8F80040 		str	r4, [r8]
 338              	.L22:
 960:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 339              		.loc 1 960 0
 340 008e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 341              		.cfi_endproc
 342              	.LFE132:
 344              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 345              		.align	1
 346              		.syntax unified
 347              		.thumb
 348              		.thumb_func
 349              		.fpu fpv4-sp-d16
 351              	prvInitialiseTaskLists:
 352              	.LFB167:
3334:../Middlewares/FreeRTOS//Source/tasks.c **** UBaseType_t uxPriority;
 353              		.loc 1 3334 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 0
 356              		@ frame_needed = 0, uses_anonymous_args = 0
 357 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 76


 358              	.LCFI2:
 359              		.cfi_def_cfa_offset 16
 360              		.cfi_offset 3, -16
 361              		.cfi_offset 4, -12
 362              		.cfi_offset 5, -8
 363              		.cfi_offset 14, -4
 364              	.LVL37:
3337:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 365              		.loc 1 3337 0
 366 0002 0024     		movs	r4, #0
 367 0004 07E0     		b	.L31
 368              	.LVL38:
 369              	.L32:
3339:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 370              		.loc 1 3339 0 discriminator 3
 371 0006 04EB8402 		add	r2, r4, r4, lsl #2
 372 000a 9300     		lsls	r3, r2, #2
 373 000c 0E48     		ldr	r0, .L34
 374 000e 1844     		add	r0, r0, r3
 375 0010 FFF7FEFF 		bl	vListInitialise
 376              	.LVL39:
3337:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 377              		.loc 1 3337 0 discriminator 3
 378 0014 0134     		adds	r4, r4, #1
 379              	.LVL40:
 380              	.L31:
3337:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 381              		.loc 1 3337 0 is_stmt 0 discriminator 1
 382 0016 092C     		cmp	r4, #9
 383 0018 F5D9     		bls	.L32
3342:../Middlewares/FreeRTOS//Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 384              		.loc 1 3342 0 is_stmt 1
 385 001a 0C4D     		ldr	r5, .L34+4
 386 001c 2846     		mov	r0, r5
 387 001e FFF7FEFF 		bl	vListInitialise
 388              	.LVL41:
3343:../Middlewares/FreeRTOS//Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 389              		.loc 1 3343 0
 390 0022 0B4C     		ldr	r4, .L34+8
 391              	.LVL42:
 392 0024 2046     		mov	r0, r4
 393 0026 FFF7FEFF 		bl	vListInitialise
 394              	.LVL43:
3344:../Middlewares/FreeRTOS//Source/tasks.c **** 
 395              		.loc 1 3344 0
 396 002a 0A48     		ldr	r0, .L34+12
 397 002c FFF7FEFF 		bl	vListInitialise
 398              	.LVL44:
3348:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 399              		.loc 1 3348 0
 400 0030 0948     		ldr	r0, .L34+16
 401 0032 FFF7FEFF 		bl	vListInitialise
 402              	.LVL45:
3354:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 403              		.loc 1 3354 0
 404 0036 0948     		ldr	r0, .L34+20
 405 0038 FFF7FEFF 		bl	vListInitialise
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 77


 406              	.LVL46:
3360:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 407              		.loc 1 3360 0
 408 003c 084B     		ldr	r3, .L34+24
 409 003e 1D60     		str	r5, [r3]
3361:../Middlewares/FreeRTOS//Source/tasks.c **** }
 410              		.loc 1 3361 0
 411 0040 084B     		ldr	r3, .L34+28
 412 0042 1C60     		str	r4, [r3]
3362:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 413              		.loc 1 3362 0
 414 0044 38BD     		pop	{r3, r4, r5, pc}
 415              	.L35:
 416 0046 00BF     		.align	2
 417              	.L34:
 418 0048 00000000 		.word	.LANCHOR4
 419 004c 00000000 		.word	.LANCHOR5
 420 0050 00000000 		.word	.LANCHOR6
 421 0054 00000000 		.word	.LANCHOR1
 422 0058 00000000 		.word	.LANCHOR7
 423 005c 00000000 		.word	.LANCHOR0
 424 0060 00000000 		.word	.LANCHOR2
 425 0064 00000000 		.word	.LANCHOR8
 426              		.cfi_endproc
 427              	.LFE167:
 429              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 430              		.align	1
 431              		.syntax unified
 432              		.thumb
 433              		.thumb_func
 434              		.fpu fpv4-sp-d16
 436              	prvAddNewTaskToReadyList:
 437              	.LFB133:
 964:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 438              		.loc 1 964 0
 439              		.cfi_startproc
 440              		@ args = 0, pretend = 0, frame = 0
 441              		@ frame_needed = 0, uses_anonymous_args = 0
 442              	.LVL47:
 443 0000 10B5     		push	{r4, lr}
 444              	.LCFI3:
 445              		.cfi_def_cfa_offset 8
 446              		.cfi_offset 4, -8
 447              		.cfi_offset 14, -4
 448 0002 0446     		mov	r4, r0
 967:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 449              		.loc 1 967 0
 450 0004 FFF7FEFF 		bl	vPortEnterCritical
 451              	.LVL48:
 969:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 452              		.loc 1 969 0
 453 0008 214A     		ldr	r2, .L43
 454 000a 1368     		ldr	r3, [r2]
 455 000c 0133     		adds	r3, r3, #1
 456 000e 1360     		str	r3, [r2]
 970:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 457              		.loc 1 970 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 78


 458 0010 204B     		ldr	r3, .L43+4
 459 0012 1B68     		ldr	r3, [r3]
 460 0014 5BB1     		cbz	r3, .L41
 993:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 461              		.loc 1 993 0
 462 0016 204B     		ldr	r3, .L43+8
 463 0018 1B68     		ldr	r3, [r3]
 464 001a 6BB9     		cbnz	r3, .L38
 995:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 465              		.loc 1 995 0
 466 001c 1D4B     		ldr	r3, .L43+4
 467 001e 1B68     		ldr	r3, [r3]
 468 0020 DA6A     		ldr	r2, [r3, #44]
 469 0022 E36A     		ldr	r3, [r4, #44]
 470 0024 9A42     		cmp	r2, r3
 471 0026 07D8     		bhi	.L38
 997:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 472              		.loc 1 997 0
 473 0028 1A4B     		ldr	r3, .L43+4
 474 002a 1C60     		str	r4, [r3]
 475 002c 04E0     		b	.L38
 476              	.L41:
 974:../Middlewares/FreeRTOS//Source/tasks.c **** 
 477              		.loc 1 974 0
 478 002e 194B     		ldr	r3, .L43+4
 479 0030 1C60     		str	r4, [r3]
 976:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 480              		.loc 1 976 0
 481 0032 1368     		ldr	r3, [r2]
 482 0034 012B     		cmp	r3, #1
 483 0036 27D0     		beq	.L42
 484              	.L38:
1010:../Middlewares/FreeRTOS//Source/tasks.c **** 
 485              		.loc 1 1010 0
 486 0038 184A     		ldr	r2, .L43+12
 487 003a 1368     		ldr	r3, [r2]
 488 003c 0133     		adds	r3, r3, #1
 489 003e 1360     		str	r3, [r2]
1015:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 490              		.loc 1 1015 0
 491 0040 A364     		str	r3, [r4, #72]
1020:../Middlewares/FreeRTOS//Source/tasks.c **** 
 492              		.loc 1 1020 0
 493 0042 E36A     		ldr	r3, [r4, #44]
 494 0044 0122     		movs	r2, #1
 495 0046 9A40     		lsls	r2, r2, r3
 496 0048 1549     		ldr	r1, .L43+16
 497 004a 0868     		ldr	r0, [r1]
 498 004c 0243     		orrs	r2, r2, r0
 499 004e 0A60     		str	r2, [r1]
 500 0050 03EB8303 		add	r3, r3, r3, lsl #2
 501 0054 9A00     		lsls	r2, r3, #2
 502 0056 211D     		adds	r1, r4, #4
 503 0058 1248     		ldr	r0, .L43+20
 504 005a 1044     		add	r0, r0, r2
 505 005c FFF7FEFF 		bl	vListInsertEnd
 506              	.LVL49:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 79


1024:../Middlewares/FreeRTOS//Source/tasks.c **** 
 507              		.loc 1 1024 0
 508 0060 FFF7FEFF 		bl	vPortExitCritical
 509              	.LVL50:
1026:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 510              		.loc 1 1026 0
 511 0064 0C4B     		ldr	r3, .L43+8
 512 0066 1B68     		ldr	r3, [r3]
 513 0068 6BB1     		cbz	r3, .L36
1030:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 514              		.loc 1 1030 0
 515 006a 0A4B     		ldr	r3, .L43+4
 516 006c 1B68     		ldr	r3, [r3]
 517 006e DA6A     		ldr	r2, [r3, #44]
 518 0070 E36A     		ldr	r3, [r4, #44]
 519 0072 9A42     		cmp	r2, r3
 520 0074 07D2     		bcs	.L36
1032:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 521              		.loc 1 1032 0
 522 0076 0C4B     		ldr	r3, .L43+24
 523 0078 4FF08052 		mov	r2, #268435456
 524 007c 1A60     		str	r2, [r3]
 525              		.syntax unified
 526              	@ 1032 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 527 007e BFF34F8F 		dsb
 528              	@ 0 "" 2
 529              	@ 1032 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 530 0082 BFF36F8F 		isb
 531              	@ 0 "" 2
 532              		.thumb
 533              		.syntax unified
 534              	.L36:
1043:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 535              		.loc 1 1043 0
 536 0086 10BD     		pop	{r4, pc}
 537              	.LVL51:
 538              	.L42:
 981:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 539              		.loc 1 981 0
 540 0088 FFF7FEFF 		bl	prvInitialiseTaskLists
 541              	.LVL52:
 542 008c D4E7     		b	.L38
 543              	.L44:
 544 008e 00BF     		.align	2
 545              	.L43:
 546 0090 00000000 		.word	.LANCHOR9
 547 0094 00000000 		.word	.LANCHOR10
 548 0098 00000000 		.word	.LANCHOR11
 549 009c 00000000 		.word	.LANCHOR12
 550 00a0 00000000 		.word	.LANCHOR13
 551 00a4 00000000 		.word	.LANCHOR4
 552 00a8 04ED00E0 		.word	-536810236
 553              		.cfi_endproc
 554              	.LFE133:
 556              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 557              		.align	1
 558              		.syntax unified
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 80


 559              		.thumb
 560              		.thumb_func
 561              		.fpu fpv4-sp-d16
 563              	prvAddCurrentTaskToDelayedList:
 564              	.LFB189:
3657:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3658:../Middlewares/FreeRTOS//Source/tasks.c **** 
3659:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3660:../Middlewares/FreeRTOS//Source/tasks.c **** 
3661:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3662:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3663:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskHandle_t xReturn;
3664:../Middlewares/FreeRTOS//Source/tasks.c **** 
3665:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* A critical section is not required as this is not called from
3666:../Middlewares/FreeRTOS//Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3667:../Middlewares/FreeRTOS//Source/tasks.c **** 		individual execution thread. */
3668:../Middlewares/FreeRTOS//Source/tasks.c **** 		xReturn = pxCurrentTCB;
3669:../Middlewares/FreeRTOS//Source/tasks.c **** 
3670:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
3671:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3672:../Middlewares/FreeRTOS//Source/tasks.c **** 
3673:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3674:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3675:../Middlewares/FreeRTOS//Source/tasks.c **** 
3676:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3677:../Middlewares/FreeRTOS//Source/tasks.c **** 
3678:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3679:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3680:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn;
3681:../Middlewares/FreeRTOS//Source/tasks.c **** 
3682:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3683:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3684:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3685:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3686:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3687:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3688:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3689:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3690:../Middlewares/FreeRTOS//Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3691:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3692:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
3693:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3694:../Middlewares/FreeRTOS//Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3695:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3696:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3697:../Middlewares/FreeRTOS//Source/tasks.c **** 
3698:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
3699:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3700:../Middlewares/FreeRTOS//Source/tasks.c **** 
3701:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3702:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3703:../Middlewares/FreeRTOS//Source/tasks.c **** 
3704:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3705:../Middlewares/FreeRTOS//Source/tasks.c **** 
3706:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3707:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3708:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 81


3709:../Middlewares/FreeRTOS//Source/tasks.c **** 
3710:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3711:../Middlewares/FreeRTOS//Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3712:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxMutexHolder != NULL )
3713:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3714:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3715:../Middlewares/FreeRTOS//Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3716:../Middlewares/FreeRTOS//Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3717:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
3718:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3719:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3720:../Middlewares/FreeRTOS//Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3721:../Middlewares/FreeRTOS//Source/tasks.c **** 				not	being used for anything else. */
3722:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
3723:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3724:../Middlewares/FreeRTOS//Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3725:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
3726:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
3727:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3728:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3729:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
3730:../Middlewares/FreeRTOS//Source/tasks.c **** 
3731:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3732:../Middlewares/FreeRTOS//Source/tasks.c **** 				to be moved into a new list. */
3733:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
3734:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3735:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3736:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
3737:../Middlewares/FreeRTOS//Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3738:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
3739:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
3740:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
3741:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3742:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
3743:../Middlewares/FreeRTOS//Source/tasks.c **** 
3744:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3745:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3746:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3747:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
3748:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
3749:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3750:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Just inherit the priority. */
3751:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3752:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
3753:../Middlewares/FreeRTOS//Source/tasks.c **** 
3754:../Middlewares/FreeRTOS//Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3755:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3756:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
3757:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3758:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3759:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3760:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3761:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3762:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3763:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3764:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3765:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 82


3766:../Middlewares/FreeRTOS//Source/tasks.c **** 
3767:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_MUTEXES */
3768:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3769:../Middlewares/FreeRTOS//Source/tasks.c **** 
3770:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3771:../Middlewares/FreeRTOS//Source/tasks.c **** 
3772:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3773:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3774:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3775:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3776:../Middlewares/FreeRTOS//Source/tasks.c **** 
3777:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxMutexHolder != NULL )
3778:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3779:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3780:../Middlewares/FreeRTOS//Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3781:../Middlewares/FreeRTOS//Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3782:../Middlewares/FreeRTOS//Source/tasks.c **** 			be the running state task. */
3783:../Middlewares/FreeRTOS//Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3784:../Middlewares/FreeRTOS//Source/tasks.c **** 
3785:../Middlewares/FreeRTOS//Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3786:../Middlewares/FreeRTOS//Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3787:../Middlewares/FreeRTOS//Source/tasks.c **** 
3788:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3789:../Middlewares/FreeRTOS//Source/tasks.c **** 			task? */
3790:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3791:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3792:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3793:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3794:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3795:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3796:../Middlewares/FreeRTOS//Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3797:../Middlewares/FreeRTOS//Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3798:../Middlewares/FreeRTOS//Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3799:../Middlewares/FreeRTOS//Source/tasks.c **** 					the	holding task from the ready	list. */
3800:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3801:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
3802:../Middlewares/FreeRTOS//Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3803:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
3804:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
3805:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
3806:../Middlewares/FreeRTOS//Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3807:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
3808:../Middlewares/FreeRTOS//Source/tasks.c **** 
3809:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3810:../Middlewares/FreeRTOS//Source/tasks.c **** 					new	ready list. */
3811:../Middlewares/FreeRTOS//Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3812:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3813:../Middlewares/FreeRTOS//Source/tasks.c **** 
3814:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3815:../Middlewares/FreeRTOS//Source/tasks.c **** 					any other purpose if this task is running, and it must be
3816:../Middlewares/FreeRTOS//Source/tasks.c **** 					running to give back the mutex. */
3817:../Middlewares/FreeRTOS//Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3818:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3819:../Middlewares/FreeRTOS//Source/tasks.c **** 
3820:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3821:../Middlewares/FreeRTOS//Source/tasks.c **** 					This is only actually required in the corner case whereby
3822:../Middlewares/FreeRTOS//Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 83


3823:../Middlewares/FreeRTOS//Source/tasks.c **** 					in an order different to that in which they were taken.
3824:../Middlewares/FreeRTOS//Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3825:../Middlewares/FreeRTOS//Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3826:../Middlewares/FreeRTOS//Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3827:../Middlewares/FreeRTOS//Source/tasks.c **** 					a task is waiting on it or not. */
3828:../Middlewares/FreeRTOS//Source/tasks.c **** 					xReturn = pdTRUE;
3829:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
3830:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
3831:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3832:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3833:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
3834:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3835:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
3836:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3837:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3838:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3839:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3840:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3841:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3842:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3843:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3844:../Middlewares/FreeRTOS//Source/tasks.c **** 
3845:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
3846:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3847:../Middlewares/FreeRTOS//Source/tasks.c **** 
3848:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_MUTEXES */
3849:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3850:../Middlewares/FreeRTOS//Source/tasks.c **** 
3851:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3852:../Middlewares/FreeRTOS//Source/tasks.c **** 
3853:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskEnterCritical( void )
3854:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3855:../Middlewares/FreeRTOS//Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3856:../Middlewares/FreeRTOS//Source/tasks.c **** 
3857:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3858:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3859:../Middlewares/FreeRTOS//Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3860:../Middlewares/FreeRTOS//Source/tasks.c **** 
3861:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3862:../Middlewares/FreeRTOS//Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3863:../Middlewares/FreeRTOS//Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3864:../Middlewares/FreeRTOS//Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3865:../Middlewares/FreeRTOS//Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3866:../Middlewares/FreeRTOS//Source/tasks.c **** 			critical section. */
3867:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3868:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3869:../Middlewares/FreeRTOS//Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3870:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3871:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3872:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3873:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3874:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3875:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3876:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3877:../Middlewares/FreeRTOS//Source/tasks.c **** 
3878:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3879:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 84


3880:../Middlewares/FreeRTOS//Source/tasks.c **** 
3881:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3882:../Middlewares/FreeRTOS//Source/tasks.c **** 
3883:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskExitCritical( void )
3884:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3885:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3886:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3887:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3888:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3889:../Middlewares/FreeRTOS//Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3890:../Middlewares/FreeRTOS//Source/tasks.c **** 
3891:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3892:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3893:../Middlewares/FreeRTOS//Source/tasks.c **** 					portENABLE_INTERRUPTS();
3894:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
3895:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
3896:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3897:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3898:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
3899:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3900:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
3901:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3902:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3903:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
3904:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3905:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
3906:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3907:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3908:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3909:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3910:../Middlewares/FreeRTOS//Source/tasks.c **** 
3911:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3912:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3913:../Middlewares/FreeRTOS//Source/tasks.c **** 
3914:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3915:../Middlewares/FreeRTOS//Source/tasks.c **** 
3916:../Middlewares/FreeRTOS//Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3917:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3918:../Middlewares/FreeRTOS//Source/tasks.c **** 	size_t x;
3919:../Middlewares/FreeRTOS//Source/tasks.c **** 
3920:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Start by copying the entire string. */
3921:../Middlewares/FreeRTOS//Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3922:../Middlewares/FreeRTOS//Source/tasks.c **** 
3923:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3924:../Middlewares/FreeRTOS//Source/tasks.c **** 		printed out. */
3925:../Middlewares/FreeRTOS//Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3926:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3927:../Middlewares/FreeRTOS//Source/tasks.c **** 			pcBuffer[ x ] = ' ';
3928:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
3929:../Middlewares/FreeRTOS//Source/tasks.c **** 
3930:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Terminate. */
3931:../Middlewares/FreeRTOS//Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
3932:../Middlewares/FreeRTOS//Source/tasks.c **** 
3933:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Return the new end of string. */
3934:../Middlewares/FreeRTOS//Source/tasks.c **** 		return &( pcBuffer[ x ] );
3935:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
3936:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 85


3937:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3938:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
3939:../Middlewares/FreeRTOS//Source/tasks.c **** 
3940:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:../Middlewares/FreeRTOS//Source/tasks.c **** 
3942:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3943:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
3944:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3945:../Middlewares/FreeRTOS//Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3946:../Middlewares/FreeRTOS//Source/tasks.c **** 	char cStatus;
3947:../Middlewares/FreeRTOS//Source/tasks.c **** 
3948:../Middlewares/FreeRTOS//Source/tasks.c **** 		/*
3949:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * PLEASE NOTE:
3950:../Middlewares/FreeRTOS//Source/tasks.c **** 		 *
3951:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3952:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3953:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * scheduler.
3954:../Middlewares/FreeRTOS//Source/tasks.c **** 		 *
3955:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3956:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3957:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * displays task names, states and stack usage.
3958:../Middlewares/FreeRTOS//Source/tasks.c **** 		 *
3959:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3960:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3961:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3962:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3963:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3964:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3965:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * snprintf() implementation!).
3966:../Middlewares/FreeRTOS//Source/tasks.c **** 		 *
3967:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3968:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3969:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * through a call to vTaskList().
3970:../Middlewares/FreeRTOS//Source/tasks.c **** 		 */
3971:../Middlewares/FreeRTOS//Source/tasks.c **** 
3972:../Middlewares/FreeRTOS//Source/tasks.c **** 
3973:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3974:../Middlewares/FreeRTOS//Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3975:../Middlewares/FreeRTOS//Source/tasks.c **** 
3976:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3977:../Middlewares/FreeRTOS//Source/tasks.c **** 		function is executing. */
3978:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3979:../Middlewares/FreeRTOS//Source/tasks.c **** 
3980:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3981:../Middlewares/FreeRTOS//Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3982:../Middlewares/FreeRTOS//Source/tasks.c **** 		equate to NULL. */
3983:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3984:../Middlewares/FreeRTOS//Source/tasks.c **** 
3985:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3986:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
3987:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Generate the (binary) data. */
3988:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3989:../Middlewares/FreeRTOS//Source/tasks.c **** 
3990:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Create a human readable table from the binary data. */
3991:../Middlewares/FreeRTOS//Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3992:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
3993:../Middlewares/FreeRTOS//Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 86


3994:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
3995:../Middlewares/FreeRTOS//Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3996:../Middlewares/FreeRTOS//Source/tasks.c **** 										break;
3997:../Middlewares/FreeRTOS//Source/tasks.c **** 
3998:../Middlewares/FreeRTOS//Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3999:../Middlewares/FreeRTOS//Source/tasks.c **** 										break;
4000:../Middlewares/FreeRTOS//Source/tasks.c **** 
4001:../Middlewares/FreeRTOS//Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4002:../Middlewares/FreeRTOS//Source/tasks.c **** 										break;
4003:../Middlewares/FreeRTOS//Source/tasks.c **** 
4004:../Middlewares/FreeRTOS//Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4005:../Middlewares/FreeRTOS//Source/tasks.c **** 										break;
4006:../Middlewares/FreeRTOS//Source/tasks.c **** 
4007:../Middlewares/FreeRTOS//Source/tasks.c **** 					default:			/* Should not get here, but it is included
4008:../Middlewares/FreeRTOS//Source/tasks.c **** 										to prevent static checking errors. */
4009:../Middlewares/FreeRTOS//Source/tasks.c **** 										cStatus = 0x00;
4010:../Middlewares/FreeRTOS//Source/tasks.c **** 										break;
4011:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4012:../Middlewares/FreeRTOS//Source/tasks.c **** 
4013:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4014:../Middlewares/FreeRTOS//Source/tasks.c **** 				can be printed in tabular form more easily. */
4015:../Middlewares/FreeRTOS//Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4016:../Middlewares/FreeRTOS//Source/tasks.c **** 
4017:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Write the rest of the string. */
4018:../Middlewares/FreeRTOS//Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4019:../Middlewares/FreeRTOS//Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4020:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4021:../Middlewares/FreeRTOS//Source/tasks.c **** 
4022:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4023:../Middlewares/FreeRTOS//Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4024:../Middlewares/FreeRTOS//Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4025:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4026:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
4027:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4028:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4029:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4030:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4031:../Middlewares/FreeRTOS//Source/tasks.c **** 
4032:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4033:../Middlewares/FreeRTOS//Source/tasks.c **** /*----------------------------------------------------------*/
4034:../Middlewares/FreeRTOS//Source/tasks.c **** 
4035:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4036:../Middlewares/FreeRTOS//Source/tasks.c **** 
4037:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4038:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4039:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4040:../Middlewares/FreeRTOS//Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4041:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4042:../Middlewares/FreeRTOS//Source/tasks.c **** 
4043:../Middlewares/FreeRTOS//Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4044:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4045:../Middlewares/FreeRTOS//Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4046:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4047:../Middlewares/FreeRTOS//Source/tasks.c **** 		#endif
4048:../Middlewares/FreeRTOS//Source/tasks.c **** 
4049:../Middlewares/FreeRTOS//Source/tasks.c **** 		/*
4050:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * PLEASE NOTE:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 87


4051:../Middlewares/FreeRTOS//Source/tasks.c **** 		 *
4052:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4053:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4054:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * scheduler.
4055:../Middlewares/FreeRTOS//Source/tasks.c **** 		 *
4056:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4057:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4058:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4059:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * in both absolute and percentage terms.
4060:../Middlewares/FreeRTOS//Source/tasks.c **** 		 *
4061:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4062:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4063:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4064:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4065:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4066:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4067:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * a full snprintf() implementation!).
4068:../Middlewares/FreeRTOS//Source/tasks.c **** 		 *
4069:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4070:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4071:../Middlewares/FreeRTOS//Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4072:../Middlewares/FreeRTOS//Source/tasks.c **** 		 */
4073:../Middlewares/FreeRTOS//Source/tasks.c **** 
4074:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4075:../Middlewares/FreeRTOS//Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4076:../Middlewares/FreeRTOS//Source/tasks.c **** 
4077:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4078:../Middlewares/FreeRTOS//Source/tasks.c **** 		function is executing. */
4079:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4080:../Middlewares/FreeRTOS//Source/tasks.c **** 
4081:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4082:../Middlewares/FreeRTOS//Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4083:../Middlewares/FreeRTOS//Source/tasks.c **** 		equate to NULL. */
4084:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4085:../Middlewares/FreeRTOS//Source/tasks.c **** 
4086:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4087:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4088:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Generate the (binary) data. */
4089:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4090:../Middlewares/FreeRTOS//Source/tasks.c **** 
4091:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* For percentage calculations. */
4092:../Middlewares/FreeRTOS//Source/tasks.c **** 			ulTotalTime /= 100UL;
4093:../Middlewares/FreeRTOS//Source/tasks.c **** 
4094:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Avoid divide by zero errors. */
4095:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( ulTotalTime > 0 )
4096:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4097:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4098:../Middlewares/FreeRTOS//Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4099:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4100:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4101:../Middlewares/FreeRTOS//Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4102:../Middlewares/FreeRTOS//Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4103:../Middlewares/FreeRTOS//Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4104:../Middlewares/FreeRTOS//Source/tasks.c **** 
4105:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* Write the task name to the string, padding with
4106:../Middlewares/FreeRTOS//Source/tasks.c **** 					spaces so it can be printed in tabular form more
4107:../Middlewares/FreeRTOS//Source/tasks.c **** 					easily. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 88


4108:../Middlewares/FreeRTOS//Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4109:../Middlewares/FreeRTOS//Source/tasks.c **** 
4110:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4111:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
4112:../Middlewares/FreeRTOS//Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4113:../Middlewares/FreeRTOS//Source/tasks.c **** 						{
4114:../Middlewares/FreeRTOS//Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4115:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
4116:../Middlewares/FreeRTOS//Source/tasks.c **** 						#else
4117:../Middlewares/FreeRTOS//Source/tasks.c **** 						{
4118:../Middlewares/FreeRTOS//Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4119:../Middlewares/FreeRTOS//Source/tasks.c **** 							printf() library can be used. */
4120:../Middlewares/FreeRTOS//Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4121:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
4122:../Middlewares/FreeRTOS//Source/tasks.c **** 						#endif
4123:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
4124:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
4125:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
4126:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* If the percentage is zero here then the task has
4127:../Middlewares/FreeRTOS//Source/tasks.c **** 						consumed less than 1% of the total run time. */
4128:../Middlewares/FreeRTOS//Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4129:../Middlewares/FreeRTOS//Source/tasks.c **** 						{
4130:../Middlewares/FreeRTOS//Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4131:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
4132:../Middlewares/FreeRTOS//Source/tasks.c **** 						#else
4133:../Middlewares/FreeRTOS//Source/tasks.c **** 						{
4134:../Middlewares/FreeRTOS//Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4135:../Middlewares/FreeRTOS//Source/tasks.c **** 							printf() library can be used. */
4136:../Middlewares/FreeRTOS//Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4137:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
4138:../Middlewares/FreeRTOS//Source/tasks.c **** 						#endif
4139:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
4140:../Middlewares/FreeRTOS//Source/tasks.c **** 
4141:../Middlewares/FreeRTOS//Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4142:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4143:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4144:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
4145:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4146:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4147:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4148:../Middlewares/FreeRTOS//Source/tasks.c **** 
4149:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4150:../Middlewares/FreeRTOS//Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4151:../Middlewares/FreeRTOS//Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4152:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4153:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
4154:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4155:../Middlewares/FreeRTOS//Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4156:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4157:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4158:../Middlewares/FreeRTOS//Source/tasks.c **** 
4159:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4160:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
4161:../Middlewares/FreeRTOS//Source/tasks.c **** 
4162:../Middlewares/FreeRTOS//Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4163:../Middlewares/FreeRTOS//Source/tasks.c **** {
4164:../Middlewares/FreeRTOS//Source/tasks.c **** TickType_t uxReturn;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 89


4165:../Middlewares/FreeRTOS//Source/tasks.c **** 
4166:../Middlewares/FreeRTOS//Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4167:../Middlewares/FreeRTOS//Source/tasks.c **** 
4168:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4169:../Middlewares/FreeRTOS//Source/tasks.c **** 	queues and semaphores. */
4170:../Middlewares/FreeRTOS//Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4171:../Middlewares/FreeRTOS//Source/tasks.c **** 
4172:../Middlewares/FreeRTOS//Source/tasks.c **** 	return uxReturn;
4173:../Middlewares/FreeRTOS//Source/tasks.c **** }
4174:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
4175:../Middlewares/FreeRTOS//Source/tasks.c **** 
4176:../Middlewares/FreeRTOS//Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4177:../Middlewares/FreeRTOS//Source/tasks.c **** 
4178:../Middlewares/FreeRTOS//Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4179:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4180:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4181:../Middlewares/FreeRTOS//Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4182:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4183:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4184:../Middlewares/FreeRTOS//Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4185:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4186:../Middlewares/FreeRTOS//Source/tasks.c **** 
4187:../Middlewares/FreeRTOS//Source/tasks.c **** 		return pxCurrentTCB;
4188:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4189:../Middlewares/FreeRTOS//Source/tasks.c **** 
4190:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_MUTEXES */
4191:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
4192:../Middlewares/FreeRTOS//Source/tasks.c **** 
4193:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4194:../Middlewares/FreeRTOS//Source/tasks.c **** 
4195:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4196:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4197:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint32_t ulReturn;
4198:../Middlewares/FreeRTOS//Source/tasks.c **** 
4199:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
4200:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4201:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4202:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4203:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4204:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4205:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4206:../Middlewares/FreeRTOS//Source/tasks.c **** 
4207:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4208:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4209:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4210:../Middlewares/FreeRTOS//Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4211:../Middlewares/FreeRTOS//Source/tasks.c **** 
4212:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4213:../Middlewares/FreeRTOS//Source/tasks.c **** 					section (some will yield immediately, others wait until the
4214:../Middlewares/FreeRTOS//Source/tasks.c **** 					critical section exits) - but it is not something that
4215:../Middlewares/FreeRTOS//Source/tasks.c **** 					application code should ever do. */
4216:../Middlewares/FreeRTOS//Source/tasks.c **** 					portYIELD_WITHIN_API();
4217:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4218:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
4219:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4220:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4221:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 90


4222:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4223:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
4224:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4225:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4226:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4227:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4228:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
4229:../Middlewares/FreeRTOS//Source/tasks.c **** 
4230:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
4231:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4232:../Middlewares/FreeRTOS//Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4233:../Middlewares/FreeRTOS//Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4234:../Middlewares/FreeRTOS//Source/tasks.c **** 
4235:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( ulReturn != 0UL )
4236:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4237:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4238:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4239:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4240:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4241:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
4242:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4243:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
4244:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4245:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4246:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
4247:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4248:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4249:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4250:../Middlewares/FreeRTOS//Source/tasks.c **** 
4251:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4252:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4253:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
4254:../Middlewares/FreeRTOS//Source/tasks.c **** 
4255:../Middlewares/FreeRTOS//Source/tasks.c **** 		return ulReturn;
4256:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4257:../Middlewares/FreeRTOS//Source/tasks.c **** 
4258:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4259:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
4260:../Middlewares/FreeRTOS//Source/tasks.c **** 
4261:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4262:../Middlewares/FreeRTOS//Source/tasks.c **** 
4263:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4264:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4265:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn;
4266:../Middlewares/FreeRTOS//Source/tasks.c **** 
4267:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
4268:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4269:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4270:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4271:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4272:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4273:../Middlewares/FreeRTOS//Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4274:../Middlewares/FreeRTOS//Source/tasks.c **** 				clear the value to zero. */
4275:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4276:../Middlewares/FreeRTOS//Source/tasks.c **** 
4277:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4278:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 91


4279:../Middlewares/FreeRTOS//Source/tasks.c **** 
4280:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4281:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4282:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4283:../Middlewares/FreeRTOS//Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4284:../Middlewares/FreeRTOS//Source/tasks.c **** 
4285:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4286:../Middlewares/FreeRTOS//Source/tasks.c **** 					section (some will yield immediately, others wait until the
4287:../Middlewares/FreeRTOS//Source/tasks.c **** 					critical section exits) - but it is not something that
4288:../Middlewares/FreeRTOS//Source/tasks.c **** 					application code should ever do. */
4289:../Middlewares/FreeRTOS//Source/tasks.c **** 					portYIELD_WITHIN_API();
4290:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4291:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
4292:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4293:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4294:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4295:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4296:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
4297:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4298:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4299:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4300:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4301:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
4302:../Middlewares/FreeRTOS//Source/tasks.c **** 
4303:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
4304:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4305:../Middlewares/FreeRTOS//Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4306:../Middlewares/FreeRTOS//Source/tasks.c **** 
4307:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pulNotificationValue != NULL )
4308:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4309:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Output the current notification value, which may or may not
4310:../Middlewares/FreeRTOS//Source/tasks.c **** 				have changed. */
4311:../Middlewares/FreeRTOS//Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4312:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4313:../Middlewares/FreeRTOS//Source/tasks.c **** 
4314:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4315:../Middlewares/FreeRTOS//Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4316:../Middlewares/FreeRTOS//Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4317:../Middlewares/FreeRTOS//Source/tasks.c **** 			unblocked because of a timeout. */
4318:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
4319:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4320:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* A notification was not received. */
4321:../Middlewares/FreeRTOS//Source/tasks.c **** 				xReturn = pdFALSE;
4322:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4323:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
4324:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4325:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* A notification was already pending or a notification was
4326:../Middlewares/FreeRTOS//Source/tasks.c **** 				received while the task was waiting. */
4327:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4328:../Middlewares/FreeRTOS//Source/tasks.c **** 				xReturn = pdTRUE;
4329:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4330:../Middlewares/FreeRTOS//Source/tasks.c **** 
4331:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4332:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4333:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
4334:../Middlewares/FreeRTOS//Source/tasks.c **** 
4335:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 92


4336:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4337:../Middlewares/FreeRTOS//Source/tasks.c **** 
4338:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4339:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
4340:../Middlewares/FreeRTOS//Source/tasks.c **** 
4341:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4342:../Middlewares/FreeRTOS//Source/tasks.c **** 
4343:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4344:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4345:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * pxTCB;
4346:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4347:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4348:../Middlewares/FreeRTOS//Source/tasks.c **** 
4349:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( xTaskToNotify );
4350:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4351:../Middlewares/FreeRTOS//Source/tasks.c **** 
4352:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
4353:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4354:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4355:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4356:../Middlewares/FreeRTOS//Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4357:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4358:../Middlewares/FreeRTOS//Source/tasks.c **** 
4359:../Middlewares/FreeRTOS//Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4360:../Middlewares/FreeRTOS//Source/tasks.c **** 
4361:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4362:../Middlewares/FreeRTOS//Source/tasks.c **** 
4363:../Middlewares/FreeRTOS//Source/tasks.c **** 			switch( eAction )
4364:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4365:../Middlewares/FreeRTOS//Source/tasks.c **** 				case eSetBits	:
4366:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4367:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
4368:../Middlewares/FreeRTOS//Source/tasks.c **** 
4369:../Middlewares/FreeRTOS//Source/tasks.c **** 				case eIncrement	:
4370:../Middlewares/FreeRTOS//Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4371:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
4372:../Middlewares/FreeRTOS//Source/tasks.c **** 
4373:../Middlewares/FreeRTOS//Source/tasks.c **** 				case eSetValueWithOverwrite	:
4374:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4375:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
4376:../Middlewares/FreeRTOS//Source/tasks.c **** 
4377:../Middlewares/FreeRTOS//Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4378:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4379:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
4380:../Middlewares/FreeRTOS//Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4381:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
4382:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
4383:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
4384:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* The value could not be written to the task. */
4385:../Middlewares/FreeRTOS//Source/tasks.c **** 						xReturn = pdFAIL;
4386:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
4387:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
4388:../Middlewares/FreeRTOS//Source/tasks.c **** 
4389:../Middlewares/FreeRTOS//Source/tasks.c **** 				case eNoAction:
4390:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The task is being notified without its notify value being
4391:../Middlewares/FreeRTOS//Source/tasks.c **** 					updated. */
4392:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 93


4393:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4394:../Middlewares/FreeRTOS//Source/tasks.c **** 
4395:../Middlewares/FreeRTOS//Source/tasks.c **** 			traceTASK_NOTIFY();
4396:../Middlewares/FreeRTOS//Source/tasks.c **** 
4397:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4398:../Middlewares/FreeRTOS//Source/tasks.c **** 			notification then unblock it now. */
4399:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4400:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4401:../Middlewares/FreeRTOS//Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4402:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4403:../Middlewares/FreeRTOS//Source/tasks.c **** 
4404:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The task should not have been on an event list. */
4405:../Middlewares/FreeRTOS//Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4406:../Middlewares/FreeRTOS//Source/tasks.c **** 
4407:../Middlewares/FreeRTOS//Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4408:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4409:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4410:../Middlewares/FreeRTOS//Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4411:../Middlewares/FreeRTOS//Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4412:../Middlewares/FreeRTOS//Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4413:../Middlewares/FreeRTOS//Source/tasks.c **** 					because it will automatically get reset to a new value when
4414:../Middlewares/FreeRTOS//Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4415:../Middlewares/FreeRTOS//Source/tasks.c **** 					tickless idling is used it might be more important to enter
4416:../Middlewares/FreeRTOS//Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4417:../Middlewares/FreeRTOS//Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4418:../Middlewares/FreeRTOS//Source/tasks.c **** 					earliest possible time. */
4419:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4420:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4421:../Middlewares/FreeRTOS//Source/tasks.c **** 				#endif
4422:../Middlewares/FreeRTOS//Source/tasks.c **** 
4423:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4424:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4425:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The notified task has a priority above the currently
4426:../Middlewares/FreeRTOS//Source/tasks.c **** 					executing task so a yield is required. */
4427:../Middlewares/FreeRTOS//Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4428:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4429:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
4430:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4431:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4433:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4434:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
4435:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4436:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4437:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4438:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4439:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
4440:../Middlewares/FreeRTOS//Source/tasks.c **** 
4441:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
4442:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4443:../Middlewares/FreeRTOS//Source/tasks.c **** 
4444:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4445:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
4446:../Middlewares/FreeRTOS//Source/tasks.c **** 
4447:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4448:../Middlewares/FreeRTOS//Source/tasks.c **** 
4449:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 94


4450:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4451:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * pxTCB;
4452:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4453:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4454:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4455:../Middlewares/FreeRTOS//Source/tasks.c **** 
4456:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( xTaskToNotify );
4457:../Middlewares/FreeRTOS//Source/tasks.c **** 
4458:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4459:../Middlewares/FreeRTOS//Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4460:../Middlewares/FreeRTOS//Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4461:../Middlewares/FreeRTOS//Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4462:../Middlewares/FreeRTOS//Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4463:../Middlewares/FreeRTOS//Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4464:../Middlewares/FreeRTOS//Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4465:../Middlewares/FreeRTOS//Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4466:../Middlewares/FreeRTOS//Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4467:../Middlewares/FreeRTOS//Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4468:../Middlewares/FreeRTOS//Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4469:../Middlewares/FreeRTOS//Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4470:../Middlewares/FreeRTOS//Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4471:../Middlewares/FreeRTOS//Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4472:../Middlewares/FreeRTOS//Source/tasks.c **** 		provided on the following link:
4473:../Middlewares/FreeRTOS//Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4474:../Middlewares/FreeRTOS//Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4475:../Middlewares/FreeRTOS//Source/tasks.c **** 
4476:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4477:../Middlewares/FreeRTOS//Source/tasks.c **** 
4478:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4479:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4480:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4481:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4482:../Middlewares/FreeRTOS//Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4483:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4484:../Middlewares/FreeRTOS//Source/tasks.c **** 
4485:../Middlewares/FreeRTOS//Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4486:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4487:../Middlewares/FreeRTOS//Source/tasks.c **** 
4488:../Middlewares/FreeRTOS//Source/tasks.c **** 			switch( eAction )
4489:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4490:../Middlewares/FreeRTOS//Source/tasks.c **** 				case eSetBits	:
4491:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4492:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
4493:../Middlewares/FreeRTOS//Source/tasks.c **** 
4494:../Middlewares/FreeRTOS//Source/tasks.c **** 				case eIncrement	:
4495:../Middlewares/FreeRTOS//Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4496:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
4497:../Middlewares/FreeRTOS//Source/tasks.c **** 
4498:../Middlewares/FreeRTOS//Source/tasks.c **** 				case eSetValueWithOverwrite	:
4499:../Middlewares/FreeRTOS//Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4500:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
4501:../Middlewares/FreeRTOS//Source/tasks.c **** 
4502:../Middlewares/FreeRTOS//Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4503:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4504:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
4505:../Middlewares/FreeRTOS//Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4506:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 95


4507:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
4508:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
4509:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* The value could not be written to the task. */
4510:../Middlewares/FreeRTOS//Source/tasks.c **** 						xReturn = pdFAIL;
4511:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
4512:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
4513:../Middlewares/FreeRTOS//Source/tasks.c **** 
4514:../Middlewares/FreeRTOS//Source/tasks.c **** 				case eNoAction :
4515:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The task is being notified without its notify value being
4516:../Middlewares/FreeRTOS//Source/tasks.c **** 					updated. */
4517:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
4518:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4519:../Middlewares/FreeRTOS//Source/tasks.c **** 
4520:../Middlewares/FreeRTOS//Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4521:../Middlewares/FreeRTOS//Source/tasks.c **** 
4522:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4523:../Middlewares/FreeRTOS//Source/tasks.c **** 			notification then unblock it now. */
4524:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4525:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4526:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The task should not have been on an event list. */
4527:../Middlewares/FreeRTOS//Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4528:../Middlewares/FreeRTOS//Source/tasks.c **** 
4529:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4530:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4531:../Middlewares/FreeRTOS//Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4532:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4533:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4534:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
4535:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4536:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4537:../Middlewares/FreeRTOS//Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4538:../Middlewares/FreeRTOS//Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4539:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4540:../Middlewares/FreeRTOS//Source/tasks.c **** 
4541:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4542:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4543:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The notified task has a priority above the currently
4544:../Middlewares/FreeRTOS//Source/tasks.c **** 					executing task so a yield is required. */
4545:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4546:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
4547:../Middlewares/FreeRTOS//Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4548:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
4549:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
4550:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
4551:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4552:../Middlewares/FreeRTOS//Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4553:../Middlewares/FreeRTOS//Source/tasks.c **** 						safe FreeRTOS function. */
4554:../Middlewares/FreeRTOS//Source/tasks.c **** 						xYieldPending = pdTRUE;
4555:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
4556:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4557:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
4558:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4559:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4560:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4561:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4562:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4563:../Middlewares/FreeRTOS//Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 96


4564:../Middlewares/FreeRTOS//Source/tasks.c **** 
4565:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
4566:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4567:../Middlewares/FreeRTOS//Source/tasks.c **** 
4568:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4569:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
4570:../Middlewares/FreeRTOS//Source/tasks.c **** 
4571:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4572:../Middlewares/FreeRTOS//Source/tasks.c **** 
4573:../Middlewares/FreeRTOS//Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4574:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4575:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * pxTCB;
4576:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4577:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4578:../Middlewares/FreeRTOS//Source/tasks.c **** 
4579:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( xTaskToNotify );
4580:../Middlewares/FreeRTOS//Source/tasks.c **** 
4581:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4582:../Middlewares/FreeRTOS//Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4583:../Middlewares/FreeRTOS//Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4584:../Middlewares/FreeRTOS//Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4585:../Middlewares/FreeRTOS//Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4586:../Middlewares/FreeRTOS//Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4587:../Middlewares/FreeRTOS//Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4588:../Middlewares/FreeRTOS//Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4589:../Middlewares/FreeRTOS//Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4590:../Middlewares/FreeRTOS//Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4591:../Middlewares/FreeRTOS//Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4592:../Middlewares/FreeRTOS//Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4593:../Middlewares/FreeRTOS//Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4594:../Middlewares/FreeRTOS//Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4595:../Middlewares/FreeRTOS//Source/tasks.c **** 		provided on the following link:
4596:../Middlewares/FreeRTOS//Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4597:../Middlewares/FreeRTOS//Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4598:../Middlewares/FreeRTOS//Source/tasks.c **** 
4599:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4600:../Middlewares/FreeRTOS//Source/tasks.c **** 
4601:../Middlewares/FreeRTOS//Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4602:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4603:../Middlewares/FreeRTOS//Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4604:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4605:../Middlewares/FreeRTOS//Source/tasks.c **** 
4606:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4607:../Middlewares/FreeRTOS//Source/tasks.c **** 			semaphore. */
4608:../Middlewares/FreeRTOS//Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4609:../Middlewares/FreeRTOS//Source/tasks.c **** 
4610:../Middlewares/FreeRTOS//Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4611:../Middlewares/FreeRTOS//Source/tasks.c **** 
4612:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4613:../Middlewares/FreeRTOS//Source/tasks.c **** 			notification then unblock it now. */
4614:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4615:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4616:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The task should not have been on an event list. */
4617:../Middlewares/FreeRTOS//Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4618:../Middlewares/FreeRTOS//Source/tasks.c **** 
4619:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4620:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 97


4621:../Middlewares/FreeRTOS//Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4622:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4623:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4624:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
4625:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4626:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4627:../Middlewares/FreeRTOS//Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4628:../Middlewares/FreeRTOS//Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4629:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4630:../Middlewares/FreeRTOS//Source/tasks.c **** 
4631:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4632:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4633:../Middlewares/FreeRTOS//Source/tasks.c **** 					/* The notified task has a priority above the currently
4634:../Middlewares/FreeRTOS//Source/tasks.c **** 					executing task so a yield is required. */
4635:../Middlewares/FreeRTOS//Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4636:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
4637:../Middlewares/FreeRTOS//Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4638:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
4639:../Middlewares/FreeRTOS//Source/tasks.c **** 					else
4640:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
4641:../Middlewares/FreeRTOS//Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4642:../Middlewares/FreeRTOS//Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4643:../Middlewares/FreeRTOS//Source/tasks.c **** 						safe FreeRTOS function. */
4644:../Middlewares/FreeRTOS//Source/tasks.c **** 						xYieldPending = pdTRUE;
4645:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
4646:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4647:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
4648:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4649:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4650:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4651:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4652:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4653:../Middlewares/FreeRTOS//Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4654:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4655:../Middlewares/FreeRTOS//Source/tasks.c **** 
4656:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4657:../Middlewares/FreeRTOS//Source/tasks.c **** 
4658:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
4659:../Middlewares/FreeRTOS//Source/tasks.c **** 
4660:../Middlewares/FreeRTOS//Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4661:../Middlewares/FreeRTOS//Source/tasks.c **** 
4662:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4663:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4664:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
4665:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn;
4666:../Middlewares/FreeRTOS//Source/tasks.c **** 
4667:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4668:../Middlewares/FreeRTOS//Source/tasks.c **** 		its notification state cleared. */
4669:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4670:../Middlewares/FreeRTOS//Source/tasks.c **** 
4671:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskENTER_CRITICAL();
4672:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4673:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4674:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4675:../Middlewares/FreeRTOS//Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4676:../Middlewares/FreeRTOS//Source/tasks.c **** 				xReturn = pdPASS;
4677:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 98


4678:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
4679:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4680:../Middlewares/FreeRTOS//Source/tasks.c **** 				xReturn = pdFAIL;
4681:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4682:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4683:../Middlewares/FreeRTOS//Source/tasks.c **** 		taskEXIT_CRITICAL();
4684:../Middlewares/FreeRTOS//Source/tasks.c **** 
4685:../Middlewares/FreeRTOS//Source/tasks.c **** 		return xReturn;
4686:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4687:../Middlewares/FreeRTOS//Source/tasks.c **** 
4688:../Middlewares/FreeRTOS//Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4689:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
4690:../Middlewares/FreeRTOS//Source/tasks.c **** 
4691:../Middlewares/FreeRTOS//Source/tasks.c **** 
4692:../Middlewares/FreeRTOS//Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4693:../Middlewares/FreeRTOS//Source/tasks.c **** {
 565              		.loc 1 4693 0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 0
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 569              	.LVL53:
 570 0000 70B5     		push	{r4, r5, r6, lr}
 571              	.LCFI4:
 572              		.cfi_def_cfa_offset 16
 573              		.cfi_offset 4, -16
 574              		.cfi_offset 5, -12
 575              		.cfi_offset 6, -8
 576              		.cfi_offset 14, -4
 577 0002 0446     		mov	r4, r0
 578 0004 0E46     		mov	r6, r1
4694:../Middlewares/FreeRTOS//Source/tasks.c **** TickType_t xTimeToWake;
4695:../Middlewares/FreeRTOS//Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 579              		.loc 1 4695 0
 580 0006 1D4B     		ldr	r3, .L53
 581 0008 1D68     		ldr	r5, [r3]
 582              	.LVL54:
4696:../Middlewares/FreeRTOS//Source/tasks.c **** 
4697:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4698:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4699:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4700:../Middlewares/FreeRTOS//Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4701:../Middlewares/FreeRTOS//Source/tasks.c **** 		when the task leaves the Blocked state. */
4702:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4703:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4704:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif
4705:../Middlewares/FreeRTOS//Source/tasks.c **** 
4706:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4707:../Middlewares/FreeRTOS//Source/tasks.c **** 	as the same list item is used for both lists. */
4708:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 583              		.loc 1 4708 0
 584 000a 1D4B     		ldr	r3, .L53+4
 585 000c 1868     		ldr	r0, [r3]
 586              	.LVL55:
 587 000e 0430     		adds	r0, r0, #4
 588 0010 FFF7FEFF 		bl	uxListRemove
 589              	.LVL56:
 590 0014 50B9     		cbnz	r0, .L46
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 99


4709:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4710:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4711:../Middlewares/FreeRTOS//Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4712:../Middlewares/FreeRTOS//Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 591              		.loc 1 4712 0
 592 0016 1A4B     		ldr	r3, .L53+4
 593 0018 1B68     		ldr	r3, [r3]
 594 001a DA6A     		ldr	r2, [r3, #44]
 595 001c 0123     		movs	r3, #1
 596 001e 03FA02F2 		lsl	r2, r3, r2
 597 0022 1849     		ldr	r1, .L53+8
 598 0024 0B68     		ldr	r3, [r1]
 599 0026 23EA0203 		bic	r3, r3, r2
 600 002a 0B60     		str	r3, [r1]
 601              	.L46:
4713:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4714:../Middlewares/FreeRTOS//Source/tasks.c **** 	else
4715:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4716:../Middlewares/FreeRTOS//Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4717:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4718:../Middlewares/FreeRTOS//Source/tasks.c **** 
4719:../Middlewares/FreeRTOS//Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4720:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4721:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 602              		.loc 1 4721 0
 603 002c B4F1FF3F 		cmp	r4, #-1
 604 0030 13D0     		beq	.L51
 605              	.L47:
4722:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4723:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4724:../Middlewares/FreeRTOS//Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4725:../Middlewares/FreeRTOS//Source/tasks.c **** 			indefinitely. */
4726:../Middlewares/FreeRTOS//Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
4727:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4728:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
4729:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4730:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4731:../Middlewares/FreeRTOS//Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4732:../Middlewares/FreeRTOS//Source/tasks.c **** 			kernel will manage it correctly. */
4733:../Middlewares/FreeRTOS//Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 606              		.loc 1 4733 0
 607 0032 2C44     		add	r4, r4, r5
 608              	.LVL57:
4734:../Middlewares/FreeRTOS//Source/tasks.c **** 
4735:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4736:../Middlewares/FreeRTOS//Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 609              		.loc 1 4736 0
 610 0034 124B     		ldr	r3, .L53+4
 611 0036 1B68     		ldr	r3, [r3]
 612 0038 5C60     		str	r4, [r3, #4]
4737:../Middlewares/FreeRTOS//Source/tasks.c **** 
4738:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 613              		.loc 1 4738 0
 614 003a A542     		cmp	r5, r4
 615 003c 16D8     		bhi	.L52
4739:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4740:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 100


4741:../Middlewares/FreeRTOS//Source/tasks.c **** 				list. */
4742:../Middlewares/FreeRTOS//Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4743:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4744:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
4745:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4746:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4747:../Middlewares/FreeRTOS//Source/tasks.c **** 				is used. */
4748:../Middlewares/FreeRTOS//Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 616              		.loc 1 4748 0
 617 003e 124B     		ldr	r3, .L53+12
 618 0040 1868     		ldr	r0, [r3]
 619 0042 0F4B     		ldr	r3, .L53+4
 620 0044 1968     		ldr	r1, [r3]
 621 0046 0431     		adds	r1, r1, #4
 622 0048 FFF7FEFF 		bl	vListInsert
 623              	.LVL58:
4749:../Middlewares/FreeRTOS//Source/tasks.c **** 
4750:../Middlewares/FreeRTOS//Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4751:../Middlewares/FreeRTOS//Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4752:../Middlewares/FreeRTOS//Source/tasks.c **** 				needs to be updated too. */
4753:../Middlewares/FreeRTOS//Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 624              		.loc 1 4753 0
 625 004c 0F4B     		ldr	r3, .L53+16
 626 004e 1B68     		ldr	r3, [r3]
 627 0050 A342     		cmp	r3, r4
 628 0052 12D9     		bls	.L45
4754:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4755:../Middlewares/FreeRTOS//Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 629              		.loc 1 4755 0
 630 0054 0D4B     		ldr	r3, .L53+16
 631 0056 1C60     		str	r4, [r3]
4756:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4757:../Middlewares/FreeRTOS//Source/tasks.c **** 				else
4758:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
4759:../Middlewares/FreeRTOS//Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4760:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
4761:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4762:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4763:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4764:../Middlewares/FreeRTOS//Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4765:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
4766:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4767:../Middlewares/FreeRTOS//Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4768:../Middlewares/FreeRTOS//Source/tasks.c **** 		will manage it correctly. */
4769:../Middlewares/FreeRTOS//Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4770:../Middlewares/FreeRTOS//Source/tasks.c **** 
4771:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4772:../Middlewares/FreeRTOS//Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4773:../Middlewares/FreeRTOS//Source/tasks.c **** 
4774:../Middlewares/FreeRTOS//Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4775:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4776:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4777:../Middlewares/FreeRTOS//Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4778:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4779:../Middlewares/FreeRTOS//Source/tasks.c **** 		else
4780:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
4781:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 101


4782:../Middlewares/FreeRTOS//Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4783:../Middlewares/FreeRTOS//Source/tasks.c **** 
4784:../Middlewares/FreeRTOS//Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4785:../Middlewares/FreeRTOS//Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
4786:../Middlewares/FreeRTOS//Source/tasks.c **** 			too. */
4787:../Middlewares/FreeRTOS//Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
4788:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4789:../Middlewares/FreeRTOS//Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
4790:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4791:../Middlewares/FreeRTOS//Source/tasks.c **** 			else
4792:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
4793:../Middlewares/FreeRTOS//Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4794:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
4795:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
4796:../Middlewares/FreeRTOS//Source/tasks.c **** 
4797:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
4798:../Middlewares/FreeRTOS//Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
4799:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
4800:../Middlewares/FreeRTOS//Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
4801:../Middlewares/FreeRTOS//Source/tasks.c **** }
 632              		.loc 1 4801 0
 633 0058 0FE0     		b	.L45
 634              	.LVL59:
 635              	.L51:
4721:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 636              		.loc 1 4721 0 discriminator 1
 637 005a 002E     		cmp	r6, #0
 638 005c E9D0     		beq	.L47
4726:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 639              		.loc 1 4726 0
 640 005e 084B     		ldr	r3, .L53+4
 641 0060 1968     		ldr	r1, [r3]
 642 0062 0431     		adds	r1, r1, #4
 643 0064 0A48     		ldr	r0, .L53+20
 644 0066 FFF7FEFF 		bl	vListInsertEnd
 645              	.LVL60:
 646 006a 06E0     		b	.L45
 647              	.LVL61:
 648              	.L52:
4742:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 649              		.loc 1 4742 0
 650 006c 094B     		ldr	r3, .L53+24
 651 006e 1868     		ldr	r0, [r3]
 652 0070 034B     		ldr	r3, .L53+4
 653 0072 1968     		ldr	r1, [r3]
 654 0074 0431     		adds	r1, r1, #4
 655 0076 FFF7FEFF 		bl	vListInsert
 656              	.LVL62:
 657              	.L45:
 658              		.loc 1 4801 0
 659 007a 70BD     		pop	{r4, r5, r6, pc}
 660              	.LVL63:
 661              	.L54:
 662              		.align	2
 663              	.L53:
 664 007c 00000000 		.word	.LANCHOR14
 665 0080 00000000 		.word	.LANCHOR10
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 102


 666 0084 00000000 		.word	.LANCHOR13
 667 0088 00000000 		.word	.LANCHOR2
 668 008c 00000000 		.word	.LANCHOR3
 669 0090 00000000 		.word	.LANCHOR0
 670 0094 00000000 		.word	.LANCHOR8
 671              		.cfi_endproc
 672              	.LFE189:
 674              		.section	.text.prvWriteNameToBuffer,"ax",%progbits
 675              		.align	1
 676              		.syntax unified
 677              		.thumb
 678              		.thumb_func
 679              		.fpu fpv4-sp-d16
 681              	prvWriteNameToBuffer:
 682              	.LFB178:
3917:../Middlewares/FreeRTOS//Source/tasks.c **** 	size_t x;
 683              		.loc 1 3917 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 687              	.LVL64:
 688 0000 10B5     		push	{r4, lr}
 689              	.LCFI5:
 690              		.cfi_def_cfa_offset 8
 691              		.cfi_offset 4, -8
 692              		.cfi_offset 14, -4
 693 0002 0446     		mov	r4, r0
3921:../Middlewares/FreeRTOS//Source/tasks.c **** 
 694              		.loc 1 3921 0
 695 0004 FFF7FEFF 		bl	strcpy
 696              	.LVL65:
3925:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 697              		.loc 1 3925 0
 698 0008 2046     		mov	r0, r4
 699 000a FFF7FEFF 		bl	strlen
 700              	.LVL66:
 701 000e 02E0     		b	.L56
 702              	.L57:
3927:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 703              		.loc 1 3927 0 discriminator 3
 704 0010 2023     		movs	r3, #32
 705 0012 2354     		strb	r3, [r4, r0]
3925:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 706              		.loc 1 3925 0 discriminator 3
 707 0014 0130     		adds	r0, r0, #1
 708              	.LVL67:
 709              	.L56:
3925:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 710              		.loc 1 3925 0 is_stmt 0 discriminator 1
 711 0016 1228     		cmp	r0, #18
 712 0018 FAD9     		bls	.L57
3931:../Middlewares/FreeRTOS//Source/tasks.c **** 
 713              		.loc 1 3931 0 is_stmt 1
 714 001a 0023     		movs	r3, #0
 715 001c 2354     		strb	r3, [r4, r0]
3935:../Middlewares/FreeRTOS//Source/tasks.c **** 
 716              		.loc 1 3935 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 103


 717 001e 2044     		add	r0, r0, r4
 718              	.LVL68:
 719 0020 10BD     		pop	{r4, pc}
 720              		.cfi_endproc
 721              	.LFE178:
 723              		.section	.text.xTaskCreate,"ax",%progbits
 724              		.align	1
 725              		.global	xTaskCreate
 726              		.syntax unified
 727              		.thumb
 728              		.thumb_func
 729              		.fpu fpv4-sp-d16
 731              	xTaskCreate:
 732              	.LFB131:
 682:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxNewTCB;
 733              		.loc 1 682 0
 734              		.cfi_startproc
 735              		@ args = 8, pretend = 0, frame = 0
 736              		@ frame_needed = 0, uses_anonymous_args = 0
 737              	.LVL69:
 738 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 739              	.LCFI6:
 740              		.cfi_def_cfa_offset 28
 741              		.cfi_offset 4, -28
 742              		.cfi_offset 5, -24
 743              		.cfi_offset 6, -20
 744              		.cfi_offset 7, -16
 745              		.cfi_offset 8, -12
 746              		.cfi_offset 9, -8
 747              		.cfi_offset 14, -4
 748 0004 85B0     		sub	sp, sp, #20
 749              	.LCFI7:
 750              		.cfi_def_cfa_offset 48
 751 0006 0746     		mov	r7, r0
 752 0008 8846     		mov	r8, r1
 753 000a 1546     		mov	r5, r2
 754 000c 9946     		mov	r9, r3
 755              	.LBB104:
 716:../Middlewares/FreeRTOS//Source/tasks.c **** 
 756              		.loc 1 716 0
 757 000e 9000     		lsls	r0, r2, #2
 758              	.LVL70:
 759 0010 FFF7FEFF 		bl	pvPortMalloc
 760              	.LVL71:
 718:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 761              		.loc 1 718 0
 762 0014 F8B1     		cbz	r0, .L63
 763 0016 0646     		mov	r6, r0
 721:../Middlewares/FreeRTOS//Source/tasks.c **** 
 764              		.loc 1 721 0
 765 0018 6420     		movs	r0, #100
 766              	.LVL72:
 767 001a FFF7FEFF 		bl	pvPortMalloc
 768              	.LVL73:
 723:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 769              		.loc 1 723 0
 770 001e 0446     		mov	r4, r0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 104


 771 0020 A8B1     		cbz	r0, .L61
 726:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 772              		.loc 1 726 0
 773 0022 0663     		str	r6, [r0, #48]
 774              	.LVL74:
 775              	.L62:
 776              	.LBE104:
 742:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 777              		.loc 1 742 0
 778 0024 D4B1     		cbz	r4, .L64
 752:../Middlewares/FreeRTOS//Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 779              		.loc 1 752 0
 780 0026 0023     		movs	r3, #0
 781 0028 0393     		str	r3, [sp, #12]
 782 002a 0294     		str	r4, [sp, #8]
 783 002c 0D9B     		ldr	r3, [sp, #52]
 784 002e 0193     		str	r3, [sp, #4]
 785 0030 0C9B     		ldr	r3, [sp, #48]
 786 0032 0093     		str	r3, [sp]
 787 0034 4B46     		mov	r3, r9
 788 0036 2A46     		mov	r2, r5
 789 0038 4146     		mov	r1, r8
 790 003a 3846     		mov	r0, r7
 791 003c FFF7FEFF 		bl	prvInitialiseNewTask
 792              	.LVL75:
 753:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = pdPASS;
 793              		.loc 1 753 0
 794 0040 2046     		mov	r0, r4
 795 0042 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 796              	.LVL76:
 754:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 797              		.loc 1 754 0
 798 0046 0120     		movs	r0, #1
 799              	.LVL77:
 800              	.L59:
 762:../Middlewares/FreeRTOS//Source/tasks.c **** 
 801              		.loc 1 762 0
 802 0048 05B0     		add	sp, sp, #20
 803              	.LCFI8:
 804              		.cfi_remember_state
 805              		.cfi_def_cfa_offset 28
 806              		@ sp needed
 807 004a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 808              	.LVL78:
 809              	.L61:
 810              	.LCFI9:
 811              		.cfi_restore_state
 812              	.LBB105:
 732:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 813              		.loc 1 732 0
 814 004e 3046     		mov	r0, r6
 815              	.LVL79:
 816 0050 FFF7FEFF 		bl	vPortFree
 817              	.LVL80:
 818 0054 E6E7     		b	.L62
 819              	.LVL81:
 820              	.L63:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 105


 821              	.LBE105:
 758:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 822              		.loc 1 758 0
 823 0056 4FF0FF30 		mov	r0, #-1
 824              	.LVL82:
 825 005a F5E7     		b	.L59
 826              	.LVL83:
 827              	.L64:
 828 005c 4FF0FF30 		mov	r0, #-1
 829              	.LVL84:
 761:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 830              		.loc 1 761 0
 831 0060 F2E7     		b	.L59
 832              		.cfi_endproc
 833              	.LFE131:
 835              		.section	.text.vTaskDelete,"ax",%progbits
 836              		.align	1
 837              		.global	vTaskDelete
 838              		.syntax unified
 839              		.thumb
 840              		.thumb_func
 841              		.fpu fpv4-sp-d16
 843              	vTaskDelete:
 844              	.LFB134:
1049:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
 845              		.loc 1 1049 0
 846              		.cfi_startproc
 847              		@ args = 0, pretend = 0, frame = 0
 848              		@ frame_needed = 0, uses_anonymous_args = 0
 849              	.LVL85:
 850 0000 38B5     		push	{r3, r4, r5, lr}
 851              	.LCFI10:
 852              		.cfi_def_cfa_offset 16
 853              		.cfi_offset 3, -16
 854              		.cfi_offset 4, -12
 855              		.cfi_offset 5, -8
 856              		.cfi_offset 14, -4
 857 0002 0446     		mov	r4, r0
1052:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 858              		.loc 1 1052 0
 859 0004 FFF7FEFF 		bl	vPortEnterCritical
 860              	.LVL86:
1056:../Middlewares/FreeRTOS//Source/tasks.c **** 
 861              		.loc 1 1056 0
 862 0008 002C     		cmp	r4, #0
 863 000a 34D0     		beq	.L76
 864              	.LVL87:
 865              	.L67:
1059:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 866              		.loc 1 1059 0 discriminator 4
 867 000c 251D     		adds	r5, r4, #4
 868 000e 2846     		mov	r0, r5
 869 0010 FFF7FEFF 		bl	uxListRemove
 870              	.LVL88:
 871 0014 70B9     		cbnz	r0, .L68
1061:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 872              		.loc 1 1061 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 106


 873 0016 E26A     		ldr	r2, [r4, #44]
 874 0018 02EB8201 		add	r1, r2, r2, lsl #2
 875 001c 8B00     		lsls	r3, r1, #2
 876 001e 2649     		ldr	r1, .L79
 877 0020 CB58     		ldr	r3, [r1, r3]
 878 0022 3BB9     		cbnz	r3, .L68
1061:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 879              		.loc 1 1061 0 is_stmt 0 discriminator 1
 880 0024 0123     		movs	r3, #1
 881 0026 03FA02F2 		lsl	r2, r3, r2
 882 002a 2449     		ldr	r1, .L79+4
 883 002c 0B68     		ldr	r3, [r1]
 884 002e 23EA0203 		bic	r3, r3, r2
 885 0032 0B60     		str	r3, [r1]
 886              	.L68:
1069:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 887              		.loc 1 1069 0 is_stmt 1
 888 0034 A36A     		ldr	r3, [r4, #40]
 889 0036 1BB1     		cbz	r3, .L69
1071:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 890              		.loc 1 1071 0
 891 0038 04F11800 		add	r0, r4, #24
 892 003c FFF7FEFF 		bl	uxListRemove
 893              	.LVL89:
 894              	.L69:
1082:../Middlewares/FreeRTOS//Source/tasks.c **** 
 895              		.loc 1 1082 0
 896 0040 1F4A     		ldr	r2, .L79+8
 897 0042 1368     		ldr	r3, [r2]
 898 0044 0133     		adds	r3, r3, #1
 899 0046 1360     		str	r3, [r2]
1084:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 900              		.loc 1 1084 0
 901 0048 1E4B     		ldr	r3, .L79+12
 902 004a 1B68     		ldr	r3, [r3]
 903 004c A342     		cmp	r3, r4
 904 004e 15D0     		beq	.L77
1107:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 905              		.loc 1 1107 0
 906 0050 1D4A     		ldr	r2, .L79+16
 907 0052 1368     		ldr	r3, [r2]
 908 0054 013B     		subs	r3, r3, #1
 909 0056 1360     		str	r3, [r2]
1108:../Middlewares/FreeRTOS//Source/tasks.c **** 
 910              		.loc 1 1108 0
 911 0058 2046     		mov	r0, r4
 912 005a FFF7FEFF 		bl	prvDeleteTCB
 913              	.LVL90:
1112:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 914              		.loc 1 1112 0
 915 005e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 916              	.LVL91:
 917              	.L71:
1117:../Middlewares/FreeRTOS//Source/tasks.c **** 
 918              		.loc 1 1117 0
 919 0062 FFF7FEFF 		bl	vPortExitCritical
 920              	.LVL92:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 107


1121:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 921              		.loc 1 1121 0
 922 0066 194B     		ldr	r3, .L79+20
 923 0068 1B68     		ldr	r3, [r3]
 924 006a 1BB1     		cbz	r3, .L66
1123:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 925              		.loc 1 1123 0
 926 006c 154B     		ldr	r3, .L79+12
 927 006e 1B68     		ldr	r3, [r3]
 928 0070 A342     		cmp	r3, r4
 929 0072 0CD0     		beq	.L78
 930              	.L66:
1133:../Middlewares/FreeRTOS//Source/tasks.c **** 
 931              		.loc 1 1133 0
 932 0074 38BD     		pop	{r3, r4, r5, pc}
 933              	.LVL93:
 934              	.L76:
1056:../Middlewares/FreeRTOS//Source/tasks.c **** 
 935              		.loc 1 1056 0 discriminator 1
 936 0076 134B     		ldr	r3, .L79+12
 937 0078 1C68     		ldr	r4, [r3]
 938              	.LVL94:
 939 007a C7E7     		b	.L67
 940              	.LVL95:
 941              	.L77:
1091:../Middlewares/FreeRTOS//Source/tasks.c **** 
 942              		.loc 1 1091 0
 943 007c 2946     		mov	r1, r5
 944 007e 1448     		ldr	r0, .L79+24
 945 0080 FFF7FEFF 		bl	vListInsertEnd
 946              	.LVL96:
1096:../Middlewares/FreeRTOS//Source/tasks.c **** 
 947              		.loc 1 1096 0
 948 0084 134A     		ldr	r2, .L79+28
 949 0086 1368     		ldr	r3, [r2]
 950 0088 0133     		adds	r3, r3, #1
 951 008a 1360     		str	r3, [r2]
 952 008c E9E7     		b	.L71
 953              	.L78:
1125:../Middlewares/FreeRTOS//Source/tasks.c **** 				portYIELD_WITHIN_API();
 954              		.loc 1 1125 0
 955 008e 124B     		ldr	r3, .L79+32
 956 0090 1B68     		ldr	r3, [r3]
 957 0092 43B1     		cbz	r3, .L73
 958              	.LBB106:
 959              	.LBB107:
 960              		.loc 2 237 0
 961              		.syntax unified
 962              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 963 0094 4FF01003 			mov r3, #16												
 964 0098 83F31188 		msr basepri, r3											
 965 009c BFF36F8F 		isb														
 966 00a0 BFF34F8F 		dsb														
 967              	
 968              	@ 0 "" 2
 969              	.LVL97:
 970              		.thumb
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 108


 971              		.syntax unified
 972              	.L74:
 973 00a4 FEE7     		b	.L74
 974              	.L73:
 975              	.LBE107:
 976              	.LBE106:
1126:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 977              		.loc 1 1126 0
 978 00a6 0D4B     		ldr	r3, .L79+36
 979 00a8 4FF08052 		mov	r2, #268435456
 980 00ac 1A60     		str	r2, [r3]
 981              		.syntax unified
 982              	@ 1126 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 983 00ae BFF34F8F 		dsb
 984              	@ 0 "" 2
 985              	@ 1126 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 986 00b2 BFF36F8F 		isb
 987              	@ 0 "" 2
1133:../Middlewares/FreeRTOS//Source/tasks.c **** 
 988              		.loc 1 1133 0
 989              		.thumb
 990              		.syntax unified
 991 00b6 DDE7     		b	.L66
 992              	.L80:
 993              		.align	2
 994              	.L79:
 995 00b8 00000000 		.word	.LANCHOR4
 996 00bc 00000000 		.word	.LANCHOR13
 997 00c0 00000000 		.word	.LANCHOR12
 998 00c4 00000000 		.word	.LANCHOR10
 999 00c8 00000000 		.word	.LANCHOR9
 1000 00cc 00000000 		.word	.LANCHOR11
 1001 00d0 00000000 		.word	.LANCHOR7
 1002 00d4 00000000 		.word	.LANCHOR15
 1003 00d8 00000000 		.word	.LANCHOR16
 1004 00dc 04ED00E0 		.word	-536810236
 1005              		.cfi_endproc
 1006              	.LFE134:
 1008              		.section	.text.eTaskGetState,"ax",%progbits
 1009              		.align	1
 1010              		.global	eTaskGetState
 1011              		.syntax unified
 1012              		.thumb
 1013              		.thumb_func
 1014              		.fpu fpv4-sp-d16
 1016              	eTaskGetState:
 1017              	.LFB137:
1270:../Middlewares/FreeRTOS//Source/tasks.c **** 	eTaskState eReturn;
 1018              		.loc 1 1270 0
 1019              		.cfi_startproc
 1020              		@ args = 0, pretend = 0, frame = 0
 1021              		@ frame_needed = 0, uses_anonymous_args = 0
 1022              	.LVL98:
 1023 0000 38B5     		push	{r3, r4, r5, lr}
 1024              	.LCFI11:
 1025              		.cfi_def_cfa_offset 16
 1026              		.cfi_offset 3, -16
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 109


 1027              		.cfi_offset 4, -12
 1028              		.cfi_offset 5, -8
 1029              		.cfi_offset 14, -4
 1030              	.LVL99:
1275:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1031              		.loc 1 1275 0
 1032 0002 D0B1     		cbz	r0, .L93
 1033 0004 0546     		mov	r5, r0
1277:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 1034              		.loc 1 1277 0
 1035 0006 194B     		ldr	r3, .L96
 1036 0008 1B68     		ldr	r3, [r3]
 1037 000a 8342     		cmp	r3, r0
 1038 000c 24D0     		beq	.L86
1284:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 1039              		.loc 1 1284 0
 1040 000e FFF7FEFF 		bl	vPortEnterCritical
 1041              	.LVL100:
1286:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 1042              		.loc 1 1286 0
 1043 0012 6C69     		ldr	r4, [r5, #20]
 1044              	.LVL101:
1288:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1045              		.loc 1 1288 0
 1046 0014 FFF7FEFF 		bl	vPortExitCritical
 1047              	.LVL102:
1290:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 1048              		.loc 1 1290 0
 1049 0018 154B     		ldr	r3, .L96+4
 1050 001a 1B68     		ldr	r3, [r3]
 1051 001c A342     		cmp	r3, r4
 1052 001e 1DD0     		beq	.L87
1290:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 1053              		.loc 1 1290 0 is_stmt 0 discriminator 1
 1054 0020 144B     		ldr	r3, .L96+8
 1055 0022 1B68     		ldr	r3, [r3]
 1056 0024 A342     		cmp	r3, r4
 1057 0026 1BD0     		beq	.L88
1298:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 1058              		.loc 1 1298 0 is_stmt 1
 1059 0028 134B     		ldr	r3, .L96+12
 1060 002a 9C42     		cmp	r4, r3
 1061 002c 0ED0     		beq	.L94
1315:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 1062              		.loc 1 1315 0
 1063 002e 134B     		ldr	r3, .L96+16
 1064 0030 9C42     		cmp	r4, r3
 1065 0032 19D0     		beq	.L90
1315:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 1066              		.loc 1 1315 0 is_stmt 0 discriminator 1
 1067 0034 74B1     		cbz	r4, .L95
1328:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 1068              		.loc 1 1328 0 is_stmt 1
 1069 0036 0120     		movs	r0, #1
 1070 0038 0FE0     		b	.L84
 1071              	.LVL103:
 1072              	.L93:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 110


 1073              	.LBB108:
 1074              	.LBB109:
 1075              		.loc 2 237 0
 1076              		.syntax unified
 1077              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1078 003a 4FF01003 			mov r3, #16												
 1079 003e 83F31188 		msr basepri, r3											
 1080 0042 BFF36F8F 		isb														
 1081 0046 BFF34F8F 		dsb														
 1082              	
 1083              	@ 0 "" 2
 1084              	.LVL104:
 1085              		.thumb
 1086              		.syntax unified
 1087              	.L83:
 1088 004a FEE7     		b	.L83
 1089              	.LVL105:
 1090              	.L94:
 1091              	.LBE109:
 1092              	.LBE108:
1303:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 1093              		.loc 1 1303 0
 1094 004c AB6A     		ldr	r3, [r5, #40]
 1095 004e 4BB9     		cbnz	r3, .L89
1305:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 1096              		.loc 1 1305 0
 1097 0050 0320     		movs	r0, #3
 1098 0052 02E0     		b	.L84
 1099              	.L95:
1320:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 1100              		.loc 1 1320 0
 1101 0054 0420     		movs	r0, #4
 1102 0056 00E0     		b	.L84
 1103              	.LVL106:
 1104              	.L86:
1280:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 1105              		.loc 1 1280 0
 1106 0058 0020     		movs	r0, #0
 1107              	.LVL107:
 1108              	.L84:
1333:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1109              		.loc 1 1333 0
 1110 005a 38BD     		pop	{r3, r4, r5, pc}
 1111              	.LVL108:
 1112              	.L87:
1294:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 1113              		.loc 1 1294 0
 1114 005c 0220     		movs	r0, #2
 1115 005e FCE7     		b	.L84
 1116              	.L88:
 1117 0060 0220     		movs	r0, #2
 1118 0062 FAE7     		b	.L84
 1119              	.L89:
1309:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 1120              		.loc 1 1309 0
 1121 0064 0220     		movs	r0, #2
 1122 0066 F8E7     		b	.L84
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 111


 1123              	.L90:
1320:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 1124              		.loc 1 1320 0
 1125 0068 0420     		movs	r0, #4
 1126 006a F6E7     		b	.L84
 1127              	.L97:
 1128              		.align	2
 1129              	.L96:
 1130 006c 00000000 		.word	.LANCHOR10
 1131 0070 00000000 		.word	.LANCHOR2
 1132 0074 00000000 		.word	.LANCHOR8
 1133 0078 00000000 		.word	.LANCHOR0
 1134 007c 00000000 		.word	.LANCHOR7
 1135              		.cfi_endproc
 1136              	.LFE137:
 1138              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1139              		.align	1
 1140              		.global	uxTaskPriorityGet
 1141              		.syntax unified
 1142              		.thumb
 1143              		.thumb_func
 1144              		.fpu fpv4-sp-d16
 1146              	uxTaskPriorityGet:
 1147              	.LFB138:
1341:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
 1148              		.loc 1 1341 0
 1149              		.cfi_startproc
 1150              		@ args = 0, pretend = 0, frame = 0
 1151              		@ frame_needed = 0, uses_anonymous_args = 0
 1152              	.LVL109:
 1153 0000 10B5     		push	{r4, lr}
 1154              	.LCFI12:
 1155              		.cfi_def_cfa_offset 8
 1156              		.cfi_offset 4, -8
 1157              		.cfi_offset 14, -4
 1158 0002 0446     		mov	r4, r0
1345:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 1159              		.loc 1 1345 0
 1160 0004 FFF7FEFF 		bl	vPortEnterCritical
 1161              	.LVL110:
1349:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1162              		.loc 1 1349 0
 1163 0008 24B1     		cbz	r4, .L101
 1164              	.LVL111:
 1165              	.L99:
1350:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 1166              		.loc 1 1350 0 discriminator 4
 1167 000a E46A     		ldr	r4, [r4, #44]
 1168              	.LVL112:
1352:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1169              		.loc 1 1352 0 discriminator 4
 1170 000c FFF7FEFF 		bl	vPortExitCritical
 1171              	.LVL113:
1355:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1172              		.loc 1 1355 0 discriminator 4
 1173 0010 2046     		mov	r0, r4
 1174 0012 10BD     		pop	{r4, pc}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 112


 1175              	.LVL114:
 1176              	.L101:
1349:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1177              		.loc 1 1349 0 discriminator 1
 1178 0014 014B     		ldr	r3, .L102
 1179 0016 1C68     		ldr	r4, [r3]
 1180              	.LVL115:
 1181 0018 F7E7     		b	.L99
 1182              	.L103:
 1183 001a 00BF     		.align	2
 1184              	.L102:
 1185 001c 00000000 		.word	.LANCHOR10
 1186              		.cfi_endproc
 1187              	.LFE138:
 1189              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1190              		.align	1
 1191              		.global	uxTaskPriorityGetFromISR
 1192              		.syntax unified
 1193              		.thumb
 1194              		.thumb_func
 1195              		.fpu fpv4-sp-d16
 1197              	uxTaskPriorityGetFromISR:
 1198              	.LFB139:
1363:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
 1199              		.loc 1 1363 0
 1200              		.cfi_startproc
 1201              		@ args = 0, pretend = 0, frame = 0
 1202              		@ frame_needed = 0, uses_anonymous_args = 0
 1203              	.LVL116:
 1204 0000 10B5     		push	{r4, lr}
 1205              	.LCFI13:
 1206              		.cfi_def_cfa_offset 8
 1207              		.cfi_offset 4, -8
 1208              		.cfi_offset 14, -4
 1209 0002 0446     		mov	r4, r0
1383:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1210              		.loc 1 1383 0
 1211 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1212              	.LVL117:
 1213              	.LBB110:
 1214              	.LBB111:
 238:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 245:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 113


 1215              		.loc 2 253 0
 1216              		.syntax unified
 1217              	@ 253 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1218 0008 EFF31183 			mrs r3, basepri											
 1219 000c 4FF01002 		mov r2, #16												
 1220 0010 82F31188 		msr basepri, r2											
 1221 0014 BFF36F8F 		isb														
 1222 0018 BFF34F8F 		dsb														
 1223              	
 1224              	@ 0 "" 2
 1225              		.thumb
 1226              		.syntax unified
 1227              	.LBE111:
 1228              	.LBE110:
1389:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1229              		.loc 1 1389 0
 1230 001c 1CB1     		cbz	r4, .L107
 1231              	.LVL118:
 1232              	.L105:
1390:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 1233              		.loc 1 1390 0 discriminator 4
 1234 001e E06A     		ldr	r0, [r4, #44]
 1235              	.LVL119:
 1236              	.LBB112:
 1237              	.LBB113:
 254:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 262:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 266:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1238              		.loc 2 271 0 discriminator 4
 1239              		.syntax unified
 1240              	@ 271 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1241 0020 83F31188 			msr basepri, r3	
 1242              	@ 0 "" 2
 1243              	.LVL120:
 1244              		.thumb
 1245              		.syntax unified
 1246              	.LBE113:
 1247              	.LBE112:
1395:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1248              		.loc 1 1395 0 discriminator 4
 1249 0024 10BD     		pop	{r4, pc}
 1250              	.LVL121:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 114


 1251              	.L107:
1389:../Middlewares/FreeRTOS//Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1252              		.loc 1 1389 0 discriminator 1
 1253 0026 014A     		ldr	r2, .L108
 1254 0028 1468     		ldr	r4, [r2]
 1255              	.LVL122:
 1256 002a F8E7     		b	.L105
 1257              	.L109:
 1258              		.align	2
 1259              	.L108:
 1260 002c 00000000 		.word	.LANCHOR10
 1261              		.cfi_endproc
 1262              	.LFE139:
 1264              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1265              		.align	1
 1266              		.global	vTaskPrioritySet
 1267              		.syntax unified
 1268              		.thumb
 1269              		.thumb_func
 1270              		.fpu fpv4-sp-d16
 1272              	vTaskPrioritySet:
 1273              	.LFB140:
1403:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
 1274              		.loc 1 1403 0
 1275              		.cfi_startproc
 1276              		@ args = 0, pretend = 0, frame = 0
 1277              		@ frame_needed = 0, uses_anonymous_args = 0
 1278              	.LVL123:
 1279 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1280              	.LCFI14:
 1281              		.cfi_def_cfa_offset 24
 1282              		.cfi_offset 3, -24
 1283              		.cfi_offset 4, -20
 1284              		.cfi_offset 5, -16
 1285              		.cfi_offset 6, -12
 1286              		.cfi_offset 7, -8
 1287              		.cfi_offset 14, -4
 1288              	.LVL124:
1408:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1289              		.loc 1 1408 0
 1290 0002 0929     		cmp	r1, #9
 1291 0004 08D9     		bls	.L111
 1292              	.LBB114:
 1293              	.LBB115:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1294              		.loc 2 237 0
 1295              		.syntax unified
 1296              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1297 0006 4FF01003 			mov r3, #16												
 1298 000a 83F31188 		msr basepri, r3											
 1299 000e BFF36F8F 		isb														
 1300 0012 BFF34F8F 		dsb														
 1301              	
 1302              	@ 0 "" 2
 1303              	.LVL125:
 1304              		.thumb
 1305              		.syntax unified
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 115


 1306              	.L112:
 1307 0016 FEE7     		b	.L112
 1308              	.L111:
 1309 0018 0446     		mov	r4, r0
 1310 001a 0D46     		mov	r5, r1
 1311              	.LVL126:
 1312              	.LBE115:
 1313              	.LBE114:
1420:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 1314              		.loc 1 1420 0
 1315 001c FFF7FEFF 		bl	vPortEnterCritical
 1316              	.LVL127:
1424:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1317              		.loc 1 1424 0
 1318 0020 0CB9     		cbnz	r4, .L113
1424:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1319              		.loc 1 1424 0 is_stmt 0 discriminator 1
 1320 0022 2A4B     		ldr	r3, .L125
 1321 0024 1C68     		ldr	r4, [r3]
 1322              	.LVL128:
 1323              	.L113:
1430:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 1324              		.loc 1 1430 0 is_stmt 1 discriminator 4
 1325 0026 236D     		ldr	r3, [r4, #80]
 1326              	.LVL129:
1438:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 1327              		.loc 1 1438 0 discriminator 4
 1328 0028 9D42     		cmp	r5, r3
 1329 002a 40D0     		beq	.L114
1442:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 1330              		.loc 1 1442 0
 1331 002c 42D9     		bls	.L115
1444:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 1332              		.loc 1 1444 0
 1333 002e 274A     		ldr	r2, .L125
 1334 0030 1268     		ldr	r2, [r2]
 1335 0032 A242     		cmp	r2, r4
 1336 0034 44D0     		beq	.L121
1449:../Middlewares/FreeRTOS//Source/tasks.c **** 						{
 1337              		.loc 1 1449 0
 1338 0036 254A     		ldr	r2, .L125
 1339 0038 1268     		ldr	r2, [r2]
 1340 003a D26A     		ldr	r2, [r2, #44]
 1341 003c AA42     		cmp	r2, r5
 1342 003e 41D9     		bls	.L122
1406:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1343              		.loc 1 1406 0
 1344 0040 0026     		movs	r6, #0
 1345              	.L116:
 1346              	.LVL130:
1482:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1347              		.loc 1 1482 0
 1348 0042 E76A     		ldr	r7, [r4, #44]
 1349              	.LVL131:
1488:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 1350              		.loc 1 1488 0
 1351 0044 BB42     		cmp	r3, r7
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 116


 1352 0046 00D1     		bne	.L117
1490:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 1353              		.loc 1 1490 0
 1354 0048 E562     		str	r5, [r4, #44]
 1355              	.L117:
1498:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 1356              		.loc 1 1498 0
 1357 004a 2565     		str	r5, [r4, #80]
1508:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 1358              		.loc 1 1508 0
 1359 004c A369     		ldr	r3, [r4, #24]
 1360              	.LVL132:
 1361 004e 002B     		cmp	r3, #0
 1362 0050 02DB     		blt	.L118
1510:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 1363              		.loc 1 1510 0
 1364 0052 C5F10A05 		rsb	r5, r5, #10
 1365              	.LVL133:
 1366 0056 A561     		str	r5, [r4, #24]
 1367              	.L118:
1521:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 1368              		.loc 1 1521 0
 1369 0058 6269     		ldr	r2, [r4, #20]
 1370 005a 1D49     		ldr	r1, .L125+4
 1371 005c 1423     		movs	r3, #20
 1372 005e 03FB0713 		mla	r3, r3, r7, r1
 1373 0062 9A42     		cmp	r2, r3
 1374 0064 1AD1     		bne	.L119
1526:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 1375              		.loc 1 1526 0
 1376 0066 251D     		adds	r5, r4, #4
 1377 0068 2846     		mov	r0, r5
 1378 006a FFF7FEFF 		bl	uxListRemove
 1379              	.LVL134:
 1380 006e 38B9     		cbnz	r0, .L120
1531:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 1381              		.loc 1 1531 0
 1382 0070 0123     		movs	r3, #1
 1383 0072 03FA07F2 		lsl	r2, r3, r7
 1384 0076 1749     		ldr	r1, .L125+8
 1385 0078 0B68     		ldr	r3, [r1]
 1386 007a 23EA0203 		bic	r3, r3, r2
 1387 007e 0B60     		str	r3, [r1]
 1388              	.L120:
1537:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 1389              		.loc 1 1537 0
 1390 0080 E26A     		ldr	r2, [r4, #44]
 1391 0082 0123     		movs	r3, #1
 1392 0084 9340     		lsls	r3, r3, r2
 1393 0086 1349     		ldr	r1, .L125+8
 1394 0088 0868     		ldr	r0, [r1]
 1395 008a 0343     		orrs	r3, r3, r0
 1396 008c 0B60     		str	r3, [r1]
 1397 008e 2946     		mov	r1, r5
 1398 0090 0F4B     		ldr	r3, .L125+4
 1399 0092 1420     		movs	r0, #20
 1400 0094 00FB0230 		mla	r0, r0, r2, r3
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 117


 1401 0098 FFF7FEFF 		bl	vListInsertEnd
 1402              	.LVL135:
 1403              	.L119:
1544:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 1404              		.loc 1 1544 0
 1405 009c 3EB1     		cbz	r6, .L114
1546:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 1406              		.loc 1 1546 0
 1407 009e 0E4B     		ldr	r3, .L125+12
 1408 00a0 4FF08052 		mov	r2, #268435456
 1409 00a4 1A60     		str	r2, [r3]
 1410              		.syntax unified
 1411              	@ 1546 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 1412 00a6 BFF34F8F 		dsb
 1413              	@ 0 "" 2
 1414              	@ 1546 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 1415 00aa BFF36F8F 		isb
 1416              	@ 0 "" 2
 1417              	.LVL136:
 1418              		.thumb
 1419              		.syntax unified
 1420              	.L114:
1558:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 1421              		.loc 1 1558 0
 1422 00ae FFF7FEFF 		bl	vPortExitCritical
 1423              	.LVL137:
1559:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1424              		.loc 1 1559 0
 1425 00b2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1426              	.LVL138:
 1427              	.L115:
1465:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 1428              		.loc 1 1465 0
 1429 00b4 054A     		ldr	r2, .L125
 1430 00b6 1268     		ldr	r2, [r2]
 1431 00b8 A242     		cmp	r2, r4
 1432 00ba 05D0     		beq	.L123
1406:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1433              		.loc 1 1406 0
 1434 00bc 0026     		movs	r6, #0
 1435 00be C0E7     		b	.L116
 1436              	.L121:
 1437 00c0 0026     		movs	r6, #0
 1438 00c2 BEE7     		b	.L116
 1439              	.L122:
1451:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
 1440              		.loc 1 1451 0
 1441 00c4 0126     		movs	r6, #1
 1442 00c6 BCE7     		b	.L116
 1443              	.L123:
1470:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 1444              		.loc 1 1470 0
 1445 00c8 0126     		movs	r6, #1
 1446 00ca BAE7     		b	.L116
 1447              	.L126:
 1448              		.align	2
 1449              	.L125:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 118


 1450 00cc 00000000 		.word	.LANCHOR10
 1451 00d0 00000000 		.word	.LANCHOR4
 1452 00d4 00000000 		.word	.LANCHOR13
 1453 00d8 04ED00E0 		.word	-536810236
 1454              		.cfi_endproc
 1455              	.LFE140:
 1457              		.section	.text.vTaskResume,"ax",%progbits
 1458              		.align	1
 1459              		.global	vTaskResume
 1460              		.syntax unified
 1461              		.thumb
 1462              		.thumb_func
 1463              		.fpu fpv4-sp-d16
 1465              	vTaskResume:
 1466              	.LFB143:
1703:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1467              		.loc 1 1703 0
 1468              		.cfi_startproc
 1469              		@ args = 0, pretend = 0, frame = 0
 1470              		@ frame_needed = 0, uses_anonymous_args = 0
 1471              	.LVL139:
 1472 0000 38B5     		push	{r3, r4, r5, lr}
 1473              	.LCFI15:
 1474              		.cfi_def_cfa_offset 16
 1475              		.cfi_offset 3, -16
 1476              		.cfi_offset 4, -12
 1477              		.cfi_offset 5, -8
 1478              		.cfi_offset 14, -4
 1479              	.LVL140:
1707:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1480              		.loc 1 1707 0
 1481 0002 68B1     		cbz	r0, .L133
 1482 0004 0446     		mov	r4, r0
1711:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 1483              		.loc 1 1711 0 discriminator 1
 1484 0006 1B4B     		ldr	r3, .L135
 1485 0008 1B68     		ldr	r3, [r3]
 1486 000a 8342     		cmp	r3, r0
 1487 000c 07D0     		beq	.L127
1713:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 1488              		.loc 1 1713 0
 1489 000e FFF7FEFF 		bl	vPortEnterCritical
 1490              	.LVL141:
1715:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 1491              		.loc 1 1715 0
 1492 0012 2046     		mov	r0, r4
 1493 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1494              	.LVL142:
 1495 0018 58B9     		cbnz	r0, .L134
 1496              	.L131:
1742:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 1497              		.loc 1 1742 0
 1498 001a FFF7FEFF 		bl	vPortExitCritical
 1499              	.LVL143:
 1500              	.L127:
1748:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1501              		.loc 1 1748 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 119


 1502 001e 38BD     		pop	{r3, r4, r5, pc}
 1503              	.LVL144:
 1504              	.L133:
 1505              	.LBB116:
 1506              	.LBB117:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1507              		.loc 2 237 0
 1508              		.syntax unified
 1509              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1510 0020 4FF01003 			mov r3, #16												
 1511 0024 83F31188 		msr basepri, r3											
 1512 0028 BFF36F8F 		isb														
 1513 002c BFF34F8F 		dsb														
 1514              	
 1515              	@ 0 "" 2
 1516              	.LVL145:
 1517              		.thumb
 1518              		.syntax unified
 1519              	.L129:
 1520 0030 FEE7     		b	.L129
 1521              	.LVL146:
 1522              	.L134:
 1523              	.LBE117:
 1524              	.LBE116:
1721:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1525              		.loc 1 1721 0
 1526 0032 251D     		adds	r5, r4, #4
 1527 0034 2846     		mov	r0, r5
 1528 0036 FFF7FEFF 		bl	uxListRemove
 1529              	.LVL147:
1722:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1530              		.loc 1 1722 0
 1531 003a E26A     		ldr	r2, [r4, #44]
 1532 003c 0123     		movs	r3, #1
 1533 003e 9340     		lsls	r3, r3, r2
 1534 0040 0D49     		ldr	r1, .L135+4
 1535 0042 0868     		ldr	r0, [r1]
 1536 0044 0343     		orrs	r3, r3, r0
 1537 0046 0B60     		str	r3, [r1]
 1538 0048 2946     		mov	r1, r5
 1539 004a 0C4B     		ldr	r3, .L135+8
 1540 004c 1420     		movs	r0, #20
 1541 004e 00FB0230 		mla	r0, r0, r2, r3
 1542 0052 FFF7FEFF 		bl	vListInsertEnd
 1543              	.LVL148:
1725:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 1544              		.loc 1 1725 0
 1545 0056 E26A     		ldr	r2, [r4, #44]
 1546 0058 064B     		ldr	r3, .L135
 1547 005a 1B68     		ldr	r3, [r3]
 1548 005c DB6A     		ldr	r3, [r3, #44]
 1549 005e 9A42     		cmp	r2, r3
 1550 0060 DBD3     		bcc	.L131
1730:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 1551              		.loc 1 1730 0
 1552 0062 074B     		ldr	r3, .L135+12
 1553 0064 4FF08052 		mov	r2, #268435456
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 120


 1554 0068 1A60     		str	r2, [r3]
 1555              		.syntax unified
 1556              	@ 1730 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 1557 006a BFF34F8F 		dsb
 1558              	@ 0 "" 2
 1559              	@ 1730 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 1560 006e BFF36F8F 		isb
 1561              	@ 0 "" 2
 1562              		.thumb
 1563              		.syntax unified
 1564 0072 D2E7     		b	.L131
 1565              	.L136:
 1566              		.align	2
 1567              	.L135:
 1568 0074 00000000 		.word	.LANCHOR10
 1569 0078 00000000 		.word	.LANCHOR13
 1570 007c 00000000 		.word	.LANCHOR4
 1571 0080 04ED00E0 		.word	-536810236
 1572              		.cfi_endproc
 1573              	.LFE143:
 1575              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1576              		.align	1
 1577              		.global	xTaskResumeFromISR
 1578              		.syntax unified
 1579              		.thumb
 1580              		.thumb_func
 1581              		.fpu fpv4-sp-d16
 1583              	xTaskResumeFromISR:
 1584              	.LFB144:
1757:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1585              		.loc 1 1757 0
 1586              		.cfi_startproc
 1587              		@ args = 0, pretend = 0, frame = 0
 1588              		@ frame_needed = 0, uses_anonymous_args = 0
 1589              	.LVL149:
 1590 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1591              	.LCFI16:
 1592              		.cfi_def_cfa_offset 24
 1593              		.cfi_offset 3, -24
 1594              		.cfi_offset 4, -20
 1595              		.cfi_offset 5, -16
 1596              		.cfi_offset 6, -12
 1597              		.cfi_offset 7, -8
 1598              		.cfi_offset 14, -4
 1599              	.LVL150:
1762:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1600              		.loc 1 1762 0
 1601 0002 40B9     		cbnz	r0, .L138
 1602              	.LBB118:
 1603              	.LBB119:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1604              		.loc 2 237 0
 1605              		.syntax unified
 1606              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1607 0004 4FF01003 			mov r3, #16												
 1608 0008 83F31188 		msr basepri, r3											
 1609 000c BFF36F8F 		isb														
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 121


 1610 0010 BFF34F8F 		dsb														
 1611              	
 1612              	@ 0 "" 2
 1613              	.LVL151:
 1614              		.thumb
 1615              		.syntax unified
 1616              	.L139:
 1617 0014 FEE7     		b	.L139
 1618              	.L138:
 1619 0016 0446     		mov	r4, r0
 1620              	.LBE119:
 1621              	.LBE118:
1780:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1622              		.loc 1 1780 0
 1623 0018 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1624              	.LVL152:
 1625              	.LBB120:
 1626              	.LBB121:
 253:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1627              		.loc 2 253 0
 1628              		.syntax unified
 1629              	@ 253 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1630 001c EFF31187 			mrs r7, basepri											
 1631 0020 4FF01003 		mov r3, #16												
 1632 0024 83F31188 		msr basepri, r3											
 1633 0028 BFF36F8F 		isb														
 1634 002c BFF34F8F 		dsb														
 1635              	
 1636              	@ 0 "" 2
 1637              		.thumb
 1638              		.syntax unified
 1639              	.LBE121:
 1640              	.LBE120:
1784:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 1641              		.loc 1 1784 0
 1642 0030 2046     		mov	r0, r4
 1643 0032 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1644              	.LVL153:
 1645 0036 40B3     		cbz	r0, .L143
1789:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 1646              		.loc 1 1789 0
 1647 0038 154B     		ldr	r3, .L146
 1648 003a 1B68     		ldr	r3, [r3]
 1649 003c F3B9     		cbnz	r3, .L141
1793:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 1650              		.loc 1 1793 0
 1651 003e E26A     		ldr	r2, [r4, #44]
 1652 0040 144B     		ldr	r3, .L146+4
 1653 0042 1B68     		ldr	r3, [r3]
 1654 0044 DB6A     		ldr	r3, [r3, #44]
 1655 0046 9A42     		cmp	r2, r3
 1656 0048 16D2     		bcs	.L144
1758:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1657              		.loc 1 1758 0
 1658 004a 0025     		movs	r5, #0
 1659              	.L142:
 1660              	.LVL154:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 122


1802:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1661              		.loc 1 1802 0
 1662 004c 261D     		adds	r6, r4, #4
 1663 004e 3046     		mov	r0, r6
 1664 0050 FFF7FEFF 		bl	uxListRemove
 1665              	.LVL155:
1803:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 1666              		.loc 1 1803 0
 1667 0054 E26A     		ldr	r2, [r4, #44]
 1668 0056 0123     		movs	r3, #1
 1669 0058 9340     		lsls	r3, r3, r2
 1670 005a 0F49     		ldr	r1, .L146+8
 1671 005c 0868     		ldr	r0, [r1]
 1672 005e 0343     		orrs	r3, r3, r0
 1673 0060 0B60     		str	r3, [r1]
 1674 0062 3146     		mov	r1, r6
 1675 0064 0D4B     		ldr	r3, .L146+12
 1676 0066 1420     		movs	r0, #20
 1677 0068 00FB0230 		mla	r0, r0, r2, r3
 1678 006c FFF7FEFF 		bl	vListInsertEnd
 1679              	.LVL156:
 1680              	.L140:
 1681              	.LBB122:
 1682              	.LBB123:
 1683              		.loc 2 271 0
 1684              		.syntax unified
 1685              	@ 271 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1686 0070 87F31188 			msr basepri, r7	
 1687              	@ 0 "" 2
 1688              	.LVL157:
 1689              		.thumb
 1690              		.syntax unified
 1691              	.LBE123:
 1692              	.LBE122:
1821:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1693              		.loc 1 1821 0
 1694 0074 2846     		mov	r0, r5
 1695 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1696              	.LVL158:
 1697              	.L144:
1795:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 1698              		.loc 1 1795 0
 1699 0078 0125     		movs	r5, #1
 1700 007a E7E7     		b	.L142
 1701              	.L141:
1810:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 1702              		.loc 1 1810 0
 1703 007c 04F11801 		add	r1, r4, #24
 1704 0080 0748     		ldr	r0, .L146+16
 1705 0082 FFF7FEFF 		bl	vListInsertEnd
 1706              	.LVL159:
1758:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1707              		.loc 1 1758 0
 1708 0086 0025     		movs	r5, #0
 1709 0088 F2E7     		b	.L140
 1710              	.L143:
 1711 008a 0025     		movs	r5, #0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 123


 1712 008c F0E7     		b	.L140
 1713              	.L147:
 1714 008e 00BF     		.align	2
 1715              	.L146:
 1716 0090 00000000 		.word	.LANCHOR16
 1717 0094 00000000 		.word	.LANCHOR10
 1718 0098 00000000 		.word	.LANCHOR13
 1719 009c 00000000 		.word	.LANCHOR4
 1720 00a0 00000000 		.word	.LANCHOR1
 1721              		.cfi_endproc
 1722              	.LFE144:
 1724              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1725              		.align	1
 1726              		.global	vTaskStartScheduler
 1727              		.syntax unified
 1728              		.thumb
 1729              		.thumb_func
 1730              		.fpu fpv4-sp-d16
 1732              	vTaskStartScheduler:
 1733              	.LFB145:
1827:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xReturn;
 1734              		.loc 1 1827 0
 1735              		.cfi_startproc
 1736              		@ args = 0, pretend = 0, frame = 0
 1737              		@ frame_needed = 0, uses_anonymous_args = 0
 1738 0000 00B5     		push	{lr}
 1739              	.LCFI17:
 1740              		.cfi_def_cfa_offset 4
 1741              		.cfi_offset 14, -4
 1742 0002 83B0     		sub	sp, sp, #12
 1743              	.LCFI18:
 1744              		.cfi_def_cfa_offset 16
1860:../Middlewares/FreeRTOS//Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
 1745              		.loc 1 1860 0
 1746 0004 1A4B     		ldr	r3, .L157
 1747 0006 0193     		str	r3, [sp, #4]
 1748 0008 0023     		movs	r3, #0
 1749 000a 0093     		str	r3, [sp]
 1750 000c 8222     		movs	r2, #130
 1751 000e 1949     		ldr	r1, .L157+4
 1752 0010 1948     		ldr	r0, .L157+8
 1753 0012 FFF7FEFF 		bl	xTaskCreate
 1754              	.LVL160:
1870:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 1755              		.loc 1 1870 0
 1756 0016 0128     		cmp	r0, #1
 1757 0018 07D0     		beq	.L154
 1758              	.L149:
1881:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 1759              		.loc 1 1881 0
 1760 001a 0128     		cmp	r0, #1
 1761 001c 08D0     		beq	.L155
1924:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 1762              		.loc 1 1924 0
 1763 001e B0F1FF3F 		cmp	r0, #-1
 1764 0022 1CD0     		beq	.L156
 1765              	.LVL161:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 124


 1766              	.L148:
1930:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 1767              		.loc 1 1930 0
 1768 0024 03B0     		add	sp, sp, #12
 1769              	.LCFI19:
 1770              		.cfi_remember_state
 1771              		.cfi_def_cfa_offset 4
 1772              		@ sp needed
 1773 0026 5DF804FB 		ldr	pc, [sp], #4
 1774              	.LVL162:
 1775              	.L154:
 1776              	.LCFI20:
 1777              		.cfi_restore_state
1872:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 1778              		.loc 1 1872 0
 1779 002a FFF7FEFF 		bl	xTimerCreateTimerTask
 1780              	.LVL163:
 1781 002e F4E7     		b	.L149
 1782              	.L155:
 1783              	.LBB124:
 1784              	.LBB125:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1785              		.loc 2 237 0
 1786              		.syntax unified
 1787              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1788 0030 4FF01003 			mov r3, #16												
 1789 0034 83F31188 		msr basepri, r3											
 1790 0038 BFF36F8F 		isb														
 1791 003c BFF34F8F 		dsb														
 1792              	
 1793              	@ 0 "" 2
 1794              		.thumb
 1795              		.syntax unified
 1796              	.LBE125:
 1797              	.LBE124:
1898:../Middlewares/FreeRTOS//Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1798              		.loc 1 1898 0
 1799 0040 0E4B     		ldr	r3, .L157+12
 1800 0042 4FF0FF32 		mov	r2, #-1
 1801 0046 1A60     		str	r2, [r3]
1899:../Middlewares/FreeRTOS//Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1802              		.loc 1 1899 0
 1803 0048 0D4B     		ldr	r3, .L157+16
 1804 004a 0122     		movs	r2, #1
 1805 004c 1A60     		str	r2, [r3]
1900:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1806              		.loc 1 1900 0
 1807 004e 0023     		movs	r3, #0
 1808 0050 0C4A     		ldr	r2, .L157+20
 1809 0052 1360     		str	r3, [r2]
1905:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1810              		.loc 1 1905 0
 1811 0054 0C4A     		ldr	r2, .L157+24
 1812 0056 1360     		str	r3, [r2]
1909:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 1813              		.loc 1 1909 0
 1814 0058 FFF7FEFF 		bl	xPortStartScheduler
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 125


 1815              	.LVL164:
 1816 005c E2E7     		b	.L148
 1817              	.LVL165:
 1818              	.L156:
 1819              	.LBB126:
 1820              	.LBB127:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1821              		.loc 2 237 0
 1822              		.syntax unified
 1823              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1824 005e 4FF01003 			mov r3, #16												
 1825 0062 83F31188 		msr basepri, r3											
 1826 0066 BFF36F8F 		isb														
 1827 006a BFF34F8F 		dsb														
 1828              	
 1829              	@ 0 "" 2
 1830              	.LVL166:
 1831              		.thumb
 1832              		.syntax unified
 1833              	.L152:
 1834 006e FEE7     		b	.L152
 1835              	.L158:
 1836              		.align	2
 1837              	.L157:
 1838 0070 00000000 		.word	.LANCHOR17
 1839 0074 00000000 		.word	.LC0
 1840 0078 00000000 		.word	prvIdleTask
 1841 007c 00000000 		.word	.LANCHOR3
 1842 0080 00000000 		.word	.LANCHOR11
 1843 0084 00000000 		.word	.LANCHOR14
 1844 0088 00000000 		.word	ulHighFrequencyTimerTicks
 1845              	.LBE127:
 1846              	.LBE126:
 1847              		.cfi_endproc
 1848              	.LFE145:
 1850              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1851              		.align	1
 1852              		.global	vTaskEndScheduler
 1853              		.syntax unified
 1854              		.thumb
 1855              		.thumb_func
 1856              		.fpu fpv4-sp-d16
 1858              	vTaskEndScheduler:
 1859              	.LFB146:
1934:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1860              		.loc 1 1934 0
 1861              		.cfi_startproc
 1862              		@ args = 0, pretend = 0, frame = 0
 1863              		@ frame_needed = 0, uses_anonymous_args = 0
 1864 0000 08B5     		push	{r3, lr}
 1865              	.LCFI21:
 1866              		.cfi_def_cfa_offset 8
 1867              		.cfi_offset 3, -8
 1868              		.cfi_offset 14, -4
 1869              	.LBB128:
 1870              	.LBB129:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 126


 1871              		.loc 2 237 0
 1872              		.syntax unified
 1873              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1874 0002 4FF01003 			mov r3, #16												
 1875 0006 83F31188 		msr basepri, r3											
 1876 000a BFF36F8F 		isb														
 1877 000e BFF34F8F 		dsb														
 1878              	
 1879              	@ 0 "" 2
 1880              		.thumb
 1881              		.syntax unified
 1882              	.LBE129:
 1883              	.LBE128:
1939:../Middlewares/FreeRTOS//Source/tasks.c **** 	vPortEndScheduler();
 1884              		.loc 1 1939 0
 1885 0012 034B     		ldr	r3, .L161
 1886 0014 0022     		movs	r2, #0
 1887 0016 1A60     		str	r2, [r3]
1940:../Middlewares/FreeRTOS//Source/tasks.c **** }
 1888              		.loc 1 1940 0
 1889 0018 FFF7FEFF 		bl	vPortEndScheduler
 1890              	.LVL167:
1941:../Middlewares/FreeRTOS//Source/tasks.c **** /*----------------------------------------------------------*/
 1891              		.loc 1 1941 0
 1892 001c 08BD     		pop	{r3, pc}
 1893              	.L162:
 1894 001e 00BF     		.align	2
 1895              	.L161:
 1896 0020 00000000 		.word	.LANCHOR11
 1897              		.cfi_endproc
 1898              	.LFE146:
 1900              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1901              		.align	1
 1902              		.global	vTaskSuspendAll
 1903              		.syntax unified
 1904              		.thumb
 1905              		.thumb_func
 1906              		.fpu fpv4-sp-d16
 1908              	vTaskSuspendAll:
 1909              	.LFB147:
1945:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1910              		.loc 1 1945 0
 1911              		.cfi_startproc
 1912              		@ args = 0, pretend = 0, frame = 0
 1913              		@ frame_needed = 0, uses_anonymous_args = 0
 1914              		@ link register save eliminated.
1950:../Middlewares/FreeRTOS//Source/tasks.c **** }
 1915              		.loc 1 1950 0
 1916 0000 024A     		ldr	r2, .L164
 1917 0002 1368     		ldr	r3, [r2]
 1918 0004 0133     		adds	r3, r3, #1
 1919 0006 1360     		str	r3, [r2]
1951:../Middlewares/FreeRTOS//Source/tasks.c **** /*----------------------------------------------------------*/
 1920              		.loc 1 1951 0
 1921 0008 7047     		bx	lr
 1922              	.L165:
 1923 000a 00BF     		.align	2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 127


 1924              	.L164:
 1925 000c 00000000 		.word	.LANCHOR16
 1926              		.cfi_endproc
 1927              	.LFE147:
 1929              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1930              		.align	1
 1931              		.global	xTaskGetTickCount
 1932              		.syntax unified
 1933              		.thumb
 1934              		.thumb_func
 1935              		.fpu fpv4-sp-d16
 1937              	xTaskGetTickCount:
 1938              	.LFB149:
2128:../Middlewares/FreeRTOS//Source/tasks.c **** TickType_t xTicks;
 1939              		.loc 1 2128 0
 1940              		.cfi_startproc
 1941              		@ args = 0, pretend = 0, frame = 0
 1942              		@ frame_needed = 0, uses_anonymous_args = 0
 1943              		@ link register save eliminated.
2134:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 1944              		.loc 1 2134 0
 1945 0000 014B     		ldr	r3, .L167
 1946 0002 1868     		ldr	r0, [r3]
 1947              	.LVL168:
2139:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 1948              		.loc 1 2139 0
 1949 0004 7047     		bx	lr
 1950              	.L168:
 1951 0006 00BF     		.align	2
 1952              	.L167:
 1953 0008 00000000 		.word	.LANCHOR14
 1954              		.cfi_endproc
 1955              	.LFE149:
 1957              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1958              		.align	1
 1959              		.global	xTaskGetTickCountFromISR
 1960              		.syntax unified
 1961              		.thumb
 1962              		.thumb_func
 1963              		.fpu fpv4-sp-d16
 1965              	xTaskGetTickCountFromISR:
 1966              	.LFB150:
2143:../Middlewares/FreeRTOS//Source/tasks.c **** TickType_t xReturn;
 1967              		.loc 1 2143 0
 1968              		.cfi_startproc
 1969              		@ args = 0, pretend = 0, frame = 0
 1970              		@ frame_needed = 0, uses_anonymous_args = 0
 1971 0000 08B5     		push	{r3, lr}
 1972              	.LCFI22:
 1973              		.cfi_def_cfa_offset 8
 1974              		.cfi_offset 3, -8
 1975              		.cfi_offset 14, -4
2161:../Middlewares/FreeRTOS//Source/tasks.c **** 
 1976              		.loc 1 2161 0
 1977 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1978              	.LVL169:
2165:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 128


 1979              		.loc 1 2165 0
 1980 0006 014B     		ldr	r3, .L171
 1981 0008 1868     		ldr	r0, [r3]
 1982              	.LVL170:
2170:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 1983              		.loc 1 2170 0
 1984 000a 08BD     		pop	{r3, pc}
 1985              	.L172:
 1986              		.align	2
 1987              	.L171:
 1988 000c 00000000 		.word	.LANCHOR14
 1989              		.cfi_endproc
 1990              	.LFE150:
 1992              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1993              		.align	1
 1994              		.global	uxTaskGetNumberOfTasks
 1995              		.syntax unified
 1996              		.thumb
 1997              		.thumb_func
 1998              		.fpu fpv4-sp-d16
 2000              	uxTaskGetNumberOfTasks:
 2001              	.LFB151:
2174:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 2002              		.loc 1 2174 0
 2003              		.cfi_startproc
 2004              		@ args = 0, pretend = 0, frame = 0
 2005              		@ frame_needed = 0, uses_anonymous_args = 0
 2006              		@ link register save eliminated.
2177:../Middlewares/FreeRTOS//Source/tasks.c **** }
 2007              		.loc 1 2177 0
 2008 0000 014B     		ldr	r3, .L174
 2009 0002 1868     		ldr	r0, [r3]
2178:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 2010              		.loc 1 2178 0
 2011 0004 7047     		bx	lr
 2012              	.L175:
 2013 0006 00BF     		.align	2
 2014              	.L174:
 2015 0008 00000000 		.word	.LANCHOR9
 2016              		.cfi_endproc
 2017              	.LFE151:
 2019              		.section	.text.pcTaskGetName,"ax",%progbits
 2020              		.align	1
 2021              		.global	pcTaskGetName
 2022              		.syntax unified
 2023              		.thumb
 2024              		.thumb_func
 2025              		.fpu fpv4-sp-d16
 2027              	pcTaskGetName:
 2028              	.LFB152:
2182:../Middlewares/FreeRTOS//Source/tasks.c **** TCB_t *pxTCB;
 2029              		.loc 1 2182 0
 2030              		.cfi_startproc
 2031              		@ args = 0, pretend = 0, frame = 0
 2032              		@ frame_needed = 0, uses_anonymous_args = 0
 2033              		@ link register save eliminated.
 2034              	.LVL171:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 129


2187:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxTCB );
 2035              		.loc 1 2187 0
 2036 0000 0346     		mov	r3, r0
 2037 0002 18B1     		cbz	r0, .L180
 2038              	.LVL172:
 2039              	.L177:
2188:../Middlewares/FreeRTOS//Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2040              		.loc 1 2188 0 discriminator 4
 2041 0004 2BB1     		cbz	r3, .L181
2190:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 2042              		.loc 1 2190 0
 2043 0006 03F13400 		add	r0, r3, #52
 2044 000a 7047     		bx	lr
 2045              	.LVL173:
 2046              	.L180:
2187:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxTCB );
 2047              		.loc 1 2187 0 discriminator 1
 2048 000c 054B     		ldr	r3, .L182
 2049 000e 1B68     		ldr	r3, [r3]
 2050              	.LVL174:
 2051 0010 F8E7     		b	.L177
 2052              	.LVL175:
 2053              	.L181:
 2054              	.LBB130:
 2055              	.LBB131:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2056              		.loc 2 237 0
 2057              		.syntax unified
 2058              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2059 0012 4FF01003 			mov r3, #16												
 2060 0016 83F31188 		msr basepri, r3											
 2061 001a BFF36F8F 		isb														
 2062 001e BFF34F8F 		dsb														
 2063              	
 2064              	@ 0 "" 2
 2065              	.LVL176:
 2066              		.thumb
 2067              		.syntax unified
 2068              	.L179:
 2069 0022 FEE7     		b	.L179
 2070              	.L183:
 2071              		.align	2
 2072              	.L182:
 2073 0024 00000000 		.word	.LANCHOR10
 2074              	.LBE131:
 2075              	.LBE130:
 2076              		.cfi_endproc
 2077              	.LFE152:
 2079              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2080              		.align	1
 2081              		.global	xTaskIncrementTick
 2082              		.syntax unified
 2083              		.thumb
 2084              		.thumb_func
 2085              		.fpu fpv4-sp-d16
 2087              	xTaskIncrementTick:
 2088              	.LFB154:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 130


2500:../Middlewares/FreeRTOS//Source/tasks.c **** TCB_t * pxTCB;
 2089              		.loc 1 2500 0
 2090              		.cfi_startproc
 2091              		@ args = 0, pretend = 0, frame = 0
 2092              		@ frame_needed = 0, uses_anonymous_args = 0
 2093 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2094              	.LCFI23:
 2095              		.cfi_def_cfa_offset 24
 2096              		.cfi_offset 3, -24
 2097              		.cfi_offset 4, -20
 2098              		.cfi_offset 5, -16
 2099              		.cfi_offset 6, -12
 2100              		.cfi_offset 7, -8
 2101              		.cfi_offset 14, -4
 2102              	.LVL177:
2509:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 2103              		.loc 1 2509 0
 2104 0002 3A4B     		ldr	r3, .L205
 2105 0004 1B68     		ldr	r3, [r3]
 2106 0006 002B     		cmp	r3, #0
 2107 0008 64D1     		bne	.L185
 2108              	.LBB132:
2513:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2109              		.loc 1 2513 0
 2110 000a 394B     		ldr	r3, .L205+4
 2111 000c 1D68     		ldr	r5, [r3]
 2112 000e 0135     		adds	r5, r5, #1
 2113              	.LVL178:
2517:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2114              		.loc 1 2517 0
 2115 0010 1D60     		str	r5, [r3]
2519:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 2116              		.loc 1 2519 0
 2117 0012 C5B9     		cbnz	r5, .L186
 2118              	.LBB133:
2521:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 2119              		.loc 1 2521 0
 2120 0014 374B     		ldr	r3, .L205+8
 2121 0016 1B68     		ldr	r3, [r3]
 2122 0018 1B68     		ldr	r3, [r3]
 2123 001a 43B1     		cbz	r3, .L187
 2124              	.LBB134:
 2125              	.LBB135:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2126              		.loc 2 237 0
 2127              		.syntax unified
 2128              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2129 001c 4FF01003 			mov r3, #16												
 2130 0020 83F31188 		msr basepri, r3											
 2131 0024 BFF36F8F 		isb														
 2132 0028 BFF34F8F 		dsb														
 2133              	
 2134              	@ 0 "" 2
 2135              	.LVL179:
 2136              		.thumb
 2137              		.syntax unified
 2138              	.L188:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 131


 2139 002c FEE7     		b	.L188
 2140              	.L187:
 2141              	.LBE135:
 2142              	.LBE134:
2521:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 2143              		.loc 1 2521 0 discriminator 2
 2144 002e 314A     		ldr	r2, .L205+8
 2145 0030 1168     		ldr	r1, [r2]
 2146              	.LVL180:
 2147 0032 314B     		ldr	r3, .L205+12
 2148 0034 1868     		ldr	r0, [r3]
 2149 0036 1060     		str	r0, [r2]
 2150 0038 1960     		str	r1, [r3]
 2151 003a 304A     		ldr	r2, .L205+16
 2152 003c 1368     		ldr	r3, [r2]
 2153 003e 0133     		adds	r3, r3, #1
 2154 0040 1360     		str	r3, [r2]
 2155 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2156              	.LVL181:
 2157              	.L186:
 2158              	.LBE133:
2532:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 2159              		.loc 1 2532 0
 2160 0046 2E4B     		ldr	r3, .L205+20
 2161 0048 1B68     		ldr	r3, [r3]
 2162 004a AB42     		cmp	r3, r5
 2163 004c 38D9     		bls	.L198
 2164              	.LBE132:
2503:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2165              		.loc 1 2503 0
 2166 004e 0024     		movs	r4, #0
 2167              	.LVL182:
 2168              	.L190:
 2169              	.LBB136:
2615:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 2170              		.loc 1 2615 0
 2171 0050 2C4B     		ldr	r3, .L205+24
 2172 0052 1B68     		ldr	r3, [r3]
 2173 0054 DB6A     		ldr	r3, [r3, #44]
 2174 0056 03EB8303 		add	r3, r3, r3, lsl #2
 2175 005a 9A00     		lsls	r2, r3, #2
 2176 005c 2A4B     		ldr	r3, .L205+28
 2177 005e 9B58     		ldr	r3, [r3, r2]
 2178 0060 012B     		cmp	r3, #1
 2179 0062 3CD9     		bls	.L196
2617:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 2180              		.loc 1 2617 0
 2181 0064 0124     		movs	r4, #1
 2182              	.LVL183:
 2183 0066 3AE0     		b	.L196
 2184              	.LVL184:
 2185              	.L199:
2598:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
 2186              		.loc 1 2598 0
 2187 0068 0124     		movs	r4, #1
 2188              	.LVL185:
 2189              	.L189:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 132


2536:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 2190              		.loc 1 2536 0
 2191 006a 224B     		ldr	r3, .L205+8
 2192 006c 1B68     		ldr	r3, [r3]
 2193 006e 1B68     		ldr	r3, [r3]
 2194 0070 43B3     		cbz	r3, .L203
2552:../Middlewares/FreeRTOS//Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2195              		.loc 1 2552 0
 2196 0072 204B     		ldr	r3, .L205+8
 2197 0074 1B68     		ldr	r3, [r3]
 2198 0076 DB68     		ldr	r3, [r3, #12]
 2199 0078 DE68     		ldr	r6, [r3, #12]
 2200              	.LVL186:
2553:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2201              		.loc 1 2553 0
 2202 007a 7368     		ldr	r3, [r6, #4]
 2203              	.LVL187:
2555:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 2204              		.loc 1 2555 0
 2205 007c 9D42     		cmp	r5, r3
 2206 007e 26D3     		bcc	.L204
2571:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2207              		.loc 1 2571 0
 2208 0080 371D     		adds	r7, r6, #4
 2209 0082 3846     		mov	r0, r7
 2210 0084 FFF7FEFF 		bl	uxListRemove
 2211              	.LVL188:
2575:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 2212              		.loc 1 2575 0
 2213 0088 B36A     		ldr	r3, [r6, #40]
 2214 008a 1BB1     		cbz	r3, .L193
2577:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 2215              		.loc 1 2577 0
 2216 008c 06F11800 		add	r0, r6, #24
 2217 0090 FFF7FEFF 		bl	uxListRemove
 2218              	.LVL189:
 2219              	.L193:
2586:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2220              		.loc 1 2586 0
 2221 0094 F36A     		ldr	r3, [r6, #44]
 2222 0096 0122     		movs	r2, #1
 2223 0098 9A40     		lsls	r2, r2, r3
 2224 009a 1C49     		ldr	r1, .L205+32
 2225 009c 0868     		ldr	r0, [r1]
 2226 009e 0243     		orrs	r2, r2, r0
 2227 00a0 0A60     		str	r2, [r1]
 2228 00a2 03EB8303 		add	r3, r3, r3, lsl #2
 2229 00a6 9A00     		lsls	r2, r3, #2
 2230 00a8 3946     		mov	r1, r7
 2231 00aa 1748     		ldr	r0, .L205+28
 2232 00ac 1044     		add	r0, r0, r2
 2233 00ae FFF7FEFF 		bl	vListInsertEnd
 2234              	.LVL190:
2596:../Middlewares/FreeRTOS//Source/tasks.c **** 						{
 2235              		.loc 1 2596 0
 2236 00b2 F26A     		ldr	r2, [r6, #44]
 2237 00b4 134B     		ldr	r3, .L205+24
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 133


 2238 00b6 1B68     		ldr	r3, [r3]
 2239 00b8 DB6A     		ldr	r3, [r3, #44]
 2240 00ba 9A42     		cmp	r2, r3
 2241 00bc D4D2     		bcs	.L199
 2242 00be D4E7     		b	.L189
 2243              	.LVL191:
 2244              	.L198:
 2245              	.LBE136:
2503:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2246              		.loc 1 2503 0
 2247 00c0 0024     		movs	r4, #0
 2248 00c2 D2E7     		b	.L189
 2249              	.LVL192:
 2250              	.L203:
 2251              	.LBB137:
2543:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
 2252              		.loc 1 2543 0
 2253 00c4 0E4B     		ldr	r3, .L205+20
 2254 00c6 4FF0FF32 		mov	r2, #-1
 2255 00ca 1A60     		str	r2, [r3]
2544:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 2256              		.loc 1 2544 0
 2257 00cc C0E7     		b	.L190
 2258              	.LVL193:
 2259              	.L204:
2562:../Middlewares/FreeRTOS//Source/tasks.c **** 						break;
 2260              		.loc 1 2562 0
 2261 00ce 0C4A     		ldr	r2, .L205+20
 2262 00d0 1360     		str	r3, [r2]
2563:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 2263              		.loc 1 2563 0
 2264 00d2 BDE7     		b	.L190
 2265              	.LVL194:
 2266              	.L185:
 2267              	.LBE137:
2643:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2268              		.loc 1 2643 0
 2269 00d4 0E4A     		ldr	r2, .L205+36
 2270 00d6 1368     		ldr	r3, [r2]
 2271 00d8 0133     		adds	r3, r3, #1
 2272 00da 1360     		str	r3, [r2]
2503:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2273              		.loc 1 2503 0
 2274 00dc 0024     		movs	r4, #0
 2275              	.LVL195:
 2276              	.L196:
2656:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 2277              		.loc 1 2656 0
 2278 00de 0D4B     		ldr	r3, .L205+40
 2279 00e0 1B68     		ldr	r3, [r3]
 2280 00e2 03B1     		cbz	r3, .L184
2658:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 2281              		.loc 1 2658 0
 2282 00e4 0124     		movs	r4, #1
 2283              	.LVL196:
 2284              	.L184:
2668:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 134


 2285              		.loc 1 2668 0
 2286 00e6 2046     		mov	r0, r4
 2287 00e8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2288              	.L206:
 2289 00ea 00BF     		.align	2
 2290              	.L205:
 2291 00ec 00000000 		.word	.LANCHOR16
 2292 00f0 00000000 		.word	.LANCHOR14
 2293 00f4 00000000 		.word	.LANCHOR2
 2294 00f8 00000000 		.word	.LANCHOR8
 2295 00fc 00000000 		.word	.LANCHOR18
 2296 0100 00000000 		.word	.LANCHOR3
 2297 0104 00000000 		.word	.LANCHOR10
 2298 0108 00000000 		.word	.LANCHOR4
 2299 010c 00000000 		.word	.LANCHOR13
 2300 0110 00000000 		.word	.LANCHOR19
 2301 0114 00000000 		.word	.LANCHOR20
 2302              		.cfi_endproc
 2303              	.LFE154:
 2305              		.section	.text.xTaskResumeAll,"ax",%progbits
 2306              		.align	1
 2307              		.global	xTaskResumeAll
 2308              		.syntax unified
 2309              		.thumb
 2310              		.thumb_func
 2311              		.fpu fpv4-sp-d16
 2313              	xTaskResumeAll:
 2314              	.LFB148:
2018:../Middlewares/FreeRTOS//Source/tasks.c **** TCB_t *pxTCB = NULL;
 2315              		.loc 1 2018 0
 2316              		.cfi_startproc
 2317              		@ args = 0, pretend = 0, frame = 0
 2318              		@ frame_needed = 0, uses_anonymous_args = 0
 2319 0000 38B5     		push	{r3, r4, r5, lr}
 2320              	.LCFI24:
 2321              		.cfi_def_cfa_offset 16
 2322              		.cfi_offset 3, -16
 2323              		.cfi_offset 4, -12
 2324              		.cfi_offset 5, -8
 2325              		.cfi_offset 14, -4
 2326              	.LVL197:
2024:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2327              		.loc 1 2024 0
 2328 0002 334B     		ldr	r3, .L223
 2329 0004 1B68     		ldr	r3, [r3]
 2330 0006 43B9     		cbnz	r3, .L208
 2331              	.LBB138:
 2332              	.LBB139:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2333              		.loc 2 237 0
 2334              		.syntax unified
 2335              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2336 0008 4FF01003 			mov r3, #16												
 2337 000c 83F31188 		msr basepri, r3											
 2338 0010 BFF36F8F 		isb														
 2339 0014 BFF34F8F 		dsb														
 2340              	
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 135


 2341              	@ 0 "" 2
 2342              	.LVL198:
 2343              		.thumb
 2344              		.syntax unified
 2345              	.L209:
 2346 0018 FEE7     		b	.L209
 2347              	.L208:
 2348              	.LBE139:
 2349              	.LBE138:
2031:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 2350              		.loc 1 2031 0
 2351 001a FFF7FEFF 		bl	vPortEnterCritical
 2352              	.LVL199:
2033:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2353              		.loc 1 2033 0
 2354 001e 2C4B     		ldr	r3, .L223
 2355 0020 1A68     		ldr	r2, [r3]
 2356 0022 013A     		subs	r2, r2, #1
 2357 0024 1A60     		str	r2, [r3]
2035:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 2358              		.loc 1 2035 0
 2359 0026 1B68     		ldr	r3, [r3]
 2360 0028 002B     		cmp	r3, #0
 2361 002a 4DD1     		bne	.L218
2037:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 2362              		.loc 1 2037 0
 2363 002c 294B     		ldr	r3, .L223+4
 2364 002e 1B68     		ldr	r3, [r3]
 2365 0030 23B9     		cbnz	r3, .L219
2020:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2366              		.loc 1 2020 0
 2367 0032 0024     		movs	r4, #0
 2368              	.LVL200:
 2369              	.L210:
2121:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2370              		.loc 1 2121 0
 2371 0034 FFF7FEFF 		bl	vPortExitCritical
 2372              	.LVL201:
2124:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 2373              		.loc 1 2124 0
 2374 0038 2046     		mov	r0, r4
 2375 003a 38BD     		pop	{r3, r4, r5, pc}
 2376              	.LVL202:
 2377              	.L219:
2019:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2378              		.loc 1 2019 0
 2379 003c 0024     		movs	r4, #0
 2380              	.LVL203:
 2381              	.L211:
2041:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 2382              		.loc 1 2041 0
 2383 003e 264B     		ldr	r3, .L223+8
 2384 0040 1B68     		ldr	r3, [r3]
 2385 0042 1BB3     		cbz	r3, .L222
2043:../Middlewares/FreeRTOS//Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2386              		.loc 1 2043 0
 2387 0044 244B     		ldr	r3, .L223+8
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 136


 2388 0046 DB68     		ldr	r3, [r3, #12]
 2389 0048 DC68     		ldr	r4, [r3, #12]
 2390              	.LVL204:
2044:../Middlewares/FreeRTOS//Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2391              		.loc 1 2044 0
 2392 004a 04F11800 		add	r0, r4, #24
 2393 004e FFF7FEFF 		bl	uxListRemove
 2394              	.LVL205:
2045:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2395              		.loc 1 2045 0
 2396 0052 251D     		adds	r5, r4, #4
 2397 0054 2846     		mov	r0, r5
 2398 0056 FFF7FEFF 		bl	uxListRemove
 2399              	.LVL206:
2046:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2400              		.loc 1 2046 0
 2401 005a E36A     		ldr	r3, [r4, #44]
 2402 005c 0122     		movs	r2, #1
 2403 005e 9A40     		lsls	r2, r2, r3
 2404 0060 1E49     		ldr	r1, .L223+12
 2405 0062 0868     		ldr	r0, [r1]
 2406 0064 0243     		orrs	r2, r2, r0
 2407 0066 0A60     		str	r2, [r1]
 2408 0068 03EB8303 		add	r3, r3, r3, lsl #2
 2409 006c 9A00     		lsls	r2, r3, #2
 2410 006e 2946     		mov	r1, r5
 2411 0070 1B48     		ldr	r0, .L223+16
 2412 0072 1044     		add	r0, r0, r2
 2413 0074 FFF7FEFF 		bl	vListInsertEnd
 2414              	.LVL207:
2050:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 2415              		.loc 1 2050 0
 2416 0078 E26A     		ldr	r2, [r4, #44]
 2417 007a 1A4B     		ldr	r3, .L223+20
 2418 007c 1B68     		ldr	r3, [r3]
 2419 007e DB6A     		ldr	r3, [r3, #44]
 2420 0080 9A42     		cmp	r2, r3
 2421 0082 DCD3     		bcc	.L211
2052:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 2422              		.loc 1 2052 0
 2423 0084 184B     		ldr	r3, .L223+24
 2424 0086 0122     		movs	r2, #1
 2425 0088 1A60     		str	r2, [r3]
 2426 008a D8E7     		b	.L211
 2427              	.L222:
2060:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 2428              		.loc 1 2060 0
 2429 008c 0CB1     		cbz	r4, .L214
2068:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 2430              		.loc 1 2068 0
 2431 008e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2432              	.LVL208:
 2433              	.L214:
 2434              	.LBB140:
2076:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2435              		.loc 1 2076 0
 2436 0092 164B     		ldr	r3, .L223+28
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 137


 2437 0094 1C68     		ldr	r4, [r3]
 2438              	.LVL209:
2078:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 2439              		.loc 1 2078 0
 2440 0096 54B1     		cbz	r4, .L215
 2441              	.L217:
2082:../Middlewares/FreeRTOS//Source/tasks.c **** 							{
 2442              		.loc 1 2082 0
 2443 0098 FFF7FEFF 		bl	xTaskIncrementTick
 2444              	.LVL210:
 2445 009c 10B1     		cbz	r0, .L216
2084:../Middlewares/FreeRTOS//Source/tasks.c **** 							}
 2446              		.loc 1 2084 0
 2447 009e 124B     		ldr	r3, .L223+24
 2448 00a0 0122     		movs	r2, #1
 2449 00a2 1A60     		str	r2, [r3]
 2450              	.L216:
 2451              	.LVL211:
2091:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2452              		.loc 1 2091 0
 2453 00a4 013C     		subs	r4, r4, #1
 2454              	.LVL212:
 2455 00a6 F7D1     		bne	.L217
2093:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 2456              		.loc 1 2093 0
 2457 00a8 104B     		ldr	r3, .L223+28
 2458 00aa 0022     		movs	r2, #0
 2459 00ac 1A60     		str	r2, [r3]
 2460              	.L215:
 2461              	.LBE140:
2101:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 2462              		.loc 1 2101 0
 2463 00ae 0E4B     		ldr	r3, .L223+24
 2464 00b0 1B68     		ldr	r3, [r3]
 2465 00b2 5BB1     		cbz	r3, .L220
 2466              	.LVL213:
2108:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 2467              		.loc 1 2108 0
 2468 00b4 0E4B     		ldr	r3, .L223+32
 2469 00b6 4FF08052 		mov	r2, #268435456
 2470 00ba 1A60     		str	r2, [r3]
 2471              		.syntax unified
 2472              	@ 2108 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 2473 00bc BFF34F8F 		dsb
 2474              	@ 0 "" 2
 2475              	@ 2108 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 2476 00c0 BFF36F8F 		isb
 2477              	@ 0 "" 2
2105:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 2478              		.loc 1 2105 0
 2479              		.thumb
 2480              		.syntax unified
 2481 00c4 0124     		movs	r4, #1
 2482              	.LVL214:
 2483 00c6 B5E7     		b	.L210
 2484              	.LVL215:
 2485              	.L218:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 138


2020:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2486              		.loc 1 2020 0
 2487 00c8 0024     		movs	r4, #0
 2488 00ca B3E7     		b	.L210
 2489              	.LVL216:
 2490              	.L220:
 2491 00cc 0024     		movs	r4, #0
 2492              	.LVL217:
 2493 00ce B1E7     		b	.L210
 2494              	.L224:
 2495              		.align	2
 2496              	.L223:
 2497 00d0 00000000 		.word	.LANCHOR16
 2498 00d4 00000000 		.word	.LANCHOR9
 2499 00d8 00000000 		.word	.LANCHOR1
 2500 00dc 00000000 		.word	.LANCHOR13
 2501 00e0 00000000 		.word	.LANCHOR4
 2502 00e4 00000000 		.word	.LANCHOR10
 2503 00e8 00000000 		.word	.LANCHOR20
 2504 00ec 00000000 		.word	.LANCHOR19
 2505 00f0 04ED00E0 		.word	-536810236
 2506              		.cfi_endproc
 2507              	.LFE148:
 2509              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2510              		.align	1
 2511              		.global	vTaskDelayUntil
 2512              		.syntax unified
 2513              		.thumb
 2514              		.thumb_func
 2515              		.fpu fpv4-sp-d16
 2517              	vTaskDelayUntil:
 2518              	.LFB135:
1141:../Middlewares/FreeRTOS//Source/tasks.c **** 	TickType_t xTimeToWake;
 2519              		.loc 1 1141 0
 2520              		.cfi_startproc
 2521              		@ args = 0, pretend = 0, frame = 0
 2522              		@ frame_needed = 0, uses_anonymous_args = 0
 2523              	.LVL218:
 2524 0000 38B5     		push	{r3, r4, r5, lr}
 2525              	.LCFI25:
 2526              		.cfi_def_cfa_offset 16
 2527              		.cfi_offset 3, -16
 2528              		.cfi_offset 4, -12
 2529              		.cfi_offset 5, -8
 2530              		.cfi_offset 14, -4
 2531              	.LVL219:
1145:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2532              		.loc 1 1145 0
 2533 0002 50B1     		cbz	r0, .L241
 2534 0004 0546     		mov	r5, r0
1146:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2535              		.loc 1 1146 0
 2536 0006 89B9     		cbnz	r1, .L228
 2537              	.LBB141:
 2538              	.LBB142:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2539              		.loc 2 237 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 139


 2540              		.syntax unified
 2541              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2542 0008 4FF01003 			mov r3, #16												
 2543 000c 83F31188 		msr basepri, r3											
 2544 0010 BFF36F8F 		isb														
 2545 0014 BFF34F8F 		dsb														
 2546              	
 2547              	@ 0 "" 2
 2548              	.LVL220:
 2549              		.thumb
 2550              		.syntax unified
 2551              	.L229:
 2552 0018 FEE7     		b	.L229
 2553              	.L241:
 2554              	.LBE142:
 2555              	.LBE141:
 2556              	.LBB143:
 2557              	.LBB144:
 2558              		.syntax unified
 2559              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2560 001a 4FF01003 			mov r3, #16												
 2561 001e 83F31188 		msr basepri, r3											
 2562 0022 BFF36F8F 		isb														
 2563 0026 BFF34F8F 		dsb														
 2564              	
 2565              	@ 0 "" 2
 2566              	.LVL221:
 2567              		.thumb
 2568              		.syntax unified
 2569              	.L227:
 2570 002a FEE7     		b	.L227
 2571              	.L228:
 2572              	.LBE144:
 2573              	.LBE143:
1147:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2574              		.loc 1 1147 0
 2575 002c 1A4B     		ldr	r3, .L242
 2576 002e 1B68     		ldr	r3, [r3]
 2577 0030 43B1     		cbz	r3, .L230
 2578              	.LBB145:
 2579              	.LBB146:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2580              		.loc 2 237 0
 2581              		.syntax unified
 2582              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2583 0032 4FF01003 			mov r3, #16												
 2584 0036 83F31188 		msr basepri, r3											
 2585 003a BFF36F8F 		isb														
 2586 003e BFF34F8F 		dsb														
 2587              	
 2588              	@ 0 "" 2
 2589              	.LVL222:
 2590              		.thumb
 2591              		.syntax unified
 2592              	.L231:
 2593 0042 FEE7     		b	.L231
 2594              	.L230:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 140


 2595 0044 0C46     		mov	r4, r1
 2596              	.LBE146:
 2597              	.LBE145:
1149:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 2598              		.loc 1 1149 0
 2599 0046 FFF7FEFF 		bl	vTaskSuspendAll
 2600              	.LVL223:
 2601              	.LBB147:
1153:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2602              		.loc 1 1153 0
 2603 004a 144B     		ldr	r3, .L242+4
 2604 004c 1868     		ldr	r0, [r3]
 2605              	.LVL224:
1156:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2606              		.loc 1 1156 0
 2607 004e 2A68     		ldr	r2, [r5]
 2608 0050 1444     		add	r4, r4, r2
 2609              	.LVL225:
1158:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 2610              		.loc 1 1158 0
 2611 0052 8242     		cmp	r2, r0
 2612 0054 18D9     		bls	.L232
1165:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 2613              		.loc 1 1165 0
 2614 0056 A242     		cmp	r2, r4
 2615 0058 0CD8     		bhi	.L233
1190:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2616              		.loc 1 1190 0
 2617 005a 2C60     		str	r4, [r5]
 2618              	.LVL226:
 2619              	.L234:
 2620              	.LBE147:
1205:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2621              		.loc 1 1205 0
 2622 005c FFF7FEFF 		bl	xTaskResumeAll
 2623              	.LVL227:
1209:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 2624              		.loc 1 1209 0
 2625 0060 38B9     		cbnz	r0, .L225
1211:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 2626              		.loc 1 1211 0
 2627 0062 0F4B     		ldr	r3, .L242+8
 2628 0064 4FF08052 		mov	r2, #268435456
 2629 0068 1A60     		str	r2, [r3]
 2630              		.syntax unified
 2631              	@ 1211 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 2632 006a BFF34F8F 		dsb
 2633              	@ 0 "" 2
 2634              	@ 1211 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 2635 006e BFF36F8F 		isb
 2636              	@ 0 "" 2
 2637              		.thumb
 2638              		.syntax unified
 2639              	.L225:
1217:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2640              		.loc 1 1217 0
 2641 0072 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 141


 2642              	.LVL228:
 2643              	.L233:
 2644              	.LBB148:
1165:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 2645              		.loc 1 1165 0 discriminator 1
 2646 0074 A042     		cmp	r0, r4
 2647 0076 01D3     		bcc	.L235
1190:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2648              		.loc 1 1190 0
 2649 0078 2C60     		str	r4, [r5]
 2650 007a EFE7     		b	.L234
 2651              	.L235:
 2652              	.LVL229:
 2653 007c 2C60     		str	r4, [r5]
 2654              	.L236:
1198:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 2655              		.loc 1 1198 0
 2656 007e 0021     		movs	r1, #0
 2657 0080 201A     		subs	r0, r4, r0
 2658              	.LVL230:
 2659 0082 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2660              	.LVL231:
 2661 0086 E9E7     		b	.L234
 2662              	.LVL232:
 2663              	.L232:
1179:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 2664              		.loc 1 1179 0
 2665 0088 A242     		cmp	r2, r4
 2666 008a 01D8     		bhi	.L237
1179:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 2667              		.loc 1 1179 0 is_stmt 0 discriminator 1
 2668 008c A042     		cmp	r0, r4
 2669 008e 01D2     		bcs	.L238
 2670              	.L237:
 2671              	.LVL233:
1190:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2672              		.loc 1 1190 0 is_stmt 1
 2673 0090 2C60     		str	r4, [r5]
 2674 0092 F4E7     		b	.L236
 2675              	.LVL234:
 2676              	.L238:
 2677 0094 2C60     		str	r4, [r5]
 2678 0096 E1E7     		b	.L234
 2679              	.L243:
 2680              		.align	2
 2681              	.L242:
 2682 0098 00000000 		.word	.LANCHOR16
 2683 009c 00000000 		.word	.LANCHOR14
 2684 00a0 04ED00E0 		.word	-536810236
 2685              	.LBE148:
 2686              		.cfi_endproc
 2687              	.LFE135:
 2689              		.section	.text.vTaskDelay,"ax",%progbits
 2690              		.align	1
 2691              		.global	vTaskDelay
 2692              		.syntax unified
 2693              		.thumb
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 142


 2694              		.thumb_func
 2695              		.fpu fpv4-sp-d16
 2697              	vTaskDelay:
 2698              	.LFB136:
1225:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2699              		.loc 1 1225 0
 2700              		.cfi_startproc
 2701              		@ args = 0, pretend = 0, frame = 0
 2702              		@ frame_needed = 0, uses_anonymous_args = 0
 2703              	.LVL235:
 2704 0000 10B5     		push	{r4, lr}
 2705              	.LCFI26:
 2706              		.cfi_def_cfa_offset 8
 2707              		.cfi_offset 4, -8
 2708              		.cfi_offset 14, -4
 2709              	.LVL236:
1229:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 2710              		.loc 1 1229 0
 2711 0002 A8B1     		cbz	r0, .L245
 2712 0004 0446     		mov	r4, r0
1231:../Middlewares/FreeRTOS//Source/tasks.c **** 			vTaskSuspendAll();
 2713              		.loc 1 1231 0
 2714 0006 0F4B     		ldr	r3, .L250
 2715 0008 1B68     		ldr	r3, [r3]
 2716 000a 43B1     		cbz	r3, .L246
 2717              	.LBB149:
 2718              	.LBB150:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2719              		.loc 2 237 0
 2720              		.syntax unified
 2721              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2722 000c 4FF01003 			mov r3, #16												
 2723 0010 83F31188 		msr basepri, r3											
 2724 0014 BFF36F8F 		isb														
 2725 0018 BFF34F8F 		dsb														
 2726              	
 2727              	@ 0 "" 2
 2728              	.LVL237:
 2729              		.thumb
 2730              		.syntax unified
 2731              	.L247:
 2732 001c FEE7     		b	.L247
 2733              	.L246:
 2734              	.LBE150:
 2735              	.LBE149:
1232:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 2736              		.loc 1 1232 0
 2737 001e FFF7FEFF 		bl	vTaskSuspendAll
 2738              	.LVL238:
1243:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 2739              		.loc 1 1243 0
 2740 0022 0021     		movs	r1, #0
 2741 0024 2046     		mov	r0, r4
 2742 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2743              	.LVL239:
1245:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 2744              		.loc 1 1245 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 143


 2745 002a FFF7FEFF 		bl	xTaskResumeAll
 2746              	.LVL240:
1254:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 2747              		.loc 1 1254 0
 2748 002e 38B9     		cbnz	r0, .L244
 2749              	.LVL241:
 2750              	.L245:
1256:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 2751              		.loc 1 1256 0
 2752 0030 054B     		ldr	r3, .L250+4
 2753 0032 4FF08052 		mov	r2, #268435456
 2754 0036 1A60     		str	r2, [r3]
 2755              		.syntax unified
 2756              	@ 1256 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 2757 0038 BFF34F8F 		dsb
 2758              	@ 0 "" 2
 2759              	@ 1256 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 2760 003c BFF36F8F 		isb
 2761              	@ 0 "" 2
 2762              		.thumb
 2763              		.syntax unified
 2764              	.L244:
1262:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2765              		.loc 1 1262 0
 2766 0040 10BD     		pop	{r4, pc}
 2767              	.L251:
 2768 0042 00BF     		.align	2
 2769              	.L250:
 2770 0044 00000000 		.word	.LANCHOR16
 2771 0048 04ED00E0 		.word	-536810236
 2772              		.cfi_endproc
 2773              	.LFE136:
 2775              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 2776              		.align	1
 2777              		.syntax unified
 2778              		.thumb
 2779              		.thumb_func
 2780              		.fpu fpv4-sp-d16
 2782              	prvCheckTasksWaitingTermination:
 2783              	.LFB168:
3366:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2784              		.loc 1 3366 0
 2785              		.cfi_startproc
 2786              		@ args = 0, pretend = 0, frame = 0
 2787              		@ frame_needed = 0, uses_anonymous_args = 0
 2788              	.LBB151:
3376:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 2789              		.loc 1 3376 0
 2790 0000 134B     		ldr	r3, .L261
 2791 0002 1B68     		ldr	r3, [r3]
 2792 0004 13B3     		cbz	r3, .L259
 2793              	.LBE151:
3366:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2794              		.loc 1 3366 0
 2795 0006 10B5     		push	{r4, lr}
 2796              	.LCFI27:
 2797              		.cfi_def_cfa_offset 8
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 144


 2798              		.cfi_offset 4, -8
 2799              		.cfi_offset 14, -4
 2800              	.L255:
 2801              	.LBB153:
3378:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 2802              		.loc 1 3378 0
 2803 0008 FFF7FEFF 		bl	vTaskSuspendAll
 2804              	.LVL242:
3380:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 2805              		.loc 1 3380 0
 2806 000c 114B     		ldr	r3, .L261+4
 2807 000e 1C68     		ldr	r4, [r3]
 2808              	.LVL243:
3382:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2809              		.loc 1 3382 0
 2810 0010 FFF7FEFF 		bl	xTaskResumeAll
 2811              	.LVL244:
3384:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 2812              		.loc 1 3384 0
 2813 0014 24B9     		cbnz	r4, .L260
 2814              	.LVL245:
 2815              	.L254:
3376:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 2816              		.loc 1 3376 0
 2817 0016 0E4B     		ldr	r3, .L261
 2818 0018 1B68     		ldr	r3, [r3]
 2819 001a 002B     		cmp	r3, #0
 2820 001c F4D1     		bne	.L255
 2821              	.LBE153:
3406:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 2822              		.loc 1 3406 0
 2823 001e 10BD     		pop	{r4, pc}
 2824              	.LVL246:
 2825              	.L260:
 2826              	.LBB154:
 2827              	.LBB152:
3388:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 2828              		.loc 1 3388 0
 2829 0020 FFF7FEFF 		bl	vPortEnterCritical
 2830              	.LVL247:
3390:../Middlewares/FreeRTOS//Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2831              		.loc 1 3390 0
 2832 0024 0B4B     		ldr	r3, .L261+4
 2833 0026 DB68     		ldr	r3, [r3, #12]
 2834 0028 DC68     		ldr	r4, [r3, #12]
 2835              	.LVL248:
3391:../Middlewares/FreeRTOS//Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 2836              		.loc 1 3391 0
 2837 002a 201D     		adds	r0, r4, #4
 2838 002c FFF7FEFF 		bl	uxListRemove
 2839              	.LVL249:
3392:../Middlewares/FreeRTOS//Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 2840              		.loc 1 3392 0
 2841 0030 094A     		ldr	r2, .L261+8
 2842 0032 1368     		ldr	r3, [r2]
 2843 0034 013B     		subs	r3, r3, #1
 2844 0036 1360     		str	r3, [r2]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 145


3393:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 2845              		.loc 1 3393 0
 2846 0038 054A     		ldr	r2, .L261
 2847 003a 1368     		ldr	r3, [r2]
 2848 003c 013B     		subs	r3, r3, #1
 2849 003e 1360     		str	r3, [r2]
3395:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2850              		.loc 1 3395 0
 2851 0040 FFF7FEFF 		bl	vPortExitCritical
 2852              	.LVL250:
3397:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 2853              		.loc 1 3397 0
 2854 0044 2046     		mov	r0, r4
 2855 0046 FFF7FEFF 		bl	prvDeleteTCB
 2856              	.LVL251:
 2857              	.LBE152:
 2858 004a E4E7     		b	.L254
 2859              	.LVL252:
 2860              	.L259:
 2861              	.LCFI28:
 2862              		.cfi_def_cfa_offset 0
 2863              		.cfi_restore 4
 2864              		.cfi_restore 14
 2865 004c 7047     		bx	lr
 2866              	.L262:
 2867 004e 00BF     		.align	2
 2868              	.L261:
 2869 0050 00000000 		.word	.LANCHOR15
 2870 0054 00000000 		.word	.LANCHOR7
 2871 0058 00000000 		.word	.LANCHOR9
 2872              	.LBE154:
 2873              		.cfi_endproc
 2874              	.LFE168:
 2876              		.section	.text.prvIdleTask,"ax",%progbits
 2877              		.align	1
 2878              		.syntax unified
 2879              		.thumb
 2880              		.thumb_func
 2881              		.fpu fpv4-sp-d16
 2883              	prvIdleTask:
 2884              	.LFB166:
3132:../Middlewares/FreeRTOS//Source/tasks.c **** 	/* Stop warnings. */
 2885              		.loc 1 3132 0
 2886              		.cfi_startproc
 2887              		@ Volatile: function does not return.
 2888              		@ args = 0, pretend = 0, frame = 0
 2889              		@ frame_needed = 0, uses_anonymous_args = 0
 2890              	.LVL253:
 2891 0000 08B5     		push	{r3, lr}
 2892              	.LCFI29:
 2893              		.cfi_def_cfa_offset 8
 2894              		.cfi_offset 3, -8
 2895              		.cfi_offset 14, -4
 2896              	.LVL254:
 2897              	.L264:
3143:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2898              		.loc 1 3143 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 146


 2899 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 2900              	.LVL255:
3166:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 2901              		.loc 1 3166 0
 2902 0006 064B     		ldr	r3, .L267
 2903 0008 1B68     		ldr	r3, [r3]
 2904 000a 012B     		cmp	r3, #1
 2905 000c F9D9     		bls	.L264
3168:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 2906              		.loc 1 3168 0
 2907 000e 054B     		ldr	r3, .L267+4
 2908 0010 4FF08052 		mov	r2, #268435456
 2909 0014 1A60     		str	r2, [r3]
 2910              		.syntax unified
 2911              	@ 3168 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 2912 0016 BFF34F8F 		dsb
 2913              	@ 0 "" 2
 2914              	@ 3168 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 2915 001a BFF36F8F 		isb
 2916              	@ 0 "" 2
 2917              		.thumb
 2918              		.syntax unified
 2919 001e F0E7     		b	.L264
 2920              	.L268:
 2921              		.align	2
 2922              	.L267:
 2923 0020 00000000 		.word	.LANCHOR4
 2924 0024 04ED00E0 		.word	-536810236
 2925              		.cfi_endproc
 2926              	.LFE166:
 2928              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2929              		.align	1
 2930              		.global	vTaskSwitchContext
 2931              		.syntax unified
 2932              		.thumb
 2933              		.thumb_func
 2934              		.fpu fpv4-sp-d16
 2936              	vTaskSwitchContext:
 2937              	.LFB155:
2762:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2938              		.loc 1 2762 0
 2939              		.cfi_startproc
 2940              		@ args = 0, pretend = 0, frame = 0
 2941              		@ frame_needed = 0, uses_anonymous_args = 0
2763:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 2942              		.loc 1 2763 0
 2943 0000 334B     		ldr	r3, .L283
 2944 0002 1B68     		ldr	r3, [r3]
 2945 0004 1BB1     		cbz	r3, .L270
2767:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 2946              		.loc 1 2767 0
 2947 0006 334B     		ldr	r3, .L283+4
 2948 0008 0122     		movs	r2, #1
 2949 000a 1A60     		str	r2, [r3]
 2950 000c 7047     		bx	lr
 2951              	.L270:
2762:../Middlewares/FreeRTOS//Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 147


 2952              		.loc 1 2762 0
 2953 000e 10B5     		push	{r4, lr}
 2954              	.LCFI30:
 2955              		.cfi_def_cfa_offset 8
 2956              		.cfi_offset 4, -8
 2957              		.cfi_offset 14, -4
2771:../Middlewares/FreeRTOS//Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2958              		.loc 1 2771 0
 2959 0010 304B     		ldr	r3, .L283+4
 2960 0012 0022     		movs	r2, #0
 2961 0014 1A60     		str	r2, [r3]
2779:../Middlewares/FreeRTOS//Source/tasks.c **** 				#endif
 2962              		.loc 1 2779 0
 2963 0016 304B     		ldr	r3, .L283+8
 2964 0018 1A68     		ldr	r2, [r3]
2789:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 2965              		.loc 1 2789 0
 2966 001a 304B     		ldr	r3, .L283+12
 2967 001c 1B68     		ldr	r3, [r3]
 2968 001e 9A42     		cmp	r2, r3
 2969 0020 05D9     		bls	.L272
2791:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 2970              		.loc 1 2791 0
 2971 0022 2F49     		ldr	r1, .L283+16
 2972 0024 0868     		ldr	r0, [r1]
 2973 0026 D31A     		subs	r3, r2, r3
 2974 0028 816D     		ldr	r1, [r0, #88]
 2975 002a 0B44     		add	r3, r3, r1
 2976 002c 8365     		str	r3, [r0, #88]
 2977              	.L272:
2797:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 2978              		.loc 1 2797 0
 2979 002e 2B4B     		ldr	r3, .L283+12
 2980 0030 1A60     		str	r2, [r3]
 2981              	.LBB155:
2802:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2982              		.loc 1 2802 0
 2983 0032 2B4B     		ldr	r3, .L283+16
 2984 0034 1B68     		ldr	r3, [r3]
 2985 0036 1B6B     		ldr	r3, [r3, #48]
 2986              	.LVL256:
 2987 0038 1A68     		ldr	r2, [r3]
 2988 003a B2F1A53F 		cmp	r2, #-1515870811
 2989 003e 03D1     		bne	.L273
2802:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2990              		.loc 1 2802 0 is_stmt 0 discriminator 2
 2991 0040 5A68     		ldr	r2, [r3, #4]
 2992 0042 B2F1A53F 		cmp	r2, #-1515870811
 2993 0046 1BD0     		beq	.L281
 2994              	.LVL257:
 2995              	.L273:
2802:../Middlewares/FreeRTOS//Source/tasks.c **** 
 2996              		.loc 1 2802 0 discriminator 7
 2997 0048 254B     		ldr	r3, .L283+16
 2998 004a 1868     		ldr	r0, [r3]
 2999 004c 1968     		ldr	r1, [r3]
 3000 004e 3431     		adds	r1, r1, #52
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 148


 3001 0050 FFF7FEFF 		bl	vApplicationStackOverflowHook
 3002              	.LVL258:
 3003              	.L274:
 3004              	.LBE155:
 3005              	.LBB156:
2806:../Middlewares/FreeRTOS//Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3006              		.loc 1 2806 0 is_stmt 1
 3007 0054 234B     		ldr	r3, .L283+20
 3008 0056 1B68     		ldr	r3, [r3]
 3009              	.LVL259:
 3010              	.LBB157:
 3011              	.LBB158:
 176:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 3012              		.loc 2 176 0
 3013              		.syntax unified
 3014              	@ 176 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3015 0058 B3FA83F3 		clz r3, r3
 3016              	@ 0 "" 2
 3017              	.LVL260:
 3018              		.thumb
 3019              		.syntax unified
 3020 005c DBB2     		uxtb	r3, r3
 3021              	.LBE158:
 3022              	.LBE157:
2806:../Middlewares/FreeRTOS//Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3023              		.loc 1 2806 0
 3024 005e C3F11F03 		rsb	r3, r3, #31
 3025              	.LVL261:
 3026 0062 03EB8301 		add	r1, r3, r3, lsl #2
 3027 0066 8A00     		lsls	r2, r1, #2
 3028 0068 1F49     		ldr	r1, .L283+24
 3029 006a 8A58     		ldr	r2, [r1, r2]
 3030 006c 8AB9     		cbnz	r2, .L275
 3031              	.LBB159:
 3032              	.LBB160:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3033              		.loc 2 237 0
 3034              		.syntax unified
 3035              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3036 006e 4FF01003 			mov r3, #16												
 3037 0072 83F31188 		msr basepri, r3											
 3038 0076 BFF36F8F 		isb														
 3039 007a BFF34F8F 		dsb														
 3040              	
 3041              	@ 0 "" 2
 3042              	.LVL262:
 3043              		.thumb
 3044              		.syntax unified
 3045              	.L276:
 3046 007e FEE7     		b	.L276
 3047              	.LVL263:
 3048              	.L281:
 3049              	.LBE160:
 3050              	.LBE159:
 3051              	.LBE156:
 3052              	.LBB163:
2802:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 149


 3053              		.loc 1 2802 0 discriminator 4
 3054 0080 9A68     		ldr	r2, [r3, #8]
 3055 0082 B2F1A53F 		cmp	r2, #-1515870811
 3056 0086 DFD1     		bne	.L273
2802:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3057              		.loc 1 2802 0 is_stmt 0 discriminator 6
 3058 0088 DB68     		ldr	r3, [r3, #12]
 3059              	.LVL264:
 3060 008a B3F1A53F 		cmp	r3, #-1515870811
 3061 008e DBD1     		bne	.L273
 3062 0090 E0E7     		b	.L274
 3063              	.LVL265:
 3064              	.L275:
 3065              	.LBE163:
 3066              	.LBB164:
 3067              	.LBB161:
2806:../Middlewares/FreeRTOS//Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3068              		.loc 1 2806 0 is_stmt 1 discriminator 2
 3069 0092 1548     		ldr	r0, .L283+24
 3070 0094 9A00     		lsls	r2, r3, #2
 3071 0096 D418     		adds	r4, r2, r3
 3072 0098 A100     		lsls	r1, r4, #2
 3073 009a 0144     		add	r1, r1, r0
 3074 009c 4C68     		ldr	r4, [r1, #4]
 3075 009e 6468     		ldr	r4, [r4, #4]
 3076 00a0 4C60     		str	r4, [r1, #4]
 3077 00a2 1A44     		add	r2, r2, r3
 3078 00a4 9100     		lsls	r1, r2, #2
 3079 00a6 0831     		adds	r1, r1, #8
 3080 00a8 0844     		add	r0, r0, r1
 3081 00aa 8442     		cmp	r4, r0
 3082 00ac 09D0     		beq	.L282
 3083              	.L277:
2806:../Middlewares/FreeRTOS//Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3084              		.loc 1 2806 0 is_stmt 0 discriminator 5
 3085 00ae 03EB8303 		add	r3, r3, r3, lsl #2
 3086              	.LVL266:
 3087 00b2 9A00     		lsls	r2, r3, #2
 3088 00b4 0C4B     		ldr	r3, .L283+24
 3089 00b6 1344     		add	r3, r3, r2
 3090 00b8 5B68     		ldr	r3, [r3, #4]
 3091 00ba DA68     		ldr	r2, [r3, #12]
 3092 00bc 084B     		ldr	r3, .L283+16
 3093 00be 1A60     		str	r2, [r3]
 3094              	.LBE161:
 3095              	.LBE164:
2817:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 3096              		.loc 1 2817 0 is_stmt 1 discriminator 5
 3097 00c0 10BD     		pop	{r4, pc}
 3098              	.LVL267:
 3099              	.L282:
 3100              	.LBB165:
 3101              	.LBB162:
2806:../Middlewares/FreeRTOS//Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3102              		.loc 1 2806 0 discriminator 3
 3103 00c2 6168     		ldr	r1, [r4, #4]
 3104 00c4 0848     		ldr	r0, .L283+24
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 150


 3105 00c6 1422     		movs	r2, #20
 3106 00c8 02FB0302 		mla	r2, r2, r3, r0
 3107 00cc 5160     		str	r1, [r2, #4]
 3108 00ce EEE7     		b	.L277
 3109              	.L284:
 3110              		.align	2
 3111              	.L283:
 3112 00d0 00000000 		.word	.LANCHOR16
 3113 00d4 00000000 		.word	.LANCHOR20
 3114 00d8 00000000 		.word	ulHighFrequencyTimerTicks
 3115 00dc 00000000 		.word	.LANCHOR21
 3116 00e0 00000000 		.word	.LANCHOR10
 3117 00e4 00000000 		.word	.LANCHOR13
 3118 00e8 00000000 		.word	.LANCHOR4
 3119              	.LBE162:
 3120              	.LBE165:
 3121              		.cfi_endproc
 3122              	.LFE155:
 3124              		.section	.text.vTaskSuspend,"ax",%progbits
 3125              		.align	1
 3126              		.global	vTaskSuspend
 3127              		.syntax unified
 3128              		.thumb
 3129              		.thumb_func
 3130              		.fpu fpv4-sp-d16
 3132              	vTaskSuspend:
 3133              	.LFB141:
1567:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
 3134              		.loc 1 1567 0
 3135              		.cfi_startproc
 3136              		@ args = 0, pretend = 0, frame = 0
 3137              		@ frame_needed = 0, uses_anonymous_args = 0
 3138              	.LVL268:
 3139 0000 38B5     		push	{r3, r4, r5, lr}
 3140              	.LCFI31:
 3141              		.cfi_def_cfa_offset 16
 3142              		.cfi_offset 3, -16
 3143              		.cfi_offset 4, -12
 3144              		.cfi_offset 5, -8
 3145              		.cfi_offset 14, -4
 3146 0002 0446     		mov	r4, r0
1570:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 3147              		.loc 1 1570 0
 3148 0004 FFF7FEFF 		bl	vPortEnterCritical
 3149              	.LVL269:
1574:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3150              		.loc 1 1574 0
 3151 0008 3CB3     		cbz	r4, .L296
 3152              	.LVL270:
 3153              	.L286:
1580:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 3154              		.loc 1 1580 0 discriminator 4
 3155 000a 251D     		adds	r5, r4, #4
 3156 000c 2846     		mov	r0, r5
 3157 000e FFF7FEFF 		bl	uxListRemove
 3158              	.LVL271:
 3159 0012 70B9     		cbnz	r0, .L287
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 151


1582:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 3160              		.loc 1 1582 0
 3161 0014 E26A     		ldr	r2, [r4, #44]
 3162 0016 02EB8201 		add	r1, r2, r2, lsl #2
 3163 001a 8B00     		lsls	r3, r1, #2
 3164 001c 2649     		ldr	r1, .L299
 3165 001e CB58     		ldr	r3, [r1, r3]
 3166 0020 3BB9     		cbnz	r3, .L287
1582:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 3167              		.loc 1 1582 0 is_stmt 0 discriminator 1
 3168 0022 0123     		movs	r3, #1
 3169 0024 03FA02F2 		lsl	r2, r3, r2
 3170 0028 2449     		ldr	r1, .L299+4
 3171 002a 0B68     		ldr	r3, [r1]
 3172 002c 23EA0203 		bic	r3, r3, r2
 3173 0030 0B60     		str	r3, [r1]
 3174              	.L287:
1590:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 3175              		.loc 1 1590 0 is_stmt 1
 3176 0032 A36A     		ldr	r3, [r4, #40]
 3177 0034 1BB1     		cbz	r3, .L288
1592:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 3178              		.loc 1 1592 0
 3179 0036 04F11800 		add	r0, r4, #24
 3180 003a FFF7FEFF 		bl	uxListRemove
 3181              	.LVL272:
 3182              	.L288:
1599:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 3183              		.loc 1 1599 0
 3184 003e 2946     		mov	r1, r5
 3185 0040 1F48     		ldr	r0, .L299+8
 3186 0042 FFF7FEFF 		bl	vListInsertEnd
 3187              	.LVL273:
1601:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3188              		.loc 1 1601 0
 3189 0046 FFF7FEFF 		bl	vPortExitCritical
 3190              	.LVL274:
1603:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 3191              		.loc 1 1603 0
 3192 004a 1E4B     		ldr	r3, .L299+12
 3193 004c 1B68     		ldr	r3, [r3]
 3194 004e 3BB9     		cbnz	r3, .L297
 3195              	.L289:
1618:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 3196              		.loc 1 1618 0
 3197 0050 1D4B     		ldr	r3, .L299+16
 3198 0052 1B68     		ldr	r3, [r3]
 3199 0054 A342     		cmp	r3, r4
 3200 0056 0AD0     		beq	.L298
 3201              	.L285:
1649:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3202              		.loc 1 1649 0
 3203 0058 38BD     		pop	{r3, r4, r5, pc}
 3204              	.LVL275:
 3205              	.L296:
1574:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3206              		.loc 1 1574 0 discriminator 1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 152


 3207 005a 1B4B     		ldr	r3, .L299+16
 3208 005c 1C68     		ldr	r4, [r3]
 3209              	.LVL276:
 3210 005e D4E7     		b	.L286
 3211              	.LVL277:
 3212              	.L297:
1607:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 3213              		.loc 1 1607 0
 3214 0060 FFF7FEFF 		bl	vPortEnterCritical
 3215              	.LVL278:
1609:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 3216              		.loc 1 1609 0
 3217 0064 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3218              	.LVL279:
1611:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 3219              		.loc 1 1611 0
 3220 0068 FFF7FEFF 		bl	vPortExitCritical
 3221              	.LVL280:
 3222 006c F0E7     		b	.L289
 3223              	.L298:
1620:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 3224              		.loc 1 1620 0
 3225 006e 154B     		ldr	r3, .L299+12
 3226 0070 1B68     		ldr	r3, [r3]
 3227 0072 A3B1     		cbz	r3, .L291
1623:../Middlewares/FreeRTOS//Source/tasks.c **** 				portYIELD_WITHIN_API();
 3228              		.loc 1 1623 0
 3229 0074 154B     		ldr	r3, .L299+20
 3230 0076 1B68     		ldr	r3, [r3]
 3231 0078 43B1     		cbz	r3, .L292
 3232              	.LBB166:
 3233              	.LBB167:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3234              		.loc 2 237 0
 3235              		.syntax unified
 3236              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3237 007a 4FF01003 			mov r3, #16												
 3238 007e 83F31188 		msr basepri, r3											
 3239 0082 BFF36F8F 		isb														
 3240 0086 BFF34F8F 		dsb														
 3241              	
 3242              	@ 0 "" 2
 3243              	.LVL281:
 3244              		.thumb
 3245              		.syntax unified
 3246              	.L293:
 3247 008a FEE7     		b	.L293
 3248              	.L292:
 3249              	.LBE167:
 3250              	.LBE166:
1624:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 3251              		.loc 1 1624 0
 3252 008c 104B     		ldr	r3, .L299+24
 3253 008e 4FF08052 		mov	r2, #268435456
 3254 0092 1A60     		str	r2, [r3]
 3255              		.syntax unified
 3256              	@ 1624 "../Middlewares/FreeRTOS//Source/tasks.c" 1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 153


 3257 0094 BFF34F8F 		dsb
 3258              	@ 0 "" 2
 3259              	@ 1624 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 3260 0098 BFF36F8F 		isb
 3261              	@ 0 "" 2
 3262              		.thumb
 3263              		.syntax unified
 3264 009c DCE7     		b	.L285
 3265              	.L291:
1631:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 3266              		.loc 1 1631 0
 3267 009e 084B     		ldr	r3, .L299+8
 3268 00a0 1A68     		ldr	r2, [r3]
 3269 00a2 0C4B     		ldr	r3, .L299+28
 3270 00a4 1B68     		ldr	r3, [r3]
 3271 00a6 9A42     		cmp	r2, r3
 3272 00a8 03D1     		bne	.L294
1637:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 3273              		.loc 1 1637 0
 3274 00aa 074B     		ldr	r3, .L299+16
 3275 00ac 0022     		movs	r2, #0
 3276 00ae 1A60     		str	r2, [r3]
 3277 00b0 D2E7     		b	.L285
 3278              	.L294:
1641:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 3279              		.loc 1 1641 0
 3280 00b2 FFF7FEFF 		bl	vTaskSwitchContext
 3281              	.LVL282:
1649:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3282              		.loc 1 1649 0
 3283 00b6 CFE7     		b	.L285
 3284              	.L300:
 3285              		.align	2
 3286              	.L299:
 3287 00b8 00000000 		.word	.LANCHOR4
 3288 00bc 00000000 		.word	.LANCHOR13
 3289 00c0 00000000 		.word	.LANCHOR0
 3290 00c4 00000000 		.word	.LANCHOR11
 3291 00c8 00000000 		.word	.LANCHOR10
 3292 00cc 00000000 		.word	.LANCHOR16
 3293 00d0 04ED00E0 		.word	-536810236
 3294 00d4 00000000 		.word	.LANCHOR9
 3295              		.cfi_endproc
 3296              	.LFE141:
 3298              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3299              		.align	1
 3300              		.global	vTaskPlaceOnEventList
 3301              		.syntax unified
 3302              		.thumb
 3303              		.thumb_func
 3304              		.fpu fpv4-sp-d16
 3306              	vTaskPlaceOnEventList:
 3307              	.LFB156:
2821:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxEventList );
 3308              		.loc 1 2821 0
 3309              		.cfi_startproc
 3310              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 154


 3311              		@ frame_needed = 0, uses_anonymous_args = 0
 3312              	.LVL283:
2822:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3313              		.loc 1 2822 0
 3314 0000 40B9     		cbnz	r0, .L302
 3315              	.LBB168:
 3316              	.LBB169:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3317              		.loc 2 237 0
 3318              		.syntax unified
 3319              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3320 0002 4FF01003 			mov r3, #16												
 3321 0006 83F31188 		msr basepri, r3											
 3322 000a BFF36F8F 		isb														
 3323 000e BFF34F8F 		dsb														
 3324              	
 3325              	@ 0 "" 2
 3326              	.LVL284:
 3327              		.thumb
 3328              		.syntax unified
 3329              	.L303:
 3330 0012 FEE7     		b	.L303
 3331              	.L302:
 3332              	.LBE169:
 3333              	.LBE168:
2821:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxEventList );
 3334              		.loc 1 2821 0
 3335 0014 10B5     		push	{r4, lr}
 3336              	.LCFI32:
 3337              		.cfi_def_cfa_offset 8
 3338              		.cfi_offset 4, -8
 3339              		.cfi_offset 14, -4
 3340 0016 0C46     		mov	r4, r1
2831:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3341              		.loc 1 2831 0
 3342 0018 044B     		ldr	r3, .L306
 3343 001a 1968     		ldr	r1, [r3]
 3344              	.LVL285:
 3345 001c 1831     		adds	r1, r1, #24
 3346 001e FFF7FEFF 		bl	vListInsert
 3347              	.LVL286:
2833:../Middlewares/FreeRTOS//Source/tasks.c **** }
 3348              		.loc 1 2833 0
 3349 0022 0121     		movs	r1, #1
 3350 0024 2046     		mov	r0, r4
 3351 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3352              	.LVL287:
2834:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 3353              		.loc 1 2834 0
 3354 002a 10BD     		pop	{r4, pc}
 3355              	.LVL288:
 3356              	.L307:
 3357              		.align	2
 3358              	.L306:
 3359 002c 00000000 		.word	.LANCHOR10
 3360              		.cfi_endproc
 3361              	.LFE156:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 155


 3363              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3364              		.align	1
 3365              		.global	vTaskPlaceOnUnorderedEventList
 3366              		.syntax unified
 3367              		.thumb
 3368              		.thumb_func
 3369              		.fpu fpv4-sp-d16
 3371              	vTaskPlaceOnUnorderedEventList:
 3372              	.LFB157:
2838:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxEventList );
 3373              		.loc 1 2838 0
 3374              		.cfi_startproc
 3375              		@ args = 0, pretend = 0, frame = 0
 3376              		@ frame_needed = 0, uses_anonymous_args = 0
 3377              	.LVL289:
2839:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3378              		.loc 1 2839 0
 3379 0000 40B9     		cbnz	r0, .L309
 3380              	.LBB170:
 3381              	.LBB171:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3382              		.loc 2 237 0
 3383              		.syntax unified
 3384              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3385 0002 4FF01003 			mov r3, #16												
 3386 0006 83F31188 		msr basepri, r3											
 3387 000a BFF36F8F 		isb														
 3388 000e BFF34F8F 		dsb														
 3389              	
 3390              	@ 0 "" 2
 3391              	.LVL290:
 3392              		.thumb
 3393              		.syntax unified
 3394              	.L310:
 3395 0012 FEE7     		b	.L310
 3396              	.L309:
 3397 0014 0346     		mov	r3, r0
 3398              	.LBE171:
 3399              	.LBE170:
2843:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3400              		.loc 1 2843 0
 3401 0016 0F48     		ldr	r0, .L315
 3402              	.LVL291:
 3403 0018 0068     		ldr	r0, [r0]
 3404 001a 40B9     		cbnz	r0, .L311
 3405              	.LBB172:
 3406              	.LBB173:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3407              		.loc 2 237 0
 3408              		.syntax unified
 3409              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3410 001c 4FF01003 			mov r3, #16												
 3411 0020 83F31188 		msr basepri, r3											
 3412 0024 BFF36F8F 		isb														
 3413 0028 BFF34F8F 		dsb														
 3414              	
 3415              	@ 0 "" 2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 156


 3416              	.LVL292:
 3417              		.thumb
 3418              		.syntax unified
 3419              	.L312:
 3420 002c FEE7     		b	.L312
 3421              	.LVL293:
 3422              	.L311:
 3423              	.LBE173:
 3424              	.LBE172:
2838:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxEventList );
 3425              		.loc 1 2838 0
 3426 002e 10B5     		push	{r4, lr}
 3427              	.LCFI33:
 3428              		.cfi_def_cfa_offset 8
 3429              		.cfi_offset 4, -8
 3430              		.cfi_offset 14, -4
 3431 0030 1846     		mov	r0, r3
 3432 0032 1446     		mov	r4, r2
 3433 0034 0B46     		mov	r3, r1
 3434              	.LVL294:
2848:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3435              		.loc 1 2848 0
 3436 0036 084A     		ldr	r2, .L315+4
 3437              	.LVL295:
 3438 0038 1168     		ldr	r1, [r2]
 3439              	.LVL296:
 3440 003a 43F00043 		orr	r3, r3, #-2147483648
 3441              	.LVL297:
 3442 003e 8B61     		str	r3, [r1, #24]
2855:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3443              		.loc 1 2855 0
 3444 0040 1168     		ldr	r1, [r2]
 3445 0042 1831     		adds	r1, r1, #24
 3446 0044 FFF7FEFF 		bl	vListInsertEnd
 3447              	.LVL298:
2857:../Middlewares/FreeRTOS//Source/tasks.c **** }
 3448              		.loc 1 2857 0
 3449 0048 0121     		movs	r1, #1
 3450 004a 2046     		mov	r0, r4
 3451 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3452              	.LVL299:
2858:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 3453              		.loc 1 2858 0
 3454 0050 10BD     		pop	{r4, pc}
 3455              	.LVL300:
 3456              	.L316:
 3457 0052 00BF     		.align	2
 3458              	.L315:
 3459 0054 00000000 		.word	.LANCHOR16
 3460 0058 00000000 		.word	.LANCHOR10
 3461              		.cfi_endproc
 3462              	.LFE157:
 3464              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3465              		.align	1
 3466              		.global	vTaskPlaceOnEventListRestricted
 3467              		.syntax unified
 3468              		.thumb
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 157


 3469              		.thumb_func
 3470              		.fpu fpv4-sp-d16
 3472              	vTaskPlaceOnEventListRestricted:
 3473              	.LFB158:
2864:../Middlewares/FreeRTOS//Source/tasks.c **** 		configASSERT( pxEventList );
 3474              		.loc 1 2864 0
 3475              		.cfi_startproc
 3476              		@ args = 0, pretend = 0, frame = 0
 3477              		@ frame_needed = 0, uses_anonymous_args = 0
 3478              	.LVL301:
 3479 0000 38B5     		push	{r3, r4, r5, lr}
 3480              	.LCFI34:
 3481              		.cfi_def_cfa_offset 16
 3482              		.cfi_offset 3, -16
 3483              		.cfi_offset 4, -12
 3484              		.cfi_offset 5, -8
 3485              		.cfi_offset 14, -4
2865:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3486              		.loc 1 2865 0
 3487 0002 40B9     		cbnz	r0, .L318
 3488              	.LBB174:
 3489              	.LBB175:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3490              		.loc 2 237 0
 3491              		.syntax unified
 3492              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3493 0004 4FF01003 			mov r3, #16												
 3494 0008 83F31188 		msr basepri, r3											
 3495 000c BFF36F8F 		isb														
 3496 0010 BFF34F8F 		dsb														
 3497              	
 3498              	@ 0 "" 2
 3499              	.LVL302:
 3500              		.thumb
 3501              		.syntax unified
 3502              	.L319:
 3503 0014 FEE7     		b	.L319
 3504              	.L318:
 3505 0016 0C46     		mov	r4, r1
 3506 0018 1546     		mov	r5, r2
 3507              	.LBE175:
 3508              	.LBE174:
2877:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3509              		.loc 1 2877 0
 3510 001a 064A     		ldr	r2, .L323
 3511              	.LVL303:
 3512 001c 1168     		ldr	r1, [r2]
 3513              	.LVL304:
 3514 001e 1831     		adds	r1, r1, #24
 3515 0020 FFF7FEFF 		bl	vListInsertEnd
 3516              	.LVL305:
2882:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 3517              		.loc 1 2882 0
 3518 0024 0DB1     		cbz	r5, .L320
2884:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 3519              		.loc 1 2884 0
 3520 0026 4FF0FF34 		mov	r4, #-1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 158


 3521              	.LVL306:
 3522              	.L320:
2888:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 3523              		.loc 1 2888 0
 3524 002a 2946     		mov	r1, r5
 3525 002c 2046     		mov	r0, r4
 3526 002e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3527              	.LVL307:
2889:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3528              		.loc 1 2889 0
 3529 0032 38BD     		pop	{r3, r4, r5, pc}
 3530              	.LVL308:
 3531              	.L324:
 3532              		.align	2
 3533              	.L323:
 3534 0034 00000000 		.word	.LANCHOR10
 3535              		.cfi_endproc
 3536              	.LFE158:
 3538              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3539              		.align	1
 3540              		.global	xTaskRemoveFromEventList
 3541              		.syntax unified
 3542              		.thumb
 3543              		.thumb_func
 3544              		.fpu fpv4-sp-d16
 3546              	xTaskRemoveFromEventList:
 3547              	.LFB159:
2895:../Middlewares/FreeRTOS//Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3548              		.loc 1 2895 0
 3549              		.cfi_startproc
 3550              		@ args = 0, pretend = 0, frame = 0
 3551              		@ frame_needed = 0, uses_anonymous_args = 0
 3552              	.LVL309:
 3553 0000 38B5     		push	{r3, r4, r5, lr}
 3554              	.LCFI35:
 3555              		.cfi_def_cfa_offset 16
 3556              		.cfi_offset 3, -16
 3557              		.cfi_offset 4, -12
 3558              		.cfi_offset 5, -8
 3559              		.cfi_offset 14, -4
2912:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3560              		.loc 1 2912 0
 3561 0002 C368     		ldr	r3, [r0, #12]
 3562 0004 DC68     		ldr	r4, [r3, #12]
 3563              	.LVL310:
2913:../Middlewares/FreeRTOS//Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3564              		.loc 1 2913 0
 3565 0006 44B9     		cbnz	r4, .L326
 3566              	.LBB176:
 3567              	.LBB177:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3568              		.loc 2 237 0
 3569              		.syntax unified
 3570              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3571 0008 4FF01003 			mov r3, #16												
 3572 000c 83F31188 		msr basepri, r3											
 3573 0010 BFF36F8F 		isb														
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 159


 3574 0014 BFF34F8F 		dsb														
 3575              	
 3576              	@ 0 "" 2
 3577              	.LVL311:
 3578              		.thumb
 3579              		.syntax unified
 3580              	.L327:
 3581 0018 FEE7     		b	.L327
 3582              	.L326:
 3583              	.LBE177:
 3584              	.LBE176:
2914:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3585              		.loc 1 2914 0
 3586 001a 04F11805 		add	r5, r4, #24
 3587 001e 2846     		mov	r0, r5
 3588              	.LVL312:
 3589 0020 FFF7FEFF 		bl	uxListRemove
 3590              	.LVL313:
2916:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 3591              		.loc 1 2916 0
 3592 0024 134B     		ldr	r3, .L333
 3593 0026 1B68     		ldr	r3, [r3]
 3594 0028 E3B9     		cbnz	r3, .L328
2918:../Middlewares/FreeRTOS//Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3595              		.loc 1 2918 0
 3596 002a 251D     		adds	r5, r4, #4
 3597 002c 2846     		mov	r0, r5
 3598 002e FFF7FEFF 		bl	uxListRemove
 3599              	.LVL314:
2919:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 3600              		.loc 1 2919 0
 3601 0032 E36A     		ldr	r3, [r4, #44]
 3602 0034 0122     		movs	r2, #1
 3603 0036 9A40     		lsls	r2, r2, r3
 3604 0038 0F49     		ldr	r1, .L333+4
 3605 003a 0868     		ldr	r0, [r1]
 3606 003c 0243     		orrs	r2, r2, r0
 3607 003e 0A60     		str	r2, [r1]
 3608 0040 03EB8303 		add	r3, r3, r3, lsl #2
 3609 0044 9A00     		lsls	r2, r3, #2
 3610 0046 2946     		mov	r1, r5
 3611 0048 0C48     		ldr	r0, .L333+8
 3612 004a 1044     		add	r0, r0, r2
 3613 004c FFF7FEFF 		bl	vListInsertEnd
 3614              	.LVL315:
 3615              	.L329:
2928:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 3616              		.loc 1 2928 0
 3617 0050 E26A     		ldr	r2, [r4, #44]
 3618 0052 0B4B     		ldr	r3, .L333+12
 3619 0054 1B68     		ldr	r3, [r3]
 3620 0056 DB6A     		ldr	r3, [r3, #44]
 3621 0058 9A42     		cmp	r2, r3
 3622 005a 08D9     		bls	.L331
 3623              	.LVL316:
2937:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 3624              		.loc 1 2937 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 160


 3625 005c 0120     		movs	r0, #1
 3626 005e 094B     		ldr	r3, .L333+16
 3627 0060 1860     		str	r0, [r3]
 3628              	.LVL317:
 3629              	.L325:
2959:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 3630              		.loc 1 2959 0
 3631 0062 38BD     		pop	{r3, r4, r5, pc}
 3632              	.LVL318:
 3633              	.L328:
2925:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 3634              		.loc 1 2925 0
 3635 0064 2946     		mov	r1, r5
 3636 0066 0848     		ldr	r0, .L333+20
 3637 0068 FFF7FEFF 		bl	vListInsertEnd
 3638              	.LVL319:
 3639 006c F0E7     		b	.L329
 3640              	.L331:
2941:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 3641              		.loc 1 2941 0
 3642 006e 0020     		movs	r0, #0
 3643              	.LVL320:
2958:../Middlewares/FreeRTOS//Source/tasks.c **** }
 3644              		.loc 1 2958 0
 3645 0070 F7E7     		b	.L325
 3646              	.L334:
 3647 0072 00BF     		.align	2
 3648              	.L333:
 3649 0074 00000000 		.word	.LANCHOR16
 3650 0078 00000000 		.word	.LANCHOR13
 3651 007c 00000000 		.word	.LANCHOR4
 3652 0080 00000000 		.word	.LANCHOR10
 3653 0084 00000000 		.word	.LANCHOR20
 3654 0088 00000000 		.word	.LANCHOR1
 3655              		.cfi_endproc
 3656              	.LFE159:
 3658              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3659              		.align	1
 3660              		.global	xTaskRemoveFromUnorderedEventList
 3661              		.syntax unified
 3662              		.thumb
 3663              		.thumb_func
 3664              		.fpu fpv4-sp-d16
 3666              	xTaskRemoveFromUnorderedEventList:
 3667              	.LFB160:
2963:../Middlewares/FreeRTOS//Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3668              		.loc 1 2963 0
 3669              		.cfi_startproc
 3670              		@ args = 0, pretend = 0, frame = 0
 3671              		@ frame_needed = 0, uses_anonymous_args = 0
 3672              	.LVL321:
 3673 0000 38B5     		push	{r3, r4, r5, lr}
 3674              	.LCFI36:
 3675              		.cfi_def_cfa_offset 16
 3676              		.cfi_offset 3, -16
 3677              		.cfi_offset 4, -12
 3678              		.cfi_offset 5, -8
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 161


 3679              		.cfi_offset 14, -4
2969:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3680              		.loc 1 2969 0
 3681 0002 1D4B     		ldr	r3, .L344
 3682 0004 1B68     		ldr	r3, [r3]
 3683 0006 43B9     		cbnz	r3, .L336
 3684              	.LBB178:
 3685              	.LBB179:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3686              		.loc 2 237 0
 3687              		.syntax unified
 3688              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3689 0008 4FF01003 			mov r3, #16												
 3690 000c 83F31188 		msr basepri, r3											
 3691 0010 BFF36F8F 		isb														
 3692 0014 BFF34F8F 		dsb														
 3693              	
 3694              	@ 0 "" 2
 3695              	.LVL322:
 3696              		.thumb
 3697              		.syntax unified
 3698              	.L337:
 3699 0018 FEE7     		b	.L337
 3700              	.L336:
 3701              	.LBE179:
 3702              	.LBE178:
2972:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3703              		.loc 1 2972 0
 3704 001a 41F00041 		orr	r1, r1, #-2147483648
 3705              	.LVL323:
 3706 001e 0160     		str	r1, [r0]
2976:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3707              		.loc 1 2976 0
 3708 0020 C468     		ldr	r4, [r0, #12]
 3709              	.LVL324:
2977:../Middlewares/FreeRTOS//Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3710              		.loc 1 2977 0
 3711 0022 F4B1     		cbz	r4, .L343
2978:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3712              		.loc 1 2978 0
 3713 0024 FFF7FEFF 		bl	uxListRemove
 3714              	.LVL325:
2983:../Middlewares/FreeRTOS//Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3715              		.loc 1 2983 0
 3716 0028 251D     		adds	r5, r4, #4
 3717 002a 2846     		mov	r0, r5
 3718 002c FFF7FEFF 		bl	uxListRemove
 3719              	.LVL326:
2984:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3720              		.loc 1 2984 0
 3721 0030 E36A     		ldr	r3, [r4, #44]
 3722 0032 0122     		movs	r2, #1
 3723 0034 9A40     		lsls	r2, r2, r3
 3724 0036 1149     		ldr	r1, .L344+4
 3725 0038 0868     		ldr	r0, [r1]
 3726 003a 0243     		orrs	r2, r2, r0
 3727 003c 0A60     		str	r2, [r1]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 162


 3728 003e 03EB8303 		add	r3, r3, r3, lsl #2
 3729 0042 9A00     		lsls	r2, r3, #2
 3730 0044 2946     		mov	r1, r5
 3731 0046 0E48     		ldr	r0, .L344+8
 3732 0048 1044     		add	r0, r0, r2
 3733 004a FFF7FEFF 		bl	vListInsertEnd
 3734              	.LVL327:
2986:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 3735              		.loc 1 2986 0
 3736 004e E26A     		ldr	r2, [r4, #44]
 3737 0050 0C4B     		ldr	r3, .L344+12
 3738 0052 1B68     		ldr	r3, [r3]
 3739 0054 DB6A     		ldr	r3, [r3, #44]
 3740 0056 9A42     		cmp	r2, r3
 3741 0058 0CD9     		bls	.L341
 3742              	.LVL328:
2996:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 3743              		.loc 1 2996 0
 3744 005a 0120     		movs	r0, #1
 3745 005c 0A4B     		ldr	r3, .L344+16
 3746 005e 1860     		str	r0, [r3]
 3747              	.LVL329:
 3748              	.L335:
3004:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 3749              		.loc 1 3004 0
 3750 0060 38BD     		pop	{r3, r4, r5, pc}
 3751              	.LVL330:
 3752              	.L343:
 3753              	.LBB180:
 3754              	.LBB181:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3755              		.loc 2 237 0
 3756              		.syntax unified
 3757              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3758 0062 4FF01003 			mov r3, #16												
 3759 0066 83F31188 		msr basepri, r3											
 3760 006a BFF36F8F 		isb														
 3761 006e BFF34F8F 		dsb														
 3762              	
 3763              	@ 0 "" 2
 3764              	.LVL331:
 3765              		.thumb
 3766              		.syntax unified
 3767              	.L339:
 3768 0072 FEE7     		b	.L339
 3769              	.LVL332:
 3770              	.L341:
 3771              	.LBE181:
 3772              	.LBE180:
3000:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 3773              		.loc 1 3000 0
 3774 0074 0020     		movs	r0, #0
 3775              	.LVL333:
3003:../Middlewares/FreeRTOS//Source/tasks.c **** }
 3776              		.loc 1 3003 0
 3777 0076 F3E7     		b	.L335
 3778              	.L345:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 163


 3779              		.align	2
 3780              	.L344:
 3781 0078 00000000 		.word	.LANCHOR16
 3782 007c 00000000 		.word	.LANCHOR13
 3783 0080 00000000 		.word	.LANCHOR4
 3784 0084 00000000 		.word	.LANCHOR10
 3785 0088 00000000 		.word	.LANCHOR20
 3786              		.cfi_endproc
 3787              	.LFE160:
 3789              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3790              		.align	1
 3791              		.global	vTaskSetTimeOutState
 3792              		.syntax unified
 3793              		.thumb
 3794              		.thumb_func
 3795              		.fpu fpv4-sp-d16
 3797              	vTaskSetTimeOutState:
 3798              	.LFB161:
3008:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxTimeOut );
 3799              		.loc 1 3008 0
 3800              		.cfi_startproc
 3801              		@ args = 0, pretend = 0, frame = 0
 3802              		@ frame_needed = 0, uses_anonymous_args = 0
 3803              		@ link register save eliminated.
 3804              	.LVL334:
3009:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3805              		.loc 1 3009 0
 3806 0000 30B1     		cbz	r0, .L349
3010:../Middlewares/FreeRTOS//Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3807              		.loc 1 3010 0
 3808 0002 084A     		ldr	r2, .L350
 3809 0004 1268     		ldr	r2, [r2]
 3810 0006 0260     		str	r2, [r0]
3011:../Middlewares/FreeRTOS//Source/tasks.c **** }
 3811              		.loc 1 3011 0
 3812 0008 074A     		ldr	r2, .L350+4
 3813 000a 1268     		ldr	r2, [r2]
 3814 000c 4260     		str	r2, [r0, #4]
3012:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 3815              		.loc 1 3012 0
 3816 000e 7047     		bx	lr
 3817              	.L349:
 3818              	.LBB182:
 3819              	.LBB183:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3820              		.loc 2 237 0
 3821              		.syntax unified
 3822              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3823 0010 4FF01003 			mov r3, #16												
 3824 0014 83F31188 		msr basepri, r3											
 3825 0018 BFF36F8F 		isb														
 3826 001c BFF34F8F 		dsb														
 3827              	
 3828              	@ 0 "" 2
 3829              	.LVL335:
 3830              		.thumb
 3831              		.syntax unified
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 164


 3832              	.L348:
 3833 0020 FEE7     		b	.L348
 3834              	.L351:
 3835 0022 00BF     		.align	2
 3836              	.L350:
 3837 0024 00000000 		.word	.LANCHOR18
 3838 0028 00000000 		.word	.LANCHOR14
 3839              	.LBE183:
 3840              	.LBE182:
 3841              		.cfi_endproc
 3842              	.LFE161:
 3844              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3845              		.align	1
 3846              		.global	xTaskCheckForTimeOut
 3847              		.syntax unified
 3848              		.thumb
 3849              		.thumb_func
 3850              		.fpu fpv4-sp-d16
 3852              	xTaskCheckForTimeOut:
 3853              	.LFB162:
3016:../Middlewares/FreeRTOS//Source/tasks.c **** BaseType_t xReturn;
 3854              		.loc 1 3016 0
 3855              		.cfi_startproc
 3856              		@ args = 0, pretend = 0, frame = 0
 3857              		@ frame_needed = 0, uses_anonymous_args = 0
 3858              	.LVL336:
 3859 0000 38B5     		push	{r3, r4, r5, lr}
 3860              	.LCFI37:
 3861              		.cfi_def_cfa_offset 16
 3862              		.cfi_offset 3, -16
 3863              		.cfi_offset 4, -12
 3864              		.cfi_offset 5, -8
 3865              		.cfi_offset 14, -4
3019:../Middlewares/FreeRTOS//Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3866              		.loc 1 3019 0
 3867 0002 50B1     		cbz	r0, .L363
 3868 0004 0446     		mov	r4, r0
3020:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3869              		.loc 1 3020 0
 3870 0006 89B9     		cbnz	r1, .L355
 3871              	.LBB184:
 3872              	.LBB185:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3873              		.loc 2 237 0
 3874              		.syntax unified
 3875              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3876 0008 4FF01003 			mov r3, #16												
 3877 000c 83F31188 		msr basepri, r3											
 3878 0010 BFF36F8F 		isb														
 3879 0014 BFF34F8F 		dsb														
 3880              	
 3881              	@ 0 "" 2
 3882              	.LVL337:
 3883              		.thumb
 3884              		.syntax unified
 3885              	.L356:
 3886 0018 FEE7     		b	.L356
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 165


 3887              	.L363:
 3888              	.LBE185:
 3889              	.LBE184:
 3890              	.LBB186:
 3891              	.LBB187:
 3892              		.syntax unified
 3893              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3894 001a 4FF01003 			mov r3, #16												
 3895 001e 83F31188 		msr basepri, r3											
 3896 0022 BFF36F8F 		isb														
 3897 0026 BFF34F8F 		dsb														
 3898              	
 3899              	@ 0 "" 2
 3900              	.LVL338:
 3901              		.thumb
 3902              		.syntax unified
 3903              	.L354:
 3904 002a FEE7     		b	.L354
 3905              	.L355:
 3906 002c 0D46     		mov	r5, r1
 3907              	.LBE187:
 3908              	.LBE186:
3022:../Middlewares/FreeRTOS//Source/tasks.c **** 	{
 3909              		.loc 1 3022 0
 3910 002e FFF7FEFF 		bl	vPortEnterCritical
 3911              	.LVL339:
 3912              	.LBB188:
3025:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3913              		.loc 1 3025 0
 3914 0032 114B     		ldr	r3, .L365
 3915 0034 1968     		ldr	r1, [r3]
 3916              	.LVL340:
3039:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 3917              		.loc 1 3039 0
 3918 0036 2B68     		ldr	r3, [r5]
 3919 0038 B3F1FF3F 		cmp	r3, #-1
 3920 003c 18D0     		beq	.L359
3049:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 3921              		.loc 1 3049 0
 3922 003e 2068     		ldr	r0, [r4]
 3923 0040 0E4A     		ldr	r2, .L365+4
 3924 0042 1268     		ldr	r2, [r2]
 3925 0044 9042     		cmp	r0, r2
 3926 0046 02D0     		beq	.L358
3049:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 3927              		.loc 1 3049 0 is_stmt 0 discriminator 1
 3928 0048 6268     		ldr	r2, [r4, #4]
 3929 004a 8A42     		cmp	r2, r1
 3930 004c 12D9     		bls	.L360
 3931              	.L358:
3058:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 3932              		.loc 1 3058 0 is_stmt 1
 3933 004e 6268     		ldr	r2, [r4, #4]
 3934 0050 881A     		subs	r0, r1, r2
 3935 0052 8342     		cmp	r3, r0
 3936 0054 04D8     		bhi	.L364
3067:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 166


 3937              		.loc 1 3067 0
 3938 0056 0124     		movs	r4, #1
 3939              	.LVL341:
 3940              	.L357:
 3941              	.LBE188:
3070:../Middlewares/FreeRTOS//Source/tasks.c **** 
 3942              		.loc 1 3070 0
 3943 0058 FFF7FEFF 		bl	vPortExitCritical
 3944              	.LVL342:
3073:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 3945              		.loc 1 3073 0
 3946 005c 2046     		mov	r0, r4
 3947 005e 38BD     		pop	{r3, r4, r5, pc}
 3948              	.LVL343:
 3949              	.L364:
 3950              	.LBB189:
3061:../Middlewares/FreeRTOS//Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3951              		.loc 1 3061 0
 3952 0060 521A     		subs	r2, r2, r1
 3953 0062 1344     		add	r3, r3, r2
 3954 0064 2B60     		str	r3, [r5]
3062:../Middlewares/FreeRTOS//Source/tasks.c **** 			xReturn = pdFALSE;
 3955              		.loc 1 3062 0
 3956 0066 2046     		mov	r0, r4
 3957 0068 FFF7FEFF 		bl	vTaskSetTimeOutState
 3958              	.LVL344:
3063:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 3959              		.loc 1 3063 0
 3960 006c 0024     		movs	r4, #0
 3961              	.LVL345:
 3962 006e F3E7     		b	.L357
 3963              	.LVL346:
 3964              	.L359:
3044:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 3965              		.loc 1 3044 0
 3966 0070 0024     		movs	r4, #0
 3967              	.LVL347:
 3968 0072 F1E7     		b	.L357
 3969              	.LVL348:
 3970              	.L360:
3056:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 3971              		.loc 1 3056 0
 3972 0074 0124     		movs	r4, #1
 3973              	.LVL349:
 3974 0076 EFE7     		b	.L357
 3975              	.L366:
 3976              		.align	2
 3977              	.L365:
 3978 0078 00000000 		.word	.LANCHOR14
 3979 007c 00000000 		.word	.LANCHOR18
 3980              	.LBE189:
 3981              		.cfi_endproc
 3982              	.LFE162:
 3984              		.section	.text.vTaskMissedYield,"ax",%progbits
 3985              		.align	1
 3986              		.global	vTaskMissedYield
 3987              		.syntax unified
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 167


 3988              		.thumb
 3989              		.thumb_func
 3990              		.fpu fpv4-sp-d16
 3992              	vTaskMissedYield:
 3993              	.LFB163:
3077:../Middlewares/FreeRTOS//Source/tasks.c **** 	xYieldPending = pdTRUE;
 3994              		.loc 1 3077 0
 3995              		.cfi_startproc
 3996              		@ args = 0, pretend = 0, frame = 0
 3997              		@ frame_needed = 0, uses_anonymous_args = 0
 3998              		@ link register save eliminated.
3078:../Middlewares/FreeRTOS//Source/tasks.c **** }
 3999              		.loc 1 3078 0
 4000 0000 014B     		ldr	r3, .L368
 4001 0002 0122     		movs	r2, #1
 4002 0004 1A60     		str	r2, [r3]
3079:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 4003              		.loc 1 3079 0
 4004 0006 7047     		bx	lr
 4005              	.L369:
 4006              		.align	2
 4007              	.L368:
 4008 0008 00000000 		.word	.LANCHOR20
 4009              		.cfi_endproc
 4010              	.LFE163:
 4012              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4013              		.align	1
 4014              		.global	uxTaskGetTaskNumber
 4015              		.syntax unified
 4016              		.thumb
 4017              		.thumb_func
 4018              		.fpu fpv4-sp-d16
 4020              	uxTaskGetTaskNumber:
 4021              	.LFB164:
3085:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxReturn;
 4022              		.loc 1 3085 0
 4023              		.cfi_startproc
 4024              		@ args = 0, pretend = 0, frame = 0
 4025              		@ frame_needed = 0, uses_anonymous_args = 0
 4026              		@ link register save eliminated.
 4027              	.LVL350:
3089:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 4028              		.loc 1 3089 0
 4029 0000 08B1     		cbz	r0, .L372
 4030              	.LVL351:
3092:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4031              		.loc 1 3092 0
 4032 0002 C06C     		ldr	r0, [r0, #76]
 4033              	.LVL352:
 4034 0004 7047     		bx	lr
 4035              	.LVL353:
 4036              	.L372:
3096:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4037              		.loc 1 3096 0
 4038 0006 0020     		movs	r0, #0
 4039              	.LVL354:
3100:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 168


 4040              		.loc 1 3100 0
 4041 0008 7047     		bx	lr
 4042              		.cfi_endproc
 4043              	.LFE164:
 4045              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4046              		.align	1
 4047              		.global	vTaskSetTaskNumber
 4048              		.syntax unified
 4049              		.thumb
 4050              		.thumb_func
 4051              		.fpu fpv4-sp-d16
 4053              	vTaskSetTaskNumber:
 4054              	.LFB165:
3108:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
 4055              		.loc 1 3108 0
 4056              		.cfi_startproc
 4057              		@ args = 0, pretend = 0, frame = 0
 4058              		@ frame_needed = 0, uses_anonymous_args = 0
 4059              		@ link register save eliminated.
 4060              	.LVL355:
3111:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 4061              		.loc 1 3111 0
 4062 0000 00B1     		cbz	r0, .L373
 4063              	.LVL356:
3114:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4064              		.loc 1 3114 0
 4065 0002 C164     		str	r1, [r0, #76]
 4066              	.LVL357:
 4067              	.L373:
3116:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4068              		.loc 1 3116 0
 4069 0004 7047     		bx	lr
 4070              		.cfi_endproc
 4071              	.LFE165:
 4073              		.section	.text.vTaskGetInfo,"ax",%progbits
 4074              		.align	1
 4075              		.global	vTaskGetInfo
 4076              		.syntax unified
 4077              		.thumb
 4078              		.thumb_func
 4079              		.fpu fpv4-sp-d16
 4081              	vTaskGetInfo:
 4082              	.LFB169:
3412:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
 4083              		.loc 1 3412 0
 4084              		.cfi_startproc
 4085              		@ args = 0, pretend = 0, frame = 0
 4086              		@ frame_needed = 0, uses_anonymous_args = 0
 4087              	.LVL358:
 4088 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4089              	.LCFI38:
 4090              		.cfi_def_cfa_offset 24
 4091              		.cfi_offset 4, -24
 4092              		.cfi_offset 5, -20
 4093              		.cfi_offset 6, -16
 4094              		.cfi_offset 7, -12
 4095              		.cfi_offset 8, -8
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 169


 4096              		.cfi_offset 14, -4
 4097 0004 0C46     		mov	r4, r1
 4098 0006 1746     		mov	r7, r2
 4099 0008 1E46     		mov	r6, r3
3416:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4100              		.loc 1 3416 0
 4101 000a 8046     		mov	r8, r0
 4102 000c C8B1     		cbz	r0, .L385
 4103 000e 0546     		mov	r5, r0
 4104              	.LVL359:
 4105              	.L376:
3418:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4106              		.loc 1 3418 0 discriminator 4
 4107 0010 2560     		str	r5, [r4]
3419:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4108              		.loc 1 3419 0 discriminator 4
 4109 0012 05F13403 		add	r3, r5, #52
 4110 0016 6360     		str	r3, [r4, #4]
3420:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4111              		.loc 1 3420 0 discriminator 4
 4112 0018 EB6A     		ldr	r3, [r5, #44]
 4113 001a 2361     		str	r3, [r4, #16]
3421:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4114              		.loc 1 3421 0 discriminator 4
 4115 001c 2B6B     		ldr	r3, [r5, #48]
 4116 001e E361     		str	r3, [r4, #28]
3422:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4117              		.loc 1 3422 0 discriminator 4
 4118 0020 AB6C     		ldr	r3, [r5, #72]
 4119 0022 A360     		str	r3, [r4, #8]
3429:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 4120              		.loc 1 3429 0 discriminator 4
 4121 0024 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 4122 0026 032B     		cmp	r3, #3
 4123 0028 0ED0     		beq	.L386
 4124              	.LVL360:
 4125              	.L377:
3445:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4126              		.loc 1 3445 0
 4127 002a 2B6D     		ldr	r3, [r5, #80]
 4128 002c 6361     		str	r3, [r4, #20]
3455:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4129              		.loc 1 3455 0
 4130 002e AB6D     		ldr	r3, [r5, #88]
 4131 0030 A361     		str	r3, [r4, #24]
3466:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 4132              		.loc 1 3466 0
 4133 0032 052E     		cmp	r6, #5
 4134 0034 11D0     		beq	.L379
3468:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4135              		.loc 1 3468 0
 4136 0036 2673     		strb	r6, [r4, #12]
 4137              	.L380:
3477:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 4138              		.loc 1 3477 0
 4139 0038 A7B9     		cbnz	r7, .L387
3491:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 170


 4140              		.loc 1 3491 0
 4141 003a 0023     		movs	r3, #0
 4142 003c 2384     		strh	r3, [r4, #32]	@ movhi
 4143              	.L375:
3493:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4144              		.loc 1 3493 0
 4145 003e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4146              	.LVL361:
 4147              	.L385:
3416:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4148              		.loc 1 3416 0 discriminator 1
 4149 0042 0B4B     		ldr	r3, .L388
 4150              	.LVL362:
 4151 0044 1D68     		ldr	r5, [r3]
 4152 0046 E3E7     		b	.L376
 4153              	.LVL363:
 4154              	.L386:
3431:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 4155              		.loc 1 3431 0
 4156 0048 FFF7FEFF 		bl	vTaskSuspendAll
 4157              	.LVL364:
3433:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 4158              		.loc 1 3433 0
 4159 004c AB6A     		ldr	r3, [r5, #40]
 4160 004e 0BB1     		cbz	r3, .L378
3435:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 4161              		.loc 1 3435 0
 4162 0050 0223     		movs	r3, #2
 4163 0052 2373     		strb	r3, [r4, #12]
 4164              	.L378:
3438:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 4165              		.loc 1 3438 0
 4166 0054 FFF7FEFF 		bl	xTaskResumeAll
 4167              	.LVL365:
 4168 0058 E7E7     		b	.L377
 4169              	.L379:
3472:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4170              		.loc 1 3472 0
 4171 005a 4046     		mov	r0, r8
 4172 005c FFF7FEFF 		bl	eTaskGetState
 4173              	.LVL366:
 4174 0060 2073     		strb	r0, [r4, #12]
 4175 0062 E9E7     		b	.L380
 4176              	.L387:
3485:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 4177              		.loc 1 3485 0
 4178 0064 286B     		ldr	r0, [r5, #48]
 4179 0066 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4180              	.LVL367:
 4181 006a 2084     		strh	r0, [r4, #32]	@ movhi
 4182 006c E7E7     		b	.L375
 4183              	.L389:
 4184 006e 00BF     		.align	2
 4185              	.L388:
 4186 0070 00000000 		.word	.LANCHOR10
 4187              		.cfi_endproc
 4188              	.LFE169:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 171


 4190              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 4191              		.align	1
 4192              		.syntax unified
 4193              		.thumb
 4194              		.thumb_func
 4195              		.fpu fpv4-sp-d16
 4197              	prvListTasksWithinSingleList:
 4198              	.LFB170:
3501:../Middlewares/FreeRTOS//Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
 4199              		.loc 1 3501 0
 4200              		.cfi_startproc
 4201              		@ args = 0, pretend = 0, frame = 0
 4202              		@ frame_needed = 0, uses_anonymous_args = 0
 4203              	.LVL368:
 4204 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 4205              	.LCFI39:
 4206              		.cfi_def_cfa_offset 32
 4207              		.cfi_offset 4, -32
 4208              		.cfi_offset 5, -28
 4209              		.cfi_offset 6, -24
 4210              		.cfi_offset 7, -20
 4211              		.cfi_offset 8, -16
 4212              		.cfi_offset 9, -12
 4213              		.cfi_offset 10, -8
 4214              		.cfi_offset 14, -4
 4215              	.LVL369:
3505:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 4216              		.loc 1 3505 0
 4217 0004 0C68     		ldr	r4, [r1]
 4218 0006 3CB3     		cbz	r4, .L390
 4219              	.LVL370:
 4220              	.LBB190:
3507:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4221              		.loc 1 3507 0
 4222 0008 4B68     		ldr	r3, [r1, #4]
 4223 000a 5B68     		ldr	r3, [r3, #4]
 4224 000c 4B60     		str	r3, [r1, #4]
 4225 000e 01F10809 		add	r9, r1, #8
 4226 0012 4B45     		cmp	r3, r9
 4227 0014 07D0     		beq	.L396
 4228              	.L392:
 4229 0016 9046     		mov	r8, r2
 4230 0018 0D46     		mov	r5, r1
 4231 001a 0746     		mov	r7, r0
3507:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4232              		.loc 1 3507 0 is_stmt 0 discriminator 3
 4233 001c 4B68     		ldr	r3, [r1, #4]
 4234 001e D3F80CA0 		ldr	r10, [r3, #12]
 4235              	.LVL371:
 4236              	.LBE190:
3503:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4237              		.loc 1 3503 0 is_stmt 1 discriminator 3
 4238 0022 0024     		movs	r4, #0
 4239 0024 10E0     		b	.L394
 4240              	.LVL372:
 4241              	.L396:
 4242              	.LBB191:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 172


3507:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4243              		.loc 1 3507 0 discriminator 1
 4244 0026 5B68     		ldr	r3, [r3, #4]
 4245 0028 4B60     		str	r3, [r1, #4]
 4246 002a F4E7     		b	.L392
 4247              	.LVL373:
 4248              	.L393:
 4249              	.LBE191:
 4250              	.LBB192:
3515:../Middlewares/FreeRTOS//Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4251              		.loc 1 3515 0 discriminator 3
 4252 002c 6B68     		ldr	r3, [r5, #4]
 4253 002e DE68     		ldr	r6, [r3, #12]
 4254              	.LVL374:
 4255              	.LBE192:
3516:../Middlewares/FreeRTOS//Source/tasks.c **** 				uxTask++;
 4256              		.loc 1 3516 0 discriminator 3
 4257 0030 04EBC403 		add	r3, r4, r4, lsl #3
 4258 0034 9900     		lsls	r1, r3, #2
 4259 0036 4346     		mov	r3, r8
 4260 0038 0122     		movs	r2, #1
 4261 003a 3944     		add	r1, r1, r7
 4262 003c 3046     		mov	r0, r6
 4263 003e FFF7FEFF 		bl	vTaskGetInfo
 4264              	.LVL375:
3517:../Middlewares/FreeRTOS//Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4265              		.loc 1 3517 0 discriminator 3
 4266 0042 0134     		adds	r4, r4, #1
 4267              	.LVL376:
3518:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4268              		.loc 1 3518 0 discriminator 3
 4269 0044 B245     		cmp	r10, r6
 4270 0046 07D0     		beq	.L390
 4271              	.LVL377:
 4272              	.L394:
 4273              	.LBB193:
3515:../Middlewares/FreeRTOS//Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4274              		.loc 1 3515 0
 4275 0048 6B68     		ldr	r3, [r5, #4]
 4276 004a 5B68     		ldr	r3, [r3, #4]
 4277 004c 6B60     		str	r3, [r5, #4]
 4278 004e 9945     		cmp	r9, r3
 4279 0050 ECD1     		bne	.L393
3515:../Middlewares/FreeRTOS//Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4280              		.loc 1 3515 0 is_stmt 0 discriminator 1
 4281 0052 5B68     		ldr	r3, [r3, #4]
 4282 0054 6B60     		str	r3, [r5, #4]
 4283 0056 E9E7     		b	.L393
 4284              	.LVL378:
 4285              	.L390:
 4286              	.LBE193:
3526:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4287              		.loc 1 3526 0 is_stmt 1
 4288 0058 2046     		mov	r0, r4
 4289 005a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4290              		.cfi_endproc
 4291              	.LFE170:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 173


 4293              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 4294              		.align	1
 4295              		.global	uxTaskGetSystemState
 4296              		.syntax unified
 4297              		.thumb
 4298              		.thumb_func
 4299              		.fpu fpv4-sp-d16
 4301              	uxTaskGetSystemState:
 4302              	.LFB153:
2322:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4303              		.loc 1 2322 0
 4304              		.cfi_startproc
 4305              		@ args = 0, pretend = 0, frame = 0
 4306              		@ frame_needed = 0, uses_anonymous_args = 0
 4307              	.LVL379:
 4308 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4309              	.LCFI40:
 4310              		.cfi_def_cfa_offset 24
 4311              		.cfi_offset 3, -24
 4312              		.cfi_offset 4, -20
 4313              		.cfi_offset 5, -16
 4314              		.cfi_offset 6, -12
 4315              		.cfi_offset 7, -8
 4316              		.cfi_offset 14, -4
 4317 0002 0746     		mov	r7, r0
 4318 0004 0C46     		mov	r4, r1
 4319 0006 1646     		mov	r6, r2
 4320              	.LVL380:
2325:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 4321              		.loc 1 2325 0
 4322 0008 FFF7FEFF 		bl	vTaskSuspendAll
 4323              	.LVL381:
2328:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 4324              		.loc 1 2328 0
 4325 000c 224B     		ldr	r3, .L402
 4326 000e 1B68     		ldr	r3, [r3]
 4327 0010 A342     		cmp	r3, r4
 4328 0012 3CD8     		bhi	.L400
2323:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4329              		.loc 1 2323 0
 4330 0014 0A25     		movs	r5, #10
 4331 0016 0024     		movs	r4, #0
 4332              	.LVL382:
 4333              	.L399:
2334:../Middlewares/FreeRTOS//Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 4334              		.loc 1 2334 0 discriminator 1
 4335 0018 013D     		subs	r5, r5, #1
 4336              	.LVL383:
2335:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4337              		.loc 1 2335 0 discriminator 1
 4338 001a 04EBC403 		add	r3, r4, r4, lsl #3
 4339 001e 9800     		lsls	r0, r3, #2
 4340 0020 05EB8502 		add	r2, r5, r5, lsl #2
 4341 0024 9300     		lsls	r3, r2, #2
 4342 0026 0122     		movs	r2, #1
 4343 0028 1C49     		ldr	r1, .L402+4
 4344 002a 1944     		add	r1, r1, r3
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 174


 4345 002c 3844     		add	r0, r0, r7
 4346 002e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4347              	.LVL384:
 4348 0032 0444     		add	r4, r4, r0
 4349              	.LVL385:
2337:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4350              		.loc 1 2337 0 discriminator 1
 4351 0034 002D     		cmp	r5, #0
 4352 0036 EFD1     		bne	.L399
2341:../Middlewares/FreeRTOS//Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4353              		.loc 1 2341 0
 4354 0038 04EBC403 		add	r3, r4, r4, lsl #3
 4355 003c 9800     		lsls	r0, r3, #2
 4356 003e 184B     		ldr	r3, .L402+8
 4357 0040 1968     		ldr	r1, [r3]
 4358 0042 0222     		movs	r2, #2
 4359 0044 3844     		add	r0, r0, r7
 4360 0046 FFF7FEFF 		bl	prvListTasksWithinSingleList
 4361              	.LVL386:
 4362 004a 0444     		add	r4, r4, r0
 4363              	.LVL387:
2342:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4364              		.loc 1 2342 0
 4365 004c 04EBC403 		add	r3, r4, r4, lsl #3
 4366 0050 9800     		lsls	r0, r3, #2
 4367 0052 144B     		ldr	r3, .L402+12
 4368 0054 1968     		ldr	r1, [r3]
 4369 0056 0222     		movs	r2, #2
 4370 0058 3844     		add	r0, r0, r7
 4371 005a FFF7FEFF 		bl	prvListTasksWithinSingleList
 4372              	.LVL388:
 4373 005e 0444     		add	r4, r4, r0
 4374              	.LVL389:
2348:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 4375              		.loc 1 2348 0
 4376 0060 04EBC403 		add	r3, r4, r4, lsl #3
 4377 0064 9800     		lsls	r0, r3, #2
 4378 0066 0422     		movs	r2, #4
 4379 0068 0F49     		ldr	r1, .L402+16
 4380 006a 3844     		add	r0, r0, r7
 4381 006c FFF7FEFF 		bl	prvListTasksWithinSingleList
 4382              	.LVL390:
 4383 0070 0444     		add	r4, r4, r0
 4384              	.LVL391:
2356:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 4385              		.loc 1 2356 0
 4386 0072 04EBC403 		add	r3, r4, r4, lsl #3
 4387 0076 9800     		lsls	r0, r3, #2
 4388 0078 0322     		movs	r2, #3
 4389 007a 0C49     		ldr	r1, .L402+20
 4390 007c 3844     		add	r0, r0, r7
 4391 007e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4392              	.LVL392:
 4393 0082 0444     		add	r4, r4, r0
 4394              	.LVL393:
2362:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 4395              		.loc 1 2362 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 175


 4396 0084 26B1     		cbz	r6, .L398
2367:../Middlewares/FreeRTOS//Source/tasks.c **** 						#endif
 4397              		.loc 1 2367 0
 4398 0086 0A4B     		ldr	r3, .L402+24
 4399 0088 1B68     		ldr	r3, [r3]
 4400 008a 3360     		str	r3, [r6]
 4401 008c 00E0     		b	.L398
 4402              	.LVL394:
 4403              	.L400:
2323:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4404              		.loc 1 2323 0
 4405 008e 0024     		movs	r4, #0
 4406              	.LVL395:
 4407              	.L398:
2385:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4408              		.loc 1 2385 0
 4409 0090 FFF7FEFF 		bl	xTaskResumeAll
 4410              	.LVL396:
2388:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4411              		.loc 1 2388 0
 4412 0094 2046     		mov	r0, r4
 4413 0096 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4414              	.LVL397:
 4415              	.L403:
 4416              		.align	2
 4417              	.L402:
 4418 0098 00000000 		.word	.LANCHOR9
 4419 009c 00000000 		.word	.LANCHOR4
 4420 00a0 00000000 		.word	.LANCHOR2
 4421 00a4 00000000 		.word	.LANCHOR8
 4422 00a8 00000000 		.word	.LANCHOR7
 4423 00ac 00000000 		.word	.LANCHOR0
 4424 00b0 00000000 		.word	ulHighFrequencyTimerTicks
 4425              		.cfi_endproc
 4426              	.LFE153:
 4428              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4429              		.align	1
 4430              		.global	xTaskGetCurrentTaskHandle
 4431              		.syntax unified
 4432              		.thumb
 4433              		.thumb_func
 4434              		.fpu fpv4-sp-d16
 4436              	xTaskGetCurrentTaskHandle:
 4437              	.LFB174:
3662:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskHandle_t xReturn;
 4438              		.loc 1 3662 0
 4439              		.cfi_startproc
 4440              		@ args = 0, pretend = 0, frame = 0
 4441              		@ frame_needed = 0, uses_anonymous_args = 0
 4442              		@ link register save eliminated.
3668:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4443              		.loc 1 3668 0
 4444 0000 014B     		ldr	r3, .L405
 4445 0002 1868     		ldr	r0, [r3]
 4446              	.LVL398:
3671:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4447              		.loc 1 3671 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 176


 4448 0004 7047     		bx	lr
 4449              	.L406:
 4450 0006 00BF     		.align	2
 4451              	.L405:
 4452 0008 00000000 		.word	.LANCHOR10
 4453              		.cfi_endproc
 4454              	.LFE174:
 4456              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4457              		.align	1
 4458              		.global	xTaskGetSchedulerState
 4459              		.syntax unified
 4460              		.thumb
 4461              		.thumb_func
 4462              		.fpu fpv4-sp-d16
 4464              	xTaskGetSchedulerState:
 4465              	.LFB175:
3679:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn;
 4466              		.loc 1 3679 0
 4467              		.cfi_startproc
 4468              		@ args = 0, pretend = 0, frame = 0
 4469              		@ frame_needed = 0, uses_anonymous_args = 0
 4470              		@ link register save eliminated.
3682:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 4471              		.loc 1 3682 0
 4472 0000 054B     		ldr	r3, .L412
 4473 0002 1B68     		ldr	r3, [r3]
 4474 0004 33B1     		cbz	r3, .L409
3688:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 4475              		.loc 1 3688 0
 4476 0006 054B     		ldr	r3, .L412+4
 4477 0008 1B68     		ldr	r3, [r3]
 4478 000a 0BB1     		cbz	r3, .L411
3694:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 4479              		.loc 1 3694 0
 4480 000c 0020     		movs	r0, #0
 4481              	.LVL399:
3699:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4482              		.loc 1 3699 0
 4483 000e 7047     		bx	lr
 4484              	.LVL400:
 4485              	.L411:
3690:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 4486              		.loc 1 3690 0
 4487 0010 0220     		movs	r0, #2
 4488 0012 7047     		bx	lr
 4489              	.L409:
3684:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4490              		.loc 1 3684 0
 4491 0014 0120     		movs	r0, #1
 4492 0016 7047     		bx	lr
 4493              	.L413:
 4494              		.align	2
 4495              	.L412:
 4496 0018 00000000 		.word	.LANCHOR11
 4497 001c 00000000 		.word	.LANCHOR16
 4498              		.cfi_endproc
 4499              	.LFE175:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 177


 4501              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 4502              		.align	1
 4503              		.global	vTaskPriorityInherit
 4504              		.syntax unified
 4505              		.thumb
 4506              		.thumb_func
 4507              		.fpu fpv4-sp-d16
 4509              	vTaskPriorityInherit:
 4510              	.LFB176:
3707:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4511              		.loc 1 3707 0
 4512              		.cfi_startproc
 4513              		@ args = 0, pretend = 0, frame = 0
 4514              		@ frame_needed = 0, uses_anonymous_args = 0
 4515              	.LVL401:
3712:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 4516              		.loc 1 3712 0
 4517 0000 0028     		cmp	r0, #0
 4518 0002 45D0     		beq	.L421
3707:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4519              		.loc 1 3707 0
 4520 0004 38B5     		push	{r3, r4, r5, lr}
 4521              	.LCFI41:
 4522              		.cfi_def_cfa_offset 16
 4523              		.cfi_offset 3, -16
 4524              		.cfi_offset 4, -12
 4525              		.cfi_offset 5, -8
 4526              		.cfi_offset 14, -4
 4527 0006 0446     		mov	r4, r0
3717:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 4528              		.loc 1 3717 0
 4529 0008 C26A     		ldr	r2, [r0, #44]
 4530 000a 2249     		ldr	r1, .L425
 4531 000c 0968     		ldr	r1, [r1]
 4532 000e C96A     		ldr	r1, [r1, #44]
 4533 0010 8A42     		cmp	r2, r1
 4534 0012 14D2     		bcs	.L414
3722:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 4535              		.loc 1 3722 0
 4536 0014 8169     		ldr	r1, [r0, #24]
 4537 0016 0029     		cmp	r1, #0
 4538 0018 05DB     		blt	.L416
3724:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 4539              		.loc 1 3724 0
 4540 001a 1E49     		ldr	r1, .L425
 4541 001c 0968     		ldr	r1, [r1]
 4542 001e C96A     		ldr	r1, [r1, #44]
 4543 0020 C1F10A01 		rsb	r1, r1, #10
 4544 0024 8161     		str	r1, [r0, #24]
 4545              	.L416:
3733:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 4546              		.loc 1 3733 0
 4547 0026 6069     		ldr	r0, [r4, #20]
 4548              	.LVL402:
 4549 0028 02EB8202 		add	r2, r2, r2, lsl #2
 4550 002c 9100     		lsls	r1, r2, #2
 4551 002e 1A4A     		ldr	r2, .L425+4
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 178


 4552 0030 0A44     		add	r2, r2, r1
 4553 0032 9042     		cmp	r0, r2
 4554 0034 04D0     		beq	.L424
3751:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 4555              		.loc 1 3751 0
 4556 0036 174A     		ldr	r2, .L425
 4557 0038 1268     		ldr	r2, [r2]
 4558 003a D26A     		ldr	r2, [r2, #44]
 4559 003c E262     		str	r2, [r4, #44]
 4560              	.L414:
3765:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4561              		.loc 1 3765 0
 4562 003e 38BD     		pop	{r3, r4, r5, pc}
 4563              	.LVL403:
 4564              	.L424:
3735:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 4565              		.loc 1 3735 0
 4566 0040 251D     		adds	r5, r4, #4
 4567 0042 2846     		mov	r0, r5
 4568 0044 FFF7FEFF 		bl	uxListRemove
 4569              	.LVL404:
 4570 0048 90B1     		cbz	r0, .L418
 4571              	.L419:
3745:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4572              		.loc 1 3745 0
 4573 004a 124B     		ldr	r3, .L425
 4574 004c 1B68     		ldr	r3, [r3]
 4575 004e DB6A     		ldr	r3, [r3, #44]
 4576 0050 E362     		str	r3, [r4, #44]
3746:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 4577              		.loc 1 3746 0
 4578 0052 0122     		movs	r2, #1
 4579 0054 9A40     		lsls	r2, r2, r3
 4580 0056 1149     		ldr	r1, .L425+8
 4581 0058 0868     		ldr	r0, [r1]
 4582 005a 0243     		orrs	r2, r2, r0
 4583 005c 0A60     		str	r2, [r1]
 4584 005e 03EB8303 		add	r3, r3, r3, lsl #2
 4585 0062 9A00     		lsls	r2, r3, #2
 4586 0064 2946     		mov	r1, r5
 4587 0066 0C48     		ldr	r0, .L425+4
 4588 0068 1044     		add	r0, r0, r2
 4589 006a FFF7FEFF 		bl	vListInsertEnd
 4590              	.LVL405:
3765:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4591              		.loc 1 3765 0
 4592 006e E6E7     		b	.L414
 4593              	.L418:
3737:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 4594              		.loc 1 3737 0
 4595 0070 E36A     		ldr	r3, [r4, #44]
 4596 0072 03EB8301 		add	r1, r3, r3, lsl #2
 4597 0076 8A00     		lsls	r2, r1, #2
 4598 0078 0749     		ldr	r1, .L425+4
 4599 007a 8A58     		ldr	r2, [r1, r2]
 4600 007c 002A     		cmp	r2, #0
 4601 007e E4D1     		bne	.L419
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 179


3737:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 4602              		.loc 1 3737 0 is_stmt 0 discriminator 1
 4603 0080 0122     		movs	r2, #1
 4604 0082 9A40     		lsls	r2, r2, r3
 4605 0084 0549     		ldr	r1, .L425+8
 4606 0086 0B68     		ldr	r3, [r1]
 4607 0088 23EA0203 		bic	r3, r3, r2
 4608 008c 0B60     		str	r3, [r1]
 4609 008e DCE7     		b	.L419
 4610              	.LVL406:
 4611              	.L421:
 4612              	.LCFI42:
 4613              		.cfi_def_cfa_offset 0
 4614              		.cfi_restore 3
 4615              		.cfi_restore 4
 4616              		.cfi_restore 5
 4617              		.cfi_restore 14
 4618 0090 7047     		bx	lr
 4619              	.L426:
 4620 0092 00BF     		.align	2
 4621              	.L425:
 4622 0094 00000000 		.word	.LANCHOR10
 4623 0098 00000000 		.word	.LANCHOR4
 4624 009c 00000000 		.word	.LANCHOR13
 4625              		.cfi_endproc
 4626              	.LFE176:
 4628              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4629              		.align	1
 4630              		.global	xTaskPriorityDisinherit
 4631              		.syntax unified
 4632              		.thumb
 4633              		.thumb_func
 4634              		.fpu fpv4-sp-d16
 4636              	xTaskPriorityDisinherit:
 4637              	.LFB177:
3773:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4638              		.loc 1 3773 0 is_stmt 1
 4639              		.cfi_startproc
 4640              		@ args = 0, pretend = 0, frame = 0
 4641              		@ frame_needed = 0, uses_anonymous_args = 0
 4642              	.LVL407:
3777:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 4643              		.loc 1 3777 0
 4644 0000 0028     		cmp	r0, #0
 4645 0002 49D0     		beq	.L434
3773:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4646              		.loc 1 3773 0
 4647 0004 38B5     		push	{r3, r4, r5, lr}
 4648              	.LCFI43:
 4649              		.cfi_def_cfa_offset 16
 4650              		.cfi_offset 3, -16
 4651              		.cfi_offset 4, -12
 4652              		.cfi_offset 5, -8
 4653              		.cfi_offset 14, -4
 4654 0006 0446     		mov	r4, r0
3783:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4655              		.loc 1 3783 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 180


 4656 0008 264A     		ldr	r2, .L441
 4657 000a 1268     		ldr	r2, [r2]
 4658 000c 8242     		cmp	r2, r0
 4659 000e 08D0     		beq	.L429
 4660              	.LBB194:
 4661              	.LBB195:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4662              		.loc 2 237 0
 4663              		.syntax unified
 4664              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4665 0010 4FF01003 			mov r3, #16												
 4666 0014 83F31188 		msr basepri, r3											
 4667 0018 BFF36F8F 		isb														
 4668 001c BFF34F8F 		dsb														
 4669              	
 4670              	@ 0 "" 2
 4671              	.LVL408:
 4672              		.thumb
 4673              		.syntax unified
 4674              	.L430:
 4675 0020 FEE7     		b	.L430
 4676              	.L429:
 4677              	.LBE195:
 4678              	.LBE194:
3785:../Middlewares/FreeRTOS//Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4679              		.loc 1 3785 0
 4680 0022 426D     		ldr	r2, [r0, #84]
 4681 0024 42B9     		cbnz	r2, .L431
 4682              	.LBB196:
 4683              	.LBB197:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4684              		.loc 2 237 0
 4685              		.syntax unified
 4686              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4687 0026 4FF01003 			mov r3, #16												
 4688 002a 83F31188 		msr basepri, r3											
 4689 002e BFF36F8F 		isb														
 4690 0032 BFF34F8F 		dsb														
 4691              	
 4692              	@ 0 "" 2
 4693              	.LVL409:
 4694              		.thumb
 4695              		.syntax unified
 4696              	.L432:
 4697 0036 FEE7     		b	.L432
 4698              	.L431:
 4699              	.LBE197:
 4700              	.LBE196:
3786:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4701              		.loc 1 3786 0
 4702 0038 013A     		subs	r2, r2, #1
 4703 003a 4265     		str	r2, [r0, #84]
3790:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 4704              		.loc 1 3790 0
 4705 003c C06A     		ldr	r0, [r0, #44]
 4706              	.LVL410:
 4707 003e 216D     		ldr	r1, [r4, #80]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 181


 4708 0040 8842     		cmp	r0, r1
 4709 0042 2BD0     		beq	.L435
3793:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 4710              		.loc 1 3793 0
 4711 0044 62BB     		cbnz	r2, .L436
3800:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 4712              		.loc 1 3800 0
 4713 0046 251D     		adds	r5, r4, #4
 4714 0048 2846     		mov	r0, r5
 4715 004a FFF7FEFF 		bl	uxListRemove
 4716              	.LVL411:
 4717 004e 70B9     		cbnz	r0, .L433
3802:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 4718              		.loc 1 3802 0
 4719 0050 E26A     		ldr	r2, [r4, #44]
 4720 0052 1423     		movs	r3, #20
 4721 0054 03FB02F3 		mul	r3, r3, r2
 4722 0058 1349     		ldr	r1, .L441+4
 4723 005a CB58     		ldr	r3, [r1, r3]
 4724 005c 3BB9     		cbnz	r3, .L433
3802:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 4725              		.loc 1 3802 0 is_stmt 0 discriminator 1
 4726 005e 0123     		movs	r3, #1
 4727 0060 03FA02F2 		lsl	r2, r3, r2
 4728 0064 1149     		ldr	r1, .L441+8
 4729 0066 0B68     		ldr	r3, [r1]
 4730 0068 23EA0203 		bic	r3, r3, r2
 4731 006c 0B60     		str	r3, [r1]
 4732              	.L433:
3812:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4733              		.loc 1 3812 0 is_stmt 1
 4734 006e 236D     		ldr	r3, [r4, #80]
 4735 0070 E362     		str	r3, [r4, #44]
3817:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4736              		.loc 1 3817 0
 4737 0072 C3F10A02 		rsb	r2, r3, #10
 4738 0076 A261     		str	r2, [r4, #24]
3818:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4739              		.loc 1 3818 0
 4740 0078 0124     		movs	r4, #1
 4741              	.LVL412:
 4742 007a 04FA03F2 		lsl	r2, r4, r3
 4743 007e 0B49     		ldr	r1, .L441+8
 4744 0080 0868     		ldr	r0, [r1]
 4745 0082 0243     		orrs	r2, r2, r0
 4746 0084 0A60     		str	r2, [r1]
 4747 0086 2946     		mov	r1, r5
 4748 0088 074A     		ldr	r2, .L441+4
 4749 008a 1420     		movs	r0, #20
 4750 008c 00FB0320 		mla	r0, r0, r3, r2
 4751 0090 FFF7FEFF 		bl	vListInsertEnd
 4752              	.LVL413:
3828:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 4753              		.loc 1 3828 0
 4754 0094 2046     		mov	r0, r4
 4755              	.LVL414:
 4756              	.L427:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 182


3846:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4757              		.loc 1 3846 0
 4758 0096 38BD     		pop	{r3, r4, r5, pc}
 4759              	.LVL415:
 4760              	.L434:
 4761              	.LCFI44:
 4762              		.cfi_def_cfa_offset 0
 4763              		.cfi_restore 3
 4764              		.cfi_restore 4
 4765              		.cfi_restore 5
 4766              		.cfi_restore 14
3775:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4767              		.loc 1 3775 0
 4768 0098 0020     		movs	r0, #0
 4769              	.LVL416:
3846:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4770              		.loc 1 3846 0
 4771 009a 7047     		bx	lr
 4772              	.LVL417:
 4773              	.L435:
 4774              	.LCFI45:
 4775              		.cfi_def_cfa_offset 16
 4776              		.cfi_offset 3, -16
 4777              		.cfi_offset 4, -12
 4778              		.cfi_offset 5, -8
 4779              		.cfi_offset 14, -4
3775:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4780              		.loc 1 3775 0
 4781 009c 0020     		movs	r0, #0
 4782 009e FAE7     		b	.L427
 4783              	.L436:
 4784 00a0 0020     		movs	r0, #0
3845:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 4785              		.loc 1 3845 0
 4786 00a2 F8E7     		b	.L427
 4787              	.L442:
 4788              		.align	2
 4789              	.L441:
 4790 00a4 00000000 		.word	.LANCHOR10
 4791 00a8 00000000 		.word	.LANCHOR4
 4792 00ac 00000000 		.word	.LANCHOR13
 4793              		.cfi_endproc
 4794              	.LFE177:
 4796              		.section	.text.vTaskList,"ax",%progbits
 4797              		.align	1
 4798              		.global	vTaskList
 4799              		.syntax unified
 4800              		.thumb
 4801              		.thumb_func
 4802              		.fpu fpv4-sp-d16
 4804              	vTaskList:
 4805              	.LFB179:
3943:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 4806              		.loc 1 3943 0
 4807              		.cfi_startproc
 4808              		@ args = 0, pretend = 0, frame = 8
 4809              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 183


 4810              	.LVL418:
 4811 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4812              	.LCFI46:
 4813              		.cfi_def_cfa_offset 20
 4814              		.cfi_offset 4, -20
 4815              		.cfi_offset 5, -16
 4816              		.cfi_offset 6, -12
 4817              		.cfi_offset 7, -8
 4818              		.cfi_offset 14, -4
 4819 0002 85B0     		sub	sp, sp, #20
 4820              	.LCFI47:
 4821              		.cfi_def_cfa_offset 40
 4822 0004 0546     		mov	r5, r0
3974:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4823              		.loc 1 3974 0
 4824 0006 0023     		movs	r3, #0
 4825 0008 0370     		strb	r3, [r0]
3978:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4826              		.loc 1 3978 0
 4827 000a 324B     		ldr	r3, .L456
 4828 000c 1A68     		ldr	r2, [r3]
 4829 000e 0392     		str	r2, [sp, #12]
3983:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4830              		.loc 1 3983 0
 4831 0010 1B68     		ldr	r3, [r3]
 4832 0012 03EBC303 		add	r3, r3, r3, lsl #3
 4833 0016 9800     		lsls	r0, r3, #2
 4834              	.LVL419:
 4835 0018 FFF7FEFF 		bl	pvPortMalloc
 4836              	.LVL420:
3985:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 4837              		.loc 1 3985 0
 4838 001c 0028     		cmp	r0, #0
 4839 001e 56D0     		beq	.L443
 4840 0020 0446     		mov	r4, r0
3988:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4841              		.loc 1 3988 0
 4842 0022 0399     		ldr	r1, [sp, #12]
 4843 0024 0022     		movs	r2, #0
 4844 0026 FFF7FEFF 		bl	uxTaskGetSystemState
 4845              	.LVL421:
 4846 002a 0390     		str	r0, [sp, #12]
3991:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 4847              		.loc 1 3991 0
 4848 002c 0023     		movs	r3, #0
 4849 002e 0293     		str	r3, [sp, #8]
 4850 0030 31E0     		b	.L445
 4851              	.L447:
3995:../Middlewares/FreeRTOS//Source/tasks.c **** 										break;
 4852              		.loc 1 3995 0
 4853 0032 5226     		movs	r6, #82
 4854 0034 06E0     		b	.L449
 4855              	.L450:
 4856              	.LVL422:
4001:../Middlewares/FreeRTOS//Source/tasks.c **** 										break;
 4857              		.loc 1 4001 0
 4858 0036 5326     		movs	r6, #83
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 184


4002:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4859              		.loc 1 4002 0
 4860 0038 04E0     		b	.L449
 4861              	.LVL423:
 4862              	.L451:
4004:../Middlewares/FreeRTOS//Source/tasks.c **** 										break;
 4863              		.loc 1 4004 0
 4864 003a 4426     		movs	r6, #68
4005:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4865              		.loc 1 4005 0
 4866 003c 02E0     		b	.L449
 4867              	.LVL424:
 4868              	.L446:
4009:../Middlewares/FreeRTOS//Source/tasks.c **** 										break;
 4869              		.loc 1 4009 0
 4870 003e 0026     		movs	r6, #0
4010:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 4871              		.loc 1 4010 0
 4872 0040 00E0     		b	.L449
 4873              	.LVL425:
 4874              	.L453:
3998:../Middlewares/FreeRTOS//Source/tasks.c **** 										break;
 4875              		.loc 1 3998 0
 4876 0042 4226     		movs	r6, #66
 4877              	.L449:
 4878              	.LVL426:
4015:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4879              		.loc 1 4015 0 discriminator 2
 4880 0044 029B     		ldr	r3, [sp, #8]
 4881 0046 03EBC303 		add	r3, r3, r3, lsl #3
 4882 004a 9A00     		lsls	r2, r3, #2
 4883 004c 2244     		add	r2, r2, r4
 4884 004e 5168     		ldr	r1, [r2, #4]
 4885 0050 2846     		mov	r0, r5
 4886 0052 FFF7FEFF 		bl	prvWriteNameToBuffer
 4887              	.LVL427:
 4888 0056 0546     		mov	r5, r0
 4889              	.LVL428:
4018:../Middlewares/FreeRTOS//Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
 4890              		.loc 1 4018 0 discriminator 2
 4891 0058 029B     		ldr	r3, [sp, #8]
 4892 005a 03EBC303 		add	r3, r3, r3, lsl #3
 4893 005e 9A00     		lsls	r2, r3, #2
 4894 0060 2244     		add	r2, r2, r4
 4895 0062 1369     		ldr	r3, [r2, #16]
 4896 0064 029A     		ldr	r2, [sp, #8]
 4897 0066 02EBC202 		add	r2, r2, r2, lsl #3
 4898 006a 9100     		lsls	r1, r2, #2
 4899 006c 2144     		add	r1, r1, r4
 4900 006e 0F8C     		ldrh	r7, [r1, #32]
 4901 0070 029A     		ldr	r2, [sp, #8]
 4902 0072 02EBC202 		add	r2, r2, r2, lsl #3
 4903 0076 9100     		lsls	r1, r2, #2
 4904 0078 2144     		add	r1, r1, r4
 4905 007a 8A68     		ldr	r2, [r1, #8]
 4906 007c 0192     		str	r2, [sp, #4]
 4907 007e 0097     		str	r7, [sp]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 185


 4908 0080 3246     		mov	r2, r6
 4909 0082 1549     		ldr	r1, .L456+4
 4910 0084 FFF7FEFF 		bl	sprintf
 4911              	.LVL429:
4019:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 4912              		.loc 1 4019 0 discriminator 2
 4913 0088 2846     		mov	r0, r5
 4914 008a FFF7FEFF 		bl	strlen
 4915              	.LVL430:
 4916 008e 0544     		add	r5, r5, r0
 4917              	.LVL431:
3991:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 4918              		.loc 1 3991 0 discriminator 2
 4919 0090 029B     		ldr	r3, [sp, #8]
 4920 0092 0133     		adds	r3, r3, #1
 4921 0094 0293     		str	r3, [sp, #8]
 4922              	.LVL432:
 4923              	.L445:
3991:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 4924              		.loc 1 3991 0 is_stmt 0 discriminator 1
 4925 0096 029A     		ldr	r2, [sp, #8]
 4926 0098 039B     		ldr	r3, [sp, #12]
 4927 009a 9A42     		cmp	r2, r3
 4928 009c 14D2     		bcs	.L455
3993:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 4929              		.loc 1 3993 0 is_stmt 1
 4930 009e 029B     		ldr	r3, [sp, #8]
 4931 00a0 03EBC303 		add	r3, r3, r3, lsl #3
 4932 00a4 9A00     		lsls	r2, r3, #2
 4933 00a6 2244     		add	r2, r2, r4
 4934 00a8 137B     		ldrb	r3, [r2, #12]	@ zero_extendqisi2
 4935 00aa 013B     		subs	r3, r3, #1
 4936 00ac 032B     		cmp	r3, #3
 4937 00ae C6D8     		bhi	.L446
 4938 00b0 01A2     		adr	r2, .L448
 4939 00b2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4940 00b6 00BF     		.p2align 2
 4941              	.L448:
 4942 00b8 33000000 		.word	.L447+1
 4943 00bc 43000000 		.word	.L453+1
 4944 00c0 37000000 		.word	.L450+1
 4945 00c4 3B000000 		.word	.L451+1
 4946              		.p2align 1
 4947              	.L455:
4024:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 4948              		.loc 1 4024 0
 4949 00c8 2046     		mov	r0, r4
 4950 00ca FFF7FEFF 		bl	vPortFree
 4951              	.LVL433:
 4952              	.L443:
4030:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4953              		.loc 1 4030 0
 4954 00ce 05B0     		add	sp, sp, #20
 4955              	.LCFI48:
 4956              		.cfi_def_cfa_offset 20
 4957              		@ sp needed
 4958 00d0 F0BD     		pop	{r4, r5, r6, r7, pc}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 186


 4959              	.LVL434:
 4960              	.L457:
 4961 00d2 00BF     		.align	2
 4962              	.L456:
 4963 00d4 00000000 		.word	.LANCHOR9
 4964 00d8 00000000 		.word	.LC1
 4965              		.cfi_endproc
 4966              	.LFE179:
 4968              		.section	.text.vTaskGetRunTimeStats,"ax",%progbits
 4969              		.align	1
 4970              		.global	vTaskGetRunTimeStats
 4971              		.syntax unified
 4972              		.thumb
 4973              		.thumb_func
 4974              		.fpu fpv4-sp-d16
 4976              	vTaskGetRunTimeStats:
 4977              	.LFB180:
4038:../Middlewares/FreeRTOS//Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 4978              		.loc 1 4038 0
 4979              		.cfi_startproc
 4980              		@ args = 0, pretend = 0, frame = 16
 4981              		@ frame_needed = 0, uses_anonymous_args = 0
 4982              	.LVL435:
 4983 0000 70B5     		push	{r4, r5, r6, lr}
 4984              	.LCFI49:
 4985              		.cfi_def_cfa_offset 16
 4986              		.cfi_offset 4, -16
 4987              		.cfi_offset 5, -12
 4988              		.cfi_offset 6, -8
 4989              		.cfi_offset 14, -4
 4990 0002 84B0     		sub	sp, sp, #16
 4991              	.LCFI50:
 4992              		.cfi_def_cfa_offset 32
 4993 0004 0446     		mov	r4, r0
4075:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4994              		.loc 1 4075 0
 4995 0006 0023     		movs	r3, #0
 4996 0008 0370     		strb	r3, [r0]
4079:../Middlewares/FreeRTOS//Source/tasks.c **** 
 4997              		.loc 1 4079 0
 4998 000a 2A4B     		ldr	r3, .L466
 4999 000c 1A68     		ldr	r2, [r3]
 5000 000e 0392     		str	r2, [sp, #12]
4084:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5001              		.loc 1 4084 0
 5002 0010 1B68     		ldr	r3, [r3]
 5003 0012 03EBC303 		add	r3, r3, r3, lsl #3
 5004 0016 9800     		lsls	r0, r3, #2
 5005              	.LVL436:
 5006 0018 FFF7FEFF 		bl	pvPortMalloc
 5007              	.LVL437:
4086:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 5008              		.loc 1 4086 0
 5009 001c 0028     		cmp	r0, #0
 5010 001e 47D0     		beq	.L458
 5011 0020 0546     		mov	r5, r0
4089:../Middlewares/FreeRTOS//Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 187


 5012              		.loc 1 4089 0
 5013 0022 0399     		ldr	r1, [sp, #12]
 5014 0024 01AA     		add	r2, sp, #4
 5015 0026 FFF7FEFF 		bl	uxTaskGetSystemState
 5016              	.LVL438:
 5017 002a 0390     		str	r0, [sp, #12]
4092:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5018              		.loc 1 4092 0
 5019 002c 019B     		ldr	r3, [sp, #4]
 5020 002e 224A     		ldr	r2, .L466+4
 5021 0030 A2FB0323 		umull	r2, r3, r2, r3
 5022 0034 5B09     		lsrs	r3, r3, #5
 5023 0036 0193     		str	r3, [sp, #4]
4095:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5024              		.loc 1 4095 0
 5025 0038 002B     		cmp	r3, #0
 5026 003a 36D0     		beq	.L460
4098:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 5027              		.loc 1 4098 0
 5028 003c 0023     		movs	r3, #0
 5029 003e 0293     		str	r3, [sp, #8]
 5030 0040 0FE0     		b	.L461
 5031              	.LVL439:
 5032              	.L462:
4136:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
 5033              		.loc 1 4136 0
 5034 0042 029B     		ldr	r3, [sp, #8]
 5035 0044 03EBC303 		add	r3, r3, r3, lsl #3
 5036 0048 9A00     		lsls	r2, r3, #2
 5037 004a 2A44     		add	r2, r2, r5
 5038 004c 9269     		ldr	r2, [r2, #24]
 5039 004e 1B49     		ldr	r1, .L466+8
 5040 0050 FFF7FEFF 		bl	sprintf
 5041              	.LVL440:
 5042              	.L463:
4141:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 5043              		.loc 1 4141 0 discriminator 2
 5044 0054 2046     		mov	r0, r4
 5045 0056 FFF7FEFF 		bl	strlen
 5046              	.LVL441:
 5047 005a 0444     		add	r4, r4, r0
 5048              	.LVL442:
4098:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 5049              		.loc 1 4098 0 discriminator 2
 5050 005c 029B     		ldr	r3, [sp, #8]
 5051 005e 0133     		adds	r3, r3, #1
 5052 0060 0293     		str	r3, [sp, #8]
 5053              	.LVL443:
 5054              	.L461:
4098:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 5055              		.loc 1 4098 0 is_stmt 0 discriminator 1
 5056 0062 029A     		ldr	r2, [sp, #8]
 5057 0064 039B     		ldr	r3, [sp, #12]
 5058 0066 9A42     		cmp	r2, r3
 5059 0068 1FD2     		bcs	.L460
4103:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5060              		.loc 1 4103 0 is_stmt 1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 188


 5061 006a 029B     		ldr	r3, [sp, #8]
 5062 006c 03EBC303 		add	r3, r3, r3, lsl #3
 5063 0070 9A00     		lsls	r2, r3, #2
 5064 0072 2A44     		add	r2, r2, r5
 5065 0074 9669     		ldr	r6, [r2, #24]
 5066 0076 019B     		ldr	r3, [sp, #4]
 5067 0078 B6FBF3F6 		udiv	r6, r6, r3
 5068              	.LVL444:
4108:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5069              		.loc 1 4108 0
 5070 007c 029B     		ldr	r3, [sp, #8]
 5071 007e 03EBC303 		add	r3, r3, r3, lsl #3
 5072 0082 9A00     		lsls	r2, r3, #2
 5073 0084 2A44     		add	r2, r2, r5
 5074 0086 5168     		ldr	r1, [r2, #4]
 5075 0088 2046     		mov	r0, r4
 5076 008a FFF7FEFF 		bl	prvWriteNameToBuffer
 5077              	.LVL445:
 5078 008e 0446     		mov	r4, r0
 5079              	.LVL446:
4110:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 5080              		.loc 1 4110 0
 5081 0090 002E     		cmp	r6, #0
 5082 0092 D6D0     		beq	.L462
4120:../Middlewares/FreeRTOS//Source/tasks.c **** 						}
 5083              		.loc 1 4120 0
 5084 0094 029B     		ldr	r3, [sp, #8]
 5085 0096 03EBC303 		add	r3, r3, r3, lsl #3
 5086 009a 9A00     		lsls	r2, r3, #2
 5087 009c 2A44     		add	r2, r2, r5
 5088 009e 3346     		mov	r3, r6
 5089 00a0 9269     		ldr	r2, [r2, #24]
 5090 00a2 0749     		ldr	r1, .L466+12
 5091 00a4 FFF7FEFF 		bl	sprintf
 5092              	.LVL447:
 5093 00a8 D4E7     		b	.L463
 5094              	.LVL448:
 5095              	.L460:
4151:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 5096              		.loc 1 4151 0
 5097 00aa 2846     		mov	r0, r5
 5098 00ac FFF7FEFF 		bl	vPortFree
 5099              	.LVL449:
 5100              	.L458:
4157:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5101              		.loc 1 4157 0
 5102 00b0 04B0     		add	sp, sp, #16
 5103              	.LCFI51:
 5104              		.cfi_def_cfa_offset 16
 5105              		@ sp needed
 5106 00b2 70BD     		pop	{r4, r5, r6, pc}
 5107              	.LVL450:
 5108              	.L467:
 5109              		.align	2
 5110              	.L466:
 5111 00b4 00000000 		.word	.LANCHOR9
 5112 00b8 1F85EB51 		.word	1374389535
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 189


 5113 00bc 0C000000 		.word	.LC3
 5114 00c0 00000000 		.word	.LC2
 5115              		.cfi_endproc
 5116              	.LFE180:
 5118              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5119              		.align	1
 5120              		.global	uxTaskResetEventItemValue
 5121              		.syntax unified
 5122              		.thumb
 5123              		.thumb_func
 5124              		.fpu fpv4-sp-d16
 5126              	uxTaskResetEventItemValue:
 5127              	.LFB181:
4163:../Middlewares/FreeRTOS//Source/tasks.c **** TickType_t uxReturn;
 5128              		.loc 1 4163 0
 5129              		.cfi_startproc
 5130              		@ args = 0, pretend = 0, frame = 0
 5131              		@ frame_needed = 0, uses_anonymous_args = 0
 5132              		@ link register save eliminated.
4166:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5133              		.loc 1 4166 0
 5134 0000 044A     		ldr	r2, .L469
 5135 0002 1368     		ldr	r3, [r2]
 5136 0004 9869     		ldr	r0, [r3, #24]
 5137              	.LVL451:
4170:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5138              		.loc 1 4170 0
 5139 0006 1368     		ldr	r3, [r2]
 5140 0008 DB6A     		ldr	r3, [r3, #44]
 5141 000a 1268     		ldr	r2, [r2]
 5142 000c C3F10A03 		rsb	r3, r3, #10
 5143 0010 9361     		str	r3, [r2, #24]
4173:../Middlewares/FreeRTOS//Source/tasks.c **** /*-----------------------------------------------------------*/
 5144              		.loc 1 4173 0
 5145 0012 7047     		bx	lr
 5146              	.L470:
 5147              		.align	2
 5148              	.L469:
 5149 0014 00000000 		.word	.LANCHOR10
 5150              		.cfi_endproc
 5151              	.LFE181:
 5153              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5154              		.align	1
 5155              		.global	pvTaskIncrementMutexHeldCount
 5156              		.syntax unified
 5157              		.thumb
 5158              		.thumb_func
 5159              		.fpu fpv4-sp-d16
 5161              	pvTaskIncrementMutexHeldCount:
 5162              	.LFB182:
4179:../Middlewares/FreeRTOS//Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 5163              		.loc 1 4179 0
 5164              		.cfi_startproc
 5165              		@ args = 0, pretend = 0, frame = 0
 5166              		@ frame_needed = 0, uses_anonymous_args = 0
 5167              		@ link register save eliminated.
4182:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 190


 5168              		.loc 1 4182 0
 5169 0000 054B     		ldr	r3, .L473
 5170 0002 1B68     		ldr	r3, [r3]
 5171 0004 23B1     		cbz	r3, .L472
4184:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 5172              		.loc 1 4184 0
 5173 0006 044B     		ldr	r3, .L473
 5174 0008 1A68     		ldr	r2, [r3]
 5175 000a 536D     		ldr	r3, [r2, #84]
 5176 000c 0133     		adds	r3, r3, #1
 5177 000e 5365     		str	r3, [r2, #84]
 5178              	.L472:
4187:../Middlewares/FreeRTOS//Source/tasks.c **** 	}
 5179              		.loc 1 4187 0
 5180 0010 014B     		ldr	r3, .L473
 5181 0012 1868     		ldr	r0, [r3]
4188:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5182              		.loc 1 4188 0
 5183 0014 7047     		bx	lr
 5184              	.L474:
 5185 0016 00BF     		.align	2
 5186              	.L473:
 5187 0018 00000000 		.word	.LANCHOR10
 5188              		.cfi_endproc
 5189              	.LFE182:
 5191              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5192              		.align	1
 5193              		.global	ulTaskNotifyTake
 5194              		.syntax unified
 5195              		.thumb
 5196              		.thumb_func
 5197              		.fpu fpv4-sp-d16
 5199              	ulTaskNotifyTake:
 5200              	.LFB183:
4196:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint32_t ulReturn;
 5201              		.loc 1 4196 0
 5202              		.cfi_startproc
 5203              		@ args = 0, pretend = 0, frame = 0
 5204              		@ frame_needed = 0, uses_anonymous_args = 0
 5205              	.LVL452:
 5206 0000 38B5     		push	{r3, r4, r5, lr}
 5207              	.LCFI52:
 5208              		.cfi_def_cfa_offset 16
 5209              		.cfi_offset 3, -16
 5210              		.cfi_offset 4, -12
 5211              		.cfi_offset 5, -8
 5212              		.cfi_offset 14, -4
 5213 0002 0546     		mov	r5, r0
 5214 0004 0C46     		mov	r4, r1
4199:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 5215              		.loc 1 4199 0
 5216 0006 FFF7FEFF 		bl	vPortEnterCritical
 5217              	.LVL453:
4202:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5218              		.loc 1 4202 0
 5219 000a 194B     		ldr	r3, .L482
 5220 000c 1B68     		ldr	r3, [r3]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 191


 5221 000e DB6D     		ldr	r3, [r3, #92]
 5222 0010 2BB9     		cbnz	r3, .L476
4205:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5223              		.loc 1 4205 0
 5224 0012 174B     		ldr	r3, .L482
 5225 0014 1B68     		ldr	r3, [r3]
 5226 0016 0122     		movs	r2, #1
 5227 0018 83F86020 		strb	r2, [r3, #96]
4207:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 5228              		.loc 1 4207 0
 5229 001c ACB9     		cbnz	r4, .L480
 5230              	.L476:
4228:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5231              		.loc 1 4228 0
 5232 001e FFF7FEFF 		bl	vPortExitCritical
 5233              	.LVL454:
4230:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 5234              		.loc 1 4230 0
 5235 0022 FFF7FEFF 		bl	vPortEnterCritical
 5236              	.LVL455:
4233:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5237              		.loc 1 4233 0
 5238 0026 124B     		ldr	r3, .L482
 5239 0028 1B68     		ldr	r3, [r3]
 5240 002a DC6D     		ldr	r4, [r3, #92]
 5241              	.LVL456:
4235:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5242              		.loc 1 4235 0
 5243 002c 24B1     		cbz	r4, .L477
4237:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 5244              		.loc 1 4237 0
 5245 002e CDB9     		cbnz	r5, .L481
4243:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 5246              		.loc 1 4243 0
 5247 0030 0F4B     		ldr	r3, .L482
 5248 0032 1B68     		ldr	r3, [r3]
 5249 0034 621E     		subs	r2, r4, #1
 5250 0036 DA65     		str	r2, [r3, #92]
 5251              	.L477:
4251:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 5252              		.loc 1 4251 0
 5253 0038 0D4B     		ldr	r3, .L482
 5254 003a 1B68     		ldr	r3, [r3]
 5255 003c 0022     		movs	r2, #0
 5256 003e 83F86020 		strb	r2, [r3, #96]
4253:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5257              		.loc 1 4253 0
 5258 0042 FFF7FEFF 		bl	vPortExitCritical
 5259              	.LVL457:
4256:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5260              		.loc 1 4256 0
 5261 0046 2046     		mov	r0, r4
 5262 0048 38BD     		pop	{r3, r4, r5, pc}
 5263              	.LVL458:
 5264              	.L480:
4209:../Middlewares/FreeRTOS//Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 5265              		.loc 1 4209 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 192


 5266 004a 1146     		mov	r1, r2
 5267 004c 2046     		mov	r0, r4
 5268 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5269              	.LVL459:
4216:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 5270              		.loc 1 4216 0
 5271 0052 084B     		ldr	r3, .L482+4
 5272 0054 4FF08052 		mov	r2, #268435456
 5273 0058 1A60     		str	r2, [r3]
 5274              		.syntax unified
 5275              	@ 4216 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 5276 005a BFF34F8F 		dsb
 5277              	@ 0 "" 2
 5278              	@ 4216 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 5279 005e BFF36F8F 		isb
 5280              	@ 0 "" 2
 5281              		.thumb
 5282              		.syntax unified
 5283 0062 DCE7     		b	.L476
 5284              	.LVL460:
 5285              	.L481:
4239:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 5286              		.loc 1 4239 0
 5287 0064 024B     		ldr	r3, .L482
 5288 0066 1B68     		ldr	r3, [r3]
 5289 0068 0022     		movs	r2, #0
 5290 006a DA65     		str	r2, [r3, #92]
 5291 006c E4E7     		b	.L477
 5292              	.L483:
 5293 006e 00BF     		.align	2
 5294              	.L482:
 5295 0070 00000000 		.word	.LANCHOR10
 5296 0074 04ED00E0 		.word	-536810236
 5297              		.cfi_endproc
 5298              	.LFE183:
 5300              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5301              		.align	1
 5302              		.global	xTaskNotifyWait
 5303              		.syntax unified
 5304              		.thumb
 5305              		.thumb_func
 5306              		.fpu fpv4-sp-d16
 5308              	xTaskNotifyWait:
 5309              	.LFB184:
4264:../Middlewares/FreeRTOS//Source/tasks.c **** 	BaseType_t xReturn;
 5310              		.loc 1 4264 0
 5311              		.cfi_startproc
 5312              		@ args = 0, pretend = 0, frame = 0
 5313              		@ frame_needed = 0, uses_anonymous_args = 0
 5314              	.LVL461:
 5315 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5316              	.LCFI53:
 5317              		.cfi_def_cfa_offset 24
 5318              		.cfi_offset 3, -24
 5319              		.cfi_offset 4, -20
 5320              		.cfi_offset 5, -16
 5321              		.cfi_offset 6, -12
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 193


 5322              		.cfi_offset 7, -8
 5323              		.cfi_offset 14, -4
 5324 0002 0746     		mov	r7, r0
 5325 0004 0D46     		mov	r5, r1
 5326 0006 1446     		mov	r4, r2
 5327 0008 1E46     		mov	r6, r3
4267:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 5328              		.loc 1 4267 0
 5329 000a FFF7FEFF 		bl	vPortEnterCritical
 5330              	.LVL462:
4270:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5331              		.loc 1 4270 0
 5332 000e 204B     		ldr	r3, .L491
 5333 0010 1B68     		ldr	r3, [r3]
 5334 0012 93F86030 		ldrb	r3, [r3, #96]	@ zero_extendqisi2
 5335 0016 DBB2     		uxtb	r3, r3
 5336 0018 022B     		cmp	r3, #2
 5337 001a 0AD0     		beq	.L485
4275:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5338              		.loc 1 4275 0
 5339 001c 1C4B     		ldr	r3, .L491
 5340 001e 1A68     		ldr	r2, [r3]
 5341 0020 D06D     		ldr	r0, [r2, #92]
 5342 0022 20EA0700 		bic	r0, r0, r7
 5343 0026 D065     		str	r0, [r2, #92]
4278:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5344              		.loc 1 4278 0
 5345 0028 1B68     		ldr	r3, [r3]
 5346 002a 0122     		movs	r2, #1
 5347 002c 83F86020 		strb	r2, [r3, #96]
4280:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 5348              		.loc 1 4280 0
 5349 0030 FEB9     		cbnz	r6, .L490
 5350              	.L485:
4301:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5351              		.loc 1 4301 0
 5352 0032 FFF7FEFF 		bl	vPortExitCritical
 5353              	.LVL463:
4303:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 5354              		.loc 1 4303 0
 5355 0036 FFF7FEFF 		bl	vPortEnterCritical
 5356              	.LVL464:
4307:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5357              		.loc 1 4307 0
 5358 003a 1CB1     		cbz	r4, .L486
4311:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 5359              		.loc 1 4311 0
 5360 003c 144B     		ldr	r3, .L491
 5361 003e 1B68     		ldr	r3, [r3]
 5362 0040 DB6D     		ldr	r3, [r3, #92]
 5363 0042 2360     		str	r3, [r4]
 5364              	.L486:
4318:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5365              		.loc 1 4318 0
 5366 0044 124B     		ldr	r3, .L491
 5367 0046 1B68     		ldr	r3, [r3]
 5368 0048 93F86030 		ldrb	r3, [r3, #96]	@ zero_extendqisi2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 194


 5369 004c DBB2     		uxtb	r3, r3
 5370 004e 012B     		cmp	r3, #1
 5371 0050 1CD0     		beq	.L488
4327:../Middlewares/FreeRTOS//Source/tasks.c **** 				xReturn = pdTRUE;
 5372              		.loc 1 4327 0
 5373 0052 0F4B     		ldr	r3, .L491
 5374 0054 1B68     		ldr	r3, [r3]
 5375 0056 D96D     		ldr	r1, [r3, #92]
 5376 0058 21EA0501 		bic	r1, r1, r5
 5377 005c D965     		str	r1, [r3, #92]
 5378              	.LVL465:
4328:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 5379              		.loc 1 4328 0
 5380 005e 0124     		movs	r4, #1
 5381              	.LVL466:
 5382              	.L487:
4331:../Middlewares/FreeRTOS//Source/tasks.c **** 		}
 5383              		.loc 1 4331 0
 5384 0060 0B4B     		ldr	r3, .L491
 5385 0062 1B68     		ldr	r3, [r3]
 5386 0064 0022     		movs	r2, #0
 5387 0066 83F86020 		strb	r2, [r3, #96]
4333:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5388              		.loc 1 4333 0
 5389 006a FFF7FEFF 		bl	vPortExitCritical
 5390              	.LVL467:
4336:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5391              		.loc 1 4336 0
 5392 006e 2046     		mov	r0, r4
 5393 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5394              	.LVL468:
 5395              	.L490:
4282:../Middlewares/FreeRTOS//Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 5396              		.loc 1 4282 0
 5397 0072 1146     		mov	r1, r2
 5398 0074 3046     		mov	r0, r6
 5399 0076 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5400              	.LVL469:
4289:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 5401              		.loc 1 4289 0
 5402 007a 064B     		ldr	r3, .L491+4
 5403 007c 4FF08052 		mov	r2, #268435456
 5404 0080 1A60     		str	r2, [r3]
 5405              		.syntax unified
 5406              	@ 4289 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 5407 0082 BFF34F8F 		dsb
 5408              	@ 0 "" 2
 5409              	@ 4289 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 5410 0086 BFF36F8F 		isb
 5411              	@ 0 "" 2
 5412              		.thumb
 5413              		.syntax unified
 5414 008a D2E7     		b	.L485
 5415              	.L488:
4321:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 5416              		.loc 1 4321 0
 5417 008c 0024     		movs	r4, #0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 195


 5418              	.LVL470:
 5419 008e E7E7     		b	.L487
 5420              	.L492:
 5421              		.align	2
 5422              	.L491:
 5423 0090 00000000 		.word	.LANCHOR10
 5424 0094 04ED00E0 		.word	-536810236
 5425              		.cfi_endproc
 5426              	.LFE184:
 5428              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5429              		.align	1
 5430              		.global	xTaskGenericNotify
 5431              		.syntax unified
 5432              		.thumb
 5433              		.thumb_func
 5434              		.fpu fpv4-sp-d16
 5436              	xTaskGenericNotify:
 5437              	.LFB185:
4344:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * pxTCB;
 5438              		.loc 1 4344 0
 5439              		.cfi_startproc
 5440              		@ args = 0, pretend = 0, frame = 0
 5441              		@ frame_needed = 0, uses_anonymous_args = 0
 5442              	.LVL471:
 5443 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5444              	.LCFI54:
 5445              		.cfi_def_cfa_offset 24
 5446              		.cfi_offset 3, -24
 5447              		.cfi_offset 4, -20
 5448              		.cfi_offset 5, -16
 5449              		.cfi_offset 6, -12
 5450              		.cfi_offset 7, -8
 5451              		.cfi_offset 14, -4
 5452              	.LVL472:
4349:../Middlewares/FreeRTOS//Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5453              		.loc 1 4349 0
 5454 0002 40B9     		cbnz	r0, .L494
 5455              	.LBB198:
 5456              	.LBB199:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5457              		.loc 2 237 0
 5458              		.syntax unified
 5459              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5460 0004 4FF01003 			mov r3, #16												
 5461 0008 83F31188 		msr basepri, r3											
 5462 000c BFF36F8F 		isb														
 5463 0010 BFF34F8F 		dsb														
 5464              	
 5465              	@ 0 "" 2
 5466              	.LVL473:
 5467              		.thumb
 5468              		.syntax unified
 5469              	.L495:
 5470 0014 FEE7     		b	.L495
 5471              	.LVL474:
 5472              	.L494:
 5473 0016 0446     		mov	r4, r0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 196


 5474 0018 1F46     		mov	r7, r3
 5475 001a 1546     		mov	r5, r2
 5476 001c 0E46     		mov	r6, r1
 5477              	.LVL475:
 5478              	.LBE199:
 5479              	.LBE198:
4352:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 5480              		.loc 1 4352 0
 5481 001e FFF7FEFF 		bl	vPortEnterCritical
 5482              	.LVL476:
4354:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5483              		.loc 1 4354 0
 5484 0022 0FB1     		cbz	r7, .L496
4356:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 5485              		.loc 1 4356 0
 5486 0024 E36D     		ldr	r3, [r4, #92]
 5487 0026 3B60     		str	r3, [r7]
 5488              	.L496:
4359:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5489              		.loc 1 4359 0
 5490 0028 94F86030 		ldrb	r3, [r4, #96]	@ zero_extendqisi2
 5491 002c DBB2     		uxtb	r3, r3
 5492              	.LVL477:
4361:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5493              		.loc 1 4361 0
 5494 002e 0222     		movs	r2, #2
 5495 0030 84F86020 		strb	r2, [r4, #96]
4363:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5496              		.loc 1 4363 0
 5497 0034 6A1E     		subs	r2, r5, #1
 5498 0036 032A     		cmp	r2, #3
 5499 0038 1AD8     		bhi	.L506
 5500 003a DFE802F0 		tbb	[pc, r2]
 5501              	.L499:
 5502 003e 02       		.byte	(.L498-.L499)/2
 5503 003f 0C       		.byte	(.L500-.L499)/2
 5504 0040 11       		.byte	(.L501-.L499)/2
 5505 0041 14       		.byte	(.L502-.L499)/2
 5506              		.p2align 1
 5507              	.L498:
4366:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
 5508              		.loc 1 4366 0
 5509 0042 E26D     		ldr	r2, [r4, #92]
 5510 0044 1643     		orrs	r6, r6, r2
 5511              	.LVL478:
 5512 0046 E665     		str	r6, [r4, #92]
4346:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5513              		.loc 1 4346 0
 5514 0048 0125     		movs	r5, #1
 5515              	.L497:
 5516              	.LVL479:
4399:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5517              		.loc 1 4399 0
 5518 004a 012B     		cmp	r3, #1
 5519 004c 14D0     		beq	.L509
 5520              	.LVL480:
 5521              	.L503:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 197


4439:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5522              		.loc 1 4439 0
 5523 004e FFF7FEFF 		bl	vPortExitCritical
 5524              	.LVL481:
4442:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5525              		.loc 1 4442 0
 5526 0052 2846     		mov	r0, r5
 5527 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5528              	.LVL482:
 5529              	.L500:
4370:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
 5530              		.loc 1 4370 0
 5531 0056 E26D     		ldr	r2, [r4, #92]
 5532 0058 0132     		adds	r2, r2, #1
 5533 005a E265     		str	r2, [r4, #92]
4346:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5534              		.loc 1 4346 0
 5535 005c 0125     		movs	r5, #1
4371:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5536              		.loc 1 4371 0
 5537 005e F4E7     		b	.L497
 5538              	.L501:
4374:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
 5539              		.loc 1 4374 0
 5540 0060 E665     		str	r6, [r4, #92]
4346:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5541              		.loc 1 4346 0
 5542 0062 0125     		movs	r5, #1
4375:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5543              		.loc 1 4375 0
 5544 0064 F1E7     		b	.L497
 5545              	.L502:
4378:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 5546              		.loc 1 4378 0
 5547 0066 022B     		cmp	r3, #2
 5548 0068 04D0     		beq	.L507
4380:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 5549              		.loc 1 4380 0
 5550 006a E665     		str	r6, [r4, #92]
4346:../Middlewares/FreeRTOS//Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5551              		.loc 1 4346 0
 5552 006c 0125     		movs	r5, #1
 5553 006e ECE7     		b	.L497
 5554              	.L506:
 5555 0070 0125     		movs	r5, #1
 5556 0072 EAE7     		b	.L497
 5557              	.L507:
4385:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 5558              		.loc 1 4385 0
 5559 0074 0025     		movs	r5, #0
 5560 0076 E8E7     		b	.L497
 5561              	.LVL483:
 5562              	.L509:
4401:../Middlewares/FreeRTOS//Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5563              		.loc 1 4401 0
 5564 0078 261D     		adds	r6, r4, #4
 5565 007a 3046     		mov	r0, r6
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 198


 5566 007c FFF7FEFF 		bl	uxListRemove
 5567              	.LVL484:
4402:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5568              		.loc 1 4402 0
 5569 0080 E26A     		ldr	r2, [r4, #44]
 5570 0082 0123     		movs	r3, #1
 5571 0084 9340     		lsls	r3, r3, r2
 5572 0086 1249     		ldr	r1, .L510
 5573 0088 0868     		ldr	r0, [r1]
 5574 008a 0343     		orrs	r3, r3, r0
 5575 008c 0B60     		str	r3, [r1]
 5576 008e 3146     		mov	r1, r6
 5577 0090 104B     		ldr	r3, .L510+4
 5578 0092 1420     		movs	r0, #20
 5579 0094 00FB0230 		mla	r0, r0, r2, r3
 5580 0098 FFF7FEFF 		bl	vListInsertEnd
 5581              	.LVL485:
4405:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5582              		.loc 1 4405 0
 5583 009c A36A     		ldr	r3, [r4, #40]
 5584 009e 43B1     		cbz	r3, .L504
 5585              	.LBB200:
 5586              	.LBB201:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5587              		.loc 2 237 0
 5588              		.syntax unified
 5589              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5590 00a0 4FF01003 			mov r3, #16												
 5591 00a4 83F31188 		msr basepri, r3											
 5592 00a8 BFF36F8F 		isb														
 5593 00ac BFF34F8F 		dsb														
 5594              	
 5595              	@ 0 "" 2
 5596              	.LVL486:
 5597              		.thumb
 5598              		.syntax unified
 5599              	.L505:
 5600 00b0 FEE7     		b	.L505
 5601              	.L504:
 5602              	.LBE201:
 5603              	.LBE200:
4423:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 5604              		.loc 1 4423 0
 5605 00b2 E26A     		ldr	r2, [r4, #44]
 5606 00b4 084B     		ldr	r3, .L510+8
 5607 00b6 1B68     		ldr	r3, [r3]
 5608 00b8 DB6A     		ldr	r3, [r3, #44]
 5609 00ba 9A42     		cmp	r2, r3
 5610 00bc C7D9     		bls	.L503
4427:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 5611              		.loc 1 4427 0
 5612 00be 074B     		ldr	r3, .L510+12
 5613 00c0 4FF08052 		mov	r2, #268435456
 5614 00c4 1A60     		str	r2, [r3]
 5615              		.syntax unified
 5616              	@ 4427 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 5617 00c6 BFF34F8F 		dsb
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 199


 5618              	@ 0 "" 2
 5619              	@ 4427 "../Middlewares/FreeRTOS//Source/tasks.c" 1
 5620 00ca BFF36F8F 		isb
 5621              	@ 0 "" 2
 5622              		.thumb
 5623              		.syntax unified
 5624 00ce BEE7     		b	.L503
 5625              	.L511:
 5626              		.align	2
 5627              	.L510:
 5628 00d0 00000000 		.word	.LANCHOR13
 5629 00d4 00000000 		.word	.LANCHOR4
 5630 00d8 00000000 		.word	.LANCHOR10
 5631 00dc 04ED00E0 		.word	-536810236
 5632              		.cfi_endproc
 5633              	.LFE185:
 5635              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5636              		.align	1
 5637              		.global	xTaskGenericNotifyFromISR
 5638              		.syntax unified
 5639              		.thumb
 5640              		.thumb_func
 5641              		.fpu fpv4-sp-d16
 5643              	xTaskGenericNotifyFromISR:
 5644              	.LFB186:
4450:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * pxTCB;
 5645              		.loc 1 4450 0
 5646              		.cfi_startproc
 5647              		@ args = 4, pretend = 0, frame = 0
 5648              		@ frame_needed = 0, uses_anonymous_args = 0
 5649              	.LVL487:
 5650 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5651              	.LCFI55:
 5652              		.cfi_def_cfa_offset 32
 5653              		.cfi_offset 3, -32
 5654              		.cfi_offset 4, -28
 5655              		.cfi_offset 5, -24
 5656              		.cfi_offset 6, -20
 5657              		.cfi_offset 7, -16
 5658              		.cfi_offset 8, -12
 5659              		.cfi_offset 9, -8
 5660              		.cfi_offset 14, -4
 5661 0004 089E     		ldr	r6, [sp, #32]
 5662              	.LVL488:
4456:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5663              		.loc 1 4456 0
 5664 0006 40B9     		cbnz	r0, .L513
 5665              	.LBB202:
 5666              	.LBB203:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5667              		.loc 2 237 0
 5668              		.syntax unified
 5669              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5670 0008 4FF01003 			mov r3, #16												
 5671 000c 83F31188 		msr basepri, r3											
 5672 0010 BFF36F8F 		isb														
 5673 0014 BFF34F8F 		dsb														
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 200


 5674              	
 5675              	@ 0 "" 2
 5676              	.LVL489:
 5677              		.thumb
 5678              		.syntax unified
 5679              	.L514:
 5680 0018 FEE7     		b	.L514
 5681              	.LVL490:
 5682              	.L513:
 5683 001a 0446     		mov	r4, r0
 5684 001c 9946     		mov	r9, r3
 5685 001e 1546     		mov	r5, r2
 5686 0020 8846     		mov	r8, r1
 5687              	.LBE203:
 5688              	.LBE202:
4474:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5689              		.loc 1 4474 0
 5690 0022 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5691              	.LVL491:
 5692              	.LBB204:
 5693              	.LBB205:
 253:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5694              		.loc 2 253 0
 5695              		.syntax unified
 5696              	@ 253 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5697 0026 EFF31187 			mrs r7, basepri											
 5698 002a 4FF01003 		mov r3, #16												
 5699 002e 83F31188 		msr basepri, r3											
 5700 0032 BFF36F8F 		isb														
 5701 0036 BFF34F8F 		dsb														
 5702              	
 5703              	@ 0 "" 2
 5704              		.thumb
 5705              		.syntax unified
 5706              	.LBE205:
 5707              	.LBE204:
4480:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5708              		.loc 1 4480 0
 5709 003a B9F1000F 		cmp	r9, #0
 5710 003e 02D0     		beq	.L515
4482:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 5711              		.loc 1 4482 0
 5712 0040 E36D     		ldr	r3, [r4, #92]
 5713 0042 C9F80030 		str	r3, [r9]
 5714              	.L515:
4485:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5715              		.loc 1 4485 0
 5716 0046 94F86030 		ldrb	r3, [r4, #96]	@ zero_extendqisi2
 5717 004a DBB2     		uxtb	r3, r3
 5718              	.LVL492:
4486:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5719              		.loc 1 4486 0
 5720 004c 0222     		movs	r2, #2
 5721 004e 84F86020 		strb	r2, [r4, #96]
4488:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5722              		.loc 1 4488 0
 5723 0052 6A1E     		subs	r2, r5, #1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 201


 5724 0054 032A     		cmp	r2, #3
 5725 0056 1ED8     		bhi	.L528
 5726 0058 DFE802F0 		tbb	[pc, r2]
 5727              	.L518:
 5728 005c 02       		.byte	(.L517-.L518)/2
 5729 005d 0E       		.byte	(.L519-.L518)/2
 5730 005e 13       		.byte	(.L520-.L518)/2
 5731 005f 17       		.byte	(.L521-.L518)/2
 5732              		.p2align 1
 5733              	.L517:
4491:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
 5734              		.loc 1 4491 0
 5735 0060 E26D     		ldr	r2, [r4, #92]
 5736 0062 42EA0802 		orr	r2, r2, r8
 5737 0066 E265     		str	r2, [r4, #92]
4453:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5738              		.loc 1 4453 0
 5739 0068 0125     		movs	r5, #1
 5740              	.L516:
 5741              	.LVL493:
4524:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5742              		.loc 1 4524 0
 5743 006a 012B     		cmp	r3, #1
 5744 006c 17D0     		beq	.L531
 5745              	.LVL494:
 5746              	.L522:
 5747              	.LBB206:
 5748              	.LBB207:
 5749              		.loc 2 271 0
 5750              		.syntax unified
 5751              	@ 271 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5752 006e 87F31188 			msr basepri, r7	
 5753              	@ 0 "" 2
 5754              	.LVL495:
 5755              		.thumb
 5756              		.syntax unified
 5757              	.LBE207:
 5758              	.LBE206:
4566:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5759              		.loc 1 4566 0
 5760 0072 2846     		mov	r0, r5
 5761 0074 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5762              	.LVL496:
 5763              	.L519:
4495:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
 5764              		.loc 1 4495 0
 5765 0078 E26D     		ldr	r2, [r4, #92]
 5766 007a 0132     		adds	r2, r2, #1
 5767 007c E265     		str	r2, [r4, #92]
4453:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5768              		.loc 1 4453 0
 5769 007e 0125     		movs	r5, #1
4496:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5770              		.loc 1 4496 0
 5771 0080 F3E7     		b	.L516
 5772              	.L520:
4499:../Middlewares/FreeRTOS//Source/tasks.c **** 					break;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 202


 5773              		.loc 1 4499 0
 5774 0082 C4F85C80 		str	r8, [r4, #92]
4453:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5775              		.loc 1 4453 0
 5776 0086 0125     		movs	r5, #1
4500:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5777              		.loc 1 4500 0
 5778 0088 EFE7     		b	.L516
 5779              	.L521:
4503:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 5780              		.loc 1 4503 0
 5781 008a 022B     		cmp	r3, #2
 5782 008c 05D0     		beq	.L529
4505:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 5783              		.loc 1 4505 0
 5784 008e C4F85C80 		str	r8, [r4, #92]
4453:../Middlewares/FreeRTOS//Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5785              		.loc 1 4453 0
 5786 0092 0125     		movs	r5, #1
 5787 0094 E9E7     		b	.L516
 5788              	.L528:
 5789 0096 0125     		movs	r5, #1
 5790 0098 E7E7     		b	.L516
 5791              	.L529:
4510:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 5792              		.loc 1 4510 0
 5793 009a 0025     		movs	r5, #0
 5794 009c E5E7     		b	.L516
 5795              	.LVL497:
 5796              	.L531:
4527:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5797              		.loc 1 4527 0
 5798 009e A36A     		ldr	r3, [r4, #40]
 5799              	.LVL498:
 5800 00a0 43B1     		cbz	r3, .L523
 5801              	.LBB208:
 5802              	.LBB209:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5803              		.loc 2 237 0
 5804              		.syntax unified
 5805              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5806 00a2 4FF01003 			mov r3, #16												
 5807 00a6 83F31188 		msr basepri, r3											
 5808 00aa BFF36F8F 		isb														
 5809 00ae BFF34F8F 		dsb														
 5810              	
 5811              	@ 0 "" 2
 5812              	.LVL499:
 5813              		.thumb
 5814              		.syntax unified
 5815              	.L524:
 5816 00b2 FEE7     		b	.L524
 5817              	.L523:
 5818              	.LBE209:
 5819              	.LBE208:
4529:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 5820              		.loc 1 4529 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 203


 5821 00b4 144B     		ldr	r3, .L532
 5822 00b6 1B68     		ldr	r3, [r3]
 5823 00b8 E3B9     		cbnz	r3, .L525
4531:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5824              		.loc 1 4531 0
 5825 00ba 04F10408 		add	r8, r4, #4
 5826              	.LVL500:
 5827 00be 4046     		mov	r0, r8
 5828 00c0 FFF7FEFF 		bl	uxListRemove
 5829              	.LVL501:
4532:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 5830              		.loc 1 4532 0
 5831 00c4 E26A     		ldr	r2, [r4, #44]
 5832 00c6 0123     		movs	r3, #1
 5833 00c8 9340     		lsls	r3, r3, r2
 5834 00ca 1049     		ldr	r1, .L532+4
 5835 00cc 0868     		ldr	r0, [r1]
 5836 00ce 0343     		orrs	r3, r3, r0
 5837 00d0 0B60     		str	r3, [r1]
 5838 00d2 4146     		mov	r1, r8
 5839 00d4 0E4B     		ldr	r3, .L532+8
 5840 00d6 1420     		movs	r0, #20
 5841 00d8 00FB0230 		mla	r0, r0, r2, r3
 5842 00dc FFF7FEFF 		bl	vListInsertEnd
 5843              	.LVL502:
 5844              	.L526:
4541:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 5845              		.loc 1 4541 0
 5846 00e0 E26A     		ldr	r2, [r4, #44]
 5847 00e2 0C4B     		ldr	r3, .L532+12
 5848 00e4 1B68     		ldr	r3, [r3]
 5849 00e6 DB6A     		ldr	r3, [r3, #44]
 5850 00e8 9A42     		cmp	r2, r3
 5851 00ea C0D9     		bls	.L522
4545:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 5852              		.loc 1 4545 0
 5853 00ec 46B1     		cbz	r6, .L527
4547:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 5854              		.loc 1 4547 0
 5855 00ee 0123     		movs	r3, #1
 5856 00f0 3360     		str	r3, [r6]
 5857 00f2 BCE7     		b	.L522
 5858              	.LVL503:
 5859              	.L525:
4538:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 5860              		.loc 1 4538 0
 5861 00f4 04F11801 		add	r1, r4, #24
 5862 00f8 0748     		ldr	r0, .L532+16
 5863 00fa FFF7FEFF 		bl	vListInsertEnd
 5864              	.LVL504:
 5865 00fe EFE7     		b	.L526
 5866              	.LVL505:
 5867              	.L527:
4554:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 5868              		.loc 1 4554 0
 5869 0100 064B     		ldr	r3, .L532+20
 5870 0102 0122     		movs	r2, #1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 204


 5871 0104 1A60     		str	r2, [r3]
 5872 0106 B2E7     		b	.L522
 5873              	.L533:
 5874              		.align	2
 5875              	.L532:
 5876 0108 00000000 		.word	.LANCHOR16
 5877 010c 00000000 		.word	.LANCHOR13
 5878 0110 00000000 		.word	.LANCHOR4
 5879 0114 00000000 		.word	.LANCHOR10
 5880 0118 00000000 		.word	.LANCHOR1
 5881 011c 00000000 		.word	.LANCHOR20
 5882              		.cfi_endproc
 5883              	.LFE186:
 5885              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5886              		.align	1
 5887              		.global	vTaskNotifyGiveFromISR
 5888              		.syntax unified
 5889              		.thumb
 5890              		.thumb_func
 5891              		.fpu fpv4-sp-d16
 5893              	vTaskNotifyGiveFromISR:
 5894              	.LFB187:
4574:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t * pxTCB;
 5895              		.loc 1 4574 0
 5896              		.cfi_startproc
 5897              		@ args = 0, pretend = 0, frame = 0
 5898              		@ frame_needed = 0, uses_anonymous_args = 0
 5899              	.LVL506:
 5900 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5901              	.LCFI56:
 5902              		.cfi_def_cfa_offset 24
 5903              		.cfi_offset 3, -24
 5904              		.cfi_offset 4, -20
 5905              		.cfi_offset 5, -16
 5906              		.cfi_offset 6, -12
 5907              		.cfi_offset 7, -8
 5908              		.cfi_offset 14, -4
4579:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5909              		.loc 1 4579 0
 5910 0002 40B9     		cbnz	r0, .L535
 5911              	.LBB210:
 5912              	.LBB211:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5913              		.loc 2 237 0
 5914              		.syntax unified
 5915              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5916 0004 4FF01003 			mov r3, #16												
 5917 0008 83F31188 		msr basepri, r3											
 5918 000c BFF36F8F 		isb														
 5919 0010 BFF34F8F 		dsb														
 5920              	
 5921              	@ 0 "" 2
 5922              	.LVL507:
 5923              		.thumb
 5924              		.syntax unified
 5925              	.L536:
 5926 0014 FEE7     		b	.L536
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 205


 5927              	.L535:
 5928 0016 0446     		mov	r4, r0
 5929 0018 0D46     		mov	r5, r1
 5930              	.LBE211:
 5931              	.LBE210:
4597:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5932              		.loc 1 4597 0
 5933 001a FFF7FEFF 		bl	vPortValidateInterruptPriority
 5934              	.LVL508:
 5935              	.LBB212:
 5936              	.LBB213:
 253:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5937              		.loc 2 253 0
 5938              		.syntax unified
 5939              	@ 253 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5940 001e EFF31186 			mrs r6, basepri											
 5941 0022 4FF01003 		mov r3, #16												
 5942 0026 83F31188 		msr basepri, r3											
 5943 002a BFF36F8F 		isb														
 5944 002e BFF34F8F 		dsb														
 5945              	
 5946              	@ 0 "" 2
 5947              		.thumb
 5948              		.syntax unified
 5949              	.LBE213:
 5950              	.LBE212:
4603:../Middlewares/FreeRTOS//Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5951              		.loc 1 4603 0
 5952 0032 94F86030 		ldrb	r3, [r4, #96]	@ zero_extendqisi2
 5953 0036 DBB2     		uxtb	r3, r3
 5954              	.LVL509:
4604:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5955              		.loc 1 4604 0
 5956 0038 0222     		movs	r2, #2
 5957 003a 84F86020 		strb	r2, [r4, #96]
4608:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5958              		.loc 1 4608 0
 5959 003e E26D     		ldr	r2, [r4, #92]
 5960 0040 0132     		adds	r2, r2, #1
 5961 0042 E265     		str	r2, [r4, #92]
4614:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 5962              		.loc 1 4614 0
 5963 0044 012B     		cmp	r3, #1
 5964 0046 02D0     		beq	.L544
 5965              	.LVL510:
 5966              	.L537:
 5967              	.LBB214:
 5968              	.LBB215:
 5969              		.loc 2 271 0
 5970              		.syntax unified
 5971              	@ 271 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5972 0048 86F31188 			msr basepri, r6	
 5973              	@ 0 "" 2
 5974              	.LVL511:
 5975              		.thumb
 5976              		.syntax unified
 5977              	.LBE215:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 206


 5978              	.LBE214:
4654:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5979              		.loc 1 4654 0
 5980 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5981              	.LVL512:
 5982              	.L544:
4617:../Middlewares/FreeRTOS//Source/tasks.c **** 
 5983              		.loc 1 4617 0
 5984 004e A36A     		ldr	r3, [r4, #40]
 5985              	.LVL513:
 5986 0050 43B1     		cbz	r3, .L538
 5987              	.LBB216:
 5988              	.LBB217:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5989              		.loc 2 237 0
 5990              		.syntax unified
 5991              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5992 0052 4FF01003 			mov r3, #16												
 5993 0056 83F31188 		msr basepri, r3											
 5994 005a BFF36F8F 		isb														
 5995 005e BFF34F8F 		dsb														
 5996              	
 5997              	@ 0 "" 2
 5998              	.LVL514:
 5999              		.thumb
 6000              		.syntax unified
 6001              	.L539:
 6002 0062 FEE7     		b	.L539
 6003              	.L538:
 6004              	.LBE217:
 6005              	.LBE216:
4619:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 6006              		.loc 1 4619 0
 6007 0064 144B     		ldr	r3, .L545
 6008 0066 1B68     		ldr	r3, [r3]
 6009 0068 DBB9     		cbnz	r3, .L540
4621:../Middlewares/FreeRTOS//Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6010              		.loc 1 4621 0
 6011 006a 271D     		adds	r7, r4, #4
 6012 006c 3846     		mov	r0, r7
 6013 006e FFF7FEFF 		bl	uxListRemove
 6014              	.LVL515:
4622:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 6015              		.loc 1 4622 0
 6016 0072 E26A     		ldr	r2, [r4, #44]
 6017 0074 0123     		movs	r3, #1
 6018 0076 9340     		lsls	r3, r3, r2
 6019 0078 1049     		ldr	r1, .L545+4
 6020 007a 0868     		ldr	r0, [r1]
 6021 007c 0343     		orrs	r3, r3, r0
 6022 007e 0B60     		str	r3, [r1]
 6023 0080 3946     		mov	r1, r7
 6024 0082 0F4B     		ldr	r3, .L545+8
 6025 0084 1420     		movs	r0, #20
 6026 0086 00FB0230 		mla	r0, r0, r2, r3
 6027 008a FFF7FEFF 		bl	vListInsertEnd
 6028              	.LVL516:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 207


 6029              	.L541:
4631:../Middlewares/FreeRTOS//Source/tasks.c **** 				{
 6030              		.loc 1 4631 0
 6031 008e E26A     		ldr	r2, [r4, #44]
 6032 0090 0C4B     		ldr	r3, .L545+12
 6033 0092 1B68     		ldr	r3, [r3]
 6034 0094 DB6A     		ldr	r3, [r3, #44]
 6035 0096 9A42     		cmp	r2, r3
 6036 0098 D6D9     		bls	.L537
4635:../Middlewares/FreeRTOS//Source/tasks.c **** 					{
 6037              		.loc 1 4635 0
 6038 009a 45B1     		cbz	r5, .L542
4637:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 6039              		.loc 1 4637 0
 6040 009c 0123     		movs	r3, #1
 6041 009e 2B60     		str	r3, [r5]
 6042 00a0 D2E7     		b	.L537
 6043              	.L540:
4628:../Middlewares/FreeRTOS//Source/tasks.c **** 				}
 6044              		.loc 1 4628 0
 6045 00a2 04F11801 		add	r1, r4, #24
 6046 00a6 0848     		ldr	r0, .L545+16
 6047 00a8 FFF7FEFF 		bl	vListInsertEnd
 6048              	.LVL517:
 6049 00ac EFE7     		b	.L541
 6050              	.L542:
4644:../Middlewares/FreeRTOS//Source/tasks.c **** 					}
 6051              		.loc 1 4644 0
 6052 00ae 074B     		ldr	r3, .L545+20
 6053 00b0 0122     		movs	r2, #1
 6054 00b2 1A60     		str	r2, [r3]
 6055 00b4 C8E7     		b	.L537
 6056              	.L546:
 6057 00b6 00BF     		.align	2
 6058              	.L545:
 6059 00b8 00000000 		.word	.LANCHOR16
 6060 00bc 00000000 		.word	.LANCHOR13
 6061 00c0 00000000 		.word	.LANCHOR4
 6062 00c4 00000000 		.word	.LANCHOR10
 6063 00c8 00000000 		.word	.LANCHOR1
 6064 00cc 00000000 		.word	.LANCHOR20
 6065              		.cfi_endproc
 6066              	.LFE187:
 6068              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 6069              		.align	1
 6070              		.global	xTaskNotifyStateClear
 6071              		.syntax unified
 6072              		.thumb
 6073              		.thumb_func
 6074              		.fpu fpv4-sp-d16
 6076              	xTaskNotifyStateClear:
 6077              	.LFB188:
4663:../Middlewares/FreeRTOS//Source/tasks.c **** 	TCB_t *pxTCB;
 6078              		.loc 1 4663 0
 6079              		.cfi_startproc
 6080              		@ args = 0, pretend = 0, frame = 0
 6081              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 208


 6082              	.LVL518:
 6083 0000 10B5     		push	{r4, lr}
 6084              	.LCFI57:
 6085              		.cfi_def_cfa_offset 8
 6086              		.cfi_offset 4, -8
 6087              		.cfi_offset 14, -4
4669:../Middlewares/FreeRTOS//Source/tasks.c **** 
 6088              		.loc 1 4669 0
 6089 0002 0446     		mov	r4, r0
 6090 0004 58B1     		cbz	r0, .L552
 6091              	.LVL519:
 6092              	.L548:
4671:../Middlewares/FreeRTOS//Source/tasks.c **** 		{
 6093              		.loc 1 4671 0 discriminator 4
 6094 0006 FFF7FEFF 		bl	vPortEnterCritical
 6095              	.LVL520:
4673:../Middlewares/FreeRTOS//Source/tasks.c **** 			{
 6096              		.loc 1 4673 0 discriminator 4
 6097 000a 94F86030 		ldrb	r3, [r4, #96]	@ zero_extendqisi2
 6098 000e DBB2     		uxtb	r3, r3
 6099 0010 022B     		cmp	r3, #2
 6100 0012 07D0     		beq	.L553
4680:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 6101              		.loc 1 4680 0
 6102 0014 0024     		movs	r4, #0
 6103              	.LVL521:
 6104              	.L549:
4683:../Middlewares/FreeRTOS//Source/tasks.c **** 
 6105              		.loc 1 4683 0
 6106 0016 FFF7FEFF 		bl	vPortExitCritical
 6107              	.LVL522:
4686:../Middlewares/FreeRTOS//Source/tasks.c **** 
 6108              		.loc 1 4686 0
 6109 001a 2046     		mov	r0, r4
 6110 001c 10BD     		pop	{r4, pc}
 6111              	.LVL523:
 6112              	.L552:
4669:../Middlewares/FreeRTOS//Source/tasks.c **** 
 6113              		.loc 1 4669 0 discriminator 1
 6114 001e 044B     		ldr	r3, .L554
 6115 0020 1C68     		ldr	r4, [r3]
 6116              	.LVL524:
 6117 0022 F0E7     		b	.L548
 6118              	.LVL525:
 6119              	.L553:
4675:../Middlewares/FreeRTOS//Source/tasks.c **** 				xReturn = pdPASS;
 6120              		.loc 1 4675 0
 6121 0024 0023     		movs	r3, #0
 6122 0026 84F86030 		strb	r3, [r4, #96]
 6123              	.LVL526:
4676:../Middlewares/FreeRTOS//Source/tasks.c **** 			}
 6124              		.loc 1 4676 0
 6125 002a 0124     		movs	r4, #1
 6126              	.LVL527:
 6127 002c F3E7     		b	.L549
 6128              	.L555:
 6129 002e 00BF     		.align	2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 209


 6130              	.L554:
 6131 0030 00000000 		.word	.LANCHOR10
 6132              		.cfi_endproc
 6133              	.LFE188:
 6135              		.global	pxCurrentTCB
 6136              		.section	.bss.pxCurrentTCB,"aw",%nobits
 6137              		.align	2
 6138              		.set	.LANCHOR10,. + 0
 6141              	pxCurrentTCB:
 6142 0000 00000000 		.space	4
 6143              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 6144              		.align	2
 6145              		.set	.LANCHOR2,. + 0
 6148              	pxDelayedTaskList:
 6149 0000 00000000 		.space	4
 6150              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 6151              		.align	2
 6152              		.set	.LANCHOR8,. + 0
 6155              	pxOverflowDelayedTaskList:
 6156 0000 00000000 		.space	4
 6157              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 6158              		.align	2
 6159              		.set	.LANCHOR4,. + 0
 6162              	pxReadyTasksLists:
 6163 0000 00000000 		.space	200
 6163      00000000 
 6163      00000000 
 6163      00000000 
 6163      00000000 
 6164              		.section	.bss.ulTaskSwitchedInTime,"aw",%nobits
 6165              		.align	2
 6166              		.set	.LANCHOR21,. + 0
 6169              	ulTaskSwitchedInTime:
 6170 0000 00000000 		.space	4
 6171              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 6172              		.align	2
 6173              		.set	.LANCHOR9,. + 0
 6176              	uxCurrentNumberOfTasks:
 6177 0000 00000000 		.space	4
 6178              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 6179              		.align	2
 6180              		.set	.LANCHOR15,. + 0
 6183              	uxDeletedTasksWaitingCleanUp:
 6184 0000 00000000 		.space	4
 6185              		.section	.bss.uxPendedTicks,"aw",%nobits
 6186              		.align	2
 6187              		.set	.LANCHOR19,. + 0
 6190              	uxPendedTicks:
 6191 0000 00000000 		.space	4
 6192              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 6193              		.align	2
 6194              		.set	.LANCHOR16,. + 0
 6197              	uxSchedulerSuspended:
 6198 0000 00000000 		.space	4
 6199              		.section	.bss.uxTaskNumber,"aw",%nobits
 6200              		.align	2
 6201              		.set	.LANCHOR12,. + 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 210


 6204              	uxTaskNumber:
 6205 0000 00000000 		.space	4
 6206              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 6207              		.align	2
 6208              		.set	.LANCHOR13,. + 0
 6211              	uxTopReadyPriority:
 6212 0000 00000000 		.space	4
 6213              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 6214              		.align	2
 6215              		.set	.LANCHOR5,. + 0
 6218              	xDelayedTaskList1:
 6219 0000 00000000 		.space	20
 6219      00000000 
 6219      00000000 
 6219      00000000 
 6219      00000000 
 6220              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 6221              		.align	2
 6222              		.set	.LANCHOR6,. + 0
 6225              	xDelayedTaskList2:
 6226 0000 00000000 		.space	20
 6226      00000000 
 6226      00000000 
 6226      00000000 
 6226      00000000 
 6227              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 6228              		.align	2
 6229              		.set	.LANCHOR17,. + 0
 6232              	xIdleTaskHandle:
 6233 0000 00000000 		.space	4
 6234              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 6235              		.align	2
 6236              		.set	.LANCHOR3,. + 0
 6239              	xNextTaskUnblockTime:
 6240 0000 00000000 		.space	4
 6241              		.section	.bss.xNumOfOverflows,"aw",%nobits
 6242              		.align	2
 6243              		.set	.LANCHOR18,. + 0
 6246              	xNumOfOverflows:
 6247 0000 00000000 		.space	4
 6248              		.section	.bss.xPendingReadyList,"aw",%nobits
 6249              		.align	2
 6250              		.set	.LANCHOR1,. + 0
 6253              	xPendingReadyList:
 6254 0000 00000000 		.space	20
 6254      00000000 
 6254      00000000 
 6254      00000000 
 6254      00000000 
 6255              		.section	.bss.xSchedulerRunning,"aw",%nobits
 6256              		.align	2
 6257              		.set	.LANCHOR11,. + 0
 6260              	xSchedulerRunning:
 6261 0000 00000000 		.space	4
 6262              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 6263              		.align	2
 6264              		.set	.LANCHOR0,. + 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 211


 6267              	xSuspendedTaskList:
 6268 0000 00000000 		.space	20
 6268      00000000 
 6268      00000000 
 6268      00000000 
 6268      00000000 
 6269              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 6270              		.align	2
 6271              		.set	.LANCHOR7,. + 0
 6274              	xTasksWaitingTermination:
 6275 0000 00000000 		.space	20
 6275      00000000 
 6275      00000000 
 6275      00000000 
 6275      00000000 
 6276              		.section	.bss.xTickCount,"aw",%nobits
 6277              		.align	2
 6278              		.set	.LANCHOR14,. + 0
 6281              	xTickCount:
 6282 0000 00000000 		.space	4
 6283              		.section	.bss.xYieldPending,"aw",%nobits
 6284              		.align	2
 6285              		.set	.LANCHOR20,. + 0
 6288              	xYieldPending:
 6289 0000 00000000 		.space	4
 6290              		.section	.rodata.vTaskGetRunTimeStats.str1.4,"aMS",%progbits,1
 6291              		.align	2
 6292              	.LC2:
 6293 0000 09257509 		.ascii	"\011%u\011\011%u%%\015\012\000"
 6293      09257525 
 6293      250D0A00 
 6294              	.LC3:
 6295 000c 09257509 		.ascii	"\011%u\011\011<1%%\015\012\000"
 6295      093C3125 
 6295      250D0A00 
 6296              		.section	.rodata.vTaskList.str1.4,"aMS",%progbits,1
 6297              		.align	2
 6298              	.LC1:
 6299 0000 09256309 		.ascii	"\011%c\011%u\011%u\011%u\015\012\000"
 6299      25750925 
 6299      75092575 
 6299      0D0A00
 6300              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 6301              		.align	2
 6302              	.LC0:
 6303 0000 49444C45 		.ascii	"IDLE\000"
 6303      00
 6304              		.text
 6305              	.Letext0:
 6306              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 6307              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 6308              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 6309              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 6310              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 6311              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 6312              		.file 9 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 6313              		.file 10 "../Libraries/CMSIS/CM4/CoreSupport/core_cm4.h"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 212


 6314              		.file 11 "../Libraries/CMSIS/CM4/DeviceSupport/system_at32f4xx.h"
 6315              		.file 12 "Inc/FreeRTOSConfig.h"
 6316              		.file 13 "../Middlewares/FreeRTOS//Source/include/projdefs.h"
 6317              		.file 14 "../Middlewares/FreeRTOS//Source/include/list.h"
 6318              		.file 15 "../Middlewares/FreeRTOS//Source/include/task.h"
 6319              		.file 16 "../Middlewares/FreeRTOS//Source/include/portable.h"
 6320              		.file 17 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdio.h"
 6321              		.file 18 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/string.h"
 6322              		.file 19 "../Middlewares/FreeRTOS//Source/include/timers.h"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 213


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:17     .text.prvTaskIsTaskSuspended:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:23     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:91     .text.prvTaskIsTaskSuspended:0000000000000038 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:97     .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:103    .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:137    .text.prvResetNextTaskUnblockTime:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:143    .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:177    .text.prvResetNextTaskUnblockTime:0000000000000024 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:183    .text.prvDeleteTCB:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:189    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:217    .text.prvInitialiseNewTask:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:223    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:345    .text.prvInitialiseTaskLists:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:351    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:418    .text.prvInitialiseTaskLists:0000000000000048 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:430    .text.prvAddNewTaskToReadyList:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:436    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:546    .text.prvAddNewTaskToReadyList:0000000000000090 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:557    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:563    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:664    .text.prvAddCurrentTaskToDelayedList:000000000000007c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:675    .text.prvWriteNameToBuffer:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:681    .text.prvWriteNameToBuffer:0000000000000000 prvWriteNameToBuffer
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:724    .text.xTaskCreate:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:731    .text.xTaskCreate:0000000000000000 xTaskCreate
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:836    .text.vTaskDelete:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:843    .text.vTaskDelete:0000000000000000 vTaskDelete
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:995    .text.vTaskDelete:00000000000000b8 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1009   .text.eTaskGetState:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1016   .text.eTaskGetState:0000000000000000 eTaskGetState
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1130   .text.eTaskGetState:000000000000006c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1139   .text.uxTaskPriorityGet:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1146   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1185   .text.uxTaskPriorityGet:000000000000001c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1190   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1197   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1260   .text.uxTaskPriorityGetFromISR:000000000000002c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1265   .text.vTaskPrioritySet:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1272   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1450   .text.vTaskPrioritySet:00000000000000cc $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1458   .text.vTaskResume:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1465   .text.vTaskResume:0000000000000000 vTaskResume
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1568   .text.vTaskResume:0000000000000074 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1576   .text.xTaskResumeFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1583   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1716   .text.xTaskResumeFromISR:0000000000000090 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1725   .text.vTaskStartScheduler:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1732   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1838   .text.vTaskStartScheduler:0000000000000070 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2883   .text.prvIdleTask:0000000000000000 prvIdleTask
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1851   .text.vTaskEndScheduler:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1858   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1896   .text.vTaskEndScheduler:0000000000000020 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1901   .text.vTaskSuspendAll:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1908   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 214


/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1925   .text.vTaskSuspendAll:000000000000000c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1930   .text.xTaskGetTickCount:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1937   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1953   .text.xTaskGetTickCount:0000000000000008 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1958   .text.xTaskGetTickCountFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1965   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1988   .text.xTaskGetTickCountFromISR:000000000000000c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:1993   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2000   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2015   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2020   .text.pcTaskGetName:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2027   .text.pcTaskGetName:0000000000000000 pcTaskGetName
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2073   .text.pcTaskGetName:0000000000000024 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2080   .text.xTaskIncrementTick:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2087   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2291   .text.xTaskIncrementTick:00000000000000ec $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2306   .text.xTaskResumeAll:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2313   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2497   .text.xTaskResumeAll:00000000000000d0 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2510   .text.vTaskDelayUntil:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2517   .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2682   .text.vTaskDelayUntil:0000000000000098 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2690   .text.vTaskDelay:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2697   .text.vTaskDelay:0000000000000000 vTaskDelay
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2770   .text.vTaskDelay:0000000000000044 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2776   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2782   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2869   .text.prvCheckTasksWaitingTermination:0000000000000050 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2877   .text.prvIdleTask:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2923   .text.prvIdleTask:0000000000000020 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2929   .text.vTaskSwitchContext:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:2936   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3112   .text.vTaskSwitchContext:00000000000000d0 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3125   .text.vTaskSuspend:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3132   .text.vTaskSuspend:0000000000000000 vTaskSuspend
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3287   .text.vTaskSuspend:00000000000000b8 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3299   .text.vTaskPlaceOnEventList:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3306   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3359   .text.vTaskPlaceOnEventList:000000000000002c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3364   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3371   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3459   .text.vTaskPlaceOnUnorderedEventList:0000000000000054 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3465   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3472   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3534   .text.vTaskPlaceOnEventListRestricted:0000000000000034 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3539   .text.xTaskRemoveFromEventList:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3546   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3649   .text.xTaskRemoveFromEventList:0000000000000074 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3659   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3666   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 xTaskRemoveFromUnorderedEventList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3781   .text.xTaskRemoveFromUnorderedEventList:0000000000000078 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3790   .text.vTaskSetTimeOutState:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3797   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3837   .text.vTaskSetTimeOutState:0000000000000024 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3845   .text.xTaskCheckForTimeOut:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3852   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3978   .text.xTaskCheckForTimeOut:0000000000000078 $d
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 215


/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3985   .text.vTaskMissedYield:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:3992   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4008   .text.vTaskMissedYield:0000000000000008 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4013   .text.uxTaskGetTaskNumber:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4020   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4046   .text.vTaskSetTaskNumber:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4053   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4074   .text.vTaskGetInfo:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4081   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4186   .text.vTaskGetInfo:0000000000000070 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4191   .text.prvListTasksWithinSingleList:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4197   .text.prvListTasksWithinSingleList:0000000000000000 prvListTasksWithinSingleList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4294   .text.uxTaskGetSystemState:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4301   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4418   .text.uxTaskGetSystemState:0000000000000098 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4429   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4436   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4452   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4457   .text.xTaskGetSchedulerState:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4464   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4496   .text.xTaskGetSchedulerState:0000000000000018 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4502   .text.vTaskPriorityInherit:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4509   .text.vTaskPriorityInherit:0000000000000000 vTaskPriorityInherit
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4622   .text.vTaskPriorityInherit:0000000000000094 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4629   .text.xTaskPriorityDisinherit:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4636   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4790   .text.xTaskPriorityDisinherit:00000000000000a4 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4797   .text.vTaskList:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4804   .text.vTaskList:0000000000000000 vTaskList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4942   .text.vTaskList:00000000000000b8 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4946   .text.vTaskList:00000000000000c8 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4963   .text.vTaskList:00000000000000d4 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4969   .text.vTaskGetRunTimeStats:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:4976   .text.vTaskGetRunTimeStats:0000000000000000 vTaskGetRunTimeStats
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5111   .text.vTaskGetRunTimeStats:00000000000000b4 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5119   .text.uxTaskResetEventItemValue:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5126   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5149   .text.uxTaskResetEventItemValue:0000000000000014 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5154   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5161   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5187   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5192   .text.ulTaskNotifyTake:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5199   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5295   .text.ulTaskNotifyTake:0000000000000070 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5301   .text.xTaskNotifyWait:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5308   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5423   .text.xTaskNotifyWait:0000000000000090 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5429   .text.xTaskGenericNotify:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5436   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5502   .text.xTaskGenericNotify:000000000000003e $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5506   .text.xTaskGenericNotify:0000000000000042 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5628   .text.xTaskGenericNotify:00000000000000d0 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5636   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5643   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5728   .text.xTaskGenericNotifyFromISR:000000000000005c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5732   .text.xTaskGenericNotifyFromISR:0000000000000060 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5876   .text.xTaskGenericNotifyFromISR:0000000000000108 $d
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 216


/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5886   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:5893   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6059   .text.vTaskNotifyGiveFromISR:00000000000000b8 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6069   .text.xTaskNotifyStateClear:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6076   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6131   .text.xTaskNotifyStateClear:0000000000000030 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6141   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6137   .bss.pxCurrentTCB:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6144   .bss.pxDelayedTaskList:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6148   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6151   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6155   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6158   .bss.pxReadyTasksLists:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6162   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6165   .bss.ulTaskSwitchedInTime:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6169   .bss.ulTaskSwitchedInTime:0000000000000000 ulTaskSwitchedInTime
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6172   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6176   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6179   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6183   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6186   .bss.uxPendedTicks:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6190   .bss.uxPendedTicks:0000000000000000 uxPendedTicks
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6193   .bss.uxSchedulerSuspended:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6197   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6200   .bss.uxTaskNumber:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6204   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6207   .bss.uxTopReadyPriority:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6211   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6214   .bss.xDelayedTaskList1:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6218   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6221   .bss.xDelayedTaskList2:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6225   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6228   .bss.xIdleTaskHandle:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6232   .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6235   .bss.xNextTaskUnblockTime:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6239   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6242   .bss.xNumOfOverflows:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6246   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6249   .bss.xPendingReadyList:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6253   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6256   .bss.xSchedulerRunning:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6260   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6263   .bss.xSuspendedTaskList:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6267   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6270   .bss.xTasksWaitingTermination:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6274   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6277   .bss.xTickCount:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6281   .bss.xTickCount:0000000000000000 xTickCount
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6284   .bss.xYieldPending:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6288   .bss.xYieldPending:0000000000000000 xYieldPending
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6291   .rodata.vTaskGetRunTimeStats.str1.4:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6297   .rodata.vTaskList.str1.4:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s:6301   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
vPortFree
memset
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccB9K1qC.s 			page 217


vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vListInsert
strcpy
strlen
pvPortMalloc
vPortValidateInterruptPriority
xTimerCreateTimerTask
xPortStartScheduler
ulHighFrequencyTimerTicks
vPortEndScheduler
vApplicationStackOverflowHook
sprintf
