ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"timers.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text._ZL20prvGetNextExpireTimePl,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv4-sp-d16
  23              	_ZL20prvGetNextExpireTimePl:
  24              		.fnstart
  25              	.LFB146:
  26              		.file 1 "../Middlewares/FreeRTOS//Source/timers.c"
   1:../Middlewares/FreeRTOS//Source/timers.c **** /*
   2:../Middlewares/FreeRTOS//Source/timers.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/timers.c ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/timers.c **** 
   5:../Middlewares/FreeRTOS//Source/timers.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/timers.c **** 
   7:../Middlewares/FreeRTOS//Source/timers.c ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/timers.c **** 
   9:../Middlewares/FreeRTOS//Source/timers.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/timers.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/timers.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/timers.c **** 
  13:../Middlewares/FreeRTOS//Source/timers.c ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/timers.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Middlewares/FreeRTOS//Source/timers.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/timers.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/timers.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/timers.c ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/timers.c **** 
  20:../Middlewares/FreeRTOS//Source/timers.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/timers.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/timers.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/timers.c ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/timers.c **** 
  25:../Middlewares/FreeRTOS//Source/timers.c ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/timers.c ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/timers.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/timers.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/timers.c ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/timers.c ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/timers.c ****      *                                                                       *
  32:../Middlewares/FreeRTOS//Source/timers.c ****      *    Help yourself get started quickly while simultaneously helping     *
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 2


  33:../Middlewares/FreeRTOS//Source/timers.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Middlewares/FreeRTOS//Source/timers.c ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/timers.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/timers.c ****      *                                                                       *
  37:../Middlewares/FreeRTOS//Source/timers.c ****     ***************************************************************************
  38:../Middlewares/FreeRTOS//Source/timers.c **** 
  39:../Middlewares/FreeRTOS//Source/timers.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/timers.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/timers.c ****     defined configASSERT()?
  42:../Middlewares/FreeRTOS//Source/timers.c **** 
  43:../Middlewares/FreeRTOS//Source/timers.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Middlewares/FreeRTOS//Source/timers.c ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/timers.c ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/timers.c **** 
  47:../Middlewares/FreeRTOS//Source/timers.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/timers.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/timers.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Middlewares/FreeRTOS//Source/timers.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/timers.c **** 
  52:../Middlewares/FreeRTOS//Source/timers.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/timers.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/timers.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/timers.c **** 
  56:../Middlewares/FreeRTOS//Source/timers.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Middlewares/FreeRTOS//Source/timers.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/timers.c **** 
  59:../Middlewares/FreeRTOS//Source/timers.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/timers.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/timers.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/timers.c **** 
  63:../Middlewares/FreeRTOS//Source/timers.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/timers.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/timers.c ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/timers.c **** 
  67:../Middlewares/FreeRTOS//Source/timers.c ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/timers.c **** */
  69:../Middlewares/FreeRTOS//Source/timers.c **** 
  70:../Middlewares/FreeRTOS//Source/timers.c **** /* Standard includes. */
  71:../Middlewares/FreeRTOS//Source/timers.c **** #include <stdlib.h>
  72:../Middlewares/FreeRTOS//Source/timers.c **** 
  73:../Middlewares/FreeRTOS//Source/timers.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:../Middlewares/FreeRTOS//Source/timers.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:../Middlewares/FreeRTOS//Source/timers.c **** task.h is included from an application file. */
  76:../Middlewares/FreeRTOS//Source/timers.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:../Middlewares/FreeRTOS//Source/timers.c **** 
  78:../Middlewares/FreeRTOS//Source/timers.c **** #include "FreeRTOS.h"
  79:../Middlewares/FreeRTOS//Source/timers.c **** #include "task.h"
  80:../Middlewares/FreeRTOS//Source/timers.c **** #include "queue.h"
  81:../Middlewares/FreeRTOS//Source/timers.c **** #include "timers.h"
  82:../Middlewares/FreeRTOS//Source/timers.c **** 
  83:../Middlewares/FreeRTOS//Source/timers.c **** #if ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 0 )
  84:../Middlewares/FreeRTOS//Source/timers.c **** 	#error configUSE_TIMERS must be set to 1 to make the xTimerPendFunctionCall() function available.
  85:../Middlewares/FreeRTOS//Source/timers.c **** #endif
  86:../Middlewares/FreeRTOS//Source/timers.c **** 
  87:../Middlewares/FreeRTOS//Source/timers.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  88:../Middlewares/FreeRTOS//Source/timers.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  89:../Middlewares/FreeRTOS//Source/timers.c **** header files above, but not in this file, in order to generate the correct
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 3


  90:../Middlewares/FreeRTOS//Source/timers.c **** privileged Vs unprivileged linkage and placement. */
  91:../Middlewares/FreeRTOS//Source/timers.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  92:../Middlewares/FreeRTOS//Source/timers.c **** 
  93:../Middlewares/FreeRTOS//Source/timers.c **** 
  94:../Middlewares/FreeRTOS//Source/timers.c **** /* This entire source file will be skipped if the application is not configured
  95:../Middlewares/FreeRTOS//Source/timers.c **** to include software timer functionality.  This #if is closed at the very bottom
  96:../Middlewares/FreeRTOS//Source/timers.c **** of this file.  If you want to include software timer functionality then ensure
  97:../Middlewares/FreeRTOS//Source/timers.c **** configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
  98:../Middlewares/FreeRTOS//Source/timers.c **** #if ( configUSE_TIMERS == 1 )
  99:../Middlewares/FreeRTOS//Source/timers.c **** 
 100:../Middlewares/FreeRTOS//Source/timers.c **** /* Misc definitions. */
 101:../Middlewares/FreeRTOS//Source/timers.c **** #define tmrNO_DELAY		( TickType_t ) 0U
 102:../Middlewares/FreeRTOS//Source/timers.c **** 
 103:../Middlewares/FreeRTOS//Source/timers.c **** /* The definition of the timers themselves. */
 104:../Middlewares/FreeRTOS//Source/timers.c **** typedef struct tmrTimerControl
 105:../Middlewares/FreeRTOS//Source/timers.c **** {
 106:../Middlewares/FreeRTOS//Source/timers.c **** 	const char				*pcTimerName;		/*<< Text name.  This is not used by the kernel, it is included simpl
 107:../Middlewares/FreeRTOS//Source/timers.c **** 	ListItem_t				xTimerListItem;		/*<< Standard linked list item as used by all kernel features for e
 108:../Middlewares/FreeRTOS//Source/timers.c **** 	TickType_t				xTimerPeriodInTicks;/*<< How quickly and often the timer expires. */
 109:../Middlewares/FreeRTOS//Source/timers.c **** 	UBaseType_t				uxAutoReload;		/*<< Set to pdTRUE if the timer should be automatically restarted on
 110:../Middlewares/FreeRTOS//Source/timers.c **** 	void 					*pvTimerID;			/*<< An ID to identify the timer.  This allows the timer to be identified 
 111:../Middlewares/FreeRTOS//Source/timers.c **** 	TimerCallbackFunction_t	pxCallbackFunction;	/*<< The function that will be called when the timer e
 112:../Middlewares/FreeRTOS//Source/timers.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
 113:../Middlewares/FreeRTOS//Source/timers.c **** 		UBaseType_t			uxTimerNumber;		/*<< An ID assigned by trace tools such as FreeRTOS+Trace */
 114:../Middlewares/FreeRTOS//Source/timers.c **** 	#endif
 115:../Middlewares/FreeRTOS//Source/timers.c **** 
 116:../Middlewares/FreeRTOS//Source/timers.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 117:../Middlewares/FreeRTOS//Source/timers.c **** 		uint8_t 			ucStaticallyAllocated; /*<< Set to pdTRUE if the timer was created statically so no at
 118:../Middlewares/FreeRTOS//Source/timers.c **** 	#endif
 119:../Middlewares/FreeRTOS//Source/timers.c **** } xTIMER;
 120:../Middlewares/FreeRTOS//Source/timers.c **** 
 121:../Middlewares/FreeRTOS//Source/timers.c **** /* The old xTIMER name is maintained above then typedefed to the new Timer_t
 122:../Middlewares/FreeRTOS//Source/timers.c **** name below to enable the use of older kernel aware debuggers. */
 123:../Middlewares/FreeRTOS//Source/timers.c **** typedef xTIMER Timer_t;
 124:../Middlewares/FreeRTOS//Source/timers.c **** 
 125:../Middlewares/FreeRTOS//Source/timers.c **** /* The definition of messages that can be sent and received on the timer queue.
 126:../Middlewares/FreeRTOS//Source/timers.c **** Two types of message can be queued - messages that manipulate a software timer,
 127:../Middlewares/FreeRTOS//Source/timers.c **** and messages that request the execution of a non-timer related callback.  The
 128:../Middlewares/FreeRTOS//Source/timers.c **** two message types are defined in two separate structures, xTimerParametersType
 129:../Middlewares/FreeRTOS//Source/timers.c **** and xCallbackParametersType respectively. */
 130:../Middlewares/FreeRTOS//Source/timers.c **** typedef struct tmrTimerParameters
 131:../Middlewares/FreeRTOS//Source/timers.c **** {
 132:../Middlewares/FreeRTOS//Source/timers.c **** 	TickType_t			xMessageValue;		/*<< An optional value used by a subset of commands, for example, whe
 133:../Middlewares/FreeRTOS//Source/timers.c **** 	Timer_t *			pxTimer;			/*<< The timer to which the command will be applied. */
 134:../Middlewares/FreeRTOS//Source/timers.c **** } TimerParameter_t;
 135:../Middlewares/FreeRTOS//Source/timers.c **** 
 136:../Middlewares/FreeRTOS//Source/timers.c **** 
 137:../Middlewares/FreeRTOS//Source/timers.c **** typedef struct tmrCallbackParameters
 138:../Middlewares/FreeRTOS//Source/timers.c **** {
 139:../Middlewares/FreeRTOS//Source/timers.c **** 	PendedFunction_t	pxCallbackFunction;	/* << The callback function to execute. */
 140:../Middlewares/FreeRTOS//Source/timers.c **** 	void *pvParameter1;						/* << The value that will be used as the callback functions first paramet
 141:../Middlewares/FreeRTOS//Source/timers.c **** 	uint32_t ulParameter2;					/* << The value that will be used as the callback functions second para
 142:../Middlewares/FreeRTOS//Source/timers.c **** } CallbackParameters_t;
 143:../Middlewares/FreeRTOS//Source/timers.c **** 
 144:../Middlewares/FreeRTOS//Source/timers.c **** /* The structure that contains the two message types, along with an identifier
 145:../Middlewares/FreeRTOS//Source/timers.c **** that is used to determine which message type is valid. */
 146:../Middlewares/FreeRTOS//Source/timers.c **** typedef struct tmrTimerQueueMessage
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 4


 147:../Middlewares/FreeRTOS//Source/timers.c **** {
 148:../Middlewares/FreeRTOS//Source/timers.c **** 	BaseType_t			xMessageID;			/*<< The command being sent to the timer service task. */
 149:../Middlewares/FreeRTOS//Source/timers.c **** 	union
 150:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 151:../Middlewares/FreeRTOS//Source/timers.c **** 		TimerParameter_t xTimerParameters;
 152:../Middlewares/FreeRTOS//Source/timers.c **** 
 153:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Don't include xCallbackParameters if it is not going to be used as
 154:../Middlewares/FreeRTOS//Source/timers.c **** 		it makes the structure (and therefore the timer queue) larger. */
 155:../Middlewares/FreeRTOS//Source/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 156:../Middlewares/FreeRTOS//Source/timers.c **** 			CallbackParameters_t xCallbackParameters;
 157:../Middlewares/FreeRTOS//Source/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 158:../Middlewares/FreeRTOS//Source/timers.c **** 	} u;
 159:../Middlewares/FreeRTOS//Source/timers.c **** } DaemonTaskMessage_t;
 160:../Middlewares/FreeRTOS//Source/timers.c **** 
 161:../Middlewares/FreeRTOS//Source/timers.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 162:../Middlewares/FreeRTOS//Source/timers.c **** static variables must be declared volatile. */
 163:../Middlewares/FreeRTOS//Source/timers.c **** 
 164:../Middlewares/FreeRTOS//Source/timers.c **** /* The list in which active timers are stored.  Timers are referenced in expire
 165:../Middlewares/FreeRTOS//Source/timers.c **** time order, with the nearest expiry time at the front of the list.  Only the
 166:../Middlewares/FreeRTOS//Source/timers.c **** timer service task is allowed to access these lists. */
 167:../Middlewares/FreeRTOS//Source/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList1;
 168:../Middlewares/FreeRTOS//Source/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList2;
 169:../Middlewares/FreeRTOS//Source/timers.c **** PRIVILEGED_DATA static List_t *pxCurrentTimerList;
 170:../Middlewares/FreeRTOS//Source/timers.c **** PRIVILEGED_DATA static List_t *pxOverflowTimerList;
 171:../Middlewares/FreeRTOS//Source/timers.c **** 
 172:../Middlewares/FreeRTOS//Source/timers.c **** /* A queue that is used to send commands to the timer service task. */
 173:../Middlewares/FreeRTOS//Source/timers.c **** PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;
 174:../Middlewares/FreeRTOS//Source/timers.c **** PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;
 175:../Middlewares/FreeRTOS//Source/timers.c **** 
 176:../Middlewares/FreeRTOS//Source/timers.c **** /*lint +e956 */
 177:../Middlewares/FreeRTOS//Source/timers.c **** 
 178:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 179:../Middlewares/FreeRTOS//Source/timers.c **** 
 180:../Middlewares/FreeRTOS//Source/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 181:../Middlewares/FreeRTOS//Source/timers.c **** 
 182:../Middlewares/FreeRTOS//Source/timers.c **** 	/* If static allocation is supported then the application must provide the
 183:../Middlewares/FreeRTOS//Source/timers.c **** 	following callback function - which enables the application to optionally
 184:../Middlewares/FreeRTOS//Source/timers.c **** 	provide the memory that will be used by the timer task as the task's stack
 185:../Middlewares/FreeRTOS//Source/timers.c **** 	and TCB. */
 186:../Middlewares/FreeRTOS//Source/timers.c **** 	extern void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **pp
 187:../Middlewares/FreeRTOS//Source/timers.c **** 
 188:../Middlewares/FreeRTOS//Source/timers.c **** #endif
 189:../Middlewares/FreeRTOS//Source/timers.c **** 
 190:../Middlewares/FreeRTOS//Source/timers.c **** /*
 191:../Middlewares/FreeRTOS//Source/timers.c ****  * Initialise the infrastructure used by the timer service task if it has not
 192:../Middlewares/FreeRTOS//Source/timers.c ****  * been initialised already.
 193:../Middlewares/FreeRTOS//Source/timers.c ****  */
 194:../Middlewares/FreeRTOS//Source/timers.c **** static void prvCheckForValidListAndQueue( void ) PRIVILEGED_FUNCTION;
 195:../Middlewares/FreeRTOS//Source/timers.c **** 
 196:../Middlewares/FreeRTOS//Source/timers.c **** /*
 197:../Middlewares/FreeRTOS//Source/timers.c ****  * The timer service task (daemon).  Timer functionality is controlled by this
 198:../Middlewares/FreeRTOS//Source/timers.c ****  * task.  Other tasks communicate with the timer service task using the
 199:../Middlewares/FreeRTOS//Source/timers.c ****  * xTimerQueue queue.
 200:../Middlewares/FreeRTOS//Source/timers.c ****  */
 201:../Middlewares/FreeRTOS//Source/timers.c **** static void prvTimerTask( void *pvParameters ) PRIVILEGED_FUNCTION;
 202:../Middlewares/FreeRTOS//Source/timers.c **** 
 203:../Middlewares/FreeRTOS//Source/timers.c **** /*
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 5


 204:../Middlewares/FreeRTOS//Source/timers.c ****  * Called by the timer service task to interpret and process a command it
 205:../Middlewares/FreeRTOS//Source/timers.c ****  * received on the timer queue.
 206:../Middlewares/FreeRTOS//Source/timers.c ****  */
 207:../Middlewares/FreeRTOS//Source/timers.c **** static void prvProcessReceivedCommands( void ) PRIVILEGED_FUNCTION;
 208:../Middlewares/FreeRTOS//Source/timers.c **** 
 209:../Middlewares/FreeRTOS//Source/timers.c **** /*
 210:../Middlewares/FreeRTOS//Source/timers.c ****  * Insert the timer into either xActiveTimerList1, or xActiveTimerList2,
 211:../Middlewares/FreeRTOS//Source/timers.c ****  * depending on if the expire time causes a timer counter overflow.
 212:../Middlewares/FreeRTOS//Source/timers.c ****  */
 213:../Middlewares/FreeRTOS//Source/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 214:../Middlewares/FreeRTOS//Source/timers.c **** 
 215:../Middlewares/FreeRTOS//Source/timers.c **** /*
 216:../Middlewares/FreeRTOS//Source/timers.c ****  * An active timer has reached its expire time.  Reload the timer if it is an
 217:../Middlewares/FreeRTOS//Source/timers.c ****  * auto reload timer, then call its callback.
 218:../Middlewares/FreeRTOS//Source/timers.c ****  */
 219:../Middlewares/FreeRTOS//Source/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow ) P
 220:../Middlewares/FreeRTOS//Source/timers.c **** 
 221:../Middlewares/FreeRTOS//Source/timers.c **** /*
 222:../Middlewares/FreeRTOS//Source/timers.c ****  * The tick count has overflowed.  Switch the timer lists after ensuring the
 223:../Middlewares/FreeRTOS//Source/timers.c ****  * current timer list does not still reference some timers.
 224:../Middlewares/FreeRTOS//Source/timers.c ****  */
 225:../Middlewares/FreeRTOS//Source/timers.c **** static void prvSwitchTimerLists( void ) PRIVILEGED_FUNCTION;
 226:../Middlewares/FreeRTOS//Source/timers.c **** 
 227:../Middlewares/FreeRTOS//Source/timers.c **** /*
 228:../Middlewares/FreeRTOS//Source/timers.c ****  * Obtain the current tick count, setting *pxTimerListsWereSwitched to pdTRUE
 229:../Middlewares/FreeRTOS//Source/timers.c ****  * if a tick count overflow occurred since prvSampleTimeNow() was last called.
 230:../Middlewares/FreeRTOS//Source/timers.c ****  */
 231:../Middlewares/FreeRTOS//Source/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched ) PRIVILEGED_FUNCTI
 232:../Middlewares/FreeRTOS//Source/timers.c **** 
 233:../Middlewares/FreeRTOS//Source/timers.c **** /*
 234:../Middlewares/FreeRTOS//Source/timers.c ****  * If the timer list contains any active timers then return the expire time of
 235:../Middlewares/FreeRTOS//Source/timers.c ****  * the timer that will expire first and set *pxListWasEmpty to false.  If the
 236:../Middlewares/FreeRTOS//Source/timers.c ****  * timer list does not contain any timers then return 0 and set *pxListWasEmpty
 237:../Middlewares/FreeRTOS//Source/timers.c ****  * to pdTRUE.
 238:../Middlewares/FreeRTOS//Source/timers.c ****  */
 239:../Middlewares/FreeRTOS//Source/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty ) PRIVILEGED_FUNCTION;
 240:../Middlewares/FreeRTOS//Source/timers.c **** 
 241:../Middlewares/FreeRTOS//Source/timers.c **** /*
 242:../Middlewares/FreeRTOS//Source/timers.c ****  * If a timer has expired, process it.  Otherwise, block the timer service task
 243:../Middlewares/FreeRTOS//Source/timers.c ****  * until either a timer does expire or a command is received.
 244:../Middlewares/FreeRTOS//Source/timers.c ****  */
 245:../Middlewares/FreeRTOS//Source/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 246:../Middlewares/FreeRTOS//Source/timers.c **** 
 247:../Middlewares/FreeRTOS//Source/timers.c **** /*
 248:../Middlewares/FreeRTOS//Source/timers.c ****  * Called after a Timer_t structure has been allocated either statically or
 249:../Middlewares/FreeRTOS//Source/timers.c ****  * dynamically to fill in the structure's members.
 250:../Middlewares/FreeRTOS//Source/timers.c ****  */
 251:../Middlewares/FreeRTOS//Source/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,
 252:../Middlewares/FreeRTOS//Source/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 253:../Middlewares/FreeRTOS//Source/timers.c **** 									const UBaseType_t uxAutoReload,
 254:../Middlewares/FreeRTOS//Source/timers.c **** 									void * const pvTimerID,
 255:../Middlewares/FreeRTOS//Source/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 256:../Middlewares/FreeRTOS//Source/timers.c **** 									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed
 257:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 258:../Middlewares/FreeRTOS//Source/timers.c **** 
 259:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xTimerCreateTimerTask( void )
 260:../Middlewares/FreeRTOS//Source/timers.c **** {
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 6


 261:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xReturn = pdFAIL;
 262:../Middlewares/FreeRTOS//Source/timers.c **** 
 263:../Middlewares/FreeRTOS//Source/timers.c **** 	/* This function is called when the scheduler is started if
 264:../Middlewares/FreeRTOS//Source/timers.c **** 	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
 265:../Middlewares/FreeRTOS//Source/timers.c **** 	timer service task has been created/initialised.  If timers have already
 266:../Middlewares/FreeRTOS//Source/timers.c **** 	been created then the initialisation will already have been performed. */
 267:../Middlewares/FreeRTOS//Source/timers.c **** 	prvCheckForValidListAndQueue();
 268:../Middlewares/FreeRTOS//Source/timers.c **** 
 269:../Middlewares/FreeRTOS//Source/timers.c **** 	if( xTimerQueue != NULL )
 270:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 271:../Middlewares/FreeRTOS//Source/timers.c **** 		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 272:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 273:../Middlewares/FreeRTOS//Source/timers.c **** 			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 274:../Middlewares/FreeRTOS//Source/timers.c **** 			StackType_t *pxTimerTaskStackBuffer = NULL;
 275:../Middlewares/FreeRTOS//Source/timers.c **** 			uint32_t ulTimerTaskStackSize;
 276:../Middlewares/FreeRTOS//Source/timers.c **** 
 277:../Middlewares/FreeRTOS//Source/timers.c **** 			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStac
 278:../Middlewares/FreeRTOS//Source/timers.c **** 			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 279:../Middlewares/FreeRTOS//Source/timers.c **** 													"Tmr Svc",
 280:../Middlewares/FreeRTOS//Source/timers.c **** 													ulTimerTaskStackSize,
 281:../Middlewares/FreeRTOS//Source/timers.c **** 													NULL,
 282:../Middlewares/FreeRTOS//Source/timers.c **** 													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 283:../Middlewares/FreeRTOS//Source/timers.c **** 													pxTimerTaskStackBuffer,
 284:../Middlewares/FreeRTOS//Source/timers.c **** 													pxTimerTaskTCBBuffer );
 285:../Middlewares/FreeRTOS//Source/timers.c **** 
 286:../Middlewares/FreeRTOS//Source/timers.c **** 			if( xTimerTaskHandle != NULL )
 287:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 288:../Middlewares/FreeRTOS//Source/timers.c **** 				xReturn = pdPASS;
 289:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 290:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 291:../Middlewares/FreeRTOS//Source/timers.c **** 		#else
 292:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 293:../Middlewares/FreeRTOS//Source/timers.c **** 			xReturn = xTaskCreate(	prvTimerTask,
 294:../Middlewares/FreeRTOS//Source/timers.c **** 									"Tmr Svc",
 295:../Middlewares/FreeRTOS//Source/timers.c **** 									configTIMER_TASK_STACK_DEPTH,
 296:../Middlewares/FreeRTOS//Source/timers.c **** 									NULL,
 297:../Middlewares/FreeRTOS//Source/timers.c **** 									( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 298:../Middlewares/FreeRTOS//Source/timers.c **** 									&xTimerTaskHandle );
 299:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 300:../Middlewares/FreeRTOS//Source/timers.c **** 		#endif /* configSUPPORT_STATIC_ALLOCATION */
 301:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 302:../Middlewares/FreeRTOS//Source/timers.c **** 	else
 303:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 304:../Middlewares/FreeRTOS//Source/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 305:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 306:../Middlewares/FreeRTOS//Source/timers.c **** 
 307:../Middlewares/FreeRTOS//Source/timers.c **** 	configASSERT( xReturn );
 308:../Middlewares/FreeRTOS//Source/timers.c **** 	return xReturn;
 309:../Middlewares/FreeRTOS//Source/timers.c **** }
 310:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 311:../Middlewares/FreeRTOS//Source/timers.c **** 
 312:../Middlewares/FreeRTOS//Source/timers.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 313:../Middlewares/FreeRTOS//Source/timers.c **** 
 314:../Middlewares/FreeRTOS//Source/timers.c **** 	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
 315:../Middlewares/FreeRTOS//Source/timers.c **** 								const TickType_t xTimerPeriodInTicks,
 316:../Middlewares/FreeRTOS//Source/timers.c **** 								const UBaseType_t uxAutoReload,
 317:../Middlewares/FreeRTOS//Source/timers.c **** 								void * const pvTimerID,
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 7


 318:../Middlewares/FreeRTOS//Source/timers.c **** 								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowe
 319:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 320:../Middlewares/FreeRTOS//Source/timers.c **** 	Timer_t *pxNewTimer;
 321:../Middlewares/FreeRTOS//Source/timers.c **** 
 322:../Middlewares/FreeRTOS//Source/timers.c **** 		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 323:../Middlewares/FreeRTOS//Source/timers.c **** 
 324:../Middlewares/FreeRTOS//Source/timers.c **** 		if( pxNewTimer != NULL )
 325:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 326:../Middlewares/FreeRTOS//Source/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 327:../Middlewares/FreeRTOS//Source/timers.c **** 
 328:../Middlewares/FreeRTOS//Source/timers.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 329:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 330:../Middlewares/FreeRTOS//Source/timers.c **** 				/* Timers can be created statically or dynamically, so note this
 331:../Middlewares/FreeRTOS//Source/timers.c **** 				timer was created dynamically in case the timer is later
 332:../Middlewares/FreeRTOS//Source/timers.c **** 				deleted. */
 333:../Middlewares/FreeRTOS//Source/timers.c **** 				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 334:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 335:../Middlewares/FreeRTOS//Source/timers.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 336:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 337:../Middlewares/FreeRTOS//Source/timers.c **** 
 338:../Middlewares/FreeRTOS//Source/timers.c **** 		return pxNewTimer;
 339:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 340:../Middlewares/FreeRTOS//Source/timers.c **** 
 341:../Middlewares/FreeRTOS//Source/timers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 342:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 343:../Middlewares/FreeRTOS//Source/timers.c **** 
 344:../Middlewares/FreeRTOS//Source/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 345:../Middlewares/FreeRTOS//Source/timers.c **** 
 346:../Middlewares/FreeRTOS//Source/timers.c **** 	TimerHandle_t xTimerCreateStatic(	const char * const pcTimerName,
 347:../Middlewares/FreeRTOS//Source/timers.c **** 										const TickType_t xTimerPeriodInTicks,
 348:../Middlewares/FreeRTOS//Source/timers.c **** 										const UBaseType_t uxAutoReload,
 349:../Middlewares/FreeRTOS//Source/timers.c **** 										void * const pvTimerID,
 350:../Middlewares/FreeRTOS//Source/timers.c **** 										TimerCallbackFunction_t pxCallbackFunction,
 351:../Middlewares/FreeRTOS//Source/timers.c **** 										StaticTimer_t *pxTimerBuffer ) /*lint !e971 Unqualified char types are allowed for string
 352:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 353:../Middlewares/FreeRTOS//Source/timers.c **** 	Timer_t *pxNewTimer;
 354:../Middlewares/FreeRTOS//Source/timers.c **** 
 355:../Middlewares/FreeRTOS//Source/timers.c **** 		#if( configASSERT_DEFINED == 1 )
 356:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 357:../Middlewares/FreeRTOS//Source/timers.c **** 			/* Sanity check that the size of the structure used to declare a
 358:../Middlewares/FreeRTOS//Source/timers.c **** 			variable of type StaticTimer_t equals the size of the real timer
 359:../Middlewares/FreeRTOS//Source/timers.c **** 			structures. */
 360:../Middlewares/FreeRTOS//Source/timers.c **** 			volatile size_t xSize = sizeof( StaticTimer_t );
 361:../Middlewares/FreeRTOS//Source/timers.c **** 			configASSERT( xSize == sizeof( Timer_t ) );
 362:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 363:../Middlewares/FreeRTOS//Source/timers.c **** 		#endif /* configASSERT_DEFINED */
 364:../Middlewares/FreeRTOS//Source/timers.c **** 
 365:../Middlewares/FreeRTOS//Source/timers.c **** 		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
 366:../Middlewares/FreeRTOS//Source/timers.c **** 		configASSERT( pxTimerBuffer );
 367:../Middlewares/FreeRTOS//Source/timers.c **** 		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are d
 368:../Middlewares/FreeRTOS//Source/timers.c **** 
 369:../Middlewares/FreeRTOS//Source/timers.c **** 		if( pxNewTimer != NULL )
 370:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 371:../Middlewares/FreeRTOS//Source/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 372:../Middlewares/FreeRTOS//Source/timers.c **** 
 373:../Middlewares/FreeRTOS//Source/timers.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 374:../Middlewares/FreeRTOS//Source/timers.c **** 			{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 8


 375:../Middlewares/FreeRTOS//Source/timers.c **** 				/* Timers can be created statically or dynamically so note this
 376:../Middlewares/FreeRTOS//Source/timers.c **** 				timer was created statically in case it is later deleted. */
 377:../Middlewares/FreeRTOS//Source/timers.c **** 				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 378:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 379:../Middlewares/FreeRTOS//Source/timers.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 380:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 381:../Middlewares/FreeRTOS//Source/timers.c **** 
 382:../Middlewares/FreeRTOS//Source/timers.c **** 		return pxNewTimer;
 383:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 384:../Middlewares/FreeRTOS//Source/timers.c **** 
 385:../Middlewares/FreeRTOS//Source/timers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 386:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 387:../Middlewares/FreeRTOS//Source/timers.c **** 
 388:../Middlewares/FreeRTOS//Source/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,
 389:../Middlewares/FreeRTOS//Source/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 390:../Middlewares/FreeRTOS//Source/timers.c **** 									const UBaseType_t uxAutoReload,
 391:../Middlewares/FreeRTOS//Source/timers.c **** 									void * const pvTimerID,
 392:../Middlewares/FreeRTOS//Source/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 393:../Middlewares/FreeRTOS//Source/timers.c **** 									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and sing
 394:../Middlewares/FreeRTOS//Source/timers.c **** {
 395:../Middlewares/FreeRTOS//Source/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 396:../Middlewares/FreeRTOS//Source/timers.c **** 	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 397:../Middlewares/FreeRTOS//Source/timers.c **** 
 398:../Middlewares/FreeRTOS//Source/timers.c **** 	if( pxNewTimer != NULL )
 399:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 400:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Ensure the infrastructure used by the timer service task has been
 401:../Middlewares/FreeRTOS//Source/timers.c **** 		created/initialised. */
 402:../Middlewares/FreeRTOS//Source/timers.c **** 		prvCheckForValidListAndQueue();
 403:../Middlewares/FreeRTOS//Source/timers.c **** 
 404:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Initialise the timer structure members using the function
 405:../Middlewares/FreeRTOS//Source/timers.c **** 		parameters. */
 406:../Middlewares/FreeRTOS//Source/timers.c **** 		pxNewTimer->pcTimerName = pcTimerName;
 407:../Middlewares/FreeRTOS//Source/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 408:../Middlewares/FreeRTOS//Source/timers.c **** 		pxNewTimer->uxAutoReload = uxAutoReload;
 409:../Middlewares/FreeRTOS//Source/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 410:../Middlewares/FreeRTOS//Source/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 411:../Middlewares/FreeRTOS//Source/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 412:../Middlewares/FreeRTOS//Source/timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 413:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 414:../Middlewares/FreeRTOS//Source/timers.c **** }
 415:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 416:../Middlewares/FreeRTOS//Source/timers.c **** 
 417:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_
 418:../Middlewares/FreeRTOS//Source/timers.c **** {
 419:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xReturn = pdFAIL;
 420:../Middlewares/FreeRTOS//Source/timers.c **** DaemonTaskMessage_t xMessage;
 421:../Middlewares/FreeRTOS//Source/timers.c **** 
 422:../Middlewares/FreeRTOS//Source/timers.c **** 	configASSERT( xTimer );
 423:../Middlewares/FreeRTOS//Source/timers.c **** 
 424:../Middlewares/FreeRTOS//Source/timers.c **** 	/* Send a message to the timer service task to perform a particular action
 425:../Middlewares/FreeRTOS//Source/timers.c **** 	on a particular timer definition. */
 426:../Middlewares/FreeRTOS//Source/timers.c **** 	if( xTimerQueue != NULL )
 427:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 428:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Send a command to the timer service task to start the xTimer timer. */
 429:../Middlewares/FreeRTOS//Source/timers.c **** 		xMessage.xMessageID = xCommandID;
 430:../Middlewares/FreeRTOS//Source/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 431:../Middlewares/FreeRTOS//Source/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 9


 432:../Middlewares/FreeRTOS//Source/timers.c **** 
 433:../Middlewares/FreeRTOS//Source/timers.c **** 		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 434:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 435:../Middlewares/FreeRTOS//Source/timers.c **** 			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 436:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 437:../Middlewares/FreeRTOS//Source/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 438:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 439:../Middlewares/FreeRTOS//Source/timers.c **** 			else
 440:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 441:../Middlewares/FreeRTOS//Source/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 442:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 443:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 444:../Middlewares/FreeRTOS//Source/timers.c **** 		else
 445:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 446:../Middlewares/FreeRTOS//Source/timers.c **** 			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 447:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 448:../Middlewares/FreeRTOS//Source/timers.c **** 
 449:../Middlewares/FreeRTOS//Source/timers.c **** 		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 450:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 451:../Middlewares/FreeRTOS//Source/timers.c **** 	else
 452:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 453:../Middlewares/FreeRTOS//Source/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 454:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 455:../Middlewares/FreeRTOS//Source/timers.c **** 
 456:../Middlewares/FreeRTOS//Source/timers.c **** 	return xReturn;
 457:../Middlewares/FreeRTOS//Source/timers.c **** }
 458:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 459:../Middlewares/FreeRTOS//Source/timers.c **** 
 460:../Middlewares/FreeRTOS//Source/timers.c **** TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
 461:../Middlewares/FreeRTOS//Source/timers.c **** {
 462:../Middlewares/FreeRTOS//Source/timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 463:../Middlewares/FreeRTOS//Source/timers.c **** 	started, then xTimerTaskHandle will be NULL. */
 464:../Middlewares/FreeRTOS//Source/timers.c **** 	configASSERT( ( xTimerTaskHandle != NULL ) );
 465:../Middlewares/FreeRTOS//Source/timers.c **** 	return xTimerTaskHandle;
 466:../Middlewares/FreeRTOS//Source/timers.c **** }
 467:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 468:../Middlewares/FreeRTOS//Source/timers.c **** 
 469:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
 470:../Middlewares/FreeRTOS//Source/timers.c **** {
 471:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 472:../Middlewares/FreeRTOS//Source/timers.c **** 
 473:../Middlewares/FreeRTOS//Source/timers.c **** 	configASSERT( xTimer );
 474:../Middlewares/FreeRTOS//Source/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 475:../Middlewares/FreeRTOS//Source/timers.c **** }
 476:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 477:../Middlewares/FreeRTOS//Source/timers.c **** 
 478:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
 479:../Middlewares/FreeRTOS//Source/timers.c **** {
 480:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t * pxTimer = ( Timer_t * ) xTimer;
 481:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xReturn;
 482:../Middlewares/FreeRTOS//Source/timers.c **** 
 483:../Middlewares/FreeRTOS//Source/timers.c **** 	configASSERT( xTimer );
 484:../Middlewares/FreeRTOS//Source/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 485:../Middlewares/FreeRTOS//Source/timers.c **** 	return xReturn;
 486:../Middlewares/FreeRTOS//Source/timers.c **** }
 487:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 488:../Middlewares/FreeRTOS//Source/timers.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 10


 489:../Middlewares/FreeRTOS//Source/timers.c **** const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed
 490:../Middlewares/FreeRTOS//Source/timers.c **** {
 491:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 492:../Middlewares/FreeRTOS//Source/timers.c **** 
 493:../Middlewares/FreeRTOS//Source/timers.c **** 	configASSERT( xTimer );
 494:../Middlewares/FreeRTOS//Source/timers.c **** 	return pxTimer->pcTimerName;
 495:../Middlewares/FreeRTOS//Source/timers.c **** }
 496:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 497:../Middlewares/FreeRTOS//Source/timers.c **** 
 498:../Middlewares/FreeRTOS//Source/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
 499:../Middlewares/FreeRTOS//Source/timers.c **** {
 500:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xResult;
 501:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 502:../Middlewares/FreeRTOS//Source/timers.c **** 
 503:../Middlewares/FreeRTOS//Source/timers.c **** 	/* Remove the timer from the list of active timers.  A check has already
 504:../Middlewares/FreeRTOS//Source/timers.c **** 	been performed to ensure the list is not empty. */
 505:../Middlewares/FreeRTOS//Source/timers.c **** 	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 506:../Middlewares/FreeRTOS//Source/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 507:../Middlewares/FreeRTOS//Source/timers.c **** 
 508:../Middlewares/FreeRTOS//Source/timers.c **** 	/* If the timer is an auto reload timer then calculate the next
 509:../Middlewares/FreeRTOS//Source/timers.c **** 	expiry time and re-insert the timer in the list of active timers. */
 510:../Middlewares/FreeRTOS//Source/timers.c **** 	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 511:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 512:../Middlewares/FreeRTOS//Source/timers.c **** 		/* The timer is inserted into a list using a time relative to anything
 513:../Middlewares/FreeRTOS//Source/timers.c **** 		other than the current time.  It will therefore be inserted into the
 514:../Middlewares/FreeRTOS//Source/timers.c **** 		correct list relative to the time this task thinks it is now. */
 515:../Middlewares/FreeRTOS//Source/timers.c **** 		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTim
 516:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 517:../Middlewares/FreeRTOS//Source/timers.c **** 			/* The timer expired before it was added to the active timer
 518:../Middlewares/FreeRTOS//Source/timers.c **** 			list.  Reload it now.  */
 519:../Middlewares/FreeRTOS//Source/timers.c **** 			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmr
 520:../Middlewares/FreeRTOS//Source/timers.c **** 			configASSERT( xResult );
 521:../Middlewares/FreeRTOS//Source/timers.c **** 			( void ) xResult;
 522:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 523:../Middlewares/FreeRTOS//Source/timers.c **** 		else
 524:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 525:../Middlewares/FreeRTOS//Source/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 526:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 527:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 528:../Middlewares/FreeRTOS//Source/timers.c **** 	else
 529:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 530:../Middlewares/FreeRTOS//Source/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 531:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 532:../Middlewares/FreeRTOS//Source/timers.c **** 
 533:../Middlewares/FreeRTOS//Source/timers.c **** 	/* Call the timer callback. */
 534:../Middlewares/FreeRTOS//Source/timers.c **** 	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 535:../Middlewares/FreeRTOS//Source/timers.c **** }
 536:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 537:../Middlewares/FreeRTOS//Source/timers.c **** 
 538:../Middlewares/FreeRTOS//Source/timers.c **** static void prvTimerTask( void *pvParameters )
 539:../Middlewares/FreeRTOS//Source/timers.c **** {
 540:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xNextExpireTime;
 541:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xListWasEmpty;
 542:../Middlewares/FreeRTOS//Source/timers.c **** 
 543:../Middlewares/FreeRTOS//Source/timers.c **** 	/* Just to avoid compiler warnings. */
 544:../Middlewares/FreeRTOS//Source/timers.c **** 	( void ) pvParameters;
 545:../Middlewares/FreeRTOS//Source/timers.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 11


 546:../Middlewares/FreeRTOS//Source/timers.c **** 	#if( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
 547:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 548:../Middlewares/FreeRTOS//Source/timers.c **** 		extern void vApplicationDaemonTaskStartupHook( void );
 549:../Middlewares/FreeRTOS//Source/timers.c **** 
 550:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Allow the application writer to execute some code in the context of
 551:../Middlewares/FreeRTOS//Source/timers.c **** 		this task at the point the task starts executing.  This is useful if the
 552:../Middlewares/FreeRTOS//Source/timers.c **** 		application includes initialisation code that would benefit from
 553:../Middlewares/FreeRTOS//Source/timers.c **** 		executing after the scheduler has been started. */
 554:../Middlewares/FreeRTOS//Source/timers.c **** 		vApplicationDaemonTaskStartupHook();
 555:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 556:../Middlewares/FreeRTOS//Source/timers.c **** 	#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */
 557:../Middlewares/FreeRTOS//Source/timers.c **** 
 558:../Middlewares/FreeRTOS//Source/timers.c **** 	for( ;; )
 559:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 560:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Query the timers list to see if it contains any timers, and if so,
 561:../Middlewares/FreeRTOS//Source/timers.c **** 		obtain the time at which the next timer will expire. */
 562:../Middlewares/FreeRTOS//Source/timers.c **** 		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 563:../Middlewares/FreeRTOS//Source/timers.c **** 
 564:../Middlewares/FreeRTOS//Source/timers.c **** 		/* If a timer has expired, process it.  Otherwise, block this task
 565:../Middlewares/FreeRTOS//Source/timers.c **** 		until either a timer does expire, or a command is received. */
 566:../Middlewares/FreeRTOS//Source/timers.c **** 		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 567:../Middlewares/FreeRTOS//Source/timers.c **** 
 568:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Empty the command queue. */
 569:../Middlewares/FreeRTOS//Source/timers.c **** 		prvProcessReceivedCommands();
 570:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 571:../Middlewares/FreeRTOS//Source/timers.c **** }
 572:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 573:../Middlewares/FreeRTOS//Source/timers.c **** 
 574:../Middlewares/FreeRTOS//Source/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 575:../Middlewares/FreeRTOS//Source/timers.c **** {
 576:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xTimeNow;
 577:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xTimerListsWereSwitched;
 578:../Middlewares/FreeRTOS//Source/timers.c **** 
 579:../Middlewares/FreeRTOS//Source/timers.c **** 	vTaskSuspendAll();
 580:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 581:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Obtain the time now to make an assessment as to whether the timer
 582:../Middlewares/FreeRTOS//Source/timers.c **** 		has expired or not.  If obtaining the time causes the lists to switch
 583:../Middlewares/FreeRTOS//Source/timers.c **** 		then don't process this timer as any timers that remained in the list
 584:../Middlewares/FreeRTOS//Source/timers.c **** 		when the lists were switched will have been processed within the
 585:../Middlewares/FreeRTOS//Source/timers.c **** 		prvSampleTimeNow() function. */
 586:../Middlewares/FreeRTOS//Source/timers.c **** 		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 587:../Middlewares/FreeRTOS//Source/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 588:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 589:../Middlewares/FreeRTOS//Source/timers.c **** 			/* The tick count has not overflowed, has the timer expired? */
 590:../Middlewares/FreeRTOS//Source/timers.c **** 			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 591:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 592:../Middlewares/FreeRTOS//Source/timers.c **** 				( void ) xTaskResumeAll();
 593:../Middlewares/FreeRTOS//Source/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 594:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 595:../Middlewares/FreeRTOS//Source/timers.c **** 			else
 596:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 597:../Middlewares/FreeRTOS//Source/timers.c **** 				/* The tick count has not overflowed, and the next expire
 598:../Middlewares/FreeRTOS//Source/timers.c **** 				time has not been reached yet.  This task should therefore
 599:../Middlewares/FreeRTOS//Source/timers.c **** 				block to wait for the next expire time or a command to be
 600:../Middlewares/FreeRTOS//Source/timers.c **** 				received - whichever comes first.  The following line cannot
 601:../Middlewares/FreeRTOS//Source/timers.c **** 				be reached unless xNextExpireTime > xTimeNow, except in the
 602:../Middlewares/FreeRTOS//Source/timers.c **** 				case when the current timer list is empty. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 12


 603:../Middlewares/FreeRTOS//Source/timers.c **** 				if( xListWasEmpty != pdFALSE )
 604:../Middlewares/FreeRTOS//Source/timers.c **** 				{
 605:../Middlewares/FreeRTOS//Source/timers.c **** 					/* The current timer list is empty - is the overflow list
 606:../Middlewares/FreeRTOS//Source/timers.c **** 					also empty? */
 607:../Middlewares/FreeRTOS//Source/timers.c **** 					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 608:../Middlewares/FreeRTOS//Source/timers.c **** 				}
 609:../Middlewares/FreeRTOS//Source/timers.c **** 
 610:../Middlewares/FreeRTOS//Source/timers.c **** 				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 611:../Middlewares/FreeRTOS//Source/timers.c **** 
 612:../Middlewares/FreeRTOS//Source/timers.c **** 				if( xTaskResumeAll() == pdFALSE )
 613:../Middlewares/FreeRTOS//Source/timers.c **** 				{
 614:../Middlewares/FreeRTOS//Source/timers.c **** 					/* Yield to wait for either a command to arrive, or the
 615:../Middlewares/FreeRTOS//Source/timers.c **** 					block time to expire.  If a command arrived between the
 616:../Middlewares/FreeRTOS//Source/timers.c **** 					critical section being exited and this yield then the yield
 617:../Middlewares/FreeRTOS//Source/timers.c **** 					will not cause the task to block. */
 618:../Middlewares/FreeRTOS//Source/timers.c **** 					portYIELD_WITHIN_API();
 619:../Middlewares/FreeRTOS//Source/timers.c **** 				}
 620:../Middlewares/FreeRTOS//Source/timers.c **** 				else
 621:../Middlewares/FreeRTOS//Source/timers.c **** 				{
 622:../Middlewares/FreeRTOS//Source/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 623:../Middlewares/FreeRTOS//Source/timers.c **** 				}
 624:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 625:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 626:../Middlewares/FreeRTOS//Source/timers.c **** 		else
 627:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 628:../Middlewares/FreeRTOS//Source/timers.c **** 			( void ) xTaskResumeAll();
 629:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 630:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 631:../Middlewares/FreeRTOS//Source/timers.c **** }
 632:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 633:../Middlewares/FreeRTOS//Source/timers.c **** 
 634:../Middlewares/FreeRTOS//Source/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
 635:../Middlewares/FreeRTOS//Source/timers.c **** {
  27              		.loc 1 635 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 636:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xNextExpireTime;
 637:../Middlewares/FreeRTOS//Source/timers.c **** 
 638:../Middlewares/FreeRTOS//Source/timers.c **** 	/* Timers are listed in expiry time order, with the head of the list
 639:../Middlewares/FreeRTOS//Source/timers.c **** 	referencing the task that will expire first.  Obtain the time at which
 640:../Middlewares/FreeRTOS//Source/timers.c **** 	the timer with the nearest expiry time will expire.  If there are no
 641:../Middlewares/FreeRTOS//Source/timers.c **** 	active timers then just set the next expire time to 0.  That will cause
 642:../Middlewares/FreeRTOS//Source/timers.c **** 	this task to unblock when the tick count overflows, at which point the
 643:../Middlewares/FreeRTOS//Source/timers.c **** 	timer lists will be switched and the next expiry time can be
 644:../Middlewares/FreeRTOS//Source/timers.c **** 	re-assessed.  */
 645:../Middlewares/FreeRTOS//Source/timers.c **** 	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  33              		.loc 1 645 0
  34 0000 074B     		ldr	r3, .L4
  35 0002 1B68     		ldr	r3, [r3]
  36 0004 1B68     		ldr	r3, [r3]
  37 0006 B3FA83F3 		clz	r3, r3
  38 000a 5B09     		lsrs	r3, r3, #5
  39 000c 0360     		str	r3, [r0]
 646:../Middlewares/FreeRTOS//Source/timers.c **** 	if( *pxListWasEmpty == pdFALSE )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 13


  40              		.loc 1 646 0
  41 000e 23B9     		cbnz	r3, .L3
 647:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 648:../Middlewares/FreeRTOS//Source/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  42              		.loc 1 648 0
  43 0010 034B     		ldr	r3, .L4
  44 0012 1B68     		ldr	r3, [r3]
  45 0014 DB68     		ldr	r3, [r3, #12]
  46 0016 1868     		ldr	r0, [r3]
  47              	.LVL1:
  48 0018 7047     		bx	lr
  49              	.LVL2:
  50              	.L3:
 649:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 650:../Middlewares/FreeRTOS//Source/timers.c **** 	else
 651:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 652:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Ensure the task unblocks when the tick count rolls over. */
 653:../Middlewares/FreeRTOS//Source/timers.c **** 		xNextExpireTime = ( TickType_t ) 0U;
  51              		.loc 1 653 0
  52 001a 0020     		movs	r0, #0
  53              	.LVL3:
 654:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 655:../Middlewares/FreeRTOS//Source/timers.c **** 
 656:../Middlewares/FreeRTOS//Source/timers.c **** 	return xNextExpireTime;
 657:../Middlewares/FreeRTOS//Source/timers.c **** }
  54              		.loc 1 657 0
  55 001c 7047     		bx	lr
  56              	.L5:
  57 001e 00BF     		.align	2
  58              	.L4:
  59 0020 00000000 		.word	.LANCHOR0
  60              		.cfi_endproc
  61              	.LFE146:
  62              		.cantunwind
  63              		.fnend
  65              		.section	.text._ZL26prvInsertTimerInActiveListP15tmrTimerControlmmm,"ax",%progbits
  66              		.align	1
  67              		.syntax unified
  68              		.thumb
  69              		.thumb_func
  70              		.fpu fpv4-sp-d16
  72              	_ZL26prvInsertTimerInActiveListP15tmrTimerControlmmm:
  73              		.fnstart
  74              	.LFB148:
 658:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 659:../Middlewares/FreeRTOS//Source/timers.c **** 
 660:../Middlewares/FreeRTOS//Source/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
 661:../Middlewares/FreeRTOS//Source/timers.c **** {
 662:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xTimeNow;
 663:../Middlewares/FreeRTOS//Source/timers.c **** PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only acce
 664:../Middlewares/FreeRTOS//Source/timers.c **** 
 665:../Middlewares/FreeRTOS//Source/timers.c **** 	xTimeNow = xTaskGetTickCount();
 666:../Middlewares/FreeRTOS//Source/timers.c **** 
 667:../Middlewares/FreeRTOS//Source/timers.c **** 	if( xTimeNow < xLastTime )
 668:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 669:../Middlewares/FreeRTOS//Source/timers.c **** 		prvSwitchTimerLists();
 670:../Middlewares/FreeRTOS//Source/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 14


 671:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 672:../Middlewares/FreeRTOS//Source/timers.c **** 	else
 673:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 674:../Middlewares/FreeRTOS//Source/timers.c **** 		*pxTimerListsWereSwitched = pdFALSE;
 675:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 676:../Middlewares/FreeRTOS//Source/timers.c **** 
 677:../Middlewares/FreeRTOS//Source/timers.c **** 	xLastTime = xTimeNow;
 678:../Middlewares/FreeRTOS//Source/timers.c **** 
 679:../Middlewares/FreeRTOS//Source/timers.c **** 	return xTimeNow;
 680:../Middlewares/FreeRTOS//Source/timers.c **** }
 681:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 682:../Middlewares/FreeRTOS//Source/timers.c **** 
 683:../Middlewares/FreeRTOS//Source/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 684:../Middlewares/FreeRTOS//Source/timers.c **** {
  75              		.loc 1 684 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              	.LVL4:
  80 0000 08B5     		push	{r3, lr}
  81              		.save {r3, lr}
  82              	.LCFI0:
  83              		.cfi_def_cfa_offset 8
  84              		.cfi_offset 3, -8
  85              		.cfi_offset 14, -4
  86              	.LVL5:
 685:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xProcessTimerNow = pdFALSE;
 686:../Middlewares/FreeRTOS//Source/timers.c **** 
 687:../Middlewares/FreeRTOS//Source/timers.c **** 	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  87              		.loc 1 687 0
  88 0002 4160     		str	r1, [r0, #4]
 688:../Middlewares/FreeRTOS//Source/timers.c **** 	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  89              		.loc 1 688 0
  90 0004 0061     		str	r0, [r0, #16]
 689:../Middlewares/FreeRTOS//Source/timers.c **** 
 690:../Middlewares/FreeRTOS//Source/timers.c **** 	if( xNextExpiryTime <= xTimeNow )
  91              		.loc 1 690 0
  92 0006 8A42     		cmp	r2, r1
  93 0008 0CD3     		bcc	.L7
 691:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 692:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Has the expiry time elapsed between the command to start/reset a
 693:../Middlewares/FreeRTOS//Source/timers.c **** 		timer was issued, and the time the command was processed? */
 694:../Middlewares/FreeRTOS//Source/timers.c **** 		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961
  94              		.loc 1 694 0
  95 000a D21A     		subs	r2, r2, r3
  96              	.LVL6:
  97 000c 8369     		ldr	r3, [r0, #24]
  98              	.LVL7:
  99 000e 9A42     		cmp	r2, r3
 100 0010 01D3     		bcc	.L13
 695:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 696:../Middlewares/FreeRTOS//Source/timers.c **** 			/* The time between a command being issued and the command being
 697:../Middlewares/FreeRTOS//Source/timers.c **** 			processed actually exceeds the timers period.  */
 698:../Middlewares/FreeRTOS//Source/timers.c **** 			xProcessTimerNow = pdTRUE;
 101              		.loc 1 698 0
 102 0012 0120     		movs	r0, #1
 103              	.LVL8:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 15


 104 0014 10E0     		b	.L6
 105              	.LVL9:
 106              	.L13:
 699:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 700:../Middlewares/FreeRTOS//Source/timers.c **** 		else
 701:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 702:../Middlewares/FreeRTOS//Source/timers.c **** 			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 107              		.loc 1 702 0
 108 0016 011D     		adds	r1, r0, #4
 109              	.LVL10:
 110 0018 094B     		ldr	r3, .L14
 111 001a 1868     		ldr	r0, [r3]
 112              	.LVL11:
 113 001c FFF7FEFF 		bl	vListInsert
 114              	.LVL12:
 685:../Middlewares/FreeRTOS//Source/timers.c **** 
 115              		.loc 1 685 0
 116 0020 0020     		movs	r0, #0
 117 0022 09E0     		b	.L6
 118              	.LVL13:
 119              	.L7:
 703:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 704:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 705:../Middlewares/FreeRTOS//Source/timers.c **** 	else
 706:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 707:../Middlewares/FreeRTOS//Source/timers.c **** 		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 120              		.loc 1 707 0
 121 0024 9A42     		cmp	r2, r3
 122 0026 01D2     		bcs	.L9
 123              		.loc 1 707 0 is_stmt 0 discriminator 1
 124 0028 8B42     		cmp	r3, r1
 125 002a 06D9     		bls	.L11
 126              	.L9:
 708:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 709:../Middlewares/FreeRTOS//Source/timers.c **** 			/* If, since the command was issued, the tick count has overflowed
 710:../Middlewares/FreeRTOS//Source/timers.c **** 			but the expiry time has not, then the timer must have already passed
 711:../Middlewares/FreeRTOS//Source/timers.c **** 			its expiry time and should be processed immediately. */
 712:../Middlewares/FreeRTOS//Source/timers.c **** 			xProcessTimerNow = pdTRUE;
 713:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 714:../Middlewares/FreeRTOS//Source/timers.c **** 		else
 715:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 716:../Middlewares/FreeRTOS//Source/timers.c **** 			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 127              		.loc 1 716 0 is_stmt 1
 128 002c 011D     		adds	r1, r0, #4
 129              	.LVL14:
 130 002e 054B     		ldr	r3, .L14+4
 131              	.LVL15:
 132 0030 1868     		ldr	r0, [r3]
 133              	.LVL16:
 134 0032 FFF7FEFF 		bl	vListInsert
 135              	.LVL17:
 685:../Middlewares/FreeRTOS//Source/timers.c **** 
 136              		.loc 1 685 0
 137 0036 0020     		movs	r0, #0
 138              	.LVL18:
 139              	.L6:
 717:../Middlewares/FreeRTOS//Source/timers.c **** 		}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 16


 718:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 719:../Middlewares/FreeRTOS//Source/timers.c **** 
 720:../Middlewares/FreeRTOS//Source/timers.c **** 	return xProcessTimerNow;
 721:../Middlewares/FreeRTOS//Source/timers.c **** }
 140              		.loc 1 721 0
 141 0038 08BD     		pop	{r3, pc}
 142              	.LVL19:
 143              	.L11:
 712:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 144              		.loc 1 712 0
 145 003a 0120     		movs	r0, #1
 146              	.LVL20:
 720:../Middlewares/FreeRTOS//Source/timers.c **** }
 147              		.loc 1 720 0
 148 003c FCE7     		b	.L6
 149              	.L15:
 150 003e 00BF     		.align	2
 151              	.L14:
 152 0040 00000000 		.word	.LANCHOR1
 153 0044 00000000 		.word	.LANCHOR0
 154              		.cfi_endproc
 155              	.LFE148:
 156              		.fnend
 158              		.section	.text._ZL28prvCheckForValidListAndQueuev,"ax",%progbits
 159              		.align	1
 160              		.syntax unified
 161              		.thumb
 162              		.thumb_func
 163              		.fpu fpv4-sp-d16
 165              	_ZL28prvCheckForValidListAndQueuev:
 166              		.fnstart
 167              	.LFB151:
 722:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 723:../Middlewares/FreeRTOS//Source/timers.c **** 
 724:../Middlewares/FreeRTOS//Source/timers.c **** static void	prvProcessReceivedCommands( void )
 725:../Middlewares/FreeRTOS//Source/timers.c **** {
 726:../Middlewares/FreeRTOS//Source/timers.c **** DaemonTaskMessage_t xMessage;
 727:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t *pxTimer;
 728:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xTimerListsWereSwitched, xResult;
 729:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xTimeNow;
 730:../Middlewares/FreeRTOS//Source/timers.c **** 
 731:../Middlewares/FreeRTOS//Source/timers.c **** 	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does
 732:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 733:../Middlewares/FreeRTOS//Source/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 734:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 735:../Middlewares/FreeRTOS//Source/timers.c **** 			/* Negative commands are pended function calls rather than timer
 736:../Middlewares/FreeRTOS//Source/timers.c **** 			commands. */
 737:../Middlewares/FreeRTOS//Source/timers.c **** 			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 738:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 739:../Middlewares/FreeRTOS//Source/timers.c **** 				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 740:../Middlewares/FreeRTOS//Source/timers.c **** 
 741:../Middlewares/FreeRTOS//Source/timers.c **** 				/* The timer uses the xCallbackParameters member to request a
 742:../Middlewares/FreeRTOS//Source/timers.c **** 				callback be executed.  Check the callback is not NULL. */
 743:../Middlewares/FreeRTOS//Source/timers.c **** 				configASSERT( pxCallback );
 744:../Middlewares/FreeRTOS//Source/timers.c **** 
 745:../Middlewares/FreeRTOS//Source/timers.c **** 				/* Call the function. */
 746:../Middlewares/FreeRTOS//Source/timers.c **** 				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 17


 747:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 748:../Middlewares/FreeRTOS//Source/timers.c **** 			else
 749:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 750:../Middlewares/FreeRTOS//Source/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 751:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 752:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 753:../Middlewares/FreeRTOS//Source/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 754:../Middlewares/FreeRTOS//Source/timers.c **** 
 755:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Commands that are positive are timer commands rather than pended
 756:../Middlewares/FreeRTOS//Source/timers.c **** 		function calls. */
 757:../Middlewares/FreeRTOS//Source/timers.c **** 		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 758:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 759:../Middlewares/FreeRTOS//Source/timers.c **** 			/* The messages uses the xTimerParameters member to work on a
 760:../Middlewares/FreeRTOS//Source/timers.c **** 			software timer. */
 761:../Middlewares/FreeRTOS//Source/timers.c **** 			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 762:../Middlewares/FreeRTOS//Source/timers.c **** 
 763:../Middlewares/FreeRTOS//Source/timers.c **** 			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 764:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 765:../Middlewares/FreeRTOS//Source/timers.c **** 				/* The timer is in a list, remove it. */
 766:../Middlewares/FreeRTOS//Source/timers.c **** 				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 767:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 768:../Middlewares/FreeRTOS//Source/timers.c **** 			else
 769:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 770:../Middlewares/FreeRTOS//Source/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 771:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 772:../Middlewares/FreeRTOS//Source/timers.c **** 
 773:../Middlewares/FreeRTOS//Source/timers.c **** 			traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParameters.xMessageV
 774:../Middlewares/FreeRTOS//Source/timers.c **** 
 775:../Middlewares/FreeRTOS//Source/timers.c **** 			/* In this case the xTimerListsWereSwitched parameter is not used, but
 776:../Middlewares/FreeRTOS//Source/timers.c **** 			it must be present in the function call.  prvSampleTimeNow() must be
 777:../Middlewares/FreeRTOS//Source/timers.c **** 			called after the message is received from xTimerQueue so there is no
 778:../Middlewares/FreeRTOS//Source/timers.c **** 			possibility of a higher priority task adding a message to the message
 779:../Middlewares/FreeRTOS//Source/timers.c **** 			queue with a time that is ahead of the timer daemon task (because it
 780:../Middlewares/FreeRTOS//Source/timers.c **** 			pre-empted the timer daemon task after the xTimeNow value was set). */
 781:../Middlewares/FreeRTOS//Source/timers.c **** 			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 782:../Middlewares/FreeRTOS//Source/timers.c **** 
 783:../Middlewares/FreeRTOS//Source/timers.c **** 			switch( xMessage.xMessageID )
 784:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 785:../Middlewares/FreeRTOS//Source/timers.c **** 				case tmrCOMMAND_START :
 786:../Middlewares/FreeRTOS//Source/timers.c **** 			    case tmrCOMMAND_START_FROM_ISR :
 787:../Middlewares/FreeRTOS//Source/timers.c **** 			    case tmrCOMMAND_RESET :
 788:../Middlewares/FreeRTOS//Source/timers.c **** 			    case tmrCOMMAND_RESET_FROM_ISR :
 789:../Middlewares/FreeRTOS//Source/timers.c **** 				case tmrCOMMAND_START_DONT_TRACE :
 790:../Middlewares/FreeRTOS//Source/timers.c **** 					/* Start or restart a timer. */
 791:../Middlewares/FreeRTOS//Source/timers.c **** 					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer-
 792:../Middlewares/FreeRTOS//Source/timers.c **** 					{
 793:../Middlewares/FreeRTOS//Source/timers.c **** 						/* The timer expired before it was added to the active
 794:../Middlewares/FreeRTOS//Source/timers.c **** 						timer list.  Process it now. */
 795:../Middlewares/FreeRTOS//Source/timers.c **** 						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 796:../Middlewares/FreeRTOS//Source/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 797:../Middlewares/FreeRTOS//Source/timers.c **** 
 798:../Middlewares/FreeRTOS//Source/timers.c **** 						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 799:../Middlewares/FreeRTOS//Source/timers.c **** 						{
 800:../Middlewares/FreeRTOS//Source/timers.c **** 							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParam
 801:../Middlewares/FreeRTOS//Source/timers.c **** 							configASSERT( xResult );
 802:../Middlewares/FreeRTOS//Source/timers.c **** 							( void ) xResult;
 803:../Middlewares/FreeRTOS//Source/timers.c **** 						}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 18


 804:../Middlewares/FreeRTOS//Source/timers.c **** 						else
 805:../Middlewares/FreeRTOS//Source/timers.c **** 						{
 806:../Middlewares/FreeRTOS//Source/timers.c **** 							mtCOVERAGE_TEST_MARKER();
 807:../Middlewares/FreeRTOS//Source/timers.c **** 						}
 808:../Middlewares/FreeRTOS//Source/timers.c **** 					}
 809:../Middlewares/FreeRTOS//Source/timers.c **** 					else
 810:../Middlewares/FreeRTOS//Source/timers.c **** 					{
 811:../Middlewares/FreeRTOS//Source/timers.c **** 						mtCOVERAGE_TEST_MARKER();
 812:../Middlewares/FreeRTOS//Source/timers.c **** 					}
 813:../Middlewares/FreeRTOS//Source/timers.c **** 					break;
 814:../Middlewares/FreeRTOS//Source/timers.c **** 
 815:../Middlewares/FreeRTOS//Source/timers.c **** 				case tmrCOMMAND_STOP :
 816:../Middlewares/FreeRTOS//Source/timers.c **** 				case tmrCOMMAND_STOP_FROM_ISR :
 817:../Middlewares/FreeRTOS//Source/timers.c **** 					/* The timer has already been removed from the active list.
 818:../Middlewares/FreeRTOS//Source/timers.c **** 					There is nothing to do here. */
 819:../Middlewares/FreeRTOS//Source/timers.c **** 					break;
 820:../Middlewares/FreeRTOS//Source/timers.c **** 
 821:../Middlewares/FreeRTOS//Source/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD :
 822:../Middlewares/FreeRTOS//Source/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
 823:../Middlewares/FreeRTOS//Source/timers.c **** 					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 824:../Middlewares/FreeRTOS//Source/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 825:../Middlewares/FreeRTOS//Source/timers.c **** 
 826:../Middlewares/FreeRTOS//Source/timers.c **** 					/* The new period does not really have a reference, and can
 827:../Middlewares/FreeRTOS//Source/timers.c **** 					be longer or shorter than the old one.  The command time is
 828:../Middlewares/FreeRTOS//Source/timers.c **** 					therefore set to the current time, and as the period cannot
 829:../Middlewares/FreeRTOS//Source/timers.c **** 					be zero the next expiry time can only be in the future,
 830:../Middlewares/FreeRTOS//Source/timers.c **** 					meaning (unlike for the xTimerStart() case above) there is
 831:../Middlewares/FreeRTOS//Source/timers.c **** 					no fail case that needs to be handled here. */
 832:../Middlewares/FreeRTOS//Source/timers.c **** 					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTi
 833:../Middlewares/FreeRTOS//Source/timers.c **** 					break;
 834:../Middlewares/FreeRTOS//Source/timers.c **** 
 835:../Middlewares/FreeRTOS//Source/timers.c **** 				case tmrCOMMAND_DELETE :
 836:../Middlewares/FreeRTOS//Source/timers.c **** 					/* The timer has already been removed from the active list,
 837:../Middlewares/FreeRTOS//Source/timers.c **** 					just free up the memory if the memory was dynamically
 838:../Middlewares/FreeRTOS//Source/timers.c **** 					allocated. */
 839:../Middlewares/FreeRTOS//Source/timers.c **** 					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 840:../Middlewares/FreeRTOS//Source/timers.c **** 					{
 841:../Middlewares/FreeRTOS//Source/timers.c **** 						/* The timer can only have been allocated dynamically -
 842:../Middlewares/FreeRTOS//Source/timers.c **** 						free it again. */
 843:../Middlewares/FreeRTOS//Source/timers.c **** 						vPortFree( pxTimer );
 844:../Middlewares/FreeRTOS//Source/timers.c **** 					}
 845:../Middlewares/FreeRTOS//Source/timers.c **** 					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 846:../Middlewares/FreeRTOS//Source/timers.c **** 					{
 847:../Middlewares/FreeRTOS//Source/timers.c **** 						/* The timer could have been allocated statically or
 848:../Middlewares/FreeRTOS//Source/timers.c **** 						dynamically, so check before attempting to free the
 849:../Middlewares/FreeRTOS//Source/timers.c **** 						memory. */
 850:../Middlewares/FreeRTOS//Source/timers.c **** 						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 851:../Middlewares/FreeRTOS//Source/timers.c **** 						{
 852:../Middlewares/FreeRTOS//Source/timers.c **** 							vPortFree( pxTimer );
 853:../Middlewares/FreeRTOS//Source/timers.c **** 						}
 854:../Middlewares/FreeRTOS//Source/timers.c **** 						else
 855:../Middlewares/FreeRTOS//Source/timers.c **** 						{
 856:../Middlewares/FreeRTOS//Source/timers.c **** 							mtCOVERAGE_TEST_MARKER();
 857:../Middlewares/FreeRTOS//Source/timers.c **** 						}
 858:../Middlewares/FreeRTOS//Source/timers.c **** 					}
 859:../Middlewares/FreeRTOS//Source/timers.c **** 					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 860:../Middlewares/FreeRTOS//Source/timers.c **** 					break;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 19


 861:../Middlewares/FreeRTOS//Source/timers.c **** 
 862:../Middlewares/FreeRTOS//Source/timers.c **** 				default	:
 863:../Middlewares/FreeRTOS//Source/timers.c **** 					/* Don't expect to get here. */
 864:../Middlewares/FreeRTOS//Source/timers.c **** 					break;
 865:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 866:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 867:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 868:../Middlewares/FreeRTOS//Source/timers.c **** }
 869:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 870:../Middlewares/FreeRTOS//Source/timers.c **** 
 871:../Middlewares/FreeRTOS//Source/timers.c **** static void prvSwitchTimerLists( void )
 872:../Middlewares/FreeRTOS//Source/timers.c **** {
 873:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xNextExpireTime, xReloadTime;
 874:../Middlewares/FreeRTOS//Source/timers.c **** List_t *pxTemp;
 875:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t *pxTimer;
 876:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xResult;
 877:../Middlewares/FreeRTOS//Source/timers.c **** 
 878:../Middlewares/FreeRTOS//Source/timers.c **** 	/* The tick count has overflowed.  The timer lists must be switched.
 879:../Middlewares/FreeRTOS//Source/timers.c **** 	If there are any timers still referenced from the current timer list
 880:../Middlewares/FreeRTOS//Source/timers.c **** 	then they must have expired and should be processed before the lists
 881:../Middlewares/FreeRTOS//Source/timers.c **** 	are switched. */
 882:../Middlewares/FreeRTOS//Source/timers.c **** 	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 883:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 884:../Middlewares/FreeRTOS//Source/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 885:../Middlewares/FreeRTOS//Source/timers.c **** 
 886:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Remove the timer from the list. */
 887:../Middlewares/FreeRTOS//Source/timers.c **** 		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 888:../Middlewares/FreeRTOS//Source/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 889:../Middlewares/FreeRTOS//Source/timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 890:../Middlewares/FreeRTOS//Source/timers.c **** 
 891:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Execute its callback, then send a command to restart the timer if
 892:../Middlewares/FreeRTOS//Source/timers.c **** 		it is an auto-reload timer.  It cannot be restarted here as the lists
 893:../Middlewares/FreeRTOS//Source/timers.c **** 		have not yet been switched. */
 894:../Middlewares/FreeRTOS//Source/timers.c **** 		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 895:../Middlewares/FreeRTOS//Source/timers.c **** 
 896:../Middlewares/FreeRTOS//Source/timers.c **** 		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 897:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 898:../Middlewares/FreeRTOS//Source/timers.c **** 			/* Calculate the reload value, and if the reload value results in
 899:../Middlewares/FreeRTOS//Source/timers.c **** 			the timer going into the same timer list then it has already expired
 900:../Middlewares/FreeRTOS//Source/timers.c **** 			and the timer should be re-inserted into the current list so it is
 901:../Middlewares/FreeRTOS//Source/timers.c **** 			processed again within this loop.  Otherwise a command should be sent
 902:../Middlewares/FreeRTOS//Source/timers.c **** 			to restart the timer to ensure it is only inserted into a list after
 903:../Middlewares/FreeRTOS//Source/timers.c **** 			the lists have been swapped. */
 904:../Middlewares/FreeRTOS//Source/timers.c **** 			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 905:../Middlewares/FreeRTOS//Source/timers.c **** 			if( xReloadTime > xNextExpireTime )
 906:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 907:../Middlewares/FreeRTOS//Source/timers.c **** 				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 908:../Middlewares/FreeRTOS//Source/timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 909:../Middlewares/FreeRTOS//Source/timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 910:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 911:../Middlewares/FreeRTOS//Source/timers.c **** 			else
 912:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 913:../Middlewares/FreeRTOS//Source/timers.c **** 				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tm
 914:../Middlewares/FreeRTOS//Source/timers.c **** 				configASSERT( xResult );
 915:../Middlewares/FreeRTOS//Source/timers.c **** 				( void ) xResult;
 916:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 917:../Middlewares/FreeRTOS//Source/timers.c **** 		}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 20


 918:../Middlewares/FreeRTOS//Source/timers.c **** 		else
 919:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 920:../Middlewares/FreeRTOS//Source/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 921:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 922:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 923:../Middlewares/FreeRTOS//Source/timers.c **** 
 924:../Middlewares/FreeRTOS//Source/timers.c **** 	pxTemp = pxCurrentTimerList;
 925:../Middlewares/FreeRTOS//Source/timers.c **** 	pxCurrentTimerList = pxOverflowTimerList;
 926:../Middlewares/FreeRTOS//Source/timers.c **** 	pxOverflowTimerList = pxTemp;
 927:../Middlewares/FreeRTOS//Source/timers.c **** }
 928:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 929:../Middlewares/FreeRTOS//Source/timers.c **** 
 930:../Middlewares/FreeRTOS//Source/timers.c **** static void prvCheckForValidListAndQueue( void )
 931:../Middlewares/FreeRTOS//Source/timers.c **** {
 168              		.loc 1 931 0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 0
 171              		@ frame_needed = 0, uses_anonymous_args = 0
 172 0000 38B5     		push	{r3, r4, r5, lr}
 173              		.save {r3, r4, r5, lr}
 174              	.LCFI1:
 175              		.cfi_def_cfa_offset 16
 176              		.cfi_offset 3, -16
 177              		.cfi_offset 4, -12
 178              		.cfi_offset 5, -8
 179              		.cfi_offset 14, -4
 932:../Middlewares/FreeRTOS//Source/timers.c **** 	/* Check that the list from which active timers are referenced, and the
 933:../Middlewares/FreeRTOS//Source/timers.c **** 	queue used to communicate with the timer service, have been
 934:../Middlewares/FreeRTOS//Source/timers.c **** 	initialised. */
 935:../Middlewares/FreeRTOS//Source/timers.c **** 	taskENTER_CRITICAL();
 180              		.loc 1 935 0
 181 0002 FFF7FEFF 		bl	vPortEnterCritical
 182              	.LVL21:
 936:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 937:../Middlewares/FreeRTOS//Source/timers.c **** 		if( xTimerQueue == NULL )
 183              		.loc 1 937 0
 184 0006 0F4B     		ldr	r3, .L20
 185 0008 1B68     		ldr	r3, [r3]
 186 000a 13B1     		cbz	r3, .L19
 187              	.L17:
 938:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 939:../Middlewares/FreeRTOS//Source/timers.c **** 			vListInitialise( &xActiveTimerList1 );
 940:../Middlewares/FreeRTOS//Source/timers.c **** 			vListInitialise( &xActiveTimerList2 );
 941:../Middlewares/FreeRTOS//Source/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
 942:../Middlewares/FreeRTOS//Source/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 943:../Middlewares/FreeRTOS//Source/timers.c **** 
 944:../Middlewares/FreeRTOS//Source/timers.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 945:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 946:../Middlewares/FreeRTOS//Source/timers.c **** 				/* The timer queue is allocated statically in case
 947:../Middlewares/FreeRTOS//Source/timers.c **** 				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
 948:../Middlewares/FreeRTOS//Source/timers.c **** 				static StaticQueue_t xStaticTimerQueue;
 949:../Middlewares/FreeRTOS//Source/timers.c **** 				static uint8_t ucStaticTimerQueueStorage[ configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_
 950:../Middlewares/FreeRTOS//Source/timers.c **** 
 951:../Middlewares/FreeRTOS//Source/timers.c **** 				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskM
 952:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 953:../Middlewares/FreeRTOS//Source/timers.c **** 			#else
 954:../Middlewares/FreeRTOS//Source/timers.c **** 			{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 21


 955:../Middlewares/FreeRTOS//Source/timers.c **** 				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage
 956:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 957:../Middlewares/FreeRTOS//Source/timers.c **** 			#endif
 958:../Middlewares/FreeRTOS//Source/timers.c **** 
 959:../Middlewares/FreeRTOS//Source/timers.c **** 			#if ( configQUEUE_REGISTRY_SIZE > 0 )
 960:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 961:../Middlewares/FreeRTOS//Source/timers.c **** 				if( xTimerQueue != NULL )
 962:../Middlewares/FreeRTOS//Source/timers.c **** 				{
 963:../Middlewares/FreeRTOS//Source/timers.c **** 					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 964:../Middlewares/FreeRTOS//Source/timers.c **** 				}
 965:../Middlewares/FreeRTOS//Source/timers.c **** 				else
 966:../Middlewares/FreeRTOS//Source/timers.c **** 				{
 967:../Middlewares/FreeRTOS//Source/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 968:../Middlewares/FreeRTOS//Source/timers.c **** 				}
 969:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 970:../Middlewares/FreeRTOS//Source/timers.c **** 			#endif /* configQUEUE_REGISTRY_SIZE */
 971:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 972:../Middlewares/FreeRTOS//Source/timers.c **** 		else
 973:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 974:../Middlewares/FreeRTOS//Source/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 975:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 976:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 977:../Middlewares/FreeRTOS//Source/timers.c **** 	taskEXIT_CRITICAL();
 188              		.loc 1 977 0
 189 000c FFF7FEFF 		bl	vPortExitCritical
 190              	.LVL22:
 978:../Middlewares/FreeRTOS//Source/timers.c **** }
 191              		.loc 1 978 0
 192 0010 38BD     		pop	{r3, r4, r5, pc}
 193              	.L19:
 939:../Middlewares/FreeRTOS//Source/timers.c **** 			vListInitialise( &xActiveTimerList2 );
 194              		.loc 1 939 0
 195 0012 0D4D     		ldr	r5, .L20+4
 196 0014 2846     		mov	r0, r5
 197 0016 FFF7FEFF 		bl	vListInitialise
 198              	.LVL23:
 940:../Middlewares/FreeRTOS//Source/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
 199              		.loc 1 940 0
 200 001a 0C4C     		ldr	r4, .L20+8
 201 001c 2046     		mov	r0, r4
 202 001e FFF7FEFF 		bl	vListInitialise
 203              	.LVL24:
 941:../Middlewares/FreeRTOS//Source/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 204              		.loc 1 941 0
 205 0022 0B4B     		ldr	r3, .L20+12
 206 0024 1D60     		str	r5, [r3]
 942:../Middlewares/FreeRTOS//Source/timers.c **** 
 207              		.loc 1 942 0
 208 0026 0B4B     		ldr	r3, .L20+16
 209 0028 1C60     		str	r4, [r3]
 955:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 210              		.loc 1 955 0
 211 002a 0022     		movs	r2, #0
 212 002c 0C21     		movs	r1, #12
 213 002e 0A20     		movs	r0, #10
 214 0030 FFF7FEFF 		bl	xQueueGenericCreate
 215              	.LVL25:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 22


 216 0034 034B     		ldr	r3, .L20
 217 0036 1860     		str	r0, [r3]
 961:../Middlewares/FreeRTOS//Source/timers.c **** 				{
 218              		.loc 1 961 0
 219 0038 0028     		cmp	r0, #0
 220 003a E7D0     		beq	.L17
 963:../Middlewares/FreeRTOS//Source/timers.c **** 				}
 221              		.loc 1 963 0
 222 003c 0649     		ldr	r1, .L20+20
 223 003e FFF7FEFF 		bl	vQueueAddToRegistry
 224              	.LVL26:
 225 0042 E3E7     		b	.L17
 226              	.L21:
 227              		.align	2
 228              	.L20:
 229 0044 00000000 		.word	.LANCHOR2
 230 0048 00000000 		.word	.LANCHOR3
 231 004c 00000000 		.word	.LANCHOR4
 232 0050 00000000 		.word	.LANCHOR0
 233 0054 00000000 		.word	.LANCHOR1
 234 0058 00000000 		.word	.LC0
 235              		.cfi_endproc
 236              	.LFE151:
 237              		.fnend
 239              		.section	.text._ZL21prvInitialiseNewTimerPKcmmPvPFvS1_EP15tmrTimerControl,"ax",%progbits
 240              		.align	1
 241              		.syntax unified
 242              		.thumb
 243              		.thumb_func
 244              		.fpu fpv4-sp-d16
 246              	_ZL21prvInitialiseNewTimerPKcmmPvPFvS1_EP15tmrTimerControl:
 247              		.fnstart
 248              	.LFB137:
 394:../Middlewares/FreeRTOS//Source/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 249              		.loc 1 394 0
 250              		.cfi_startproc
 251              		@ args = 8, pretend = 0, frame = 0
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253              	.LVL27:
 254 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 255              		.save {r4, r5, r6, r7, r8, lr}
 256              	.LCFI2:
 257              		.cfi_def_cfa_offset 24
 258              		.cfi_offset 4, -24
 259              		.cfi_offset 5, -20
 260              		.cfi_offset 6, -16
 261              		.cfi_offset 7, -12
 262              		.cfi_offset 8, -8
 263              		.cfi_offset 14, -4
 264 0004 079C     		ldr	r4, [sp, #28]
 396:../Middlewares/FreeRTOS//Source/timers.c **** 
 265              		.loc 1 396 0
 266 0006 41B9     		cbnz	r1, .L23
 267              	.LBB30:
 268              	.LBB31:
 269              		.file 2 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 23


   2:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 24


  59:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 25


 116:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 26


 173:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 27


 230:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 238:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 270              		.loc 2 244 0
 271              		.syntax unified
 272              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 273 0008 4FF01003 			mov r3, #16												
 274 000c 83F31188 		msr basepri, r3											
 275 0010 BFF36F8F 		isb														
 276 0014 BFF34F8F 		dsb														
 277              	
 278              	@ 0 "" 2
 279              	.LVL28:
 280              		.thumb
 281              		.syntax unified
 282              	.L24:
 283 0018 FEE7     		b	.L24
 284              	.LVL29:
 285              	.L23:
 286 001a 0F46     		mov	r7, r1
 287              	.LBE31:
 288              	.LBE30:
 398:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 289              		.loc 1 398 0
 290 001c 74B1     		cbz	r4, .L22
 291 001e 1D46     		mov	r5, r3
 292 0020 1646     		mov	r6, r2
 293 0022 8046     		mov	r8, r0
 402:../Middlewares/FreeRTOS//Source/timers.c **** 
 294              		.loc 1 402 0
 295 0024 FFF7FEFF 		bl	_ZL28prvCheckForValidListAndQueuev
 296              	.LVL30:
 406:../Middlewares/FreeRTOS//Source/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 297              		.loc 1 406 0
 298 0028 C4F80080 		str	r8, [r4]
 407:../Middlewares/FreeRTOS//Source/timers.c **** 		pxNewTimer->uxAutoReload = uxAutoReload;
 299              		.loc 1 407 0
 300 002c A761     		str	r7, [r4, #24]
 408:../Middlewares/FreeRTOS//Source/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 301              		.loc 1 408 0
 302 002e E661     		str	r6, [r4, #28]
 409:../Middlewares/FreeRTOS//Source/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 303              		.loc 1 409 0
 304 0030 2562     		str	r5, [r4, #32]
 410:../Middlewares/FreeRTOS//Source/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 28


 305              		.loc 1 410 0
 306 0032 069B     		ldr	r3, [sp, #24]
 307 0034 6362     		str	r3, [r4, #36]
 411:../Middlewares/FreeRTOS//Source/timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 308              		.loc 1 411 0
 309 0036 201D     		adds	r0, r4, #4
 310 0038 FFF7FEFF 		bl	vListInitialiseItem
 311              	.LVL31:
 312              	.L22:
 414:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 313              		.loc 1 414 0
 314 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 315              		.cfi_endproc
 316              	.LFE137:
 317              		.fnend
 319              		.section	.text.xTimerCreateTimerTask,"ax",%progbits
 320              		.align	1
 321              		.global	xTimerCreateTimerTask
 322              		.syntax unified
 323              		.thumb
 324              		.thumb_func
 325              		.fpu fpv4-sp-d16
 327              	xTimerCreateTimerTask:
 328              		.fnstart
 329              	.LFB135:
 260:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xReturn = pdFAIL;
 330              		.loc 1 260 0
 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 0
 333              		@ frame_needed = 0, uses_anonymous_args = 0
 334 0000 00B5     		push	{lr}
 335              		.save {lr}
 336              	.LCFI3:
 337              		.cfi_def_cfa_offset 4
 338              		.cfi_offset 14, -4
 339              		.pad #12
 340 0002 83B0     		sub	sp, sp, #12
 341              	.LCFI4:
 342              		.cfi_def_cfa_offset 16
 343              	.LVL32:
 267:../Middlewares/FreeRTOS//Source/timers.c **** 
 344              		.loc 1 267 0
 345 0004 FFF7FEFF 		bl	_ZL28prvCheckForValidListAndQueuev
 346              	.LVL33:
 269:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 347              		.loc 1 269 0
 348 0008 0D4B     		ldr	r3, .L32
 349 000a 1B68     		ldr	r3, [r3]
 350 000c 5BB1     		cbz	r3, .L28
 293:../Middlewares/FreeRTOS//Source/timers.c **** 									"Tmr Svc",
 351              		.loc 1 293 0
 352 000e 0D4B     		ldr	r3, .L32+4
 353 0010 0193     		str	r3, [sp, #4]
 354 0012 0123     		movs	r3, #1
 355 0014 0093     		str	r3, [sp]
 356 0016 0023     		movs	r3, #0
 357 0018 4FF48272 		mov	r2, #260
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 29


 358 001c 0A49     		ldr	r1, .L32+8
 359 001e 0B48     		ldr	r0, .L32+12
 360 0020 FFF7FEFF 		bl	xTaskCreate
 361              	.LVL34:
 307:../Middlewares/FreeRTOS//Source/timers.c **** 	return xReturn;
 362              		.loc 1 307 0
 363 0024 40B9     		cbnz	r0, .L27
 364              	.LVL35:
 365              	.L28:
 366              	.LBB32:
 367              	.LBB33:
 368              		.loc 2 244 0
 369              		.syntax unified
 370              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 371 0026 4FF01003 			mov r3, #16												
 372 002a 83F31188 		msr basepri, r3											
 373 002e BFF36F8F 		isb														
 374 0032 BFF34F8F 		dsb														
 375              	
 376              	@ 0 "" 2
 377              	.LVL36:
 378              		.thumb
 379              		.syntax unified
 380              	.L30:
 381 0036 FEE7     		b	.L30
 382              	.LVL37:
 383              	.L27:
 384              	.LBE33:
 385              	.LBE32:
 309:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 386              		.loc 1 309 0
 387 0038 03B0     		add	sp, sp, #12
 388              	.LCFI5:
 389              		.cfi_def_cfa_offset 4
 390              		@ sp needed
 391 003a 5DF804FB 		ldr	pc, [sp], #4
 392              	.L33:
 393 003e 00BF     		.align	2
 394              	.L32:
 395 0040 00000000 		.word	.LANCHOR2
 396 0044 00000000 		.word	.LANCHOR5
 397 0048 00000000 		.word	.LC1
 398 004c 00000000 		.word	_ZL12prvTimerTaskPv
 399              		.cfi_endproc
 400              	.LFE135:
 401              		.fnend
 403              		.section	.text.xTimerCreate,"ax",%progbits
 404              		.align	1
 405              		.global	xTimerCreate
 406              		.syntax unified
 407              		.thumb
 408              		.thumb_func
 409              		.fpu fpv4-sp-d16
 411              	xTimerCreate:
 412              		.fnstart
 413              	.LFB136:
 319:../Middlewares/FreeRTOS//Source/timers.c **** 	Timer_t *pxNewTimer;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 30


 414              		.loc 1 319 0
 415              		.cfi_startproc
 416              		@ args = 4, pretend = 0, frame = 0
 417              		@ frame_needed = 0, uses_anonymous_args = 0
 418              	.LVL38:
 419 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 420              		.save {r4, r5, r6, r7, r8, lr}
 421              	.LCFI6:
 422              		.cfi_def_cfa_offset 24
 423              		.cfi_offset 4, -24
 424              		.cfi_offset 5, -20
 425              		.cfi_offset 6, -16
 426              		.cfi_offset 7, -12
 427              		.cfi_offset 8, -8
 428              		.cfi_offset 14, -4
 429              		.pad #8
 430 0004 82B0     		sub	sp, sp, #8
 431              	.LCFI7:
 432              		.cfi_def_cfa_offset 32
 433 0006 0546     		mov	r5, r0
 434 0008 0E46     		mov	r6, r1
 435 000a 1746     		mov	r7, r2
 436 000c 9846     		mov	r8, r3
 322:../Middlewares/FreeRTOS//Source/timers.c **** 
 437              		.loc 1 322 0
 438 000e 2C20     		movs	r0, #44
 439              	.LVL39:
 440 0010 FFF7FEFF 		bl	pvPortMalloc
 441              	.LVL40:
 324:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 442              		.loc 1 324 0
 443 0014 0446     		mov	r4, r0
 444 0016 40B1     		cbz	r0, .L34
 326:../Middlewares/FreeRTOS//Source/timers.c **** 
 445              		.loc 1 326 0
 446 0018 0190     		str	r0, [sp, #4]
 447 001a 089B     		ldr	r3, [sp, #32]
 448 001c 0093     		str	r3, [sp]
 449 001e 4346     		mov	r3, r8
 450 0020 3A46     		mov	r2, r7
 451 0022 3146     		mov	r1, r6
 452 0024 2846     		mov	r0, r5
 453              	.LVL41:
 454 0026 FFF7FEFF 		bl	_ZL21prvInitialiseNewTimerPKcmmPvPFvS1_EP15tmrTimerControl
 455              	.LVL42:
 456              	.L34:
 339:../Middlewares/FreeRTOS//Source/timers.c **** 
 457              		.loc 1 339 0
 458 002a 2046     		mov	r0, r4
 459 002c 02B0     		add	sp, sp, #8
 460              	.LCFI8:
 461              		.cfi_def_cfa_offset 24
 462              		@ sp needed
 463 002e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 464              		.cfi_endproc
 465              	.LFE136:
 466              		.fnend
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 31


 468              		.section	.text.xTimerGenericCommand,"ax",%progbits
 469              		.align	1
 470              		.global	xTimerGenericCommand
 471              		.syntax unified
 472              		.thumb
 473              		.thumb_func
 474              		.fpu fpv4-sp-d16
 476              	xTimerGenericCommand:
 477              		.fnstart
 478              	.LFB138:
 418:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xReturn = pdFAIL;
 479              		.loc 1 418 0
 480              		.cfi_startproc
 481              		@ args = 4, pretend = 0, frame = 16
 482              		@ frame_needed = 0, uses_anonymous_args = 0
 483              	.LVL43:
 422:../Middlewares/FreeRTOS//Source/timers.c **** 
 484              		.loc 1 422 0
 485 0000 C8B1     		cbz	r0, .L46
 418:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xReturn = pdFAIL;
 486              		.loc 1 418 0
 487 0002 30B5     		push	{r4, r5, lr}
 488              		.save {r4, r5, lr}
 489              	.LCFI9:
 490              		.cfi_def_cfa_offset 12
 491              		.cfi_offset 4, -12
 492              		.cfi_offset 5, -8
 493              		.cfi_offset 14, -4
 494              		.pad #20
 495 0004 85B0     		sub	sp, sp, #20
 496              	.LCFI10:
 497              		.cfi_def_cfa_offset 32
 498 0006 1546     		mov	r5, r2
 499 0008 0446     		mov	r4, r0
 426:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 500              		.loc 1 426 0
 501 000a 174A     		ldr	r2, .L48
 502              	.LVL44:
 503 000c 1068     		ldr	r0, [r2]
 504              	.LVL45:
 505 000e 40B3     		cbz	r0, .L43
 506 0010 1A46     		mov	r2, r3
 429:../Middlewares/FreeRTOS//Source/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 507              		.loc 1 429 0
 508 0012 0191     		str	r1, [sp, #4]
 430:../Middlewares/FreeRTOS//Source/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 509              		.loc 1 430 0
 510 0014 0295     		str	r5, [sp, #8]
 431:../Middlewares/FreeRTOS//Source/timers.c **** 
 511              		.loc 1 431 0
 512 0016 0394     		str	r4, [sp, #12]
 433:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 513              		.loc 1 433 0
 514 0018 0529     		cmp	r1, #5
 515 001a 1DDC     		bgt	.L41
 435:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 516              		.loc 1 435 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 32


 517 001c FFF7FEFF 		bl	xTaskGetSchedulerState
 518              	.LVL46:
 519 0020 0228     		cmp	r0, #2
 520 0022 11D0     		beq	.L47
 441:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 521              		.loc 1 441 0
 522 0024 0023     		movs	r3, #0
 523 0026 1A46     		mov	r2, r3
 524 0028 01A9     		add	r1, sp, #4
 525 002a 0F48     		ldr	r0, .L48
 526 002c 0068     		ldr	r0, [r0]
 527 002e FFF7FEFF 		bl	xQueueGenericSend
 528              	.LVL47:
 529              	.L37:
 457:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 530              		.loc 1 457 0
 531 0032 05B0     		add	sp, sp, #20
 532              	.LCFI11:
 533              		.cfi_def_cfa_offset 12
 534              		@ sp needed
 535 0034 30BD     		pop	{r4, r5, pc}
 536              	.LVL48:
 537              	.L46:
 538              	.LCFI12:
 539              		.cfi_def_cfa_offset 0
 540              		.cfi_restore 4
 541              		.cfi_restore 5
 542              		.cfi_restore 14
 543              	.LBB34:
 544              	.LBB35:
 545              		.loc 2 244 0
 546              		.syntax unified
 547              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 548 0036 4FF01003 			mov r3, #16												
 549 003a 83F31188 		msr basepri, r3											
 550 003e BFF36F8F 		isb														
 551 0042 BFF34F8F 		dsb														
 552              	
 553              	@ 0 "" 2
 554              	.LVL49:
 555              		.thumb
 556              		.syntax unified
 557              	.L39:
 558 0046 FEE7     		b	.L39
 559              	.LVL50:
 560              	.L47:
 561              	.LCFI13:
 562              		.cfi_def_cfa_offset 32
 563              		.cfi_offset 4, -12
 564              		.cfi_offset 5, -8
 565              		.cfi_offset 14, -4
 566              	.LBE35:
 567              	.LBE34:
 437:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 568              		.loc 1 437 0
 569 0048 0023     		movs	r3, #0
 570 004a 089A     		ldr	r2, [sp, #32]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 33


 571 004c 01A9     		add	r1, sp, #4
 572 004e 0648     		ldr	r0, .L48
 573 0050 0068     		ldr	r0, [r0]
 574 0052 FFF7FEFF 		bl	xQueueGenericSend
 575              	.LVL51:
 576 0056 ECE7     		b	.L37
 577              	.LVL52:
 578              	.L41:
 446:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 579              		.loc 1 446 0
 580 0058 0023     		movs	r3, #0
 581 005a 01A9     		add	r1, sp, #4
 582              	.LVL53:
 583 005c FFF7FEFF 		bl	xQueueGenericSendFromISR
 584              	.LVL54:
 585 0060 E7E7     		b	.L37
 586              	.LVL55:
 587              	.L43:
 419:../Middlewares/FreeRTOS//Source/timers.c **** DaemonTaskMessage_t xMessage;
 588              		.loc 1 419 0
 589 0062 0020     		movs	r0, #0
 456:../Middlewares/FreeRTOS//Source/timers.c **** }
 590              		.loc 1 456 0
 591 0064 E5E7     		b	.L37
 592              	.L49:
 593 0066 00BF     		.align	2
 594              	.L48:
 595 0068 00000000 		.word	.LANCHOR2
 596              		.cfi_endproc
 597              	.LFE138:
 598              		.fnend
 600              		.section	.text._ZL19prvSwitchTimerListsv,"ax",%progbits
 601              		.align	1
 602              		.syntax unified
 603              		.thumb
 604              		.thumb_func
 605              		.fpu fpv4-sp-d16
 607              	_ZL19prvSwitchTimerListsv:
 608              		.fnstart
 609              	.LFB150:
 872:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xNextExpireTime, xReloadTime;
 610              		.loc 1 872 0
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 0
 613              		@ frame_needed = 0, uses_anonymous_args = 0
 614 0000 70B5     		push	{r4, r5, r6, lr}
 615              		.save {r4, r5, r6, lr}
 616              	.LCFI14:
 617              		.cfi_def_cfa_offset 16
 618              		.cfi_offset 4, -16
 619              		.cfi_offset 5, -12
 620              		.cfi_offset 6, -8
 621              		.cfi_offset 14, -4
 622              		.pad #8
 623 0002 82B0     		sub	sp, sp, #8
 624              	.LCFI15:
 625              		.cfi_def_cfa_offset 24
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 34


 626              	.L53:
 882:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 627              		.loc 1 882 0
 628 0004 1A4B     		ldr	r3, .L58
 629 0006 1B68     		ldr	r3, [r3]
 630 0008 1A68     		ldr	r2, [r3]
 631 000a 52B3     		cbz	r2, .L52
 884:../Middlewares/FreeRTOS//Source/timers.c **** 
 632              		.loc 1 884 0
 633 000c DB68     		ldr	r3, [r3, #12]
 634 000e 1E68     		ldr	r6, [r3]
 635              	.LVL56:
 887:../Middlewares/FreeRTOS//Source/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 636              		.loc 1 887 0
 637 0010 DC68     		ldr	r4, [r3, #12]
 638              	.LVL57:
 888:../Middlewares/FreeRTOS//Source/timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 639              		.loc 1 888 0
 640 0012 251D     		adds	r5, r4, #4
 641 0014 2846     		mov	r0, r5
 642 0016 FFF7FEFF 		bl	uxListRemove
 643              	.LVL58:
 894:../Middlewares/FreeRTOS//Source/timers.c **** 
 644              		.loc 1 894 0
 645 001a 636A     		ldr	r3, [r4, #36]
 646 001c 2046     		mov	r0, r4
 647 001e 9847     		blx	r3
 648              	.LVL59:
 896:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 649              		.loc 1 896 0
 650 0020 E369     		ldr	r3, [r4, #28]
 651 0022 012B     		cmp	r3, #1
 652 0024 EED1     		bne	.L53
 904:../Middlewares/FreeRTOS//Source/timers.c **** 			if( xReloadTime > xNextExpireTime )
 653              		.loc 1 904 0
 654 0026 A369     		ldr	r3, [r4, #24]
 655 0028 3344     		add	r3, r3, r6
 656              	.LVL60:
 905:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 657              		.loc 1 905 0
 658 002a B342     		cmp	r3, r6
 659 002c 07D9     		bls	.L54
 907:../Middlewares/FreeRTOS//Source/timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 660              		.loc 1 907 0
 661 002e 6360     		str	r3, [r4, #4]
 908:../Middlewares/FreeRTOS//Source/timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 662              		.loc 1 908 0
 663 0030 2461     		str	r4, [r4, #16]
 909:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 664              		.loc 1 909 0
 665 0032 2946     		mov	r1, r5
 666 0034 0E4B     		ldr	r3, .L58
 667              	.LVL61:
 668 0036 1868     		ldr	r0, [r3]
 669 0038 FFF7FEFF 		bl	vListInsert
 670              	.LVL62:
 671 003c E2E7     		b	.L53
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 35


 672              	.LVL63:
 673              	.L54:
 913:../Middlewares/FreeRTOS//Source/timers.c **** 				configASSERT( xResult );
 674              		.loc 1 913 0
 675 003e 0021     		movs	r1, #0
 676 0040 0091     		str	r1, [sp]
 677 0042 0B46     		mov	r3, r1
 678              	.LVL64:
 679 0044 3246     		mov	r2, r6
 680 0046 2046     		mov	r0, r4
 681 0048 FFF7FEFF 		bl	xTimerGenericCommand
 682              	.LVL65:
 914:../Middlewares/FreeRTOS//Source/timers.c **** 				( void ) xResult;
 683              		.loc 1 914 0
 684 004c 0028     		cmp	r0, #0
 685 004e D9D1     		bne	.L53
 686              	.LBB36:
 687              	.LBB37:
 688              		.loc 2 244 0
 689              		.syntax unified
 690              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 691 0050 4FF01003 			mov r3, #16												
 692 0054 83F31188 		msr basepri, r3											
 693 0058 BFF36F8F 		isb														
 694 005c BFF34F8F 		dsb														
 695              	
 696              	@ 0 "" 2
 697              	.LVL66:
 698              		.thumb
 699              		.syntax unified
 700              	.L56:
 701 0060 FEE7     		b	.L56
 702              	.LVL67:
 703              	.L52:
 704              	.LBE37:
 705              	.LBE36:
 925:../Middlewares/FreeRTOS//Source/timers.c **** 	pxOverflowTimerList = pxTemp;
 706              		.loc 1 925 0
 707 0062 044A     		ldr	r2, .L58+4
 708 0064 1068     		ldr	r0, [r2]
 709 0066 0249     		ldr	r1, .L58
 710 0068 0860     		str	r0, [r1]
 926:../Middlewares/FreeRTOS//Source/timers.c **** }
 711              		.loc 1 926 0
 712 006a 1360     		str	r3, [r2]
 927:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 713              		.loc 1 927 0
 714 006c 02B0     		add	sp, sp, #8
 715              	.LCFI16:
 716              		.cfi_def_cfa_offset 16
 717              		@ sp needed
 718 006e 70BD     		pop	{r4, r5, r6, pc}
 719              	.L59:
 720              		.align	2
 721              	.L58:
 722 0070 00000000 		.word	.LANCHOR0
 723 0074 00000000 		.word	.LANCHOR1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 36


 724              		.cfi_endproc
 725              	.LFE150:
 726              		.fnend
 728              		.section	.text._ZL16prvSampleTimeNowPl,"ax",%progbits
 729              		.align	1
 730              		.syntax unified
 731              		.thumb
 732              		.thumb_func
 733              		.fpu fpv4-sp-d16
 735              	_ZL16prvSampleTimeNowPl:
 736              		.fnstart
 737              	.LFB147:
 661:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xTimeNow;
 738              		.loc 1 661 0
 739              		.cfi_startproc
 740              		@ args = 0, pretend = 0, frame = 0
 741              		@ frame_needed = 0, uses_anonymous_args = 0
 742              	.LVL68:
 743 0000 38B5     		push	{r3, r4, r5, lr}
 744              		.save {r3, r4, r5, lr}
 745              	.LCFI17:
 746              		.cfi_def_cfa_offset 16
 747              		.cfi_offset 3, -16
 748              		.cfi_offset 4, -12
 749              		.cfi_offset 5, -8
 750              		.cfi_offset 14, -4
 751 0002 0546     		mov	r5, r0
 665:../Middlewares/FreeRTOS//Source/timers.c **** 
 752              		.loc 1 665 0
 753 0004 FFF7FEFF 		bl	xTaskGetTickCount
 754              	.LVL69:
 755 0008 0446     		mov	r4, r0
 756              	.LVL70:
 667:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 757              		.loc 1 667 0
 758 000a 074B     		ldr	r3, .L65
 759 000c 1B68     		ldr	r3, [r3]
 760 000e 8342     		cmp	r3, r0
 761 0010 05D8     		bhi	.L64
 674:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 762              		.loc 1 674 0
 763 0012 0023     		movs	r3, #0
 764 0014 2B60     		str	r3, [r5]
 765              	.LVL71:
 766              	.L62:
 677:../Middlewares/FreeRTOS//Source/timers.c **** 
 767              		.loc 1 677 0
 768 0016 044B     		ldr	r3, .L65
 769 0018 1C60     		str	r4, [r3]
 680:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 770              		.loc 1 680 0
 771 001a 2046     		mov	r0, r4
 772 001c 38BD     		pop	{r3, r4, r5, pc}
 773              	.LVL72:
 774              	.L64:
 669:../Middlewares/FreeRTOS//Source/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 775              		.loc 1 669 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 37


 776 001e FFF7FEFF 		bl	_ZL19prvSwitchTimerListsv
 777              	.LVL73:
 670:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 778              		.loc 1 670 0
 779 0022 0123     		movs	r3, #1
 780 0024 2B60     		str	r3, [r5]
 781 0026 F6E7     		b	.L62
 782              	.L66:
 783              		.align	2
 784              	.L65:
 785 0028 00000000 		.word	.LANCHOR6
 786              		.cfi_endproc
 787              	.LFE147:
 788              		.fnend
 790              		.section	.text._ZL22prvProcessExpiredTimermm,"ax",%progbits
 791              		.align	1
 792              		.syntax unified
 793              		.thumb
 794              		.thumb_func
 795              		.fpu fpv4-sp-d16
 797              	_ZL22prvProcessExpiredTimermm:
 798              		.fnstart
 799              	.LFB143:
 499:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xResult;
 800              		.loc 1 499 0
 801              		.cfi_startproc
 802              		@ args = 0, pretend = 0, frame = 0
 803              		@ frame_needed = 0, uses_anonymous_args = 0
 804              	.LVL74:
 805 0000 70B5     		push	{r4, r5, r6, lr}
 806              		.save {r4, r5, r6, lr}
 807              	.LCFI18:
 808              		.cfi_def_cfa_offset 16
 809              		.cfi_offset 4, -16
 810              		.cfi_offset 5, -12
 811              		.cfi_offset 6, -8
 812              		.cfi_offset 14, -4
 813              		.pad #8
 814 0002 82B0     		sub	sp, sp, #8
 815              	.LCFI19:
 816              		.cfi_def_cfa_offset 24
 817 0004 0546     		mov	r5, r0
 818 0006 0E46     		mov	r6, r1
 501:../Middlewares/FreeRTOS//Source/timers.c **** 
 819              		.loc 1 501 0
 820 0008 144B     		ldr	r3, .L72
 821 000a 1B68     		ldr	r3, [r3]
 822 000c DB68     		ldr	r3, [r3, #12]
 823 000e DC68     		ldr	r4, [r3, #12]
 824              	.LVL75:
 505:../Middlewares/FreeRTOS//Source/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 825              		.loc 1 505 0
 826 0010 201D     		adds	r0, r4, #4
 827              	.LVL76:
 828 0012 FFF7FEFF 		bl	uxListRemove
 829              	.LVL77:
 510:../Middlewares/FreeRTOS//Source/timers.c **** 	{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 38


 830              		.loc 1 510 0
 831 0016 E369     		ldr	r3, [r4, #28]
 832 0018 012B     		cmp	r3, #1
 833 001a 04D0     		beq	.L71
 834              	.L68:
 534:../Middlewares/FreeRTOS//Source/timers.c **** }
 835              		.loc 1 534 0
 836 001c 636A     		ldr	r3, [r4, #36]
 837 001e 2046     		mov	r0, r4
 838 0020 9847     		blx	r3
 839              	.LVL78:
 535:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 840              		.loc 1 535 0
 841 0022 02B0     		add	sp, sp, #8
 842              	.LCFI20:
 843              		.cfi_remember_state
 844              		.cfi_def_cfa_offset 16
 845              		@ sp needed
 846 0024 70BD     		pop	{r4, r5, r6, pc}
 847              	.LVL79:
 848              	.L71:
 849              	.LCFI21:
 850              		.cfi_restore_state
 515:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 851              		.loc 1 515 0
 852 0026 A169     		ldr	r1, [r4, #24]
 853 0028 2B46     		mov	r3, r5
 854 002a 3246     		mov	r2, r6
 855 002c 2944     		add	r1, r1, r5
 856 002e 2046     		mov	r0, r4
 857 0030 FFF7FEFF 		bl	_ZL26prvInsertTimerInActiveListP15tmrTimerControlmmm
 858              	.LVL80:
 859 0034 0028     		cmp	r0, #0
 860 0036 F1D0     		beq	.L68
 519:../Middlewares/FreeRTOS//Source/timers.c **** 			configASSERT( xResult );
 861              		.loc 1 519 0
 862 0038 0021     		movs	r1, #0
 863 003a 0091     		str	r1, [sp]
 864 003c 0B46     		mov	r3, r1
 865 003e 2A46     		mov	r2, r5
 866 0040 2046     		mov	r0, r4
 867 0042 FFF7FEFF 		bl	xTimerGenericCommand
 868              	.LVL81:
 520:../Middlewares/FreeRTOS//Source/timers.c **** 			( void ) xResult;
 869              		.loc 1 520 0
 870 0046 0028     		cmp	r0, #0
 871 0048 E8D1     		bne	.L68
 872              	.LBB38:
 873              	.LBB39:
 874              		.loc 2 244 0
 875              		.syntax unified
 876              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 877 004a 4FF01003 			mov r3, #16												
 878 004e 83F31188 		msr basepri, r3											
 879 0052 BFF36F8F 		isb														
 880 0056 BFF34F8F 		dsb														
 881              	
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 39


 882              	@ 0 "" 2
 883              	.LVL82:
 884              		.thumb
 885              		.syntax unified
 886              	.L69:
 887 005a FEE7     		b	.L69
 888              	.L73:
 889              		.align	2
 890              	.L72:
 891 005c 00000000 		.word	.LANCHOR0
 892              	.LBE39:
 893              	.LBE38:
 894              		.cfi_endproc
 895              	.LFE143:
 896              		.fnend
 898              		.section	.text._ZL26prvProcessTimerOrBlockTaskml,"ax",%progbits
 899              		.align	1
 900              		.syntax unified
 901              		.thumb
 902              		.thumb_func
 903              		.fpu fpv4-sp-d16
 905              	_ZL26prvProcessTimerOrBlockTaskml:
 906              		.fnstart
 907              	.LFB145:
 575:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xTimeNow;
 908              		.loc 1 575 0
 909              		.cfi_startproc
 910              		@ args = 0, pretend = 0, frame = 8
 911              		@ frame_needed = 0, uses_anonymous_args = 0
 912              	.LVL83:
 913 0000 70B5     		push	{r4, r5, r6, lr}
 914              		.save {r4, r5, r6, lr}
 915              	.LCFI22:
 916              		.cfi_def_cfa_offset 16
 917              		.cfi_offset 4, -16
 918              		.cfi_offset 5, -12
 919              		.cfi_offset 6, -8
 920              		.cfi_offset 14, -4
 921              		.pad #8
 922 0002 82B0     		sub	sp, sp, #8
 923              	.LCFI23:
 924              		.cfi_def_cfa_offset 24
 925 0004 0646     		mov	r6, r0
 926 0006 0C46     		mov	r4, r1
 579:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 927              		.loc 1 579 0
 928 0008 FFF7FEFF 		bl	vTaskSuspendAll
 929              	.LVL84:
 586:../Middlewares/FreeRTOS//Source/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 930              		.loc 1 586 0
 931 000c 01A8     		add	r0, sp, #4
 932 000e FFF7FEFF 		bl	_ZL16prvSampleTimeNowPl
 933              	.LVL85:
 587:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 934              		.loc 1 587 0
 935 0012 019B     		ldr	r3, [sp, #4]
 936 0014 1BBB     		cbnz	r3, .L75
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 40


 937 0016 0546     		mov	r5, r0
 590:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 938              		.loc 1 590 0
 939 0018 0CB9     		cbnz	r4, .L76
 590:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 940              		.loc 1 590 0 is_stmt 0 discriminator 1
 941 001a B042     		cmp	r0, r6
 942 001c 18D2     		bcs	.L80
 943              	.L76:
 603:../Middlewares/FreeRTOS//Source/timers.c **** 				{
 944              		.loc 1 603 0 is_stmt 1
 945 001e 2CB1     		cbz	r4, .L78
 607:../Middlewares/FreeRTOS//Source/timers.c **** 				}
 946              		.loc 1 607 0
 947 0020 114B     		ldr	r3, .L81
 948 0022 1B68     		ldr	r3, [r3]
 949 0024 1C68     		ldr	r4, [r3]
 950              	.LVL86:
 951 0026 B4FA84F4 		clz	r4, r4
 952 002a 6409     		lsrs	r4, r4, #5
 953              	.LVL87:
 954              	.L78:
 610:../Middlewares/FreeRTOS//Source/timers.c **** 
 955              		.loc 1 610 0
 956 002c 2246     		mov	r2, r4
 957 002e 711B     		subs	r1, r6, r5
 958 0030 0E4B     		ldr	r3, .L81+4
 959 0032 1868     		ldr	r0, [r3]
 960              	.LVL88:
 961 0034 FFF7FEFF 		bl	vQueueWaitForMessageRestricted
 962              	.LVL89:
 612:../Middlewares/FreeRTOS//Source/timers.c **** 				{
 963              		.loc 1 612 0
 964 0038 FFF7FEFF 		bl	xTaskResumeAll
 965              	.LVL90:
 966 003c 88B9     		cbnz	r0, .L74
 618:../Middlewares/FreeRTOS//Source/timers.c **** 				}
 967              		.loc 1 618 0
 968 003e 0C4B     		ldr	r3, .L81+8
 969 0040 4FF08052 		mov	r2, #268435456
 970 0044 1A60     		str	r2, [r3]
 971              		.syntax unified
 972              	@ 618 "../Middlewares/FreeRTOS//Source/timers.c" 1
 973 0046 BFF34F8F 		dsb
 974              	@ 0 "" 2
 975              	@ 618 "../Middlewares/FreeRTOS//Source/timers.c" 1
 976 004a BFF36F8F 		isb
 977              	@ 0 "" 2
 978              		.thumb
 979              		.syntax unified
 980 004e 08E0     		b	.L74
 981              	.LVL91:
 982              	.L80:
 592:../Middlewares/FreeRTOS//Source/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 983              		.loc 1 592 0
 984 0050 FFF7FEFF 		bl	xTaskResumeAll
 985              	.LVL92:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 41


 593:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 986              		.loc 1 593 0
 987 0054 2946     		mov	r1, r5
 988 0056 3046     		mov	r0, r6
 989 0058 FFF7FEFF 		bl	_ZL22prvProcessExpiredTimermm
 990              	.LVL93:
 991 005c 01E0     		b	.L74
 992              	.LVL94:
 993              	.L75:
 628:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 994              		.loc 1 628 0
 995 005e FFF7FEFF 		bl	xTaskResumeAll
 996              	.LVL95:
 997              	.L74:
 631:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 998              		.loc 1 631 0
 999 0062 02B0     		add	sp, sp, #8
 1000              	.LCFI24:
 1001              		.cfi_def_cfa_offset 16
 1002              		@ sp needed
 1003 0064 70BD     		pop	{r4, r5, r6, pc}
 1004              	.LVL96:
 1005              	.L82:
 1006 0066 00BF     		.align	2
 1007              	.L81:
 1008 0068 00000000 		.word	.LANCHOR1
 1009 006c 00000000 		.word	.LANCHOR2
 1010 0070 04ED00E0 		.word	-536810236
 1011              		.cfi_endproc
 1012              	.LFE145:
 1013              		.fnend
 1015              		.section	.text._ZL26prvProcessReceivedCommandsv,"ax",%progbits
 1016              		.align	1
 1017              		.syntax unified
 1018              		.thumb
 1019              		.thumb_func
 1020              		.fpu fpv4-sp-d16
 1022              	_ZL26prvProcessReceivedCommandsv:
 1023              		.fnstart
 1024              	.LFB149:
 725:../Middlewares/FreeRTOS//Source/timers.c **** DaemonTaskMessage_t xMessage;
 1025              		.loc 1 725 0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 16
 1028              		@ frame_needed = 0, uses_anonymous_args = 0
 1029 0000 30B5     		push	{r4, r5, lr}
 1030              		.save {r4, r5, lr}
 1031              	.LCFI25:
 1032              		.cfi_def_cfa_offset 12
 1033              		.cfi_offset 4, -12
 1034              		.cfi_offset 5, -8
 1035              		.cfi_offset 14, -4
 1036              		.pad #28
 1037 0002 87B0     		sub	sp, sp, #28
 1038              	.LCFI26:
 1039              		.cfi_def_cfa_offset 40
 1040              	.L87:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 42


 731:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 1041              		.loc 1 731 0
 1042 0004 0023     		movs	r3, #0
 1043 0006 1A46     		mov	r2, r3
 1044 0008 03A9     		add	r1, sp, #12
 1045 000a 3548     		ldr	r0, .L99
 1046 000c 0068     		ldr	r0, [r0]
 1047 000e FFF7FEFF 		bl	xQueueGenericReceive
 1048              	.LVL97:
 1049 0012 0028     		cmp	r0, #0
 1050 0014 61D0     		beq	.L83
 757:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 1051              		.loc 1 757 0
 1052 0016 039B     		ldr	r3, [sp, #12]
 1053 0018 002B     		cmp	r3, #0
 1054 001a F3DB     		blt	.L87
 761:../Middlewares/FreeRTOS//Source/timers.c **** 
 1055              		.loc 1 761 0
 1056 001c 059C     		ldr	r4, [sp, #20]
 1057              	.LVL98:
 763:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 1058              		.loc 1 763 0
 1059 001e 6369     		ldr	r3, [r4, #20]
 1060 0020 13B1     		cbz	r3, .L88
 766:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 1061              		.loc 1 766 0
 1062 0022 201D     		adds	r0, r4, #4
 1063 0024 FFF7FEFF 		bl	uxListRemove
 1064              	.LVL99:
 1065              	.L88:
 781:../Middlewares/FreeRTOS//Source/timers.c **** 
 1066              		.loc 1 781 0
 1067 0028 02A8     		add	r0, sp, #8
 1068 002a FFF7FEFF 		bl	_ZL16prvSampleTimeNowPl
 1069              	.LVL100:
 783:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 1070              		.loc 1 783 0
 1071 002e 039B     		ldr	r3, [sp, #12]
 1072 0030 092B     		cmp	r3, #9
 1073 0032 E7D8     		bhi	.L87
 1074 0034 01A2     		adr	r2, .L90
 1075 0036 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1076 003a 00BF     		.p2align 2
 1077              	.L90:
 1078 003c 65000000 		.word	.L89+1
 1079 0040 65000000 		.word	.L89+1
 1080 0044 65000000 		.word	.L89+1
 1081 0048 05000000 		.word	.L87+1
 1082 004c AD000000 		.word	.L91+1
 1083 0050 D3000000 		.word	.L92+1
 1084 0054 65000000 		.word	.L89+1
 1085 0058 65000000 		.word	.L89+1
 1086 005c 05000000 		.word	.L87+1
 1087 0060 AD000000 		.word	.L91+1
 1088              		.p2align 1
 1089              	.L89:
 791:../Middlewares/FreeRTOS//Source/timers.c **** 					{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 43


 1090              		.loc 1 791 0
 1091 0064 0499     		ldr	r1, [sp, #16]
 1092 0066 A569     		ldr	r5, [r4, #24]
 1093 0068 0B46     		mov	r3, r1
 1094 006a 0246     		mov	r2, r0
 1095 006c 2944     		add	r1, r1, r5
 1096 006e 2046     		mov	r0, r4
 1097              	.LVL101:
 1098 0070 FFF7FEFF 		bl	_ZL26prvInsertTimerInActiveListP15tmrTimerControlmmm
 1099              	.LVL102:
 1100 0074 0028     		cmp	r0, #0
 1101 0076 C5D0     		beq	.L87
 795:../Middlewares/FreeRTOS//Source/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 1102              		.loc 1 795 0
 1103 0078 636A     		ldr	r3, [r4, #36]
 1104 007a 2046     		mov	r0, r4
 1105 007c 9847     		blx	r3
 1106              	.LVL103:
 798:../Middlewares/FreeRTOS//Source/timers.c **** 						{
 1107              		.loc 1 798 0
 1108 007e E369     		ldr	r3, [r4, #28]
 1109 0080 012B     		cmp	r3, #1
 1110 0082 BFD1     		bne	.L87
 800:../Middlewares/FreeRTOS//Source/timers.c **** 							configASSERT( xResult );
 1111              		.loc 1 800 0
 1112 0084 A269     		ldr	r2, [r4, #24]
 1113 0086 0021     		movs	r1, #0
 1114 0088 0091     		str	r1, [sp]
 1115 008a 0B46     		mov	r3, r1
 1116 008c 0498     		ldr	r0, [sp, #16]
 1117 008e 0244     		add	r2, r2, r0
 1118 0090 2046     		mov	r0, r4
 1119 0092 FFF7FEFF 		bl	xTimerGenericCommand
 1120              	.LVL104:
 801:../Middlewares/FreeRTOS//Source/timers.c **** 							( void ) xResult;
 1121              		.loc 1 801 0
 1122 0096 0028     		cmp	r0, #0
 1123 0098 B4D1     		bne	.L87
 1124              	.LBB40:
 1125              	.LBB41:
 1126              		.loc 2 244 0
 1127              		.syntax unified
 1128              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1129 009a 4FF01003 			mov r3, #16												
 1130 009e 83F31188 		msr basepri, r3											
 1131 00a2 BFF36F8F 		isb														
 1132 00a6 BFF34F8F 		dsb														
 1133              	
 1134              	@ 0 "" 2
 1135              	.LVL105:
 1136              		.thumb
 1137              		.syntax unified
 1138              	.L94:
 1139 00aa FEE7     		b	.L94
 1140              	.LVL106:
 1141              	.L91:
 1142              	.LBE41:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 44


 1143              	.LBE40:
 823:../Middlewares/FreeRTOS//Source/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1144              		.loc 1 823 0
 1145 00ac 0499     		ldr	r1, [sp, #16]
 1146 00ae A161     		str	r1, [r4, #24]
 824:../Middlewares/FreeRTOS//Source/timers.c **** 
 1147              		.loc 1 824 0
 1148 00b0 31B1     		cbz	r1, .L98
 832:../Middlewares/FreeRTOS//Source/timers.c **** 					break;
 1149              		.loc 1 832 0
 1150 00b2 0346     		mov	r3, r0
 1151 00b4 0246     		mov	r2, r0
 1152 00b6 0144     		add	r1, r1, r0
 1153 00b8 2046     		mov	r0, r4
 1154              	.LVL107:
 1155 00ba FFF7FEFF 		bl	_ZL26prvInsertTimerInActiveListP15tmrTimerControlmmm
 1156              	.LVL108:
 1157 00be A1E7     		b	.L87
 1158              	.LVL109:
 1159              	.L98:
 1160              	.LBB42:
 1161              	.LBB43:
 1162              		.loc 2 244 0
 1163              		.syntax unified
 1164              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1165 00c0 4FF01003 			mov r3, #16												
 1166 00c4 83F31188 		msr basepri, r3											
 1167 00c8 BFF36F8F 		isb														
 1168 00cc BFF34F8F 		dsb														
 1169              	
 1170              	@ 0 "" 2
 1171              	.LVL110:
 1172              		.thumb
 1173              		.syntax unified
 1174              	.L96:
 1175 00d0 FEE7     		b	.L96
 1176              	.L92:
 1177              	.LBE43:
 1178              	.LBE42:
 843:../Middlewares/FreeRTOS//Source/timers.c **** 					}
 1179              		.loc 1 843 0
 1180 00d2 2046     		mov	r0, r4
 1181              	.LVL111:
 1182 00d4 FFF7FEFF 		bl	vPortFree
 1183              	.LVL112:
 1184 00d8 94E7     		b	.L87
 1185              	.LVL113:
 1186              	.L83:
 868:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 1187              		.loc 1 868 0
 1188 00da 07B0     		add	sp, sp, #28
 1189              	.LCFI27:
 1190              		.cfi_def_cfa_offset 12
 1191              		@ sp needed
 1192 00dc 30BD     		pop	{r4, r5, pc}
 1193              	.L100:
 1194 00de 00BF     		.align	2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 45


 1195              	.L99:
 1196 00e0 00000000 		.word	.LANCHOR2
 1197              		.cfi_endproc
 1198              	.LFE149:
 1199              		.fnend
 1201              		.section	.text._ZL12prvTimerTaskPv,"ax",%progbits
 1202              		.align	1
 1203              		.syntax unified
 1204              		.thumb
 1205              		.thumb_func
 1206              		.fpu fpv4-sp-d16
 1208              	_ZL12prvTimerTaskPv:
 1209              		.fnstart
 1210              	.LFB144:
 539:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xNextExpireTime;
 1211              		.loc 1 539 0
 1212              		.cfi_startproc
 1213              		@ args = 0, pretend = 0, frame = 8
 1214              		@ frame_needed = 0, uses_anonymous_args = 0
 1215              	.LVL114:
 1216 0000 00B5     		push	{lr}
 1217              		.save {lr}
 1218              	.LCFI28:
 1219              		.cfi_def_cfa_offset 4
 1220              		.cfi_offset 14, -4
 1221              		.pad #12
 1222 0002 83B0     		sub	sp, sp, #12
 1223              	.LCFI29:
 1224              		.cfi_def_cfa_offset 16
 1225              	.LVL115:
 1226              	.L102:
 562:../Middlewares/FreeRTOS//Source/timers.c **** 
 1227              		.loc 1 562 0
 1228 0004 01A8     		add	r0, sp, #4
 1229 0006 FFF7FEFF 		bl	_ZL20prvGetNextExpireTimePl
 1230              	.LVL116:
 566:../Middlewares/FreeRTOS//Source/timers.c **** 
 1231              		.loc 1 566 0
 1232 000a 0199     		ldr	r1, [sp, #4]
 1233 000c FFF7FEFF 		bl	_ZL26prvProcessTimerOrBlockTaskml
 1234              	.LVL117:
 569:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 1235              		.loc 1 569 0
 1236 0010 FFF7FEFF 		bl	_ZL26prvProcessReceivedCommandsv
 1237              	.LVL118:
 1238 0014 F6E7     		b	.L102
 1239              		.cfi_endproc
 1240              	.LFE144:
 1241              		.fnend
 1243              		.section	.text.xTimerGetTimerDaemonTaskHandle,"ax",%progbits
 1244              		.align	1
 1245              		.global	xTimerGetTimerDaemonTaskHandle
 1246              		.syntax unified
 1247              		.thumb
 1248              		.thumb_func
 1249              		.fpu fpv4-sp-d16
 1251              	xTimerGetTimerDaemonTaskHandle:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 46


 1252              		.fnstart
 1253              	.LFB139:
 461:../Middlewares/FreeRTOS//Source/timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 1254              		.loc 1 461 0
 1255              		.cfi_startproc
 1256              		@ args = 0, pretend = 0, frame = 0
 1257              		@ frame_needed = 0, uses_anonymous_args = 0
 1258              		@ link register save eliminated.
 464:../Middlewares/FreeRTOS//Source/timers.c **** 	return xTimerTaskHandle;
 1259              		.loc 1 464 0
 1260 0000 064B     		ldr	r3, .L108
 1261 0002 1868     		ldr	r0, [r3]
 1262 0004 00B1     		cbz	r0, .L107
 466:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 1263              		.loc 1 466 0
 1264 0006 7047     		bx	lr
 1265              	.L107:
 1266              	.LBB44:
 1267              	.LBB45:
 1268              		.loc 2 244 0
 1269              		.syntax unified
 1270              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1271 0008 4FF01003 			mov r3, #16												
 1272 000c 83F31188 		msr basepri, r3											
 1273 0010 BFF36F8F 		isb														
 1274 0014 BFF34F8F 		dsb														
 1275              	
 1276              	@ 0 "" 2
 1277              	.LVL119:
 1278              		.thumb
 1279              		.syntax unified
 1280              	.L106:
 1281 0018 FEE7     		b	.L106
 1282              	.L109:
 1283 001a 00BF     		.align	2
 1284              	.L108:
 1285 001c 00000000 		.word	.LANCHOR5
 1286              	.LBE45:
 1287              	.LBE44:
 1288              		.cfi_endproc
 1289              	.LFE139:
 1290              		.cantunwind
 1291              		.fnend
 1293              		.section	.text.xTimerGetPeriod,"ax",%progbits
 1294              		.align	1
 1295              		.global	xTimerGetPeriod
 1296              		.syntax unified
 1297              		.thumb
 1298              		.thumb_func
 1299              		.fpu fpv4-sp-d16
 1301              	xTimerGetPeriod:
 1302              		.fnstart
 1303              	.LFB140:
 470:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 1304              		.loc 1 470 0
 1305              		.cfi_startproc
 1306              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 47


 1307              		@ frame_needed = 0, uses_anonymous_args = 0
 1308              		@ link register save eliminated.
 1309              	.LVL120:
 473:../Middlewares/FreeRTOS//Source/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 1310              		.loc 1 473 0
 1311 0000 08B1     		cbz	r0, .L113
 475:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 1312              		.loc 1 475 0
 1313 0002 8069     		ldr	r0, [r0, #24]
 1314              	.LVL121:
 1315 0004 7047     		bx	lr
 1316              	.LVL122:
 1317              	.L113:
 1318              	.LBB46:
 1319              	.LBB47:
 1320              		.loc 2 244 0
 1321              		.syntax unified
 1322              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1323 0006 4FF01003 			mov r3, #16												
 1324 000a 83F31188 		msr basepri, r3											
 1325 000e BFF36F8F 		isb														
 1326 0012 BFF34F8F 		dsb														
 1327              	
 1328              	@ 0 "" 2
 1329              	.LVL123:
 1330              		.thumb
 1331              		.syntax unified
 1332              	.L112:
 1333 0016 FEE7     		b	.L112
 1334              	.LBE47:
 1335              	.LBE46:
 1336              		.cfi_endproc
 1337              	.LFE140:
 1338              		.cantunwind
 1339              		.fnend
 1341              		.section	.text.xTimerGetExpiryTime,"ax",%progbits
 1342              		.align	1
 1343              		.global	xTimerGetExpiryTime
 1344              		.syntax unified
 1345              		.thumb
 1346              		.thumb_func
 1347              		.fpu fpv4-sp-d16
 1349              	xTimerGetExpiryTime:
 1350              		.fnstart
 1351              	.LFB141:
 479:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t * pxTimer = ( Timer_t * ) xTimer;
 1352              		.loc 1 479 0
 1353              		.cfi_startproc
 1354              		@ args = 0, pretend = 0, frame = 0
 1355              		@ frame_needed = 0, uses_anonymous_args = 0
 1356              		@ link register save eliminated.
 1357              	.LVL124:
 483:../Middlewares/FreeRTOS//Source/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1358              		.loc 1 483 0
 1359 0000 08B1     		cbz	r0, .L117
 1360              	.LVL125:
 486:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 48


 1361              		.loc 1 486 0
 1362 0002 4068     		ldr	r0, [r0, #4]
 1363              	.LVL126:
 1364 0004 7047     		bx	lr
 1365              	.LVL127:
 1366              	.L117:
 1367              	.LBB48:
 1368              	.LBB49:
 1369              		.loc 2 244 0
 1370              		.syntax unified
 1371              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1372 0006 4FF01003 			mov r3, #16												
 1373 000a 83F31188 		msr basepri, r3											
 1374 000e BFF36F8F 		isb														
 1375 0012 BFF34F8F 		dsb														
 1376              	
 1377              	@ 0 "" 2
 1378              	.LVL128:
 1379              		.thumb
 1380              		.syntax unified
 1381              	.L116:
 1382 0016 FEE7     		b	.L116
 1383              	.LBE49:
 1384              	.LBE48:
 1385              		.cfi_endproc
 1386              	.LFE141:
 1387              		.cantunwind
 1388              		.fnend
 1390              		.section	.text.pcTimerGetName,"ax",%progbits
 1391              		.align	1
 1392              		.global	pcTimerGetName
 1393              		.syntax unified
 1394              		.thumb
 1395              		.thumb_func
 1396              		.fpu fpv4-sp-d16
 1398              	pcTimerGetName:
 1399              		.fnstart
 1400              	.LFB142:
 490:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 1401              		.loc 1 490 0
 1402              		.cfi_startproc
 1403              		@ args = 0, pretend = 0, frame = 0
 1404              		@ frame_needed = 0, uses_anonymous_args = 0
 1405              		@ link register save eliminated.
 1406              	.LVL129:
 493:../Middlewares/FreeRTOS//Source/timers.c **** 	return pxTimer->pcTimerName;
 1407              		.loc 1 493 0
 1408 0000 08B1     		cbz	r0, .L121
 495:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 1409              		.loc 1 495 0
 1410 0002 0068     		ldr	r0, [r0]
 1411              	.LVL130:
 1412 0004 7047     		bx	lr
 1413              	.LVL131:
 1414              	.L121:
 1415              	.LBB50:
 1416              	.LBB51:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 49


 1417              		.loc 2 244 0
 1418              		.syntax unified
 1419              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1420 0006 4FF01003 			mov r3, #16												
 1421 000a 83F31188 		msr basepri, r3											
 1422 000e BFF36F8F 		isb														
 1423 0012 BFF34F8F 		dsb														
 1424              	
 1425              	@ 0 "" 2
 1426              	.LVL132:
 1427              		.thumb
 1428              		.syntax unified
 1429              	.L120:
 1430 0016 FEE7     		b	.L120
 1431              	.LBE51:
 1432              	.LBE50:
 1433              		.cfi_endproc
 1434              	.LFE142:
 1435              		.cantunwind
 1436              		.fnend
 1438              		.section	.text.xTimerIsTimerActive,"ax",%progbits
 1439              		.align	1
 1440              		.global	xTimerIsTimerActive
 1441              		.syntax unified
 1442              		.thumb
 1443              		.thumb_func
 1444              		.fpu fpv4-sp-d16
 1446              	xTimerIsTimerActive:
 1447              		.fnstart
 1448              	.LFB152:
 979:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 980:../Middlewares/FreeRTOS//Source/timers.c **** 
 981:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
 982:../Middlewares/FreeRTOS//Source/timers.c **** {
 1449              		.loc 1 982 0
 1450              		.cfi_startproc
 1451              		@ args = 0, pretend = 0, frame = 0
 1452              		@ frame_needed = 0, uses_anonymous_args = 0
 1453              	.LVL133:
 983:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xTimerIsInActiveList;
 984:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 985:../Middlewares/FreeRTOS//Source/timers.c **** 
 986:../Middlewares/FreeRTOS//Source/timers.c **** 	configASSERT( xTimer );
 1454              		.loc 1 986 0
 1455 0000 40B9     		cbnz	r0, .L123
 1456              	.LBB52:
 1457              	.LBB53:
 1458              		.loc 2 244 0
 1459              		.syntax unified
 1460              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1461 0002 4FF01003 			mov r3, #16												
 1462 0006 83F31188 		msr basepri, r3											
 1463 000a BFF36F8F 		isb														
 1464 000e BFF34F8F 		dsb														
 1465              	
 1466              	@ 0 "" 2
 1467              	.LVL134:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 50


 1468              		.thumb
 1469              		.syntax unified
 1470              	.L124:
 1471 0012 FEE7     		b	.L124
 1472              	.L123:
 1473              	.LBE53:
 1474              	.LBE52:
 982:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xTimerIsInActiveList;
 1475              		.loc 1 982 0
 1476 0014 10B5     		push	{r4, lr}
 1477              		.save {r4, lr}
 1478              	.LCFI30:
 1479              		.cfi_def_cfa_offset 8
 1480              		.cfi_offset 4, -8
 1481              		.cfi_offset 14, -4
 1482 0016 0446     		mov	r4, r0
 987:../Middlewares/FreeRTOS//Source/timers.c **** 
 988:../Middlewares/FreeRTOS//Source/timers.c **** 	/* Is the timer in the list of active timers? */
 989:../Middlewares/FreeRTOS//Source/timers.c **** 	taskENTER_CRITICAL();
 1483              		.loc 1 989 0
 1484 0018 FFF7FEFF 		bl	vPortEnterCritical
 1485              	.LVL135:
 990:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 991:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Checking to see if it is in the NULL list in effect checks to see if
 992:../Middlewares/FreeRTOS//Source/timers.c **** 		it is referenced from either the current or the overflow timer lists in
 993:../Middlewares/FreeRTOS//Source/timers.c **** 		one go, but the logic has to be reversed, hence the '!'. */
 994:../Middlewares/FreeRTOS//Source/timers.c **** 		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListIte
 1486              		.loc 1 994 0
 1487 001c 6469     		ldr	r4, [r4, #20]
 1488              	.LVL136:
 1489 001e 0034     		adds	r4, r4, #0
 1490 0020 18BF     		it	ne
 1491 0022 0124     		movne	r4, #1
 1492              	.LVL137:
 995:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 996:../Middlewares/FreeRTOS//Source/timers.c **** 	taskEXIT_CRITICAL();
 1493              		.loc 1 996 0
 1494 0024 FFF7FEFF 		bl	vPortExitCritical
 1495              	.LVL138:
 997:../Middlewares/FreeRTOS//Source/timers.c **** 
 998:../Middlewares/FreeRTOS//Source/timers.c **** 	return xTimerIsInActiveList;
 999:../Middlewares/FreeRTOS//Source/timers.c **** } /*lint !e818 Can't be pointer to const due to the typedef. */
 1496              		.loc 1 999 0
 1497 0028 2046     		mov	r0, r4
 1498 002a 10BD     		pop	{r4, pc}
 1499              		.cfi_endproc
 1500              	.LFE152:
 1501              		.fnend
 1503              		.section	.text.pvTimerGetTimerID,"ax",%progbits
 1504              		.align	1
 1505              		.global	pvTimerGetTimerID
 1506              		.syntax unified
 1507              		.thumb
 1508              		.thumb_func
 1509              		.fpu fpv4-sp-d16
 1511              	pvTimerGetTimerID:
 1512              		.fnstart
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 51


 1513              	.LFB153:
1000:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
1001:../Middlewares/FreeRTOS//Source/timers.c **** 
1002:../Middlewares/FreeRTOS//Source/timers.c **** void *pvTimerGetTimerID( const TimerHandle_t xTimer )
1003:../Middlewares/FreeRTOS//Source/timers.c **** {
 1514              		.loc 1 1003 0
 1515              		.cfi_startproc
 1516              		@ args = 0, pretend = 0, frame = 0
 1517              		@ frame_needed = 0, uses_anonymous_args = 0
 1518              	.LVL139:
1004:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) xTimer;
1005:../Middlewares/FreeRTOS//Source/timers.c **** void *pvReturn;
1006:../Middlewares/FreeRTOS//Source/timers.c **** 
1007:../Middlewares/FreeRTOS//Source/timers.c **** 	configASSERT( xTimer );
 1519              		.loc 1 1007 0
 1520 0000 40B9     		cbnz	r0, .L128
 1521              	.LBB54:
 1522              	.LBB55:
 1523              		.loc 2 244 0
 1524              		.syntax unified
 1525              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1526 0002 4FF01003 			mov r3, #16												
 1527 0006 83F31188 		msr basepri, r3											
 1528 000a BFF36F8F 		isb														
 1529 000e BFF34F8F 		dsb														
 1530              	
 1531              	@ 0 "" 2
 1532              	.LVL140:
 1533              		.thumb
 1534              		.syntax unified
 1535              	.L129:
 1536 0012 FEE7     		b	.L129
 1537              	.L128:
 1538              	.LBE55:
 1539              	.LBE54:
1003:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 1540              		.loc 1 1003 0
 1541 0014 10B5     		push	{r4, lr}
 1542              		.save {r4, lr}
 1543              	.LCFI31:
 1544              		.cfi_def_cfa_offset 8
 1545              		.cfi_offset 4, -8
 1546              		.cfi_offset 14, -4
 1547 0016 0446     		mov	r4, r0
1008:../Middlewares/FreeRTOS//Source/timers.c **** 
1009:../Middlewares/FreeRTOS//Source/timers.c **** 	taskENTER_CRITICAL();
 1548              		.loc 1 1009 0
 1549 0018 FFF7FEFF 		bl	vPortEnterCritical
 1550              	.LVL141:
1010:../Middlewares/FreeRTOS//Source/timers.c **** 	{
1011:../Middlewares/FreeRTOS//Source/timers.c **** 		pvReturn = pxTimer->pvTimerID;
 1551              		.loc 1 1011 0
 1552 001c 246A     		ldr	r4, [r4, #32]
 1553              	.LVL142:
1012:../Middlewares/FreeRTOS//Source/timers.c **** 	}
1013:../Middlewares/FreeRTOS//Source/timers.c **** 	taskEXIT_CRITICAL();
 1554              		.loc 1 1013 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 52


 1555 001e FFF7FEFF 		bl	vPortExitCritical
 1556              	.LVL143:
1014:../Middlewares/FreeRTOS//Source/timers.c **** 
1015:../Middlewares/FreeRTOS//Source/timers.c **** 	return pvReturn;
1016:../Middlewares/FreeRTOS//Source/timers.c **** }
 1557              		.loc 1 1016 0
 1558 0022 2046     		mov	r0, r4
 1559 0024 10BD     		pop	{r4, pc}
 1560              		.cfi_endproc
 1561              	.LFE153:
 1562              		.fnend
 1564              		.section	.text.vTimerSetTimerID,"ax",%progbits
 1565              		.align	1
 1566              		.global	vTimerSetTimerID
 1567              		.syntax unified
 1568              		.thumb
 1569              		.thumb_func
 1570              		.fpu fpv4-sp-d16
 1572              	vTimerSetTimerID:
 1573              		.fnstart
 1574              	.LFB154:
1017:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
1018:../Middlewares/FreeRTOS//Source/timers.c **** 
1019:../Middlewares/FreeRTOS//Source/timers.c **** void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
1020:../Middlewares/FreeRTOS//Source/timers.c **** {
 1575              		.loc 1 1020 0
 1576              		.cfi_startproc
 1577              		@ args = 0, pretend = 0, frame = 0
 1578              		@ frame_needed = 0, uses_anonymous_args = 0
 1579              	.LVL144:
 1580 0000 38B5     		push	{r3, r4, r5, lr}
 1581              		.save {r3, r4, r5, lr}
 1582              	.LCFI32:
 1583              		.cfi_def_cfa_offset 16
 1584              		.cfi_offset 3, -16
 1585              		.cfi_offset 4, -12
 1586              		.cfi_offset 5, -8
 1587              		.cfi_offset 14, -4
 1588              	.LVL145:
1021:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) xTimer;
1022:../Middlewares/FreeRTOS//Source/timers.c **** 
1023:../Middlewares/FreeRTOS//Source/timers.c **** 	configASSERT( xTimer );
 1589              		.loc 1 1023 0
 1590 0002 40B9     		cbnz	r0, .L133
 1591              	.LBB56:
 1592              	.LBB57:
 1593              		.loc 2 244 0
 1594              		.syntax unified
 1595              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1596 0004 4FF01003 			mov r3, #16												
 1597 0008 83F31188 		msr basepri, r3											
 1598 000c BFF36F8F 		isb														
 1599 0010 BFF34F8F 		dsb														
 1600              	
 1601              	@ 0 "" 2
 1602              	.LVL146:
 1603              		.thumb
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 53


 1604              		.syntax unified
 1605              	.L134:
 1606 0014 FEE7     		b	.L134
 1607              	.L133:
 1608 0016 0446     		mov	r4, r0
 1609 0018 0D46     		mov	r5, r1
 1610              	.LBE57:
 1611              	.LBE56:
1024:../Middlewares/FreeRTOS//Source/timers.c **** 
1025:../Middlewares/FreeRTOS//Source/timers.c **** 	taskENTER_CRITICAL();
 1612              		.loc 1 1025 0
 1613 001a FFF7FEFF 		bl	vPortEnterCritical
 1614              	.LVL147:
1026:../Middlewares/FreeRTOS//Source/timers.c **** 	{
1027:../Middlewares/FreeRTOS//Source/timers.c **** 		pxTimer->pvTimerID = pvNewID;
 1615              		.loc 1 1027 0
 1616 001e 2562     		str	r5, [r4, #32]
1028:../Middlewares/FreeRTOS//Source/timers.c **** 	}
1029:../Middlewares/FreeRTOS//Source/timers.c **** 	taskEXIT_CRITICAL();
 1617              		.loc 1 1029 0
 1618 0020 FFF7FEFF 		bl	vPortExitCritical
 1619              	.LVL148:
1030:../Middlewares/FreeRTOS//Source/timers.c **** }
 1620              		.loc 1 1030 0
 1621 0024 38BD     		pop	{r3, r4, r5, pc}
 1622              		.cfi_endproc
 1623              	.LFE154:
 1624              		.fnend
 1626              		.section	.bss._ZL11xTimerQueue,"aw",%nobits
 1627              		.align	2
 1628              		.set	.LANCHOR2,. + 0
 1631              	_ZL11xTimerQueue:
 1632 0000 00000000 		.space	4
 1633              		.section	.bss._ZL16xTimerTaskHandle,"aw",%nobits
 1634              		.align	2
 1635              		.set	.LANCHOR5,. + 0
 1638              	_ZL16xTimerTaskHandle:
 1639 0000 00000000 		.space	4
 1640              		.section	.bss._ZL17xActiveTimerList1,"aw",%nobits
 1641              		.align	2
 1642              		.set	.LANCHOR3,. + 0
 1645              	_ZL17xActiveTimerList1:
 1646 0000 00000000 		.space	20
 1646      00000000 
 1646      00000000 
 1646      00000000 
 1646      00000000 
 1647              		.section	.bss._ZL17xActiveTimerList2,"aw",%nobits
 1648              		.align	2
 1649              		.set	.LANCHOR4,. + 0
 1652              	_ZL17xActiveTimerList2:
 1653 0000 00000000 		.space	20
 1653      00000000 
 1653      00000000 
 1653      00000000 
 1653      00000000 
 1654              		.section	.bss._ZL18pxCurrentTimerList,"aw",%nobits
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 54


 1655              		.align	2
 1656              		.set	.LANCHOR0,. + 0
 1659              	_ZL18pxCurrentTimerList:
 1660 0000 00000000 		.space	4
 1661              		.section	.bss._ZL19pxOverflowTimerList,"aw",%nobits
 1662              		.align	2
 1663              		.set	.LANCHOR1,. + 0
 1666              	_ZL19pxOverflowTimerList:
 1667 0000 00000000 		.space	4
 1668              		.section	.bss._ZZL16prvSampleTimeNowPlE9xLastTime,"aw",%nobits
 1669              		.align	2
 1670              		.set	.LANCHOR6,. + 0
 1673              	_ZZL16prvSampleTimeNowPlE9xLastTime:
 1674 0000 00000000 		.space	4
 1675              		.section	.rodata._ZL28prvCheckForValidListAndQueuev.str1.4,"aMS",%progbits,1
 1676              		.align	2
 1677              	.LC0:
 1678 0000 546D7251 		.ascii	"TmrQ\000"
 1678      00
 1679              		.section	.rodata.xTimerCreateTimerTask.str1.4,"aMS",%progbits,1
 1680              		.align	2
 1681              	.LC1:
 1682 0000 546D7220 		.ascii	"Tmr Svc\000"
 1682      53766300 
 1683              		.text
 1684              	.Letext0:
 1685              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/cstdlib"
 1686              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/arm-none-eab
 1687              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 1688              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 1689              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 1690              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 1691              		.file 9 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 1692              		.file 10 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 1693              		.file 11 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/stdlib.h"
 1694              		.file 12 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 1695              		.file 13 "../Libraries/CMSIS/CM4/CoreSupport/core_cm4.h"
 1696              		.file 14 "../Libraries/CMSIS/CM4/DeviceSupport/system_at32f4xx.h"
 1697              		.file 15 "../Libraries/CMSIS/CM4/DeviceSupport/at32f4xx.h"
 1698              		.file 16 "Inc/FreeRTOSConfig.h"
 1699              		.file 17 "../Middlewares/FreeRTOS//Source/include/list.h"
 1700              		.file 18 "../Middlewares/FreeRTOS//Source/include/task.h"
 1701              		.file 19 "../Middlewares/FreeRTOS//Source/include/queue.h"
 1702              		.file 20 "../Middlewares/FreeRTOS//Source/include/timers.h"
 1703              		.file 21 "../Middlewares/FreeRTOS//Source/include/portable.h"
 1704              		.file 22 "<built-in>"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 55


DEFINED SYMBOLS
                            *ABS*:0000000000000000 timers.c
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:17     .text._ZL20prvGetNextExpireTimePl:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:23     .text._ZL20prvGetNextExpireTimePl:0000000000000000 _ZL20prvGetNextExpireTimePl
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:59     .text._ZL20prvGetNextExpireTimePl:0000000000000020 $d
.ARM.exidx.text._ZL20prvGetNextExpireTimePl:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:66     .text._ZL26prvInsertTimerInActiveListP15tmrTimerControlmmm:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:72     .text._ZL26prvInsertTimerInActiveListP15tmrTimerControlmmm:0000000000000000 _ZL26prvInsertTimerInActiveListP15tmrTimerControlmmm
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:152    .text._ZL26prvInsertTimerInActiveListP15tmrTimerControlmmm:0000000000000040 $d
.ARM.extab.text._ZL26prvInsertTimerInActiveListP15tmrTimerControlmmm:0000000000000000 $d
.ARM.exidx.text._ZL26prvInsertTimerInActiveListP15tmrTimerControlmmm:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:159    .text._ZL28prvCheckForValidListAndQueuev:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:165    .text._ZL28prvCheckForValidListAndQueuev:0000000000000000 _ZL28prvCheckForValidListAndQueuev
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:229    .text._ZL28prvCheckForValidListAndQueuev:0000000000000044 $d
.ARM.exidx.text._ZL28prvCheckForValidListAndQueuev:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:240    .text._ZL21prvInitialiseNewTimerPKcmmPvPFvS1_EP15tmrTimerControl:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:246    .text._ZL21prvInitialiseNewTimerPKcmmPvPFvS1_EP15tmrTimerControl:0000000000000000 _ZL21prvInitialiseNewTimerPKcmmPvPFvS1_EP15tmrTimerControl
.ARM.exidx.text._ZL21prvInitialiseNewTimerPKcmmPvPFvS1_EP15tmrTimerControl:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:320    .text.xTimerCreateTimerTask:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:327    .text.xTimerCreateTimerTask:0000000000000000 xTimerCreateTimerTask
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:395    .text.xTimerCreateTimerTask:0000000000000040 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1208   .text._ZL12prvTimerTaskPv:0000000000000000 _ZL12prvTimerTaskPv
.ARM.exidx.text.xTimerCreateTimerTask:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:404    .text.xTimerCreate:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:411    .text.xTimerCreate:0000000000000000 xTimerCreate
     .ARM.exidx.text.xTimerCreate:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:469    .text.xTimerGenericCommand:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:476    .text.xTimerGenericCommand:0000000000000000 xTimerGenericCommand
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:595    .text.xTimerGenericCommand:0000000000000068 $d
.ARM.exidx.text.xTimerGenericCommand:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:601    .text._ZL19prvSwitchTimerListsv:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:607    .text._ZL19prvSwitchTimerListsv:0000000000000000 _ZL19prvSwitchTimerListsv
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:722    .text._ZL19prvSwitchTimerListsv:0000000000000070 $d
.ARM.exidx.text._ZL19prvSwitchTimerListsv:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:729    .text._ZL16prvSampleTimeNowPl:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:735    .text._ZL16prvSampleTimeNowPl:0000000000000000 _ZL16prvSampleTimeNowPl
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:785    .text._ZL16prvSampleTimeNowPl:0000000000000028 $d
.ARM.exidx.text._ZL16prvSampleTimeNowPl:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:791    .text._ZL22prvProcessExpiredTimermm:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:797    .text._ZL22prvProcessExpiredTimermm:0000000000000000 _ZL22prvProcessExpiredTimermm
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:891    .text._ZL22prvProcessExpiredTimermm:000000000000005c $d
.ARM.exidx.text._ZL22prvProcessExpiredTimermm:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:899    .text._ZL26prvProcessTimerOrBlockTaskml:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:905    .text._ZL26prvProcessTimerOrBlockTaskml:0000000000000000 _ZL26prvProcessTimerOrBlockTaskml
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1008   .text._ZL26prvProcessTimerOrBlockTaskml:0000000000000068 $d
.ARM.exidx.text._ZL26prvProcessTimerOrBlockTaskml:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1016   .text._ZL26prvProcessReceivedCommandsv:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1022   .text._ZL26prvProcessReceivedCommandsv:0000000000000000 _ZL26prvProcessReceivedCommandsv
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1078   .text._ZL26prvProcessReceivedCommandsv:000000000000003c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1088   .text._ZL26prvProcessReceivedCommandsv:0000000000000064 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1196   .text._ZL26prvProcessReceivedCommandsv:00000000000000e0 $d
.ARM.exidx.text._ZL26prvProcessReceivedCommandsv:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1202   .text._ZL12prvTimerTaskPv:0000000000000000 $t
.ARM.exidx.text._ZL12prvTimerTaskPv:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1244   .text.xTimerGetTimerDaemonTaskHandle:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1251   .text.xTimerGetTimerDaemonTaskHandle:0000000000000000 xTimerGetTimerDaemonTaskHandle
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1285   .text.xTimerGetTimerDaemonTaskHandle:000000000000001c $d
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 56


.ARM.exidx.text.xTimerGetTimerDaemonTaskHandle:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1294   .text.xTimerGetPeriod:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1301   .text.xTimerGetPeriod:0000000000000000 xTimerGetPeriod
  .ARM.exidx.text.xTimerGetPeriod:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1342   .text.xTimerGetExpiryTime:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1349   .text.xTimerGetExpiryTime:0000000000000000 xTimerGetExpiryTime
.ARM.exidx.text.xTimerGetExpiryTime:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1391   .text.pcTimerGetName:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1398   .text.pcTimerGetName:0000000000000000 pcTimerGetName
   .ARM.exidx.text.pcTimerGetName:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1439   .text.xTimerIsTimerActive:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1446   .text.xTimerIsTimerActive:0000000000000000 xTimerIsTimerActive
.ARM.exidx.text.xTimerIsTimerActive:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1504   .text.pvTimerGetTimerID:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1511   .text.pvTimerGetTimerID:0000000000000000 pvTimerGetTimerID
.ARM.exidx.text.pvTimerGetTimerID:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1565   .text.vTimerSetTimerID:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1572   .text.vTimerSetTimerID:0000000000000000 vTimerSetTimerID
 .ARM.exidx.text.vTimerSetTimerID:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1627   .bss._ZL11xTimerQueue:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1631   .bss._ZL11xTimerQueue:0000000000000000 _ZL11xTimerQueue
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1634   .bss._ZL16xTimerTaskHandle:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1638   .bss._ZL16xTimerTaskHandle:0000000000000000 _ZL16xTimerTaskHandle
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1641   .bss._ZL17xActiveTimerList1:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1645   .bss._ZL17xActiveTimerList1:0000000000000000 _ZL17xActiveTimerList1
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1648   .bss._ZL17xActiveTimerList2:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1652   .bss._ZL17xActiveTimerList2:0000000000000000 _ZL17xActiveTimerList2
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1655   .bss._ZL18pxCurrentTimerList:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1659   .bss._ZL18pxCurrentTimerList:0000000000000000 _ZL18pxCurrentTimerList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1662   .bss._ZL19pxOverflowTimerList:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1666   .bss._ZL19pxOverflowTimerList:0000000000000000 _ZL19pxOverflowTimerList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1669   .bss._ZZL16prvSampleTimeNowPlE9xLastTime:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1673   .bss._ZZL16prvSampleTimeNowPlE9xLastTime:0000000000000000 _ZZL16prvSampleTimeNowPlE9xLastTime
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1676   .rodata._ZL28prvCheckForValidListAndQueuev.str1.4:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s:1680   .rodata.xTimerCreateTimerTask.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
vListInsert
__aeabi_unwind_cpp_pr1
vPortEnterCritical
vPortExitCritical
vListInitialise
xQueueGenericCreate
vQueueAddToRegistry
__aeabi_unwind_cpp_pr0
vListInitialiseItem
xTaskCreate
pvPortMalloc
xTaskGetSchedulerState
xQueueGenericSend
xQueueGenericSendFromISR
uxListRemove
xTaskGetTickCount
vTaskSuspendAll
vQueueWaitForMessageRestricted
xTaskResumeAll
xQueueGenericReceive
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccClruzZ.s 			page 57


vPortFree
