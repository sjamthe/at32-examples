ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvnCjmQ.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"list.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.vListInitialise,"ax",%progbits
  17              		.align	1
  18              		.global	vListInitialise
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	vListInitialise:
  25              		.fnstart
  26              	.LFB135:
  27              		.file 1 "../Middlewares/FreeRTOS//Source/list.c"
   1:../Middlewares/FreeRTOS//Source/list.c **** /*
   2:../Middlewares/FreeRTOS//Source/list.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/list.c ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/list.c **** 
   5:../Middlewares/FreeRTOS//Source/list.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/list.c **** 
   7:../Middlewares/FreeRTOS//Source/list.c ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/list.c **** 
   9:../Middlewares/FreeRTOS//Source/list.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/list.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/list.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/list.c **** 
  13:../Middlewares/FreeRTOS//Source/list.c ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/list.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Middlewares/FreeRTOS//Source/list.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/list.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/list.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/list.c ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/list.c **** 
  20:../Middlewares/FreeRTOS//Source/list.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/list.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/list.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/list.c ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/list.c **** 
  25:../Middlewares/FreeRTOS//Source/list.c ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/list.c ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/list.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/list.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/list.c ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/list.c ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/list.c ****      *                                                                       *
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvnCjmQ.s 			page 2


  32:../Middlewares/FreeRTOS//Source/list.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Middlewares/FreeRTOS//Source/list.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Middlewares/FreeRTOS//Source/list.c ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/list.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/list.c ****      *                                                                       *
  37:../Middlewares/FreeRTOS//Source/list.c ****     ***************************************************************************
  38:../Middlewares/FreeRTOS//Source/list.c **** 
  39:../Middlewares/FreeRTOS//Source/list.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/list.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/list.c ****     defined configASSERT()?
  42:../Middlewares/FreeRTOS//Source/list.c **** 
  43:../Middlewares/FreeRTOS//Source/list.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Middlewares/FreeRTOS//Source/list.c ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/list.c ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/list.c **** 
  47:../Middlewares/FreeRTOS//Source/list.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/list.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/list.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Middlewares/FreeRTOS//Source/list.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/list.c **** 
  52:../Middlewares/FreeRTOS//Source/list.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/list.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/list.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/list.c **** 
  56:../Middlewares/FreeRTOS//Source/list.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Middlewares/FreeRTOS//Source/list.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/list.c **** 
  59:../Middlewares/FreeRTOS//Source/list.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/list.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/list.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/list.c **** 
  63:../Middlewares/FreeRTOS//Source/list.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/list.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/list.c ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/list.c **** 
  67:../Middlewares/FreeRTOS//Source/list.c ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/list.c **** */
  69:../Middlewares/FreeRTOS//Source/list.c **** 
  70:../Middlewares/FreeRTOS//Source/list.c **** 
  71:../Middlewares/FreeRTOS//Source/list.c **** #include <stdlib.h>
  72:../Middlewares/FreeRTOS//Source/list.c **** #include "FreeRTOS.h"
  73:../Middlewares/FreeRTOS//Source/list.c **** #include "list.h"
  74:../Middlewares/FreeRTOS//Source/list.c **** 
  75:../Middlewares/FreeRTOS//Source/list.c **** /*-----------------------------------------------------------
  76:../Middlewares/FreeRTOS//Source/list.c ****  * PUBLIC LIST API documented in list.h
  77:../Middlewares/FreeRTOS//Source/list.c ****  *----------------------------------------------------------*/
  78:../Middlewares/FreeRTOS//Source/list.c **** 
  79:../Middlewares/FreeRTOS//Source/list.c **** void vListInitialise( List_t * const pxList )
  80:../Middlewares/FreeRTOS//Source/list.c **** {
  28              		.loc 1 80 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  81:../Middlewares/FreeRTOS//Source/list.c **** 	/* The list structure contains a list item which is used to mark the
  82:../Middlewares/FreeRTOS//Source/list.c **** 	end of the list.  To initialise the list the list end is inserted
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvnCjmQ.s 			page 3


  83:../Middlewares/FreeRTOS//Source/list.c **** 	as the only list entry. */
  84:../Middlewares/FreeRTOS//Source/list.c **** 	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list struc
  34              		.loc 1 84 0
  35 0000 00F10803 		add	r3, r0, #8
  36 0004 4360     		str	r3, [r0, #4]
  85:../Middlewares/FreeRTOS//Source/list.c **** 
  86:../Middlewares/FreeRTOS//Source/list.c **** 	/* The list end value is the highest possible value in the list to
  87:../Middlewares/FreeRTOS//Source/list.c **** 	ensure it remains at the end of the list. */
  88:../Middlewares/FreeRTOS//Source/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
  37              		.loc 1 88 0
  38 0006 4FF0FF32 		mov	r2, #-1
  39 000a 8260     		str	r2, [r0, #8]
  89:../Middlewares/FreeRTOS//Source/list.c **** 
  90:../Middlewares/FreeRTOS//Source/list.c **** 	/* The list end next and previous pointers point to itself so we know
  91:../Middlewares/FreeRTOS//Source/list.c **** 	when the list is empty. */
  92:../Middlewares/FreeRTOS//Source/list.c **** 	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list
  40              		.loc 1 92 0
  41 000c C360     		str	r3, [r0, #12]
  93:../Middlewares/FreeRTOS//Source/list.c **** 	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini l
  42              		.loc 1 93 0
  43 000e 0361     		str	r3, [r0, #16]
  94:../Middlewares/FreeRTOS//Source/list.c **** 
  95:../Middlewares/FreeRTOS//Source/list.c **** 	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  44              		.loc 1 95 0
  45 0010 0023     		movs	r3, #0
  46 0012 0360     		str	r3, [r0]
  96:../Middlewares/FreeRTOS//Source/list.c **** 
  97:../Middlewares/FreeRTOS//Source/list.c **** 	/* Write known values into the list if
  98:../Middlewares/FreeRTOS//Source/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  99:../Middlewares/FreeRTOS//Source/list.c **** 	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
 100:../Middlewares/FreeRTOS//Source/list.c **** 	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
 101:../Middlewares/FreeRTOS//Source/list.c **** }
  47              		.loc 1 101 0
  48 0014 7047     		bx	lr
  49              		.cfi_endproc
  50              	.LFE135:
  51              		.cantunwind
  52              		.fnend
  54              		.section	.text.vListInitialiseItem,"ax",%progbits
  55              		.align	1
  56              		.global	vListInitialiseItem
  57              		.syntax unified
  58              		.thumb
  59              		.thumb_func
  60              		.fpu fpv4-sp-d16
  62              	vListInitialiseItem:
  63              		.fnstart
  64              	.LFB136:
 102:../Middlewares/FreeRTOS//Source/list.c **** /*-----------------------------------------------------------*/
 103:../Middlewares/FreeRTOS//Source/list.c **** 
 104:../Middlewares/FreeRTOS//Source/list.c **** void vListInitialiseItem( ListItem_t * const pxItem )
 105:../Middlewares/FreeRTOS//Source/list.c **** {
  65              		.loc 1 105 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		@ link register save eliminated.
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvnCjmQ.s 			page 4


  70              	.LVL1:
 106:../Middlewares/FreeRTOS//Source/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
 107:../Middlewares/FreeRTOS//Source/list.c **** 	pxItem->pvContainer = NULL;
  71              		.loc 1 107 0
  72 0000 0023     		movs	r3, #0
  73 0002 0361     		str	r3, [r0, #16]
 108:../Middlewares/FreeRTOS//Source/list.c **** 
 109:../Middlewares/FreeRTOS//Source/list.c **** 	/* Write known values into the list item if
 110:../Middlewares/FreeRTOS//Source/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
 111:../Middlewares/FreeRTOS//Source/list.c **** 	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
 112:../Middlewares/FreeRTOS//Source/list.c **** 	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
 113:../Middlewares/FreeRTOS//Source/list.c **** }
  74              		.loc 1 113 0
  75 0004 7047     		bx	lr
  76              		.cfi_endproc
  77              	.LFE136:
  78              		.cantunwind
  79              		.fnend
  81              		.section	.text.vListInsertEnd,"ax",%progbits
  82              		.align	1
  83              		.global	vListInsertEnd
  84              		.syntax unified
  85              		.thumb
  86              		.thumb_func
  87              		.fpu fpv4-sp-d16
  89              	vListInsertEnd:
  90              		.fnstart
  91              	.LFB137:
 114:../Middlewares/FreeRTOS//Source/list.c **** /*-----------------------------------------------------------*/
 115:../Middlewares/FreeRTOS//Source/list.c **** 
 116:../Middlewares/FreeRTOS//Source/list.c **** void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
 117:../Middlewares/FreeRTOS//Source/list.c **** {
  92              		.loc 1 117 0
  93              		.cfi_startproc
  94              		@ args = 0, pretend = 0, frame = 0
  95              		@ frame_needed = 0, uses_anonymous_args = 0
  96              		@ link register save eliminated.
  97              	.LVL2:
 118:../Middlewares/FreeRTOS//Source/list.c **** ListItem_t * const pxIndex = pxList->pxIndex;
  98              		.loc 1 118 0
  99 0000 4368     		ldr	r3, [r0, #4]
 100              	.LVL3:
 119:../Middlewares/FreeRTOS//Source/list.c **** 
 120:../Middlewares/FreeRTOS//Source/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
 121:../Middlewares/FreeRTOS//Source/list.c **** 	the list data structures being overwritten in memory.  They will not catch
 122:../Middlewares/FreeRTOS//Source/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
 123:../Middlewares/FreeRTOS//Source/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
 124:../Middlewares/FreeRTOS//Source/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 125:../Middlewares/FreeRTOS//Source/list.c **** 
 126:../Middlewares/FreeRTOS//Source/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
 127:../Middlewares/FreeRTOS//Source/list.c **** 	makes the new list item the last item to be removed by a call to
 128:../Middlewares/FreeRTOS//Source/list.c **** 	listGET_OWNER_OF_NEXT_ENTRY(). */
 129:../Middlewares/FreeRTOS//Source/list.c **** 	pxNewListItem->pxNext = pxIndex;
 101              		.loc 1 129 0
 102 0002 4B60     		str	r3, [r1, #4]
 130:../Middlewares/FreeRTOS//Source/list.c **** 	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 103              		.loc 1 130 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvnCjmQ.s 			page 5


 104 0004 9A68     		ldr	r2, [r3, #8]
 105 0006 8A60     		str	r2, [r1, #8]
 131:../Middlewares/FreeRTOS//Source/list.c **** 
 132:../Middlewares/FreeRTOS//Source/list.c **** 	/* Only used during decision coverage testing. */
 133:../Middlewares/FreeRTOS//Source/list.c **** 	mtCOVERAGE_TEST_DELAY();
 134:../Middlewares/FreeRTOS//Source/list.c **** 
 135:../Middlewares/FreeRTOS//Source/list.c **** 	pxIndex->pxPrevious->pxNext = pxNewListItem;
 106              		.loc 1 135 0
 107 0008 9A68     		ldr	r2, [r3, #8]
 108 000a 5160     		str	r1, [r2, #4]
 136:../Middlewares/FreeRTOS//Source/list.c **** 	pxIndex->pxPrevious = pxNewListItem;
 109              		.loc 1 136 0
 110 000c 9960     		str	r1, [r3, #8]
 137:../Middlewares/FreeRTOS//Source/list.c **** 
 138:../Middlewares/FreeRTOS//Source/list.c **** 	/* Remember which list the item is in. */
 139:../Middlewares/FreeRTOS//Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 111              		.loc 1 139 0
 112 000e 0861     		str	r0, [r1, #16]
 140:../Middlewares/FreeRTOS//Source/list.c **** 
 141:../Middlewares/FreeRTOS//Source/list.c **** 	( pxList->uxNumberOfItems )++;
 113              		.loc 1 141 0
 114 0010 0368     		ldr	r3, [r0]
 115              	.LVL4:
 116 0012 0133     		adds	r3, r3, #1
 117 0014 0360     		str	r3, [r0]
 142:../Middlewares/FreeRTOS//Source/list.c **** }
 118              		.loc 1 142 0
 119 0016 7047     		bx	lr
 120              		.cfi_endproc
 121              	.LFE137:
 122              		.cantunwind
 123              		.fnend
 125              		.section	.text.vListInsert,"ax",%progbits
 126              		.align	1
 127              		.global	vListInsert
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	vListInsert:
 134              		.fnstart
 135              	.LFB138:
 143:../Middlewares/FreeRTOS//Source/list.c **** /*-----------------------------------------------------------*/
 144:../Middlewares/FreeRTOS//Source/list.c **** 
 145:../Middlewares/FreeRTOS//Source/list.c **** void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
 146:../Middlewares/FreeRTOS//Source/list.c **** {
 136              		.loc 1 146 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140              		@ link register save eliminated.
 141              	.LVL5:
 142 0000 30B4     		push	{r4, r5}
 143              	.LCFI0:
 144              		.cfi_def_cfa_offset 8
 145              		.cfi_offset 4, -8
 146              		.cfi_offset 5, -4
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvnCjmQ.s 			page 6


 147:../Middlewares/FreeRTOS//Source/list.c **** ListItem_t *pxIterator;
 148:../Middlewares/FreeRTOS//Source/list.c **** const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 147              		.loc 1 148 0
 148 0002 0D68     		ldr	r5, [r1]
 149              	.LVL6:
 149:../Middlewares/FreeRTOS//Source/list.c **** 
 150:../Middlewares/FreeRTOS//Source/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
 151:../Middlewares/FreeRTOS//Source/list.c **** 	the list data structures being overwritten in memory.  They will not catch
 152:../Middlewares/FreeRTOS//Source/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
 153:../Middlewares/FreeRTOS//Source/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
 154:../Middlewares/FreeRTOS//Source/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 155:../Middlewares/FreeRTOS//Source/list.c **** 
 156:../Middlewares/FreeRTOS//Source/list.c **** 	/* Insert the new list item into the list, sorted in xItemValue order.
 157:../Middlewares/FreeRTOS//Source/list.c **** 
 158:../Middlewares/FreeRTOS//Source/list.c **** 	If the list already contains a list item with the same item value then the
 159:../Middlewares/FreeRTOS//Source/list.c **** 	new list item should be placed after it.  This ensures that TCB's which are
 160:../Middlewares/FreeRTOS//Source/list.c **** 	stored in ready lists (all of which have the same xItemValue value) get a
 161:../Middlewares/FreeRTOS//Source/list.c **** 	share of the CPU.  However, if the xItemValue is the same as the back marker
 162:../Middlewares/FreeRTOS//Source/list.c **** 	the iteration loop below will not end.  Therefore the value is checked
 163:../Middlewares/FreeRTOS//Source/list.c **** 	first, and the algorithm slightly modified if necessary. */
 164:../Middlewares/FreeRTOS//Source/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 150              		.loc 1 164 0
 151 0004 B5F1FF3F 		cmp	r5, #-1
 152 0008 02D0     		beq	.L10
 165:../Middlewares/FreeRTOS//Source/list.c **** 	{
 166:../Middlewares/FreeRTOS//Source/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 167:../Middlewares/FreeRTOS//Source/list.c **** 	}
 168:../Middlewares/FreeRTOS//Source/list.c **** 	else
 169:../Middlewares/FreeRTOS//Source/list.c **** 	{
 170:../Middlewares/FreeRTOS//Source/list.c **** 		/* *** NOTE ***********************************************************
 171:../Middlewares/FreeRTOS//Source/list.c **** 		If you find your application is crashing here then likely causes are
 172:../Middlewares/FreeRTOS//Source/list.c **** 		listed below.  In addition see http://www.freertos.org/FAQHelp.html for
 173:../Middlewares/FreeRTOS//Source/list.c **** 		more tips, and ensure configASSERT() is defined!
 174:../Middlewares/FreeRTOS//Source/list.c **** 		http://www.freertos.org/a00110.html#configASSERT
 175:../Middlewares/FreeRTOS//Source/list.c **** 
 176:../Middlewares/FreeRTOS//Source/list.c **** 			1) Stack overflow -
 177:../Middlewares/FreeRTOS//Source/list.c **** 			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
 178:../Middlewares/FreeRTOS//Source/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M
 179:../Middlewares/FreeRTOS//Source/list.c **** 			   parts where numerically high priority values denote low actual
 180:../Middlewares/FreeRTOS//Source/list.c **** 			   interrupt priorities, which can seem counter intuitive.  See
 181:../Middlewares/FreeRTOS//Source/list.c **** 			   http://www.freertos.org/RTOS-Cortex-M3-M4.html and the definition
 182:../Middlewares/FreeRTOS//Source/list.c **** 			   of configMAX_SYSCALL_INTERRUPT_PRIORITY on
 183:../Middlewares/FreeRTOS//Source/list.c **** 			   http://www.freertos.org/a00110.html
 184:../Middlewares/FreeRTOS//Source/list.c **** 			3) Calling an API function from within a critical section or when
 185:../Middlewares/FreeRTOS//Source/list.c **** 			   the scheduler is suspended, or calling an API function that does
 186:../Middlewares/FreeRTOS//Source/list.c **** 			   not end in "FromISR" from an interrupt.
 187:../Middlewares/FreeRTOS//Source/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 188:../Middlewares/FreeRTOS//Source/list.c **** 			   before the scheduler has been started (are interrupts firing
 189:../Middlewares/FreeRTOS//Source/list.c **** 			   before vTaskStartScheduler() has been called?).
 190:../Middlewares/FreeRTOS//Source/list.c **** 		**********************************************************************/
 191:../Middlewares/FreeRTOS//Source/list.c **** 
 192:../Middlewares/FreeRTOS//Source/list.c **** 		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValu
 153              		.loc 1 192 0
 154 000a 00F10802 		add	r2, r0, #8
 155              	.LVL7:
 156 000e 02E0     		b	.L7
 157              	.LVL8:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvnCjmQ.s 			page 7


 158              	.L10:
 166:../Middlewares/FreeRTOS//Source/list.c **** 	}
 159              		.loc 1 166 0
 160 0010 0269     		ldr	r2, [r0, #16]
 161              	.LVL9:
 162 0012 04E0     		b	.L6
 163              	.L8:
 164              		.loc 1 192 0
 165 0014 1A46     		mov	r2, r3
 166              	.LVL10:
 167              	.L7:
 168              		.loc 1 192 0 is_stmt 0 discriminator 3
 169 0016 5368     		ldr	r3, [r2, #4]
 170 0018 1C68     		ldr	r4, [r3]
 171 001a AC42     		cmp	r4, r5
 172 001c FAD9     		bls	.L8
 173              	.L6:
 193:../Middlewares/FreeRTOS//Source/list.c **** 		{
 194:../Middlewares/FreeRTOS//Source/list.c **** 			/* There is nothing to do here, just iterating to the wanted
 195:../Middlewares/FreeRTOS//Source/list.c **** 			insertion position. */
 196:../Middlewares/FreeRTOS//Source/list.c **** 		}
 197:../Middlewares/FreeRTOS//Source/list.c **** 	}
 198:../Middlewares/FreeRTOS//Source/list.c **** 
 199:../Middlewares/FreeRTOS//Source/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 174              		.loc 1 199 0 is_stmt 1
 175 001e 5368     		ldr	r3, [r2, #4]
 176 0020 4B60     		str	r3, [r1, #4]
 200:../Middlewares/FreeRTOS//Source/list.c **** 	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 177              		.loc 1 200 0
 178 0022 9960     		str	r1, [r3, #8]
 201:../Middlewares/FreeRTOS//Source/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 179              		.loc 1 201 0
 180 0024 8A60     		str	r2, [r1, #8]
 202:../Middlewares/FreeRTOS//Source/list.c **** 	pxIterator->pxNext = pxNewListItem;
 181              		.loc 1 202 0
 182 0026 5160     		str	r1, [r2, #4]
 203:../Middlewares/FreeRTOS//Source/list.c **** 
 204:../Middlewares/FreeRTOS//Source/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 205:../Middlewares/FreeRTOS//Source/list.c **** 	item later. */
 206:../Middlewares/FreeRTOS//Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 183              		.loc 1 206 0
 184 0028 0861     		str	r0, [r1, #16]
 207:../Middlewares/FreeRTOS//Source/list.c **** 
 208:../Middlewares/FreeRTOS//Source/list.c **** 	( pxList->uxNumberOfItems )++;
 185              		.loc 1 208 0
 186 002a 0368     		ldr	r3, [r0]
 187 002c 0133     		adds	r3, r3, #1
 188 002e 0360     		str	r3, [r0]
 209:../Middlewares/FreeRTOS//Source/list.c **** }
 189              		.loc 1 209 0
 190 0030 30BC     		pop	{r4, r5}
 191              	.LCFI1:
 192              		.cfi_restore 5
 193              		.cfi_restore 4
 194              		.cfi_def_cfa_offset 0
 195              	.LVL11:
 196 0032 7047     		bx	lr
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvnCjmQ.s 			page 8


 197              		.cfi_endproc
 198              	.LFE138:
 199              		.cantunwind
 200              		.fnend
 202              		.section	.text.uxListRemove,"ax",%progbits
 203              		.align	1
 204              		.global	uxListRemove
 205              		.syntax unified
 206              		.thumb
 207              		.thumb_func
 208              		.fpu fpv4-sp-d16
 210              	uxListRemove:
 211              		.fnstart
 212              	.LFB139:
 210:../Middlewares/FreeRTOS//Source/list.c **** /*-----------------------------------------------------------*/
 211:../Middlewares/FreeRTOS//Source/list.c **** 
 212:../Middlewares/FreeRTOS//Source/list.c **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 213:../Middlewares/FreeRTOS//Source/list.c **** {
 213              		.loc 1 213 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 0
 216              		@ frame_needed = 0, uses_anonymous_args = 0
 217              		@ link register save eliminated.
 218              	.LVL12:
 214:../Middlewares/FreeRTOS//Source/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 215:../Middlewares/FreeRTOS//Source/list.c **** item. */
 216:../Middlewares/FreeRTOS//Source/list.c **** List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 219              		.loc 1 216 0
 220 0000 0369     		ldr	r3, [r0, #16]
 221              	.LVL13:
 217:../Middlewares/FreeRTOS//Source/list.c **** 
 218:../Middlewares/FreeRTOS//Source/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 222              		.loc 1 218 0
 223 0002 4268     		ldr	r2, [r0, #4]
 224 0004 8168     		ldr	r1, [r0, #8]
 225 0006 9160     		str	r1, [r2, #8]
 219:../Middlewares/FreeRTOS//Source/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 226              		.loc 1 219 0
 227 0008 8268     		ldr	r2, [r0, #8]
 228 000a 4168     		ldr	r1, [r0, #4]
 229 000c 5160     		str	r1, [r2, #4]
 220:../Middlewares/FreeRTOS//Source/list.c **** 
 221:../Middlewares/FreeRTOS//Source/list.c **** 	/* Only used during decision coverage testing. */
 222:../Middlewares/FreeRTOS//Source/list.c **** 	mtCOVERAGE_TEST_DELAY();
 223:../Middlewares/FreeRTOS//Source/list.c **** 
 224:../Middlewares/FreeRTOS//Source/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 225:../Middlewares/FreeRTOS//Source/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 230              		.loc 1 225 0
 231 000e 5A68     		ldr	r2, [r3, #4]
 232 0010 8242     		cmp	r2, r0
 233 0012 05D0     		beq	.L13
 234              	.L12:
 226:../Middlewares/FreeRTOS//Source/list.c **** 	{
 227:../Middlewares/FreeRTOS//Source/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 228:../Middlewares/FreeRTOS//Source/list.c **** 	}
 229:../Middlewares/FreeRTOS//Source/list.c **** 	else
 230:../Middlewares/FreeRTOS//Source/list.c **** 	{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvnCjmQ.s 			page 9


 231:../Middlewares/FreeRTOS//Source/list.c **** 		mtCOVERAGE_TEST_MARKER();
 232:../Middlewares/FreeRTOS//Source/list.c **** 	}
 233:../Middlewares/FreeRTOS//Source/list.c **** 
 234:../Middlewares/FreeRTOS//Source/list.c **** 	pxItemToRemove->pvContainer = NULL;
 235              		.loc 1 234 0
 236 0014 0022     		movs	r2, #0
 237 0016 0261     		str	r2, [r0, #16]
 235:../Middlewares/FreeRTOS//Source/list.c **** 	( pxList->uxNumberOfItems )--;
 238              		.loc 1 235 0
 239 0018 1868     		ldr	r0, [r3]
 240              	.LVL14:
 241 001a 0138     		subs	r0, r0, #1
 242 001c 1860     		str	r0, [r3]
 236:../Middlewares/FreeRTOS//Source/list.c **** 
 237:../Middlewares/FreeRTOS//Source/list.c **** 	return pxList->uxNumberOfItems;
 238:../Middlewares/FreeRTOS//Source/list.c **** }
 243              		.loc 1 238 0
 244 001e 7047     		bx	lr
 245              	.LVL15:
 246              	.L13:
 227:../Middlewares/FreeRTOS//Source/list.c **** 	}
 247              		.loc 1 227 0
 248 0020 8268     		ldr	r2, [r0, #8]
 249 0022 5A60     		str	r2, [r3, #4]
 250 0024 F6E7     		b	.L12
 251              		.cfi_endproc
 252              	.LFE139:
 253              		.cantunwind
 254              		.fnend
 256              		.text
 257              	.Letext0:
 258              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/cstdlib"
 259              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/arm-none-eab
 260              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 261              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 262              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 263              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 264              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 265              		.file 9 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 266              		.file 10 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/stdlib.h"
 267              		.file 11 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 268              		.file 12 "../Libraries/CMSIS/CM4/CoreSupport/core_cm4.h"
 269              		.file 13 "../Libraries/CMSIS/CM4/DeviceSupport/system_at32f4xx.h"
 270              		.file 14 "Inc/FreeRTOSConfig.h"
 271              		.file 15 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h"
 272              		.file 16 "../Middlewares/FreeRTOS//Source/include/list.h"
 273              		.file 17 "<built-in>"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvnCjmQ.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 list.c
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvnCjmQ.s:17     .text.vListInitialise:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvnCjmQ.s:24     .text.vListInitialise:0000000000000000 vListInitialise
  .ARM.exidx.text.vListInitialise:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvnCjmQ.s:55     .text.vListInitialiseItem:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvnCjmQ.s:62     .text.vListInitialiseItem:0000000000000000 vListInitialiseItem
.ARM.exidx.text.vListInitialiseItem:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvnCjmQ.s:82     .text.vListInsertEnd:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvnCjmQ.s:89     .text.vListInsertEnd:0000000000000000 vListInsertEnd
   .ARM.exidx.text.vListInsertEnd:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvnCjmQ.s:126    .text.vListInsert:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvnCjmQ.s:133    .text.vListInsert:0000000000000000 vListInsert
      .ARM.exidx.text.vListInsert:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvnCjmQ.s:203    .text.uxListRemove:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvnCjmQ.s:210    .text.uxListRemove:0000000000000000 uxListRemove
     .ARM.exidx.text.uxListRemove:0000000000000000 $d

NO UNDEFINED SYMBOLS
