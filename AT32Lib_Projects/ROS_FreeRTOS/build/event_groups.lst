ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"event_groups.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text._ZL20prvTestWaitConditionmml,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv4-sp-d16
  23              	_ZL20prvTestWaitConditionmml:
  24              		.fnstart
  25              	.LFB144:
  26              		.file 1 "../Middlewares/FreeRTOS//Source/event_groups.c"
   1:../Middlewares/FreeRTOS//Source/event_groups.c **** /*
   2:../Middlewares/FreeRTOS//Source/event_groups.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/event_groups.c ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/event_groups.c **** 
   5:../Middlewares/FreeRTOS//Source/event_groups.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/event_groups.c **** 
   7:../Middlewares/FreeRTOS//Source/event_groups.c ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/event_groups.c **** 
   9:../Middlewares/FreeRTOS//Source/event_groups.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/event_groups.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/event_groups.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  13:../Middlewares/FreeRTOS//Source/event_groups.c ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/event_groups.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Middlewares/FreeRTOS//Source/event_groups.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/event_groups.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/event_groups.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/event_groups.c ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  20:../Middlewares/FreeRTOS//Source/event_groups.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/event_groups.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/event_groups.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/event_groups.c ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  25:../Middlewares/FreeRTOS//Source/event_groups.c ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/event_groups.c ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/event_groups.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/event_groups.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/event_groups.c ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/event_groups.c ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/event_groups.c ****      *                                                                       *
  32:../Middlewares/FreeRTOS//Source/event_groups.c ****      *    Help yourself get started quickly while simultaneously helping     *
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 2


  33:../Middlewares/FreeRTOS//Source/event_groups.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Middlewares/FreeRTOS//Source/event_groups.c ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/event_groups.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/event_groups.c ****      *                                                                       *
  37:../Middlewares/FreeRTOS//Source/event_groups.c ****     ***************************************************************************
  38:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  39:../Middlewares/FreeRTOS//Source/event_groups.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/event_groups.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/event_groups.c ****     defined configASSERT()?
  42:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  43:../Middlewares/FreeRTOS//Source/event_groups.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Middlewares/FreeRTOS//Source/event_groups.c ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/event_groups.c ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  47:../Middlewares/FreeRTOS//Source/event_groups.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/event_groups.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/event_groups.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Middlewares/FreeRTOS//Source/event_groups.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  52:../Middlewares/FreeRTOS//Source/event_groups.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/event_groups.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/event_groups.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  56:../Middlewares/FreeRTOS//Source/event_groups.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Middlewares/FreeRTOS//Source/event_groups.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  59:../Middlewares/FreeRTOS//Source/event_groups.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/event_groups.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/event_groups.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  63:../Middlewares/FreeRTOS//Source/event_groups.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/event_groups.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/event_groups.c ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  67:../Middlewares/FreeRTOS//Source/event_groups.c ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/event_groups.c **** */
  69:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  70:../Middlewares/FreeRTOS//Source/event_groups.c **** /* Standard includes. */
  71:../Middlewares/FreeRTOS//Source/event_groups.c **** #include <stdlib.h>
  72:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  73:../Middlewares/FreeRTOS//Source/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:../Middlewares/FreeRTOS//Source/event_groups.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:../Middlewares/FreeRTOS//Source/event_groups.c **** task.h is included from an application file. */
  76:../Middlewares/FreeRTOS//Source/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  78:../Middlewares/FreeRTOS//Source/event_groups.c **** /* FreeRTOS includes. */
  79:../Middlewares/FreeRTOS//Source/event_groups.c **** #include "FreeRTOS.h"
  80:../Middlewares/FreeRTOS//Source/event_groups.c **** #include "task.h"
  81:../Middlewares/FreeRTOS//Source/event_groups.c **** #include "timers.h"
  82:../Middlewares/FreeRTOS//Source/event_groups.c **** #include "event_groups.h"
  83:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  84:../Middlewares/FreeRTOS//Source/event_groups.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  85:../Middlewares/FreeRTOS//Source/event_groups.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  86:../Middlewares/FreeRTOS//Source/event_groups.c **** header files above, but not in this file, in order to generate the correct
  87:../Middlewares/FreeRTOS//Source/event_groups.c **** privileged Vs unprivileged linkage and placement. */
  88:../Middlewares/FreeRTOS//Source/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  89:../Middlewares/FreeRTOS//Source/event_groups.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 3


  90:../Middlewares/FreeRTOS//Source/event_groups.c **** /* The following bit fields convey control information in a task's event list
  91:../Middlewares/FreeRTOS//Source/event_groups.c **** item value.  It is important they don't clash with the
  92:../Middlewares/FreeRTOS//Source/event_groups.c **** taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  93:../Middlewares/FreeRTOS//Source/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  94:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x0100U
  95:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x0200U
  96:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x0400U
  97:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff00U
  98:../Middlewares/FreeRTOS//Source/event_groups.c **** #else
  99:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x01000000UL
 100:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x02000000UL
 101:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x04000000UL
 102:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff000000UL
 103:../Middlewares/FreeRTOS//Source/event_groups.c **** #endif
 104:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 105:../Middlewares/FreeRTOS//Source/event_groups.c **** typedef struct xEventGroupDefinition
 106:../Middlewares/FreeRTOS//Source/event_groups.c **** {
 107:../Middlewares/FreeRTOS//Source/event_groups.c **** 	EventBits_t uxEventBits;
 108:../Middlewares/FreeRTOS//Source/event_groups.c **** 	List_t xTasksWaitingForBits;		/*< List of tasks waiting for a bit to be set. */
 109:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 110:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
 111:../Middlewares/FreeRTOS//Source/event_groups.c **** 		UBaseType_t uxEventGroupNumber;
 112:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#endif
 113:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 114:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 115:../Middlewares/FreeRTOS//Source/event_groups.c **** 		uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated to en
 116:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#endif
 117:../Middlewares/FreeRTOS//Source/event_groups.c **** } EventGroup_t;
 118:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 119:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 120:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 121:../Middlewares/FreeRTOS//Source/event_groups.c **** /*
 122:../Middlewares/FreeRTOS//Source/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
 123:../Middlewares/FreeRTOS//Source/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
 124:../Middlewares/FreeRTOS//Source/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
 125:../Middlewares/FreeRTOS//Source/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
 126:../Middlewares/FreeRTOS//Source/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
 127:../Middlewares/FreeRTOS//Source/event_groups.c ****  * in uxCurrentEventBits.
 128:../Middlewares/FreeRTOS//Source/event_groups.c ****  */
 129:../Middlewares/FreeRTOS//Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 130:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 131:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 132:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 133:../Middlewares/FreeRTOS//Source/event_groups.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 134:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 135:../Middlewares/FreeRTOS//Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
 136:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 137:../Middlewares/FreeRTOS//Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 138:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 139:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* A StaticEventGroup_t object must be provided. */
 140:../Middlewares/FreeRTOS//Source/event_groups.c **** 		configASSERT( pxEventGroupBuffer );
 141:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 142:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* The user has provided a statically allocated event group - use it. */
 143:../Middlewares/FreeRTOS//Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGro
 144:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 145:../Middlewares/FreeRTOS//Source/event_groups.c **** 		if( pxEventBits != NULL )
 146:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 4


 147:../Middlewares/FreeRTOS//Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 148:../Middlewares/FreeRTOS//Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 149:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 150:../Middlewares/FreeRTOS//Source/event_groups.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 151:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 152:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note that
 153:../Middlewares/FreeRTOS//Source/event_groups.c **** 				this event group was created statically in case the event group
 154:../Middlewares/FreeRTOS//Source/event_groups.c **** 				is later deleted. */
 155:../Middlewares/FreeRTOS//Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdTRUE;
 156:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 157:../Middlewares/FreeRTOS//Source/event_groups.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 158:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 159:../Middlewares/FreeRTOS//Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 160:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 161:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else
 162:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 163:../Middlewares/FreeRTOS//Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 164:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 165:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 166:../Middlewares/FreeRTOS//Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 167:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 168:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 169:../Middlewares/FreeRTOS//Source/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 170:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 171:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 172:../Middlewares/FreeRTOS//Source/event_groups.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 173:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 174:../Middlewares/FreeRTOS//Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreate( void )
 175:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 176:../Middlewares/FreeRTOS//Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 177:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 178:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* Allocate the event group. */
 179:../Middlewares/FreeRTOS//Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 180:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 181:../Middlewares/FreeRTOS//Source/event_groups.c **** 		if( pxEventBits != NULL )
 182:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 183:../Middlewares/FreeRTOS//Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 184:../Middlewares/FreeRTOS//Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 185:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 186:../Middlewares/FreeRTOS//Source/event_groups.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 187:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 188:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note this
 189:../Middlewares/FreeRTOS//Source/event_groups.c **** 				event group was allocated statically in case the event group is
 190:../Middlewares/FreeRTOS//Source/event_groups.c **** 				later deleted. */
 191:../Middlewares/FreeRTOS//Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdFALSE;
 192:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 193:../Middlewares/FreeRTOS//Source/event_groups.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 194:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 195:../Middlewares/FreeRTOS//Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 196:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 197:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else
 198:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 199:../Middlewares/FreeRTOS//Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 200:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 201:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 202:../Middlewares/FreeRTOS//Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 203:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 5


 204:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 205:../Middlewares/FreeRTOS//Source/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 206:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 207:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 208:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const E
 209:../Middlewares/FreeRTOS//Source/event_groups.c **** {
 210:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 211:../Middlewares/FreeRTOS//Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 212:../Middlewares/FreeRTOS//Source/event_groups.c **** BaseType_t xAlreadyYielded;
 213:../Middlewares/FreeRTOS//Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 214:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 215:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 216:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 217:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 218:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 219:../Middlewares/FreeRTOS//Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 220:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 221:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#endif
 222:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 223:../Middlewares/FreeRTOS//Source/event_groups.c **** 	vTaskSuspendAll();
 224:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 225:../Middlewares/FreeRTOS//Source/event_groups.c **** 		uxOriginalBitValue = pxEventBits->uxEventBits;
 226:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 227:../Middlewares/FreeRTOS//Source/event_groups.c **** 		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 228:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 229:../Middlewares/FreeRTOS//Source/event_groups.c **** 		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 230:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 231:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* All the rendezvous bits are now set - no need to block. */
 232:../Middlewares/FreeRTOS//Source/event_groups.c **** 			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 233:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 234:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* Rendezvous always clear the bits.  They will have been cleared
 235:../Middlewares/FreeRTOS//Source/event_groups.c **** 			already unless this is the only task in the rendezvous. */
 236:../Middlewares/FreeRTOS//Source/event_groups.c **** 			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 237:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 238:../Middlewares/FreeRTOS//Source/event_groups.c **** 			xTicksToWait = 0;
 239:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 240:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else
 241:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 242:../Middlewares/FreeRTOS//Source/event_groups.c **** 			if( xTicksToWait != ( TickType_t ) 0 )
 243:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 244:../Middlewares/FreeRTOS//Source/event_groups.c **** 				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 245:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 246:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* Store the bits that the calling task is waiting for in the
 247:../Middlewares/FreeRTOS//Source/event_groups.c **** 				task's event list item so the kernel knows when a match is
 248:../Middlewares/FreeRTOS//Source/event_groups.c **** 				found.  Then enter the blocked state. */
 249:../Middlewares/FreeRTOS//Source/event_groups.c **** 				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eve
 250:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 251:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* This assignment is obsolete as uxReturn will get set after
 252:../Middlewares/FreeRTOS//Source/event_groups.c **** 				the task unblocks, but some compilers mistakenly generate a
 253:../Middlewares/FreeRTOS//Source/event_groups.c **** 				warning about uxReturn being returned without being set if the
 254:../Middlewares/FreeRTOS//Source/event_groups.c **** 				assignment is omitted. */
 255:../Middlewares/FreeRTOS//Source/event_groups.c **** 				uxReturn = 0;
 256:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 257:../Middlewares/FreeRTOS//Source/event_groups.c **** 			else
 258:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 259:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* The rendezvous bits were not set, but no block time was
 260:../Middlewares/FreeRTOS//Source/event_groups.c **** 				specified - just return the current event bit value. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 6


 261:../Middlewares/FreeRTOS//Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 262:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 263:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 264:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 265:../Middlewares/FreeRTOS//Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 266:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 267:../Middlewares/FreeRTOS//Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 268:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 269:../Middlewares/FreeRTOS//Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 270:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 271:../Middlewares/FreeRTOS//Source/event_groups.c **** 			portYIELD_WITHIN_API();
 272:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 273:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else
 274:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 275:../Middlewares/FreeRTOS//Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 276:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 277:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 278:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 279:../Middlewares/FreeRTOS//Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 280:../Middlewares/FreeRTOS//Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 281:../Middlewares/FreeRTOS//Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 282:../Middlewares/FreeRTOS//Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 283:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 284:../Middlewares/FreeRTOS//Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 285:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 286:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* The task timed out, just return the current event bit value. */
 287:../Middlewares/FreeRTOS//Source/event_groups.c **** 			taskENTER_CRITICAL();
 288:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 289:../Middlewares/FreeRTOS//Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 290:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 291:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* Although the task got here because it timed out before the
 292:../Middlewares/FreeRTOS//Source/event_groups.c **** 				bits it was waiting for were set, it is possible that since it
 293:../Middlewares/FreeRTOS//Source/event_groups.c **** 				unblocked another task has set the bits.  If this is the case
 294:../Middlewares/FreeRTOS//Source/event_groups.c **** 				then it needs to clear the bits before exiting. */
 295:../Middlewares/FreeRTOS//Source/event_groups.c **** 				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 296:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 297:../Middlewares/FreeRTOS//Source/event_groups.c **** 					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 298:../Middlewares/FreeRTOS//Source/event_groups.c **** 				}
 299:../Middlewares/FreeRTOS//Source/event_groups.c **** 				else
 300:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 301:../Middlewares/FreeRTOS//Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 302:../Middlewares/FreeRTOS//Source/event_groups.c **** 				}
 303:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 304:../Middlewares/FreeRTOS//Source/event_groups.c **** 			taskEXIT_CRITICAL();
 305:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 306:../Middlewares/FreeRTOS//Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 307:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 308:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else
 309:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 310:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 311:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 312:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 313:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* Control bits might be set as the task had blocked should not be
 314:../Middlewares/FreeRTOS//Source/event_groups.c **** 		returned. */
 315:../Middlewares/FreeRTOS//Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 316:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 317:../Middlewares/FreeRTOS//Source/event_groups.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 7


 318:../Middlewares/FreeRTOS//Source/event_groups.c **** 	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 319:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 320:../Middlewares/FreeRTOS//Source/event_groups.c **** 	return uxReturn;
 321:../Middlewares/FreeRTOS//Source/event_groups.c **** }
 322:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 323:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 324:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor,
 325:../Middlewares/FreeRTOS//Source/event_groups.c **** {
 326:../Middlewares/FreeRTOS//Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 327:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 328:../Middlewares/FreeRTOS//Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 329:../Middlewares/FreeRTOS//Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 330:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 331:../Middlewares/FreeRTOS//Source/event_groups.c **** 	/* Check the user is not attempting to wait on the bits used by the kernel
 332:../Middlewares/FreeRTOS//Source/event_groups.c **** 	itself, and that at least one bit is being requested. */
 333:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( xEventGroup );
 334:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 335:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 336:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 337:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 338:../Middlewares/FreeRTOS//Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 339:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 340:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#endif
 341:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 342:../Middlewares/FreeRTOS//Source/event_groups.c **** 	vTaskSuspendAll();
 343:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 344:../Middlewares/FreeRTOS//Source/event_groups.c **** 		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 345:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 346:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* Check to see if the wait condition is already met or not. */
 347:../Middlewares/FreeRTOS//Source/event_groups.c **** 		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 348:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 349:../Middlewares/FreeRTOS//Source/event_groups.c **** 		if( xWaitConditionMet != pdFALSE )
 350:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 351:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* The wait condition has already been met so there is no need to
 352:../Middlewares/FreeRTOS//Source/event_groups.c **** 			block. */
 353:../Middlewares/FreeRTOS//Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 354:../Middlewares/FreeRTOS//Source/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 355:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 356:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* Clear the wait bits if requested to do so. */
 357:../Middlewares/FreeRTOS//Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 358:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 359:../Middlewares/FreeRTOS//Source/event_groups.c **** 				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 360:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 361:../Middlewares/FreeRTOS//Source/event_groups.c **** 			else
 362:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 363:../Middlewares/FreeRTOS//Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 364:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 365:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 366:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else if( xTicksToWait == ( TickType_t ) 0 )
 367:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 368:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* The wait condition has not been met, but no block time was
 369:../Middlewares/FreeRTOS//Source/event_groups.c **** 			specified, so just return the current value. */
 370:../Middlewares/FreeRTOS//Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 371:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 372:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else
 373:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 374:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* The task is going to block to wait for its required bits to be
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 8


 375:../Middlewares/FreeRTOS//Source/event_groups.c **** 			set.  uxControlBits are used to remember the specified behaviour of
 376:../Middlewares/FreeRTOS//Source/event_groups.c **** 			this call to xEventGroupWaitBits() - for use when the event bits
 377:../Middlewares/FreeRTOS//Source/event_groups.c **** 			unblock the task. */
 378:../Middlewares/FreeRTOS//Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 379:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 380:../Middlewares/FreeRTOS//Source/event_groups.c **** 				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 381:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 382:../Middlewares/FreeRTOS//Source/event_groups.c **** 			else
 383:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 384:../Middlewares/FreeRTOS//Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 385:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 386:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 387:../Middlewares/FreeRTOS//Source/event_groups.c **** 			if( xWaitForAllBits != pdFALSE )
 388:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 389:../Middlewares/FreeRTOS//Source/event_groups.c **** 				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 390:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 391:../Middlewares/FreeRTOS//Source/event_groups.c **** 			else
 392:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 393:../Middlewares/FreeRTOS//Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 394:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 395:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 396:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* Store the bits that the calling task is waiting for in the
 397:../Middlewares/FreeRTOS//Source/event_groups.c **** 			task's event list item so the kernel knows when a match is
 398:../Middlewares/FreeRTOS//Source/event_groups.c **** 			found.  Then enter the blocked state. */
 399:../Middlewares/FreeRTOS//Source/event_groups.c **** 			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxCo
 400:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 401:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* This is obsolete as it will get set after the task unblocks, but
 402:../Middlewares/FreeRTOS//Source/event_groups.c **** 			some compilers mistakenly generate a warning about the variable
 403:../Middlewares/FreeRTOS//Source/event_groups.c **** 			being returned without being set if it is not done. */
 404:../Middlewares/FreeRTOS//Source/event_groups.c **** 			uxReturn = 0;
 405:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 406:../Middlewares/FreeRTOS//Source/event_groups.c **** 			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 407:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 408:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 409:../Middlewares/FreeRTOS//Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 410:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 411:../Middlewares/FreeRTOS//Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 412:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 413:../Middlewares/FreeRTOS//Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 414:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 415:../Middlewares/FreeRTOS//Source/event_groups.c **** 			portYIELD_WITHIN_API();
 416:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 417:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else
 418:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 419:../Middlewares/FreeRTOS//Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 420:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 421:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 422:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 423:../Middlewares/FreeRTOS//Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 424:../Middlewares/FreeRTOS//Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 425:../Middlewares/FreeRTOS//Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 426:../Middlewares/FreeRTOS//Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 427:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 428:../Middlewares/FreeRTOS//Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 429:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 430:../Middlewares/FreeRTOS//Source/event_groups.c **** 			taskENTER_CRITICAL();
 431:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 9


 432:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* The task timed out, just return the current event bit value. */
 433:../Middlewares/FreeRTOS//Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 434:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 435:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* It is possible that the event bits were updated between this
 436:../Middlewares/FreeRTOS//Source/event_groups.c **** 				task leaving the Blocked state and running again. */
 437:../Middlewares/FreeRTOS//Source/event_groups.c **** 				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 438:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 439:../Middlewares/FreeRTOS//Source/event_groups.c **** 					if( xClearOnExit != pdFALSE )
 440:../Middlewares/FreeRTOS//Source/event_groups.c **** 					{
 441:../Middlewares/FreeRTOS//Source/event_groups.c **** 						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 442:../Middlewares/FreeRTOS//Source/event_groups.c **** 					}
 443:../Middlewares/FreeRTOS//Source/event_groups.c **** 					else
 444:../Middlewares/FreeRTOS//Source/event_groups.c **** 					{
 445:../Middlewares/FreeRTOS//Source/event_groups.c **** 						mtCOVERAGE_TEST_MARKER();
 446:../Middlewares/FreeRTOS//Source/event_groups.c **** 					}
 447:../Middlewares/FreeRTOS//Source/event_groups.c **** 				}
 448:../Middlewares/FreeRTOS//Source/event_groups.c **** 				else
 449:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 450:../Middlewares/FreeRTOS//Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 451:../Middlewares/FreeRTOS//Source/event_groups.c **** 				}
 452:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 453:../Middlewares/FreeRTOS//Source/event_groups.c **** 			taskEXIT_CRITICAL();
 454:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 455:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* Prevent compiler warnings when trace macros are not used. */
 456:../Middlewares/FreeRTOS//Source/event_groups.c **** 			xTimeoutOccurred = pdFALSE;
 457:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 458:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else
 459:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 460:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 461:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 462:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 463:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* The task blocked so control bits may have been set. */
 464:../Middlewares/FreeRTOS//Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 465:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 466:../Middlewares/FreeRTOS//Source/event_groups.c **** 	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 467:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 468:../Middlewares/FreeRTOS//Source/event_groups.c **** 	return uxReturn;
 469:../Middlewares/FreeRTOS//Source/event_groups.c **** }
 470:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 471:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 472:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
 473:../Middlewares/FreeRTOS//Source/event_groups.c **** {
 474:../Middlewares/FreeRTOS//Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 475:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t uxReturn;
 476:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 477:../Middlewares/FreeRTOS//Source/event_groups.c **** 	/* Check the user is not attempting to clear the bits used by the kernel
 478:../Middlewares/FreeRTOS//Source/event_groups.c **** 	itself. */
 479:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( xEventGroup );
 480:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 481:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 482:../Middlewares/FreeRTOS//Source/event_groups.c **** 	taskENTER_CRITICAL();
 483:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 484:../Middlewares/FreeRTOS//Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 485:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 486:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* The value returned is the event group value prior to the bits being
 487:../Middlewares/FreeRTOS//Source/event_groups.c **** 		cleared. */
 488:../Middlewares/FreeRTOS//Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 10


 489:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 490:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* Clear the bits. */
 491:../Middlewares/FreeRTOS//Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 492:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 493:../Middlewares/FreeRTOS//Source/event_groups.c **** 	taskEXIT_CRITICAL();
 494:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 495:../Middlewares/FreeRTOS//Source/event_groups.c **** 	return uxReturn;
 496:../Middlewares/FreeRTOS//Source/event_groups.c **** }
 497:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 498:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 499:../Middlewares/FreeRTOS//Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 500:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 501:../Middlewares/FreeRTOS//Source/event_groups.c **** 	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsTo
 502:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 503:../Middlewares/FreeRTOS//Source/event_groups.c **** 		BaseType_t xReturn;
 504:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 505:../Middlewares/FreeRTOS//Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 506:../Middlewares/FreeRTOS//Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( 
 507:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 508:../Middlewares/FreeRTOS//Source/event_groups.c **** 		return xReturn;
 509:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 510:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 511:../Middlewares/FreeRTOS//Source/event_groups.c **** #endif
 512:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 513:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 514:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 515:../Middlewares/FreeRTOS//Source/event_groups.c **** {
 516:../Middlewares/FreeRTOS//Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 517:../Middlewares/FreeRTOS//Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 518:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t uxReturn;
 519:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 520:../Middlewares/FreeRTOS//Source/event_groups.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 521:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 522:../Middlewares/FreeRTOS//Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 523:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 524:../Middlewares/FreeRTOS//Source/event_groups.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 525:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 526:../Middlewares/FreeRTOS//Source/event_groups.c **** 	return uxReturn;
 527:../Middlewares/FreeRTOS//Source/event_groups.c **** }
 528:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 529:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 530:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 531:../Middlewares/FreeRTOS//Source/event_groups.c **** {
 532:../Middlewares/FreeRTOS//Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 533:../Middlewares/FreeRTOS//Source/event_groups.c **** ListItem_t const *pxListEnd;
 534:../Middlewares/FreeRTOS//Source/event_groups.c **** List_t *pxList;
 535:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 536:../Middlewares/FreeRTOS//Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 537:../Middlewares/FreeRTOS//Source/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 538:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 539:../Middlewares/FreeRTOS//Source/event_groups.c **** 	/* Check the user is not attempting to set the bits used by the kernel
 540:../Middlewares/FreeRTOS//Source/event_groups.c **** 	itself. */
 541:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( xEventGroup );
 542:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 543:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 544:../Middlewares/FreeRTOS//Source/event_groups.c **** 	pxList = &( pxEventBits->xTasksWaitingForBits );
 545:../Middlewares/FreeRTOS//Source/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as th
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 11


 546:../Middlewares/FreeRTOS//Source/event_groups.c **** 	vTaskSuspendAll();
 547:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 548:../Middlewares/FreeRTOS//Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 549:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 550:../Middlewares/FreeRTOS//Source/event_groups.c **** 		pxListItem = listGET_HEAD_ENTRY( pxList );
 551:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 552:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* Set the bits. */
 553:../Middlewares/FreeRTOS//Source/event_groups.c **** 		pxEventBits->uxEventBits |= uxBitsToSet;
 554:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 555:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* See if the new bit value should unblock any tasks. */
 556:../Middlewares/FreeRTOS//Source/event_groups.c **** 		while( pxListItem != pxListEnd )
 557:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 558:../Middlewares/FreeRTOS//Source/event_groups.c **** 			pxNext = listGET_NEXT( pxListItem );
 559:../Middlewares/FreeRTOS//Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 560:../Middlewares/FreeRTOS//Source/event_groups.c **** 			xMatchFound = pdFALSE;
 561:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 562:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* Split the bits waited for from the control bits. */
 563:../Middlewares/FreeRTOS//Source/event_groups.c **** 			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 564:../Middlewares/FreeRTOS//Source/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 565:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 566:../Middlewares/FreeRTOS//Source/event_groups.c **** 			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 567:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 568:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* Just looking for single bit being set. */
 569:../Middlewares/FreeRTOS//Source/event_groups.c **** 				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 570:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 571:../Middlewares/FreeRTOS//Source/event_groups.c **** 					xMatchFound = pdTRUE;
 572:../Middlewares/FreeRTOS//Source/event_groups.c **** 				}
 573:../Middlewares/FreeRTOS//Source/event_groups.c **** 				else
 574:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 575:../Middlewares/FreeRTOS//Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 576:../Middlewares/FreeRTOS//Source/event_groups.c **** 				}
 577:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 578:../Middlewares/FreeRTOS//Source/event_groups.c **** 			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 579:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 580:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* All bits are set. */
 581:../Middlewares/FreeRTOS//Source/event_groups.c **** 				xMatchFound = pdTRUE;
 582:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 583:../Middlewares/FreeRTOS//Source/event_groups.c **** 			else
 584:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 585:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* Need all bits to be set, but not all the bits were set. */
 586:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 587:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 588:../Middlewares/FreeRTOS//Source/event_groups.c **** 			if( xMatchFound != pdFALSE )
 589:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 590:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* The bits match.  Should the bits be cleared on exit? */
 591:../Middlewares/FreeRTOS//Source/event_groups.c **** 				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 592:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 593:../Middlewares/FreeRTOS//Source/event_groups.c **** 					uxBitsToClear |= uxBitsWaitedFor;
 594:../Middlewares/FreeRTOS//Source/event_groups.c **** 				}
 595:../Middlewares/FreeRTOS//Source/event_groups.c **** 				else
 596:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 597:../Middlewares/FreeRTOS//Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 598:../Middlewares/FreeRTOS//Source/event_groups.c **** 				}
 599:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 600:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* Store the actual event flag value in the task's event list
 601:../Middlewares/FreeRTOS//Source/event_groups.c **** 				item before removing the task from the event list.  The
 602:../Middlewares/FreeRTOS//Source/event_groups.c **** 				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 12


 603:../Middlewares/FreeRTOS//Source/event_groups.c **** 				that is was unblocked due to its required bits matching, rather
 604:../Middlewares/FreeRTOS//Source/event_groups.c **** 				than because it timed out. */
 605:../Middlewares/FreeRTOS//Source/event_groups.c **** 				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCK
 606:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 607:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 608:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* Move onto the next list item.  Note pxListItem->pxNext is not
 609:../Middlewares/FreeRTOS//Source/event_groups.c **** 			used here as the list item may have been removed from the event list
 610:../Middlewares/FreeRTOS//Source/event_groups.c **** 			and inserted into the ready/pending reading list. */
 611:../Middlewares/FreeRTOS//Source/event_groups.c **** 			pxListItem = pxNext;
 612:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 613:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 614:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 615:../Middlewares/FreeRTOS//Source/event_groups.c **** 		bit was set in the control word. */
 616:../Middlewares/FreeRTOS//Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 617:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 618:../Middlewares/FreeRTOS//Source/event_groups.c **** 	( void ) xTaskResumeAll();
 619:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 620:../Middlewares/FreeRTOS//Source/event_groups.c **** 	return pxEventBits->uxEventBits;
 621:../Middlewares/FreeRTOS//Source/event_groups.c **** }
 622:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 623:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 624:../Middlewares/FreeRTOS//Source/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 625:../Middlewares/FreeRTOS//Source/event_groups.c **** {
 626:../Middlewares/FreeRTOS//Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 627:../Middlewares/FreeRTOS//Source/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 628:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 629:../Middlewares/FreeRTOS//Source/event_groups.c **** 	vTaskSuspendAll();
 630:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 631:../Middlewares/FreeRTOS//Source/event_groups.c **** 		traceEVENT_GROUP_DELETE( xEventGroup );
 632:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 633:../Middlewares/FreeRTOS//Source/event_groups.c **** 		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 634:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 635:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* Unblock the task, returning 0 as the event list is being deleted
 636:../Middlewares/FreeRTOS//Source/event_groups.c **** 			and	cannot therefore have any bits set. */
 637:../Middlewares/FreeRTOS//Source/event_groups.c **** 			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBit
 638:../Middlewares/FreeRTOS//Source/event_groups.c **** 			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 639:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 640:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 641:../Middlewares/FreeRTOS//Source/event_groups.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 642:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 643:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* The event group can only have been allocated dynamically - free
 644:../Middlewares/FreeRTOS//Source/event_groups.c **** 			it again. */
 645:../Middlewares/FreeRTOS//Source/event_groups.c **** 			vPortFree( pxEventBits );
 646:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 647:../Middlewares/FreeRTOS//Source/event_groups.c **** 		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 648:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 649:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* The event group could have been allocated statically or
 650:../Middlewares/FreeRTOS//Source/event_groups.c **** 			dynamically, so check before attempting to free the memory. */
 651:../Middlewares/FreeRTOS//Source/event_groups.c **** 			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 652:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 653:../Middlewares/FreeRTOS//Source/event_groups.c **** 				vPortFree( pxEventBits );
 654:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 655:../Middlewares/FreeRTOS//Source/event_groups.c **** 			else
 656:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 657:../Middlewares/FreeRTOS//Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 658:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 659:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 13


 660:../Middlewares/FreeRTOS//Source/event_groups.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 661:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 662:../Middlewares/FreeRTOS//Source/event_groups.c **** 	( void ) xTaskResumeAll();
 663:../Middlewares/FreeRTOS//Source/event_groups.c **** }
 664:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 665:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 666:../Middlewares/FreeRTOS//Source/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 667:../Middlewares/FreeRTOS//Source/event_groups.c **** an interrupt. */
 668:../Middlewares/FreeRTOS//Source/event_groups.c **** void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
 669:../Middlewares/FreeRTOS//Source/event_groups.c **** {
 670:../Middlewares/FreeRTOS//Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 671:../Middlewares/FreeRTOS//Source/event_groups.c **** }
 672:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 673:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 674:../Middlewares/FreeRTOS//Source/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 675:../Middlewares/FreeRTOS//Source/event_groups.c **** an interrupt. */
 676:../Middlewares/FreeRTOS//Source/event_groups.c **** void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
 677:../Middlewares/FreeRTOS//Source/event_groups.c **** {
 678:../Middlewares/FreeRTOS//Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 679:../Middlewares/FreeRTOS//Source/event_groups.c **** }
 680:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 681:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 682:../Middlewares/FreeRTOS//Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 683:../Middlewares/FreeRTOS//Source/event_groups.c **** {
  27              		.loc 1 683 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 684:../Middlewares/FreeRTOS//Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
 685:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 686:../Middlewares/FreeRTOS//Source/event_groups.c **** 	if( xWaitForAllBits == pdFALSE )
  33              		.loc 1 686 0
  34 0000 1AB9     		cbnz	r2, .L2
 687:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 688:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* Task only has to wait for one bit within uxBitsToWaitFor to be
 689:../Middlewares/FreeRTOS//Source/event_groups.c **** 		set.  Is one already set? */
 690:../Middlewares/FreeRTOS//Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
  35              		.loc 1 690 0
  36 0002 0842     		tst	r0, r1
  37 0004 06D1     		bne	.L4
 684:../Middlewares/FreeRTOS//Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
  38              		.loc 1 684 0
  39 0006 0020     		movs	r0, #0
  40              	.LVL1:
  41 0008 7047     		bx	lr
  42              	.LVL2:
  43              	.L2:
 691:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 692:../Middlewares/FreeRTOS//Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 693:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 694:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else
 695:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 696:../Middlewares/FreeRTOS//Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 697:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 698:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 14


 699:../Middlewares/FreeRTOS//Source/event_groups.c **** 	else
 700:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 701:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 702:../Middlewares/FreeRTOS//Source/event_groups.c **** 		Are they set already? */
 703:../Middlewares/FreeRTOS//Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
  44              		.loc 1 703 0
  45 000a 31EA0003 		bics	r3, r1, r0
  46 000e 03D0     		beq	.L5
 684:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  47              		.loc 1 684 0
  48 0010 0020     		movs	r0, #0
  49              	.LVL3:
  50 0012 7047     		bx	lr
  51              	.LVL4:
  52              	.L4:
 692:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
  53              		.loc 1 692 0
  54 0014 0120     		movs	r0, #1
  55              	.LVL5:
  56 0016 7047     		bx	lr
  57              	.LVL6:
  58              	.L5:
 704:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 705:../Middlewares/FreeRTOS//Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
  59              		.loc 1 705 0
  60 0018 0120     		movs	r0, #1
  61              	.LVL7:
 706:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 707:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else
 708:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 709:../Middlewares/FreeRTOS//Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 710:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 711:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 712:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 713:../Middlewares/FreeRTOS//Source/event_groups.c **** 	return xWaitConditionMet;
 714:../Middlewares/FreeRTOS//Source/event_groups.c **** }
  62              		.loc 1 714 0
  63 001a 7047     		bx	lr
  64              		.cfi_endproc
  65              	.LFE144:
  66              		.cantunwind
  67              		.fnend
  69              		.section	.text.xEventGroupCreate,"ax",%progbits
  70              		.align	1
  71              		.global	xEventGroupCreate
  72              		.syntax unified
  73              		.thumb
  74              		.thumb_func
  75              		.fpu fpv4-sp-d16
  77              	xEventGroupCreate:
  78              		.fnstart
  79              	.LFB135:
 175:../Middlewares/FreeRTOS//Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  80              		.loc 1 175 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 15


  84 0000 10B5     		push	{r4, lr}
  85              		.save {r4, lr}
  86              	.LCFI0:
  87              		.cfi_def_cfa_offset 8
  88              		.cfi_offset 4, -8
  89              		.cfi_offset 14, -4
 179:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  90              		.loc 1 179 0
  91 0002 1C20     		movs	r0, #28
  92 0004 FFF7FEFF 		bl	pvPortMalloc
  93              	.LVL8:
 181:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
  94              		.loc 1 181 0
  95 0008 0446     		mov	r4, r0
  96 000a 20B1     		cbz	r0, .L6
 183:../Middlewares/FreeRTOS//Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
  97              		.loc 1 183 0
  98 000c 0023     		movs	r3, #0
  99 000e 40F8043B 		str	r3, [r0], #4
 100              	.LVL9:
 184:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 101              		.loc 1 184 0
 102 0012 FFF7FEFF 		bl	vListInitialise
 103              	.LVL10:
 104              	.L6:
 203:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 105              		.loc 1 203 0
 106 0016 2046     		mov	r0, r4
 107 0018 10BD     		pop	{r4, pc}
 108              		.cfi_endproc
 109              	.LFE135:
 110              		.fnend
 112              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 113              		.align	1
 114              		.global	xEventGroupWaitBits
 115              		.syntax unified
 116              		.thumb
 117              		.thumb_func
 118              		.fpu fpv4-sp-d16
 120              	xEventGroupWaitBits:
 121              		.fnstart
 122              	.LFB137:
 325:../Middlewares/FreeRTOS//Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 123              		.loc 1 325 0
 124              		.cfi_startproc
 125              		@ args = 4, pretend = 0, frame = 0
 126              		@ frame_needed = 0, uses_anonymous_args = 0
 127              	.LVL11:
 128 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 129              		.save {r3, r4, r5, r6, r7, r8, r9, lr}
 130              	.LCFI1:
 131              		.cfi_def_cfa_offset 32
 132              		.cfi_offset 3, -32
 133              		.cfi_offset 4, -28
 134              		.cfi_offset 5, -24
 135              		.cfi_offset 6, -20
 136              		.cfi_offset 7, -16
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 16


 137              		.cfi_offset 8, -12
 138              		.cfi_offset 9, -8
 139              		.cfi_offset 14, -4
 140 0004 089F     		ldr	r7, [sp, #32]
 141              	.LVL12:
 333:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 142              		.loc 1 333 0
 143 0006 60B1     		cbz	r0, .L31
 144 0008 0646     		mov	r6, r0
 334:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 145              		.loc 1 334 0
 146 000a 11F07F4F 		tst	r1, #-16777216
 147 000e 11D0     		beq	.L12
 148              	.LBB31:
 149              	.LBB32:
 150              		.file 2 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 17


  42:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 18


  99:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 19


 156:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 20


 213:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 238:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 151              		.loc 2 244 0
 152              		.syntax unified
 153              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 154 0010 4FF01003 			mov r3, #16												
 155 0014 83F31188 		msr basepri, r3											
 156 0018 BFF36F8F 		isb														
 157 001c BFF34F8F 		dsb														
 158              	
 159              	@ 0 "" 2
 160              	.LVL13:
 161              		.thumb
 162              		.syntax unified
 163              	.L13:
 164 0020 FEE7     		b	.L13
 165              	.LVL14:
 166              	.L31:
 167              	.LBE32:
 168              	.LBE31:
 169              	.LBB33:
 170              	.LBB34:
 171              		.syntax unified
 172              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 173 0022 4FF01003 			mov r3, #16												
 174 0026 83F31188 		msr basepri, r3											
 175 002a BFF36F8F 		isb														
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 21


 176 002e BFF34F8F 		dsb														
 177              	
 178              	@ 0 "" 2
 179              	.LVL15:
 180              		.thumb
 181              		.syntax unified
 182              	.L11:
 183 0032 FEE7     		b	.L11
 184              	.LVL16:
 185              	.L12:
 186              	.LBE34:
 187              	.LBE33:
 335:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 188              		.loc 1 335 0
 189 0034 41B9     		cbnz	r1, .L14
 190              	.LBB35:
 191              	.LBB36:
 192              		.loc 2 244 0
 193              		.syntax unified
 194              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 195 0036 4FF01003 			mov r3, #16												
 196 003a 83F31188 		msr basepri, r3											
 197 003e BFF36F8F 		isb														
 198 0042 BFF34F8F 		dsb														
 199              	
 200              	@ 0 "" 2
 201              	.LVL17:
 202              		.thumb
 203              		.syntax unified
 204              	.L15:
 205 0046 FEE7     		b	.L15
 206              	.LVL18:
 207              	.L14:
 208 0048 9946     		mov	r9, r3
 209 004a 9046     		mov	r8, r2
 210 004c 0D46     		mov	r5, r1
 211              	.LBE36:
 212              	.LBE35:
 338:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 213              		.loc 1 338 0
 214 004e FFF7FEFF 		bl	xTaskGetSchedulerState
 215              	.LVL19:
 216 0052 48B9     		cbnz	r0, .L16
 338:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 217              		.loc 1 338 0 is_stmt 0 discriminator 1
 218 0054 47B1     		cbz	r7, .L16
 219              	.LBB37:
 220              	.LBB38:
 221              		.loc 2 244 0 is_stmt 1
 222              		.syntax unified
 223              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 224 0056 4FF01003 			mov r3, #16												
 225 005a 83F31188 		msr basepri, r3											
 226 005e BFF36F8F 		isb														
 227 0062 BFF34F8F 		dsb														
 228              	
 229              	@ 0 "" 2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 22


 230              	.LVL20:
 231              		.thumb
 232              		.syntax unified
 233              	.L17:
 234 0066 FEE7     		b	.L17
 235              	.L16:
 236              	.LBE38:
 237              	.LBE37:
 342:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 238              		.loc 1 342 0
 239 0068 FFF7FEFF 		bl	vTaskSuspendAll
 240              	.LVL21:
 241              	.LBB39:
 344:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 242              		.loc 1 344 0
 243 006c 3468     		ldr	r4, [r6]
 244              	.LVL22:
 347:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 245              		.loc 1 347 0
 246 006e 4A46     		mov	r2, r9
 247 0070 2946     		mov	r1, r5
 248 0072 2046     		mov	r0, r4
 249 0074 FFF7FEFF 		bl	_ZL20prvTestWaitConditionmml
 250              	.LVL23:
 349:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 251              		.loc 1 349 0
 252 0078 80B9     		cbnz	r0, .L18
 366:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 253              		.loc 1 366 0
 254 007a B7B1     		cbz	r7, .L20
 378:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 255              		.loc 1 378 0
 256 007c B8F1000F 		cmp	r8, #0
 257 0080 3BD1     		bne	.L28
 258              	.LBE39:
 327:../Middlewares/FreeRTOS//Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 259              		.loc 1 327 0
 260 0082 0021     		movs	r1, #0
 261              	.L21:
 262              	.LVL24:
 263              	.LBB40:
 387:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 264              		.loc 1 387 0
 265 0084 B9F1000F 		cmp	r9, #0
 266 0088 01D0     		beq	.L22
 389:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 267              		.loc 1 389 0
 268 008a 41F08061 		orr	r1, r1, #67108864
 269              	.LVL25:
 270              	.L22:
 399:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 271              		.loc 1 399 0
 272 008e 3A46     		mov	r2, r7
 273 0090 2943     		orrs	r1, r1, r5
 274              	.LVL26:
 275 0092 301D     		adds	r0, r6, #4
 276              	.LVL27:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 23


 277 0094 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 278              	.LVL28:
 404:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 279              		.loc 1 404 0
 280 0098 0024     		movs	r4, #0
 281              	.LVL29:
 282 009a 06E0     		b	.L20
 283              	.LVL30:
 284              	.L18:
 357:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 285              		.loc 1 357 0
 286 009c B8F1000F 		cmp	r8, #0
 287 00a0 2ED0     		beq	.L27
 359:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 288              		.loc 1 359 0
 289 00a2 24EA0503 		bic	r3, r4, r5
 290 00a6 3360     		str	r3, [r6]
 354:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 291              		.loc 1 354 0
 292 00a8 0027     		movs	r7, #0
 293              	.LVL31:
 294              	.L20:
 295              	.LBE40:
 409:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 296              		.loc 1 409 0
 297 00aa FFF7FEFF 		bl	xTaskResumeAll
 298              	.LVL32:
 411:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 299              		.loc 1 411 0
 300 00ae 0FB3     		cbz	r7, .L9
 413:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 301              		.loc 1 413 0
 302 00b0 38B9     		cbnz	r0, .L24
 415:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 303              		.loc 1 415 0
 304 00b2 144B     		ldr	r3, .L32
 305 00b4 4FF08052 		mov	r2, #268435456
 306 00b8 1A60     		str	r2, [r3]
 307              		.syntax unified
 308              	@ 415 "../Middlewares/FreeRTOS//Source/event_groups.c" 1
 309 00ba BFF34F8F 		dsb
 310              	@ 0 "" 2
 311              	@ 415 "../Middlewares/FreeRTOS//Source/event_groups.c" 1
 312 00be BFF36F8F 		isb
 313              	@ 0 "" 2
 314              		.thumb
 315              		.syntax unified
 316              	.L24:
 426:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 317              		.loc 1 426 0
 318 00c2 FFF7FEFF 		bl	uxTaskResetEventItemValue
 319              	.LVL33:
 320 00c6 0446     		mov	r4, r0
 321              	.LVL34:
 428:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 322              		.loc 1 428 0
 323 00c8 10F0007F 		tst	r0, #33554432
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 24


 324 00cc 10D1     		bne	.L25
 430:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 325              		.loc 1 430 0
 326 00ce FFF7FEFF 		bl	vPortEnterCritical
 327              	.LVL35:
 433:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 328              		.loc 1 433 0
 329 00d2 3468     		ldr	r4, [r6]
 330              	.LVL36:
 437:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 331              		.loc 1 437 0
 332 00d4 4A46     		mov	r2, r9
 333 00d6 2946     		mov	r1, r5
 334 00d8 2046     		mov	r0, r4
 335 00da FFF7FEFF 		bl	_ZL20prvTestWaitConditionmml
 336              	.LVL37:
 337 00de 28B1     		cbz	r0, .L26
 439:../Middlewares/FreeRTOS//Source/event_groups.c **** 					{
 338              		.loc 1 439 0
 339 00e0 B8F1000F 		cmp	r8, #0
 340 00e4 02D0     		beq	.L26
 441:../Middlewares/FreeRTOS//Source/event_groups.c **** 					}
 341              		.loc 1 441 0
 342 00e6 24EA0505 		bic	r5, r4, r5
 343              	.LVL38:
 344 00ea 3560     		str	r5, [r6]
 345              	.L26:
 453:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 346              		.loc 1 453 0
 347 00ec FFF7FEFF 		bl	vPortExitCritical
 348              	.LVL39:
 349              	.L25:
 464:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 350              		.loc 1 464 0
 351 00f0 24F07F44 		bic	r4, r4, #-16777216
 352              	.LVL40:
 353              	.L9:
 469:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 354              		.loc 1 469 0
 355 00f4 2046     		mov	r0, r4
 356 00f6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 357              	.LVL41:
 358              	.L28:
 359              	.LBB41:
 380:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 360              		.loc 1 380 0
 361 00fa 4FF08071 		mov	r1, #16777216
 362 00fe C1E7     		b	.L21
 363              	.LVL42:
 364              	.L27:
 354:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 365              		.loc 1 354 0
 366 0100 0027     		movs	r7, #0
 367 0102 D2E7     		b	.L20
 368              	.L33:
 369              		.align	2
 370              	.L32:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 25


 371 0104 04ED00E0 		.word	-536810236
 372              	.LBE41:
 373              		.cfi_endproc
 374              	.LFE137:
 375              		.fnend
 377              		.section	.text.xEventGroupClearBits,"ax",%progbits
 378              		.align	1
 379              		.global	xEventGroupClearBits
 380              		.syntax unified
 381              		.thumb
 382              		.thumb_func
 383              		.fpu fpv4-sp-d16
 385              	xEventGroupClearBits:
 386              		.fnstart
 387              	.LFB138:
 473:../Middlewares/FreeRTOS//Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 388              		.loc 1 473 0
 389              		.cfi_startproc
 390              		@ args = 0, pretend = 0, frame = 0
 391              		@ frame_needed = 0, uses_anonymous_args = 0
 392              	.LVL43:
 479:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 393              		.loc 1 479 0
 394 0000 40B9     		cbnz	r0, .L35
 395              	.LBB42:
 396              	.LBB43:
 397              		.loc 2 244 0
 398              		.syntax unified
 399              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 400 0002 4FF01003 			mov r3, #16												
 401 0006 83F31188 		msr basepri, r3											
 402 000a BFF36F8F 		isb														
 403 000e BFF34F8F 		dsb														
 404              	
 405              	@ 0 "" 2
 406              	.LVL44:
 407              		.thumb
 408              		.syntax unified
 409              	.L36:
 410 0012 FEE7     		b	.L36
 411              	.L35:
 412              	.LBE43:
 413              	.LBE42:
 473:../Middlewares/FreeRTOS//Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 414              		.loc 1 473 0
 415 0014 70B5     		push	{r4, r5, r6, lr}
 416              		.save {r4, r5, r6, lr}
 417              	.LCFI2:
 418              		.cfi_def_cfa_offset 16
 419              		.cfi_offset 4, -16
 420              		.cfi_offset 5, -12
 421              		.cfi_offset 6, -8
 422              		.cfi_offset 14, -4
 423 0016 0546     		mov	r5, r0
 480:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 424              		.loc 1 480 0
 425 0018 11F07F4F 		tst	r1, #-16777216
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 26


 426 001c 08D0     		beq	.L37
 427              	.LBB44:
 428              	.LBB45:
 429              		.loc 2 244 0
 430              		.syntax unified
 431              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 432 001e 4FF01003 			mov r3, #16												
 433 0022 83F31188 		msr basepri, r3											
 434 0026 BFF36F8F 		isb														
 435 002a BFF34F8F 		dsb														
 436              	
 437              	@ 0 "" 2
 438              	.LVL45:
 439              		.thumb
 440              		.syntax unified
 441              	.L38:
 442 002e FEE7     		b	.L38
 443              	.L37:
 444 0030 0C46     		mov	r4, r1
 445              	.LBE45:
 446              	.LBE44:
 482:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 447              		.loc 1 482 0
 448 0032 FFF7FEFF 		bl	vPortEnterCritical
 449              	.LVL46:
 488:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 450              		.loc 1 488 0
 451 0036 2E68     		ldr	r6, [r5]
 452              	.LVL47:
 491:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 453              		.loc 1 491 0
 454 0038 26EA0404 		bic	r4, r6, r4
 455              	.LVL48:
 456 003c 2C60     		str	r4, [r5]
 493:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 457              		.loc 1 493 0
 458 003e FFF7FEFF 		bl	vPortExitCritical
 459              	.LVL49:
 496:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 460              		.loc 1 496 0
 461 0042 3046     		mov	r0, r6
 462 0044 70BD     		pop	{r4, r5, r6, pc}
 463              		.cfi_endproc
 464              	.LFE138:
 465              		.fnend
 467              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 468              		.align	1
 469              		.global	xEventGroupGetBitsFromISR
 470              		.syntax unified
 471              		.thumb
 472              		.thumb_func
 473              		.fpu fpv4-sp-d16
 475              	xEventGroupGetBitsFromISR:
 476              		.fnstart
 477              	.LFB139:
 515:../Middlewares/FreeRTOS//Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 478              		.loc 1 515 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 27


 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 0
 481              		@ frame_needed = 0, uses_anonymous_args = 0
 482              		@ link register save eliminated.
 483              	.LVL50:
 484              	.LBB46:
 485              	.LBB47:
 245:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 254:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 486              		.loc 2 261 0
 487              		.syntax unified
 488              	@ 261 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 489 0000 EFF31183 			mrs r3, basepri											
 490 0004 4FF01002 		mov r2, #16												
 491 0008 82F31188 		msr basepri, r2											
 492 000c BFF36F8F 		isb														
 493 0010 BFF34F8F 		dsb														
 494              	
 495              	@ 0 "" 2
 496              		.thumb
 497              		.syntax unified
 498              	.LBE47:
 499              	.LBE46:
 522:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 500              		.loc 1 522 0
 501 0014 0068     		ldr	r0, [r0]
 502              	.LVL51:
 503              	.LBB48:
 504              	.LBB49:
 262:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 266:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 272:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 273:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
 274:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 28


 505              		.loc 2 274 0
 506              		.syntax unified
 507              	@ 274 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 508 0016 83F31188 			msr basepri, r3	
 509              	@ 0 "" 2
 510              		.thumb
 511              		.syntax unified
 512              	.LBE49:
 513              	.LBE48:
 527:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 514              		.loc 1 527 0
 515 001a 7047     		bx	lr
 516              		.cfi_endproc
 517              	.LFE139:
 518              		.cantunwind
 519              		.fnend
 521              		.section	.text.xEventGroupSetBits,"ax",%progbits
 522              		.align	1
 523              		.global	xEventGroupSetBits
 524              		.syntax unified
 525              		.thumb
 526              		.thumb_func
 527              		.fpu fpv4-sp-d16
 529              	xEventGroupSetBits:
 530              		.fnstart
 531              	.LFB140:
 531:../Middlewares/FreeRTOS//Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 532              		.loc 1 531 0
 533              		.cfi_startproc
 534              		@ args = 0, pretend = 0, frame = 0
 535              		@ frame_needed = 0, uses_anonymous_args = 0
 536              	.LVL52:
 537 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 538              		.save {r3, r4, r5, r6, r7, lr}
 539              	.LCFI3:
 540              		.cfi_def_cfa_offset 24
 541              		.cfi_offset 3, -24
 542              		.cfi_offset 4, -20
 543              		.cfi_offset 5, -16
 544              		.cfi_offset 6, -12
 545              		.cfi_offset 7, -8
 546              		.cfi_offset 14, -4
 547              	.LVL53:
 541:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 548              		.loc 1 541 0
 549 0002 40B9     		cbnz	r0, .L43
 550              	.LBB50:
 551              	.LBB51:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 552              		.loc 2 244 0
 553              		.syntax unified
 554              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 555 0004 4FF01003 			mov r3, #16												
 556 0008 83F31188 		msr basepri, r3											
 557 000c BFF36F8F 		isb														
 558 0010 BFF34F8F 		dsb														
 559              	
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 29


 560              	@ 0 "" 2
 561              	.LVL54:
 562              		.thumb
 563              		.syntax unified
 564              	.L44:
 565 0014 FEE7     		b	.L44
 566              	.L43:
 567 0016 0446     		mov	r4, r0
 568              	.LBE51:
 569              	.LBE50:
 542:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 570              		.loc 1 542 0
 571 0018 11F07F4F 		tst	r1, #-16777216
 572 001c 08D0     		beq	.L45
 573              	.LBB52:
 574              	.LBB53:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 575              		.loc 2 244 0
 576              		.syntax unified
 577              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 578 001e 4FF01003 			mov r3, #16												
 579 0022 83F31188 		msr basepri, r3											
 580 0026 BFF36F8F 		isb														
 581 002a BFF34F8F 		dsb														
 582              	
 583              	@ 0 "" 2
 584              	.LVL55:
 585              		.thumb
 586              		.syntax unified
 587              	.L46:
 588 002e FEE7     		b	.L46
 589              	.L45:
 590 0030 0D46     		mov	r5, r1
 591              	.LVL56:
 592              	.LBE53:
 593              	.LBE52:
 545:../Middlewares/FreeRTOS//Source/event_groups.c **** 	vTaskSuspendAll();
 594              		.loc 1 545 0
 595 0032 00F10C06 		add	r6, r0, #12
 596              	.LVL57:
 546:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 597              		.loc 1 546 0
 598 0036 FFF7FEFF 		bl	vTaskSuspendAll
 599              	.LVL58:
 550:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 600              		.loc 1 550 0
 601 003a 2069     		ldr	r0, [r4, #16]
 602              	.LVL59:
 553:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 603              		.loc 1 553 0
 604 003c 2368     		ldr	r3, [r4]
 605 003e 2B43     		orrs	r3, r3, r5
 606 0040 2360     		str	r3, [r4]
 535:../Middlewares/FreeRTOS//Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 607              		.loc 1 535 0
 608 0042 0025     		movs	r5, #0
 609              	.LVL60:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 30


 610 0044 04E0     		b	.L47
 611              	.LVL61:
 612              	.L49:
 578:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 613              		.loc 1 578 0
 614 0046 2168     		ldr	r1, [r4]
 615 0048 33EA0101 		bics	r1, r3, r1
 616 004c 0CD0     		beq	.L50
 617              	.LVL62:
 618              	.L51:
 531:../Middlewares/FreeRTOS//Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 619              		.loc 1 531 0
 620 004e 3846     		mov	r0, r7
 621              	.LVL63:
 622              	.L47:
 556:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 623              		.loc 1 556 0
 624 0050 8642     		cmp	r6, r0
 625 0052 13D0     		beq	.L48
 558:../Middlewares/FreeRTOS//Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 626              		.loc 1 558 0
 627 0054 4768     		ldr	r7, [r0, #4]
 628              	.LVL64:
 559:../Middlewares/FreeRTOS//Source/event_groups.c **** 			xMatchFound = pdFALSE;
 629              		.loc 1 559 0
 630 0056 0268     		ldr	r2, [r0]
 631              	.LVL65:
 564:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 632              		.loc 1 564 0
 633 0058 22F07F43 		bic	r3, r2, #-16777216
 634              	.LVL66:
 566:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 635              		.loc 1 566 0
 636 005c 12F0806F 		tst	r2, #67108864
 637 0060 F1D1     		bne	.L49
 569:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 638              		.loc 1 569 0
 639 0062 2168     		ldr	r1, [r4]
 640 0064 1942     		tst	r1, r3
 641 0066 F2D0     		beq	.L51
 642              	.L50:
 591:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 643              		.loc 1 591 0
 644 0068 12F0807F 		tst	r2, #16777216
 645 006c 00D0     		beq	.L52
 593:../Middlewares/FreeRTOS//Source/event_groups.c **** 				}
 646              		.loc 1 593 0
 647 006e 1D43     		orrs	r5, r5, r3
 648              	.LVL67:
 649              	.L52:
 605:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 650              		.loc 1 605 0
 651 0070 2168     		ldr	r1, [r4]
 652 0072 41F00071 		orr	r1, r1, #33554432
 653 0076 FFF7FEFF 		bl	xTaskRemoveFromUnorderedEventList
 654              	.LVL68:
 655 007a E8E7     		b	.L51
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 31


 656              	.LVL69:
 657              	.L48:
 616:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 658              		.loc 1 616 0
 659 007c 2368     		ldr	r3, [r4]
 660 007e 23EA0503 		bic	r3, r3, r5
 661 0082 2360     		str	r3, [r4]
 618:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 662              		.loc 1 618 0
 663 0084 FFF7FEFF 		bl	xTaskResumeAll
 664              	.LVL70:
 621:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 665              		.loc 1 621 0
 666 0088 2068     		ldr	r0, [r4]
 667 008a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 668              		.cfi_endproc
 669              	.LFE140:
 670              		.fnend
 672              		.section	.text.xEventGroupSync,"ax",%progbits
 673              		.align	1
 674              		.global	xEventGroupSync
 675              		.syntax unified
 676              		.thumb
 677              		.thumb_func
 678              		.fpu fpv4-sp-d16
 680              	xEventGroupSync:
 681              		.fnstart
 682              	.LFB136:
 209:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 683              		.loc 1 209 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 687              	.LVL71:
 215:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 688              		.loc 1 215 0
 689 0000 12F07F4F 		tst	r2, #-16777216
 690 0004 08D0     		beq	.L55
 691              	.LBB54:
 692              	.LBB55:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 693              		.loc 2 244 0
 694              		.syntax unified
 695              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 696 0006 4FF01003 			mov r3, #16												
 697 000a 83F31188 		msr basepri, r3											
 698 000e BFF36F8F 		isb														
 699 0012 BFF34F8F 		dsb														
 700              	
 701              	@ 0 "" 2
 702              	.LVL72:
 703              		.thumb
 704              		.syntax unified
 705              	.L56:
 706 0016 FEE7     		b	.L56
 707              	.LVL73:
 708              	.L55:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 32


 709              	.LBE55:
 710              	.LBE54:
 209:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 711              		.loc 1 209 0
 712 0018 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 713              		.save {r4, r5, r6, r7, r8, lr}
 714              	.LCFI4:
 715              		.cfi_def_cfa_offset 24
 716              		.cfi_offset 4, -24
 717              		.cfi_offset 5, -20
 718              		.cfi_offset 6, -16
 719              		.cfi_offset 7, -12
 720              		.cfi_offset 8, -8
 721              		.cfi_offset 14, -4
 722 001c 0646     		mov	r6, r0
 723 001e 8846     		mov	r8, r1
 724 0020 1546     		mov	r5, r2
 725 0022 1F46     		mov	r7, r3
 216:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 726              		.loc 1 216 0
 727 0024 42B9     		cbnz	r2, .L57
 728              	.LBB56:
 729              	.LBB57:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 730              		.loc 2 244 0
 731              		.syntax unified
 732              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 733 0026 4FF01003 			mov r3, #16												
 734 002a 83F31188 		msr basepri, r3											
 735 002e BFF36F8F 		isb														
 736 0032 BFF34F8F 		dsb														
 737              	
 738              	@ 0 "" 2
 739              	.LVL74:
 740              		.thumb
 741              		.syntax unified
 742              	.L58:
 743 0036 FEE7     		b	.L58
 744              	.LVL75:
 745              	.L57:
 746              	.LBE57:
 747              	.LBE56:
 219:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 748              		.loc 1 219 0
 749 0038 FFF7FEFF 		bl	xTaskGetSchedulerState
 750              	.LVL76:
 751 003c 48B9     		cbnz	r0, .L59
 219:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 752              		.loc 1 219 0 is_stmt 0 discriminator 1
 753 003e 47B1     		cbz	r7, .L59
 754              	.LBB58:
 755              	.LBB59:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 756              		.loc 2 244 0 is_stmt 1
 757              		.syntax unified
 758              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 759 0040 4FF01003 			mov r3, #16												
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 33


 760 0044 83F31188 		msr basepri, r3											
 761 0048 BFF36F8F 		isb														
 762 004c BFF34F8F 		dsb														
 763              	
 764              	@ 0 "" 2
 765              	.LVL77:
 766              		.thumb
 767              		.syntax unified
 768              	.L60:
 769 0050 FEE7     		b	.L60
 770              	.L59:
 771              	.LBE59:
 772              	.LBE58:
 223:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 773              		.loc 1 223 0
 774 0052 FFF7FEFF 		bl	vTaskSuspendAll
 775              	.LVL78:
 225:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 776              		.loc 1 225 0
 777 0056 3468     		ldr	r4, [r6]
 778              	.LVL79:
 227:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 779              		.loc 1 227 0
 780 0058 4146     		mov	r1, r8
 781 005a 3046     		mov	r0, r6
 782 005c FFF7FEFF 		bl	xEventGroupSetBits
 783              	.LVL80:
 229:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 784              		.loc 1 229 0
 785 0060 44EA0804 		orr	r4, r4, r8
 786              	.LVL81:
 787 0064 35EA0403 		bics	r3, r5, r4
 788 0068 26D1     		bne	.L69
 789              	.LVL82:
 236:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 790              		.loc 1 236 0
 791 006a 3368     		ldr	r3, [r6]
 792 006c 23EA0503 		bic	r3, r3, r5
 793 0070 3360     		str	r3, [r6]
 794              	.LVL83:
 238:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 795              		.loc 1 238 0
 796 0072 0027     		movs	r7, #0
 797              	.LVL84:
 798              	.L63:
 265:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 799              		.loc 1 265 0
 800 0074 FFF7FEFF 		bl	xTaskResumeAll
 801              	.LVL85:
 267:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 802              		.loc 1 267 0
 803 0078 DFB1     		cbz	r7, .L54
 269:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 804              		.loc 1 269 0
 805 007a 38B9     		cbnz	r0, .L66
 271:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 806              		.loc 1 271 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 34


 807 007c 144B     		ldr	r3, .L72
 808 007e 4FF08052 		mov	r2, #268435456
 809 0082 1A60     		str	r2, [r3]
 810              		.syntax unified
 811              	@ 271 "../Middlewares/FreeRTOS//Source/event_groups.c" 1
 812 0084 BFF34F8F 		dsb
 813              	@ 0 "" 2
 814              	@ 271 "../Middlewares/FreeRTOS//Source/event_groups.c" 1
 815 0088 BFF36F8F 		isb
 816              	@ 0 "" 2
 817              		.thumb
 818              		.syntax unified
 819              	.L66:
 282:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 820              		.loc 1 282 0
 821 008c FFF7FEFF 		bl	uxTaskResetEventItemValue
 822              	.LVL86:
 823 0090 0446     		mov	r4, r0
 824              	.LVL87:
 284:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 825              		.loc 1 284 0
 826 0092 10F0007F 		tst	r0, #33554432
 827 0096 0AD1     		bne	.L67
 287:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 828              		.loc 1 287 0
 829 0098 FFF7FEFF 		bl	vPortEnterCritical
 830              	.LVL88:
 289:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 831              		.loc 1 289 0
 832 009c 3468     		ldr	r4, [r6]
 833              	.LVL89:
 295:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 834              		.loc 1 295 0
 835 009e 35EA0403 		bics	r3, r5, r4
 836 00a2 02D1     		bne	.L68
 297:../Middlewares/FreeRTOS//Source/event_groups.c **** 				}
 837              		.loc 1 297 0
 838 00a4 24EA0505 		bic	r5, r4, r5
 839              	.LVL90:
 840 00a8 3560     		str	r5, [r6]
 841              	.L68:
 304:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 842              		.loc 1 304 0
 843 00aa FFF7FEFF 		bl	vPortExitCritical
 844              	.LVL91:
 845              	.L67:
 315:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 846              		.loc 1 315 0
 847 00ae 24F07F44 		bic	r4, r4, #-16777216
 848              	.LVL92:
 849              	.L54:
 321:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 850              		.loc 1 321 0
 851 00b2 2046     		mov	r0, r4
 852 00b4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 853              	.LVL93:
 854              	.L69:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 35


 242:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 855              		.loc 1 242 0
 856 00b8 3FB1     		cbz	r7, .L64
 249:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 857              		.loc 1 249 0
 858 00ba 3A46     		mov	r2, r7
 859 00bc 45F0A061 		orr	r1, r5, #83886080
 860 00c0 301D     		adds	r0, r6, #4
 861 00c2 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 862              	.LVL94:
 255:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 863              		.loc 1 255 0
 864 00c6 0024     		movs	r4, #0
 865 00c8 D4E7     		b	.L63
 866              	.LVL95:
 867              	.L64:
 261:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 868              		.loc 1 261 0
 869 00ca 3468     		ldr	r4, [r6]
 870              	.LVL96:
 871 00cc D2E7     		b	.L63
 872              	.L73:
 873 00ce 00BF     		.align	2
 874              	.L72:
 875 00d0 04ED00E0 		.word	-536810236
 876              		.cfi_endproc
 877              	.LFE136:
 878              		.fnend
 880              		.section	.text.vEventGroupDelete,"ax",%progbits
 881              		.align	1
 882              		.global	vEventGroupDelete
 883              		.syntax unified
 884              		.thumb
 885              		.thumb_func
 886              		.fpu fpv4-sp-d16
 888              	vEventGroupDelete:
 889              		.fnstart
 890              	.LFB141:
 625:../Middlewares/FreeRTOS//Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 891              		.loc 1 625 0
 892              		.cfi_startproc
 893              		@ args = 0, pretend = 0, frame = 0
 894              		@ frame_needed = 0, uses_anonymous_args = 0
 895              	.LVL97:
 896 0000 10B5     		push	{r4, lr}
 897              		.save {r4, lr}
 898              	.LCFI5:
 899              		.cfi_def_cfa_offset 8
 900              		.cfi_offset 4, -8
 901              		.cfi_offset 14, -4
 902 0002 0446     		mov	r4, r0
 903              	.LVL98:
 629:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 904              		.loc 1 629 0
 905 0004 FFF7FEFF 		bl	vTaskSuspendAll
 906              	.LVL99:
 907              	.L78:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 36


 633:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 908              		.loc 1 633 0
 909 0008 6368     		ldr	r3, [r4, #4]
 910 000a 93B1     		cbz	r3, .L75
 637:../Middlewares/FreeRTOS//Source/event_groups.c **** 			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 911              		.loc 1 637 0
 912 000c 2069     		ldr	r0, [r4, #16]
 913 000e 04F10C03 		add	r3, r4, #12
 914 0012 9842     		cmp	r0, r3
 915 0014 04D0     		beq	.L80
 638:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 916              		.loc 1 638 0
 917 0016 4FF00071 		mov	r1, #33554432
 918 001a FFF7FEFF 		bl	xTaskRemoveFromUnorderedEventList
 919              	.LVL100:
 920 001e F3E7     		b	.L78
 921              	.L80:
 922              	.LBB60:
 923              	.LBB61:
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 924              		.loc 2 244 0
 925              		.syntax unified
 926              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 927 0020 4FF01003 			mov r3, #16												
 928 0024 83F31188 		msr basepri, r3											
 929 0028 BFF36F8F 		isb														
 930 002c BFF34F8F 		dsb														
 931              	
 932              	@ 0 "" 2
 933              	.LVL101:
 934              		.thumb
 935              		.syntax unified
 936              	.L77:
 937 0030 FEE7     		b	.L77
 938              	.L75:
 939              	.LBE61:
 940              	.LBE60:
 645:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 941              		.loc 1 645 0
 942 0032 2046     		mov	r0, r4
 943 0034 FFF7FEFF 		bl	vPortFree
 944              	.LVL102:
 662:../Middlewares/FreeRTOS//Source/event_groups.c **** }
 945              		.loc 1 662 0
 946 0038 FFF7FEFF 		bl	xTaskResumeAll
 947              	.LVL103:
 663:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 948              		.loc 1 663 0
 949 003c 10BD     		pop	{r4, pc}
 950              		.cfi_endproc
 951              	.LFE141:
 952              		.fnend
 954              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 955              		.align	1
 956              		.global	vEventGroupSetBitsCallback
 957              		.syntax unified
 958              		.thumb
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 37


 959              		.thumb_func
 960              		.fpu fpv4-sp-d16
 962              	vEventGroupSetBitsCallback:
 963              		.fnstart
 964              	.LFB142:
 669:../Middlewares/FreeRTOS//Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 965              		.loc 1 669 0
 966              		.cfi_startproc
 967              		@ args = 0, pretend = 0, frame = 0
 968              		@ frame_needed = 0, uses_anonymous_args = 0
 969              	.LVL104:
 970 0000 08B5     		push	{r3, lr}
 971              		.save {r3, lr}
 972              	.LCFI6:
 973              		.cfi_def_cfa_offset 8
 974              		.cfi_offset 3, -8
 975              		.cfi_offset 14, -4
 670:../Middlewares/FreeRTOS//Source/event_groups.c **** }
 976              		.loc 1 670 0
 977 0002 FFF7FEFF 		bl	xEventGroupSetBits
 978              	.LVL105:
 671:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 979              		.loc 1 671 0
 980 0006 08BD     		pop	{r3, pc}
 981              		.cfi_endproc
 982              	.LFE142:
 983              		.fnend
 985              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 986              		.align	1
 987              		.global	vEventGroupClearBitsCallback
 988              		.syntax unified
 989              		.thumb
 990              		.thumb_func
 991              		.fpu fpv4-sp-d16
 993              	vEventGroupClearBitsCallback:
 994              		.fnstart
 995              	.LFB143:
 677:../Middlewares/FreeRTOS//Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 996              		.loc 1 677 0
 997              		.cfi_startproc
 998              		@ args = 0, pretend = 0, frame = 0
 999              		@ frame_needed = 0, uses_anonymous_args = 0
 1000              	.LVL106:
 1001 0000 08B5     		push	{r3, lr}
 1002              		.save {r3, lr}
 1003              	.LCFI7:
 1004              		.cfi_def_cfa_offset 8
 1005              		.cfi_offset 3, -8
 1006              		.cfi_offset 14, -4
 678:../Middlewares/FreeRTOS//Source/event_groups.c **** }
 1007              		.loc 1 678 0
 1008 0002 FFF7FEFF 		bl	xEventGroupClearBits
 1009              	.LVL107:
 679:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 1010              		.loc 1 679 0
 1011 0006 08BD     		pop	{r3, pc}
 1012              		.cfi_endproc
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 38


 1013              	.LFE143:
 1014              		.fnend
 1016              		.section	.text.uxEventGroupGetNumber,"ax",%progbits
 1017              		.align	1
 1018              		.global	uxEventGroupGetNumber
 1019              		.syntax unified
 1020              		.thumb
 1021              		.thumb_func
 1022              		.fpu fpv4-sp-d16
 1024              	uxEventGroupGetNumber:
 1025              		.fnstart
 1026              	.LFB145:
 715:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 716:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 717:../Middlewares/FreeRTOS//Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 718:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 719:../Middlewares/FreeRTOS//Source/event_groups.c **** 	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSe
 720:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 721:../Middlewares/FreeRTOS//Source/event_groups.c **** 	BaseType_t xReturn;
 722:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 723:../Middlewares/FreeRTOS//Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
 724:../Middlewares/FreeRTOS//Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( ui
 725:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 726:../Middlewares/FreeRTOS//Source/event_groups.c **** 		return xReturn;
 727:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 728:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 729:../Middlewares/FreeRTOS//Source/event_groups.c **** #endif
 730:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 731:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 732:../Middlewares/FreeRTOS//Source/event_groups.c **** #if (configUSE_TRACE_FACILITY == 1)
 733:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 734:../Middlewares/FreeRTOS//Source/event_groups.c **** 	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
 735:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 1027              		.loc 1 735 0
 1028              		.cfi_startproc
 1029              		@ args = 0, pretend = 0, frame = 0
 1030              		@ frame_needed = 0, uses_anonymous_args = 0
 1031              		@ link register save eliminated.
 1032              	.LVL108:
 736:../Middlewares/FreeRTOS//Source/event_groups.c **** 	UBaseType_t xReturn;
 737:../Middlewares/FreeRTOS//Source/event_groups.c **** 	EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 738:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 739:../Middlewares/FreeRTOS//Source/event_groups.c **** 		if( xEventGroup == NULL )
 1033              		.loc 1 739 0
 1034 0000 08B1     		cbz	r0, .L87
 740:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 741:../Middlewares/FreeRTOS//Source/event_groups.c **** 			xReturn = 0;
 742:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 743:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else
 744:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 745:../Middlewares/FreeRTOS//Source/event_groups.c **** 			xReturn = pxEventBits->uxEventGroupNumber;
 1035              		.loc 1 745 0
 1036 0002 8069     		ldr	r0, [r0, #24]
 1037              	.LVL109:
 1038 0004 7047     		bx	lr
 1039              	.LVL110:
 1040              	.L87:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 39


 741:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 1041              		.loc 1 741 0
 1042 0006 0020     		movs	r0, #0
 1043              	.LVL111:
 746:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 747:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 748:../Middlewares/FreeRTOS//Source/event_groups.c **** 		return xReturn;
 749:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 1044              		.loc 1 749 0
 1045 0008 7047     		bx	lr
 1046              		.cfi_endproc
 1047              	.LFE145:
 1048              		.cantunwind
 1049              		.fnend
 1051              		.text
 1052              	.Letext0:
 1053              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/cstdlib"
 1054              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/arm-none-eab
 1055              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 1056              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 1057              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 1058              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 1059              		.file 9 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 1060              		.file 10 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 1061              		.file 11 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/stdlib.h"
 1062              		.file 12 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 1063              		.file 13 "../Libraries/CMSIS/CM4/CoreSupport/core_cm4.h"
 1064              		.file 14 "../Libraries/CMSIS/CM4/DeviceSupport/system_at32f4xx.h"
 1065              		.file 15 "Inc/FreeRTOSConfig.h"
 1066              		.file 16 "../Middlewares/FreeRTOS//Source/include/list.h"
 1067              		.file 17 "../Middlewares/FreeRTOS//Source/include/event_groups.h"
 1068              		.file 18 "../Middlewares/FreeRTOS//Source/include/task.h"
 1069              		.file 19 "../Middlewares/FreeRTOS//Source/include/portable.h"
 1070              		.file 20 "<built-in>"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s 			page 40


DEFINED SYMBOLS
                            *ABS*:0000000000000000 event_groups.c
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:17     .text._ZL20prvTestWaitConditionmml:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:23     .text._ZL20prvTestWaitConditionmml:0000000000000000 _ZL20prvTestWaitConditionmml
.ARM.exidx.text._ZL20prvTestWaitConditionmml:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:70     .text.xEventGroupCreate:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:77     .text.xEventGroupCreate:0000000000000000 xEventGroupCreate
.ARM.exidx.text.xEventGroupCreate:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:113    .text.xEventGroupWaitBits:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:120    .text.xEventGroupWaitBits:0000000000000000 xEventGroupWaitBits
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:371    .text.xEventGroupWaitBits:0000000000000104 $d
.ARM.exidx.text.xEventGroupWaitBits:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:378    .text.xEventGroupClearBits:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:385    .text.xEventGroupClearBits:0000000000000000 xEventGroupClearBits
.ARM.exidx.text.xEventGroupClearBits:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:468    .text.xEventGroupGetBitsFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:475    .text.xEventGroupGetBitsFromISR:0000000000000000 xEventGroupGetBitsFromISR
.ARM.exidx.text.xEventGroupGetBitsFromISR:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:522    .text.xEventGroupSetBits:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:529    .text.xEventGroupSetBits:0000000000000000 xEventGroupSetBits
.ARM.exidx.text.xEventGroupSetBits:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:673    .text.xEventGroupSync:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:680    .text.xEventGroupSync:0000000000000000 xEventGroupSync
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:875    .text.xEventGroupSync:00000000000000d0 $d
  .ARM.exidx.text.xEventGroupSync:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:881    .text.vEventGroupDelete:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:888    .text.vEventGroupDelete:0000000000000000 vEventGroupDelete
.ARM.exidx.text.vEventGroupDelete:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:955    .text.vEventGroupSetBitsCallback:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:962    .text.vEventGroupSetBitsCallback:0000000000000000 vEventGroupSetBitsCallback
.ARM.extab.text.vEventGroupSetBitsCallback:0000000000000000 $d
.ARM.exidx.text.vEventGroupSetBitsCallback:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:986    .text.vEventGroupClearBitsCallback:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:993    .text.vEventGroupClearBitsCallback:0000000000000000 vEventGroupClearBitsCallback
.ARM.extab.text.vEventGroupClearBitsCallback:0000000000000000 $d
.ARM.exidx.text.vEventGroupClearBitsCallback:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:1017   .text.uxEventGroupGetNumber:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccI5uvGw.s:1024   .text.uxEventGroupGetNumber:0000000000000000 uxEventGroupGetNumber
.ARM.exidx.text.uxEventGroupGetNumber:0000000000000000 $d

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialise
__aeabi_unwind_cpp_pr0
xTaskGetSchedulerState
vTaskSuspendAll
vTaskPlaceOnUnorderedEventList
xTaskResumeAll
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
xTaskRemoveFromUnorderedEventList
vPortFree
__aeabi_unwind_cpp_pr1
