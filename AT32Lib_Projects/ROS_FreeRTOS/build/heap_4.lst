ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"heap_4.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text._ZL11prvHeapInitv,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv4-sp-d16
  23              	_ZL11prvHeapInitv:
  24              		.fnstart
  25              	.LFB140:
  26              		.file 1 "../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c"
   1:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*
   2:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
   5:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
   7:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
   9:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  13:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  20:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  25:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****      *                                                                       *
  32:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****      *    Help yourself get started quickly while simultaneously helping     *
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 2


  33:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****      *                                                                       *
  37:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     ***************************************************************************
  38:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  39:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     defined configASSERT()?
  42:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  43:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  47:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  52:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  56:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  59:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  63:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  67:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** */
  69:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  70:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*
  71:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  * A sample implementation of pvPortMalloc() and vPortFree() that combines
  72:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  * (coalescences) adjacent memory blocks as they are freed, and in so doing
  73:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  * limits memory fragmentation.
  74:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  *
  75:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  * See heap_1.c, heap_2.c and heap_3.c for alternative implementations, and the
  76:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  * memory management pages of http://www.FreeRTOS.org for more information.
  77:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  */
  78:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #include <stdlib.h>
  79:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  80:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  81:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** all the API functions to use the MPU wrappers.  That should only be done when
  82:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** task.h is included from an application file. */
  83:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  84:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  85:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #include "FreeRTOS.h"
  86:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #include "task.h"
  87:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  88:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  89:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 3


  90:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 0 )
  91:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	#error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
  92:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #endif
  93:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  94:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /* Block sizes must not get too small. */
  95:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #define heapMINIMUM_BLOCK_SIZE	( ( size_t ) ( xHeapStructSize << 1 ) )
  96:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  97:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /* Assumes 8bit bytes! */
  98:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #define heapBITS_PER_BYTE		( ( size_t ) 8 )
  99:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 100:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /* Allocate the memory for the heap. */
 101:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #if( configAPPLICATION_ALLOCATED_HEAP == 1 )
 102:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* The application writer has already defined the array used for the RTOS
 103:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	heap - probably so it can be placed in a special segment or address. */
 104:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
 105:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #else
 106:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
 107:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #endif /* configAPPLICATION_ALLOCATED_HEAP */
 108:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 109:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /* Define the linked list structure.  This is used to link free blocks in order
 110:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** of their memory address. */
 111:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** typedef struct A_BLOCK_LINK
 112:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** {
 113:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	struct A_BLOCK_LINK *pxNextFreeBlock;	/*<< The next free block in the list. */
 114:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	size_t xBlockSize;						/*<< The size of the free block. */
 115:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** } BlockLink_t;
 116:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 117:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 118:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 119:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*
 120:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  * Inserts a block of memory that is being freed into the correct position in
 121:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  * the list of free memory blocks.  The block being freed will be merged with
 122:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  * the block in front it and/or the block behind it if the memory blocks are
 123:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  * adjacent to each other.
 124:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  */
 125:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert );
 126:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 127:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*
 128:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  * Called automatically to setup the required heap structures the first time
 129:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  * pvPortMalloc() is called.
 130:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  */
 131:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** static void prvHeapInit( void );
 132:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 133:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 134:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 135:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /* The size of the structure placed at the beginning of each allocated memory
 136:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** block must by correctly byte aligned. */
 137:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** static const size_t xHeapStructSize	= ( sizeof( BlockLink_t ) + ( ( size_t ) ( portBYTE_ALIGNMENT -
 138:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 139:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /* Create a couple of list links to mark the start and end of the list. */
 140:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** static BlockLink_t xStart, *pxEnd = NULL;
 141:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 142:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /* Keeps track of the number of free bytes remaining, but says nothing about
 143:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** fragmentation. */
 144:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** static size_t xFreeBytesRemaining = 0U;
 145:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** static size_t xMinimumEverFreeBytesRemaining = 0U;
 146:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 4


 147:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /* Gets set to the top bit of an size_t type.  When this bit in the xBlockSize
 148:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** member of an BlockLink_t structure is set then the block belongs to the
 149:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** application.  When the bit is free the block is still part of the free heap
 150:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** space. */
 151:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** static size_t xBlockAllocatedBit = 0;
 152:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 153:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 154:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 155:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** void *pvPortMalloc( size_t xWantedSize )
 156:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** {
 157:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
 158:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** void *pvReturn = NULL;
 159:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 160:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	vTaskSuspendAll();
 161:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 162:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		/* If this is the first call to malloc then the heap will require
 163:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		initialisation to setup the list of free blocks. */
 164:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		if( pxEnd == NULL )
 165:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 166:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			prvHeapInit();
 167:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 168:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		else
 169:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 170:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 171:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 172:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 173:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		/* Check the requested block size is not so large that the top bit is
 174:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		set.  The top bit of the block size member of the BlockLink_t structure
 175:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		is used to determine who owns the block - the application or the
 176:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		kernel, so it must be free. */
 177:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 178:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 179:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			/* The wanted size is increased so it can contain a BlockLink_t
 180:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			structure in addition to the requested amount of bytes. */
 181:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			if( xWantedSize > 0 )
 182:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			{
 183:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				xWantedSize += xHeapStructSize;
 184:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 185:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				/* Ensure that blocks are always aligned to the required number
 186:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				of bytes. */
 187:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 188:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 189:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					/* Byte alignment required. */
 190:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 191:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 192:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				}
 193:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				else
 194:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 195:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					mtCOVERAGE_TEST_MARKER();
 196:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				}
 197:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			}
 198:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			else
 199:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			{
 200:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				mtCOVERAGE_TEST_MARKER();
 201:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			}
 202:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 203:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 5


 204:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			{
 205:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				/* Traverse the list from the start	(lowest address) block until
 206:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				one	of adequate size is found. */
 207:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				pxPreviousBlock = &xStart;
 208:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				pxBlock = xStart.pxNextFreeBlock;
 209:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 210:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 211:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					pxPreviousBlock = pxBlock;
 212:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					pxBlock = pxBlock->pxNextFreeBlock;
 213:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				}
 214:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 215:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				/* If the end marker was reached then a block of adequate size
 216:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				was	not found. */
 217:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				if( pxBlock != pxEnd )
 218:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 219:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					/* Return the memory space pointed to - jumping over the
 220:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					BlockLink_t structure at its start. */
 221:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize )
 222:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 223:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					/* This block is being returned for use so must be taken out
 224:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					of the list of free blocks. */
 225:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 226:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 227:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					/* If the block is larger than required it can be split into
 228:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					two. */
 229:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 230:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					{
 231:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						/* This block is to be split into two.  Create a new
 232:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						block following the number of bytes requested. The void
 233:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						cast is used to prevent byte alignment warnings from the
 234:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						compiler. */
 235:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 236:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 237:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 238:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						/* Calculate the sizes of two blocks split from the
 239:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						single block. */
 240:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 241:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						pxBlock->xBlockSize = xWantedSize;
 242:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 243:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						/* Insert the new block into the list of free blocks. */
 244:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						prvInsertBlockIntoFreeList( pxNewBlockLink );
 245:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					}
 246:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					else
 247:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					{
 248:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						mtCOVERAGE_TEST_MARKER();
 249:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					}
 250:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 251:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					xFreeBytesRemaining -= pxBlock->xBlockSize;
 252:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 253:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 254:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					{
 255:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 256:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					}
 257:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					else
 258:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					{
 259:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						mtCOVERAGE_TEST_MARKER();
 260:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 6


 261:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 262:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					/* The block is being returned - it is allocated and owned
 263:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					by the application and has no "next" block. */
 264:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					pxBlock->xBlockSize |= xBlockAllocatedBit;
 265:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					pxBlock->pxNextFreeBlock = NULL;
 266:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				}
 267:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				else
 268:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 269:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					mtCOVERAGE_TEST_MARKER();
 270:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				}
 271:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			}
 272:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			else
 273:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			{
 274:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				mtCOVERAGE_TEST_MARKER();
 275:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			}
 276:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 277:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		else
 278:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 279:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 280:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 281:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 282:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		traceMALLOC( pvReturn, xWantedSize );
 283:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 284:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	( void ) xTaskResumeAll();
 285:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 286:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
 287:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 288:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		if( pvReturn == NULL )
 289:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 290:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			extern void vApplicationMallocFailedHook( void );
 291:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			vApplicationMallocFailedHook();
 292:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 293:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		else
 294:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 295:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 296:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 297:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 298:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	#endif
 299:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 300:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 301:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	return pvReturn;
 302:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** }
 303:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 304:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 305:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** void vPortFree( void *pv )
 306:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** {
 307:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** uint8_t *puc = ( uint8_t * ) pv;
 308:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** BlockLink_t *pxLink;
 309:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 310:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	if( pv != NULL )
 311:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 312:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		/* The memory being freed will have an BlockLink_t structure immediately
 313:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		before it. */
 314:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		puc -= xHeapStructSize;
 315:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 316:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		/* This casting is to keep the compiler from issuing warnings. */
 317:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		pxLink = ( void * ) puc;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 7


 318:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 319:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		/* Check the block is actually allocated. */
 320:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 321:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		configASSERT( pxLink->pxNextFreeBlock == NULL );
 322:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 323:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 324:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 325:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			if( pxLink->pxNextFreeBlock == NULL )
 326:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			{
 327:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				/* The block is being returned to the heap - it is no longer
 328:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				allocated. */
 329:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 330:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 331:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				vTaskSuspendAll();
 332:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 333:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					/* Add this block to the list of free blocks. */
 334:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					xFreeBytesRemaining += pxLink->xBlockSize;
 335:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					traceFREE( pv, pxLink->xBlockSize );
 336:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 337:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				}
 338:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				( void ) xTaskResumeAll();
 339:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			}
 340:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			else
 341:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			{
 342:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				mtCOVERAGE_TEST_MARKER();
 343:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			}
 344:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 345:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		else
 346:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 347:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 348:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 349:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 350:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** }
 351:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 352:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 353:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** size_t xPortGetFreeHeapSize( void )
 354:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** {
 355:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	return xFreeBytesRemaining;
 356:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** }
 357:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 358:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 359:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** size_t xPortGetMinimumEverFreeHeapSize( void )
 360:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** {
 361:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	return xMinimumEverFreeBytesRemaining;
 362:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** }
 363:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 364:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 365:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** void vPortInitialiseBlocks( void )
 366:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** {
 367:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* This just exists to keep the linker quiet. */
 368:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** }
 369:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 370:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 371:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** static void prvHeapInit( void )
 372:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** {
  27              		.loc 1 372 0
  28              		.cfi_startproc
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 8


  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 373:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** BlockLink_t *pxFirstFreeBlock;
 374:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** uint8_t *pucAlignedHeap;
 375:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** size_t uxAddress;
 376:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 377:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 378:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* Ensure the heap starts on a correctly aligned boundary. */
 379:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	uxAddress = ( size_t ) ucHeap;
  33              		.loc 1 379 0
  34 0000 124A     		ldr	r2, .L4
  35              	.LVL1:
 380:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 381:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  36              		.loc 1 381 0
  37 0002 12F0070F 		tst	r2, #7
  38 0006 1ED0     		beq	.L3
 382:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 383:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		uxAddress += ( portBYTE_ALIGNMENT - 1 );
  39              		.loc 1 383 0
  40 0008 D11D     		adds	r1, r2, #7
  41              	.LVL2:
 384:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  42              		.loc 1 384 0
  43 000a 21F00701 		bic	r1, r1, #7
  44              	.LVL3:
 385:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
  45              		.loc 1 385 0
  46 000e C1F5A043 		rsb	r3, r1, #20480
  47 0012 1344     		add	r3, r3, r2
  48              	.LVL4:
 384:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  49              		.loc 1 384 0
  50 0014 0A46     		mov	r2, r1
  51              	.LVL5:
  52              	.L2:
 386:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 387:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 388:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	pucAlignedHeap = ( uint8_t * ) uxAddress;
 389:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 390:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* xStart is used to hold a pointer to the first item in the list of free
 391:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	blocks.  The void cast is used to prevent compiler warnings. */
 392:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
  53              		.loc 1 392 0
  54 0016 0E48     		ldr	r0, .L4+4
  55 0018 0260     		str	r2, [r0]
 393:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	xStart.xBlockSize = ( size_t ) 0;
  56              		.loc 1 393 0
  57 001a 0021     		movs	r1, #0
  58 001c 4160     		str	r1, [r0, #4]
 394:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 395:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* pxEnd is used to mark the end of the list of free blocks and is inserted
 396:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	at the end of the heap space. */
 397:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
  59              		.loc 1 397 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 9


  60 001e 1344     		add	r3, r3, r2
  61              	.LVL6:
 398:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	uxAddress -= xHeapStructSize;
  62              		.loc 1 398 0
  63 0020 083B     		subs	r3, r3, #8
  64              	.LVL7:
 399:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  65              		.loc 1 399 0
  66 0022 23F00703 		bic	r3, r3, #7
  67              	.LVL8:
 400:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	pxEnd = ( void * ) uxAddress;
  68              		.loc 1 400 0
  69 0026 0B48     		ldr	r0, .L4+8
  70 0028 0360     		str	r3, [r0]
 401:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	pxEnd->xBlockSize = 0;
  71              		.loc 1 401 0
  72 002a 5960     		str	r1, [r3, #4]
 402:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	pxEnd->pxNextFreeBlock = NULL;
  73              		.loc 1 402 0
  74 002c 1960     		str	r1, [r3]
  75              	.LVL9:
 403:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 404:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* To start with there is a single free block that is sized to take up the
 405:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	entire heap space, minus the space taken by pxEnd. */
 406:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 407:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
  76              		.loc 1 407 0
  77 002e 991A     		subs	r1, r3, r2
  78 0030 5160     		str	r1, [r2, #4]
 408:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  79              		.loc 1 408 0
  80 0032 1360     		str	r3, [r2]
 409:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 410:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* Only one block exists - and it covers the entire usable heap space. */
 411:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
  81              		.loc 1 411 0
  82 0034 084B     		ldr	r3, .L4+12
  83              	.LVL10:
  84 0036 1960     		str	r1, [r3]
 412:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
  85              		.loc 1 412 0
  86 0038 084B     		ldr	r3, .L4+16
  87 003a 1960     		str	r1, [r3]
 413:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 414:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* Work out the position of the top bit in a size_t variable. */
 415:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
  88              		.loc 1 415 0
  89 003c 084B     		ldr	r3, .L4+20
  90 003e 4FF00042 		mov	r2, #-2147483648
  91              	.LVL11:
  92 0042 1A60     		str	r2, [r3]
 416:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** }
  93              		.loc 1 416 0
  94 0044 7047     		bx	lr
  95              	.LVL12:
  96              	.L3:
 376:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 10


  97              		.loc 1 376 0
  98 0046 4FF4A043 		mov	r3, #20480
  99 004a E4E7     		b	.L2
 100              	.L5:
 101              		.align	2
 102              	.L4:
 103 004c 00000000 		.word	_ZL6ucHeap
 104 0050 00000000 		.word	.LANCHOR0
 105 0054 00000000 		.word	.LANCHOR1
 106 0058 00000000 		.word	.LANCHOR2
 107 005c 00000000 		.word	.LANCHOR3
 108 0060 00000000 		.word	.LANCHOR4
 109              		.cfi_endproc
 110              	.LFE140:
 111              		.cantunwind
 112              		.fnend
 114              		.section	.text._ZL26prvInsertBlockIntoFreeListP12A_BLOCK_LINK,"ax",%progbits
 115              		.align	1
 116              		.syntax unified
 117              		.thumb
 118              		.thumb_func
 119              		.fpu fpv4-sp-d16
 121              	_ZL26prvInsertBlockIntoFreeListP12A_BLOCK_LINK:
 122              		.fnstart
 123              	.LFB141:
 417:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 418:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 419:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
 420:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** {
 124              		.loc 1 420 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              		@ link register save eliminated.
 129              	.LVL13:
 130 0000 10B4     		push	{r4}
 131              	.LCFI0:
 132              		.cfi_def_cfa_offset 4
 133              		.cfi_offset 4, -4
 134              	.LVL14:
 421:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** BlockLink_t *pxIterator;
 422:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** uint8_t *puc;
 423:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 424:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* Iterate through the list until a block is found that has a higher address
 425:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	than the block being inserted. */
 426:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator-
 135              		.loc 1 426 0
 136 0002 134B     		ldr	r3, .L15
 137              	.LVL15:
 138              	.L7:
 139              		.loc 1 426 0 is_stmt 0 discriminator 3
 140 0004 1A68     		ldr	r2, [r3]
 141 0006 8242     		cmp	r2, r0
 142 0008 1BD3     		bcc	.L13
 143              	.LVL16:
 427:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 428:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		/* Nothing to do here, just iterate to the right position. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 11


 429:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 430:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 431:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* Do the block being inserted, and the block it is being inserted after
 432:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	make a contiguous block of memory? */
 433:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	puc = ( uint8_t * ) pxIterator;
 434:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 144              		.loc 1 434 0 is_stmt 1
 145 000a 5968     		ldr	r1, [r3, #4]
 146 000c 5C18     		adds	r4, r3, r1
 147 000e 8442     		cmp	r4, r0
 148 0010 03D1     		bne	.L8
 435:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 436:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 149              		.loc 1 436 0
 150 0012 4068     		ldr	r0, [r0, #4]
 151              	.LVL17:
 152 0014 0144     		add	r1, r1, r0
 153 0016 5960     		str	r1, [r3, #4]
 154              	.LVL18:
 437:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		pxBlockToInsert = pxIterator;
 155              		.loc 1 437 0
 156 0018 1846     		mov	r0, r3
 157              	.LVL19:
 158              	.L8:
 438:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 439:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	else
 440:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 441:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		mtCOVERAGE_TEST_MARKER();
 442:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 443:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 444:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* Do the block being inserted, and the block it is being inserted before
 445:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	make a contiguous block of memory? */
 446:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	puc = ( uint8_t * ) pxBlockToInsert;
 447:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 159              		.loc 1 447 0
 160 001a 4168     		ldr	r1, [r0, #4]
 161 001c 4418     		adds	r4, r0, r1
 162 001e A242     		cmp	r2, r4
 163 0020 13D1     		bne	.L9
 448:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 449:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		if( pxIterator->pxNextFreeBlock != pxEnd )
 164              		.loc 1 449 0
 165 0022 0C4C     		ldr	r4, .L15+4
 166 0024 2468     		ldr	r4, [r4]
 167 0026 A242     		cmp	r2, r4
 168 0028 0DD0     		beq	.L10
 450:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 451:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			/* Form one big block from the two blocks. */
 452:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 169              		.loc 1 452 0
 170 002a 5268     		ldr	r2, [r2, #4]
 171 002c 1144     		add	r1, r1, r2
 172 002e 4160     		str	r1, [r0, #4]
 453:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 173              		.loc 1 453 0
 174 0030 1A68     		ldr	r2, [r3]
 175 0032 1268     		ldr	r2, [r2]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 12


 176 0034 0260     		str	r2, [r0]
 177              	.L11:
 454:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 455:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		else
 456:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 457:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 458:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 459:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 460:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	else
 461:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 462:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 463:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 464:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 465:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* If the block being inserted plugged a gab, so was merged with the block
 466:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	before and the block after, then it's pxNextFreeBlock pointer will have
 467:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	already been set, and should not be set here as that would make it point
 468:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	to itself. */
 469:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	if( pxIterator != pxBlockToInsert )
 178              		.loc 1 469 0
 179 0036 9842     		cmp	r0, r3
 180 0038 00D0     		beq	.L6
 470:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 471:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 181              		.loc 1 471 0
 182 003a 1860     		str	r0, [r3]
 183              	.L6:
 472:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 473:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	else
 474:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 475:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		mtCOVERAGE_TEST_MARKER();
 476:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 477:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** }
 184              		.loc 1 477 0
 185 003c 5DF8044B 		ldr	r4, [sp], #4
 186              	.LCFI1:
 187              		.cfi_remember_state
 188              		.cfi_restore 4
 189              		.cfi_def_cfa_offset 0
 190 0040 7047     		bx	lr
 191              	.LVL20:
 192              	.L13:
 193              	.LCFI2:
 194              		.cfi_restore_state
 426:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 195              		.loc 1 426 0
 196 0042 1346     		mov	r3, r2
 197              	.LVL21:
 198 0044 DEE7     		b	.L7
 199              	.LVL22:
 200              	.L10:
 457:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 201              		.loc 1 457 0
 202 0046 0460     		str	r4, [r0]
 203 0048 F5E7     		b	.L11
 204              	.L9:
 462:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 205              		.loc 1 462 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 13


 206 004a 0260     		str	r2, [r0]
 207 004c F3E7     		b	.L11
 208              	.L16:
 209 004e 00BF     		.align	2
 210              	.L15:
 211 0050 00000000 		.word	.LANCHOR0
 212 0054 00000000 		.word	.LANCHOR1
 213              		.cfi_endproc
 214              	.LFE141:
 215              		.cantunwind
 216              		.fnend
 218              		.section	.text.pvPortMalloc,"ax",%progbits
 219              		.align	1
 220              		.global	pvPortMalloc
 221              		.syntax unified
 222              		.thumb
 223              		.thumb_func
 224              		.fpu fpv4-sp-d16
 226              	pvPortMalloc:
 227              		.fnstart
 228              	.LFB135:
 156:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
 229              		.loc 1 156 0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 0
 232              		@ frame_needed = 0, uses_anonymous_args = 0
 233              	.LVL23:
 234 0000 70B5     		push	{r4, r5, r6, lr}
 235              		.save {r4, r5, r6, lr}
 236              	.LCFI3:
 237              		.cfi_def_cfa_offset 16
 238              		.cfi_offset 4, -16
 239              		.cfi_offset 5, -12
 240              		.cfi_offset 6, -8
 241              		.cfi_offset 14, -4
 242 0002 0446     		mov	r4, r0
 243              	.LVL24:
 160:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 244              		.loc 1 160 0
 245 0004 FFF7FEFF 		bl	vTaskSuspendAll
 246              	.LVL25:
 164:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 247              		.loc 1 164 0
 248 0008 3F4B     		ldr	r3, .L41
 249 000a 1B68     		ldr	r3, [r3]
 250 000c A3B1     		cbz	r3, .L37
 251              	.L18:
 177:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 252              		.loc 1 177 0
 253 000e 3F4B     		ldr	r3, .L41+4
 254 0010 1B68     		ldr	r3, [r3]
 255 0012 1C42     		tst	r4, r3
 256 0014 13D0     		beq	.L19
 284:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 257              		.loc 1 284 0
 258 0016 FFF7FEFF 		bl	xTaskResumeAll
 259              	.LVL26:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 14


 158:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 260              		.loc 1 158 0
 261 001a 0026     		movs	r6, #0
 262              	.LVL27:
 263              	.L20:
 264              	.LBB14:
 265              	.LBB15:
 291:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 266              		.loc 1 291 0
 267 001c FFF7FEFF 		bl	_Z28vApplicationMallocFailedHookv
 268              	.LVL28:
 269              	.L32:
 270              	.LBE15:
 271              	.LBE14:
 300:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	return pvReturn;
 272              		.loc 1 300 0
 273 0020 16F0070F 		tst	r6, #7
 274 0024 6ED0     		beq	.L17
 275              	.LBB16:
 276              	.LBB17:
 277              		.file 2 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 15


  37:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 16


  94:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 17


 151:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 18


 208:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 238:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 278              		.loc 2 244 0
 279              		.syntax unified
 280              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 281 0026 4FF01003 			mov r3, #16												
 282 002a 83F31188 		msr basepri, r3											
 283 002e BFF36F8F 		isb														
 284 0032 BFF34F8F 		dsb														
 285              	
 286              	@ 0 "" 2
 287              	.LVL29:
 288              		.thumb
 289              		.syntax unified
 290              	.L34:
 291 0036 FEE7     		b	.L34
 292              	.LVL30:
 293              	.L37:
 294              	.LBE17:
 295              	.LBE16:
 166:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 296              		.loc 1 166 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 19


 297 0038 FFF7FEFF 		bl	_ZL11prvHeapInitv
 298              	.LVL31:
 299 003c E7E7     		b	.L18
 300              	.L19:
 181:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			{
 301              		.loc 1 181 0
 302 003e 94B1     		cbz	r4, .L21
 183:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 303              		.loc 1 183 0
 304 0040 0834     		adds	r4, r4, #8
 305              	.LVL32:
 187:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 306              		.loc 1 187 0
 307 0042 14F0070F 		tst	r4, #7
 308 0046 0ED0     		beq	.L21
 190:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 309              		.loc 1 190 0
 310 0048 24F00704 		bic	r4, r4, #7
 311              	.LVL33:
 312 004c 0834     		adds	r4, r4, #8
 313              	.LVL34:
 191:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				}
 314              		.loc 1 191 0
 315 004e 04F00703 		and	r3, r4, #7
 316 0052 43B1     		cbz	r3, .L21
 317              	.LBB18:
 318              	.LBB19:
 319              		.loc 2 244 0
 320              		.syntax unified
 321              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 322 0054 4FF01003 			mov r3, #16												
 323 0058 83F31188 		msr basepri, r3											
 324 005c BFF36F8F 		isb														
 325 0060 BFF34F8F 		dsb														
 326              	
 327              	@ 0 "" 2
 328              	.LVL35:
 329              		.thumb
 330              		.syntax unified
 331              	.L22:
 332 0064 FEE7     		b	.L22
 333              	.L21:
 334              	.LBE19:
 335              	.LBE18:
 203:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			{
 336              		.loc 1 203 0
 337 0066 34B1     		cbz	r4, .L38
 203:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			{
 338              		.loc 1 203 0 is_stmt 0 discriminator 1
 339 0068 294B     		ldr	r3, .L41+8
 340 006a 1B68     		ldr	r3, [r3]
 341 006c A342     		cmp	r3, r4
 342 006e 06D3     		bcc	.L39
 343              	.LVL36:
 208:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 344              		.loc 1 208 0 is_stmt 1
 345 0070 284B     		ldr	r3, .L41+12
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 20


 346 0072 1D68     		ldr	r5, [r3]
 347              	.LVL37:
 348 0074 09E0     		b	.L26
 349              	.LVL38:
 350              	.L38:
 284:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 351              		.loc 1 284 0
 352 0076 FFF7FEFF 		bl	xTaskResumeAll
 353              	.LVL39:
 158:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 354              		.loc 1 158 0
 355 007a 0026     		movs	r6, #0
 356 007c CEE7     		b	.L20
 357              	.L39:
 284:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 358              		.loc 1 284 0
 359 007e FFF7FEFF 		bl	xTaskResumeAll
 360              	.LVL40:
 158:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 361              		.loc 1 158 0
 362 0082 0026     		movs	r6, #0
 363 0084 CAE7     		b	.L20
 364              	.LVL41:
 365              	.L35:
 211:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					pxBlock = pxBlock->pxNextFreeBlock;
 366              		.loc 1 211 0
 367 0086 2B46     		mov	r3, r5
 368              	.LVL42:
 212:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				}
 369              		.loc 1 212 0
 370 0088 1546     		mov	r5, r2
 371              	.LVL43:
 372              	.L26:
 209:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 373              		.loc 1 209 0
 374 008a 6A68     		ldr	r2, [r5, #4]
 375 008c A242     		cmp	r2, r4
 376 008e 02D2     		bcs	.L25
 209:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 377              		.loc 1 209 0 is_stmt 0 discriminator 1
 378 0090 2A68     		ldr	r2, [r5]
 379 0092 002A     		cmp	r2, #0
 380 0094 F7D1     		bne	.L35
 381              	.L25:
 217:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 382              		.loc 1 217 0 is_stmt 1
 383 0096 1C4A     		ldr	r2, .L41
 384 0098 1268     		ldr	r2, [r2]
 385 009a AA42     		cmp	r2, r5
 386 009c 14D0     		beq	.L40
 221:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 387              		.loc 1 221 0
 388 009e 1E68     		ldr	r6, [r3]
 389 00a0 0836     		adds	r6, r6, #8
 390              	.LVL44:
 225:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 391              		.loc 1 225 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 21


 392 00a2 2A68     		ldr	r2, [r5]
 393 00a4 1A60     		str	r2, [r3]
 229:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					{
 394              		.loc 1 229 0
 395 00a6 6B68     		ldr	r3, [r5, #4]
 396              	.LVL45:
 397 00a8 1B1B     		subs	r3, r3, r4
 398 00aa 102B     		cmp	r3, #16
 399 00ac 14D9     		bls	.L28
 235:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 400              		.loc 1 235 0
 401 00ae 2819     		adds	r0, r5, r4
 402              	.LVL46:
 236:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 403              		.loc 1 236 0
 404 00b0 10F0070F 		tst	r0, #7
 405 00b4 0CD0     		beq	.L29
 406              	.LBB20:
 407              	.LBB21:
 408              		.loc 2 244 0
 409              		.syntax unified
 410              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 411 00b6 4FF01003 			mov r3, #16												
 412 00ba 83F31188 		msr basepri, r3											
 413 00be BFF36F8F 		isb														
 414 00c2 BFF34F8F 		dsb														
 415              	
 416              	@ 0 "" 2
 417              	.LVL47:
 418              		.thumb
 419              		.syntax unified
 420              	.L30:
 421 00c6 FEE7     		b	.L30
 422              	.LVL48:
 423              	.L40:
 424              	.LBE21:
 425              	.LBE20:
 284:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 426              		.loc 1 284 0
 427 00c8 FFF7FEFF 		bl	xTaskResumeAll
 428              	.LVL49:
 158:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 429              		.loc 1 158 0
 430 00cc 0026     		movs	r6, #0
 431 00ce A5E7     		b	.L20
 432              	.LVL50:
 433              	.L29:
 240:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						pxBlock->xBlockSize = xWantedSize;
 434              		.loc 1 240 0
 435 00d0 4360     		str	r3, [r0, #4]
 241:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 436              		.loc 1 241 0
 437 00d2 6C60     		str	r4, [r5, #4]
 244:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					}
 438              		.loc 1 244 0
 439 00d4 FFF7FEFF 		bl	_ZL26prvInsertBlockIntoFreeListP12A_BLOCK_LINK
 440              	.LVL51:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 22


 441              	.L28:
 251:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 442              		.loc 1 251 0
 443 00d8 6A68     		ldr	r2, [r5, #4]
 444 00da 0D49     		ldr	r1, .L41+8
 445 00dc 0B68     		ldr	r3, [r1]
 446 00de 9B1A     		subs	r3, r3, r2
 447 00e0 0B60     		str	r3, [r1]
 253:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					{
 448              		.loc 1 253 0
 449 00e2 0D49     		ldr	r1, .L41+16
 450 00e4 0968     		ldr	r1, [r1]
 451 00e6 8B42     		cmp	r3, r1
 452 00e8 01D2     		bcs	.L31
 255:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					}
 453              		.loc 1 255 0
 454 00ea 0B49     		ldr	r1, .L41+16
 455 00ec 0B60     		str	r3, [r1]
 456              	.L31:
 264:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					pxBlock->pxNextFreeBlock = NULL;
 457              		.loc 1 264 0
 458 00ee 074B     		ldr	r3, .L41+4
 459 00f0 1B68     		ldr	r3, [r3]
 460 00f2 1343     		orrs	r3, r3, r2
 461 00f4 6B60     		str	r3, [r5, #4]
 265:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				}
 462              		.loc 1 265 0
 463 00f6 0023     		movs	r3, #0
 464 00f8 2B60     		str	r3, [r5]
 284:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 465              		.loc 1 284 0
 466 00fa FFF7FEFF 		bl	xTaskResumeAll
 467              	.LVL52:
 468              	.LBB22:
 288:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 469              		.loc 1 288 0
 470 00fe 002E     		cmp	r6, #0
 471 0100 8ED1     		bne	.L32
 472 0102 8BE7     		b	.L20
 473              	.LVL53:
 474              	.L17:
 475              	.LBE22:
 302:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 476              		.loc 1 302 0
 477 0104 3046     		mov	r0, r6
 478 0106 70BD     		pop	{r4, r5, r6, pc}
 479              	.LVL54:
 480              	.L42:
 481              		.align	2
 482              	.L41:
 483 0108 00000000 		.word	.LANCHOR1
 484 010c 00000000 		.word	.LANCHOR4
 485 0110 00000000 		.word	.LANCHOR3
 486 0114 00000000 		.word	.LANCHOR0
 487 0118 00000000 		.word	.LANCHOR2
 488              		.cfi_endproc
 489              	.LFE135:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 23


 490              		.fnend
 492              		.section	.text.vPortFree,"ax",%progbits
 493              		.align	1
 494              		.global	vPortFree
 495              		.syntax unified
 496              		.thumb
 497              		.thumb_func
 498              		.fpu fpv4-sp-d16
 500              	vPortFree:
 501              		.fnstart
 502              	.LFB136:
 306:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** uint8_t *puc = ( uint8_t * ) pv;
 503              		.loc 1 306 0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              	.LVL55:
 310:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 508              		.loc 1 310 0
 509 0000 80B3     		cbz	r0, .L50
 306:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** uint8_t *puc = ( uint8_t * ) pv;
 510              		.loc 1 306 0
 511 0002 38B5     		push	{r3, r4, r5, lr}
 512              		.save {r3, r4, r5, lr}
 513              	.LCFI4:
 514              		.cfi_def_cfa_offset 16
 515              		.cfi_offset 3, -16
 516              		.cfi_offset 4, -12
 517              		.cfi_offset 5, -8
 518              		.cfi_offset 14, -4
 519 0004 0446     		mov	r4, r0
 314:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 520              		.loc 1 314 0
 521 0006 A0F10805 		sub	r5, r0, #8
 522              	.LVL56:
 320:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		configASSERT( pxLink->pxNextFreeBlock == NULL );
 523              		.loc 1 320 0
 524 000a 50F8042C 		ldr	r2, [r0, #-4]
 525 000e 1649     		ldr	r1, .L53
 526 0010 0968     		ldr	r1, [r1]
 527 0012 0A42     		tst	r2, r1
 528 0014 08D1     		bne	.L45
 529              	.LBB23:
 530              	.LBB24:
 531              		.loc 2 244 0
 532              		.syntax unified
 533              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 534 0016 4FF01003 			mov r3, #16												
 535 001a 83F31188 		msr basepri, r3											
 536 001e BFF36F8F 		isb														
 537 0022 BFF34F8F 		dsb														
 538              	
 539              	@ 0 "" 2
 540              	.LVL57:
 541              		.thumb
 542              		.syntax unified
 543              	.L46:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 24


 544 0026 FEE7     		b	.L46
 545              	.L45:
 546              	.LBE24:
 547              	.LBE23:
 321:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 548              		.loc 1 321 0
 549 0028 50F8080C 		ldr	r0, [r0, #-8]
 550              	.LVL58:
 551 002c 40B1     		cbz	r0, .L47
 552              	.LBB25:
 553              	.LBB26:
 554              		.loc 2 244 0
 555              		.syntax unified
 556              	@ 244 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 557 002e 4FF01003 			mov r3, #16												
 558 0032 83F31188 		msr basepri, r3											
 559 0036 BFF36F8F 		isb														
 560 003a BFF34F8F 		dsb														
 561              	
 562              	@ 0 "" 2
 563              	.LVL59:
 564              		.thumb
 565              		.syntax unified
 566              	.L48:
 567 003e FEE7     		b	.L48
 568              	.L47:
 569              	.LBE26:
 570              	.LBE25:
 329:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 571              		.loc 1 329 0
 572 0040 22EA0102 		bic	r2, r2, r1
 573 0044 44F8042C 		str	r2, [r4, #-4]
 331:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 574              		.loc 1 331 0
 575 0048 FFF7FEFF 		bl	vTaskSuspendAll
 576              	.LVL60:
 334:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					traceFREE( pv, pxLink->xBlockSize );
 577              		.loc 1 334 0
 578 004c 54F8041C 		ldr	r1, [r4, #-4]
 579 0050 064A     		ldr	r2, .L53+4
 580 0052 1368     		ldr	r3, [r2]
 581 0054 0B44     		add	r3, r3, r1
 582 0056 1360     		str	r3, [r2]
 336:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				}
 583              		.loc 1 336 0
 584 0058 2846     		mov	r0, r5
 585 005a FFF7FEFF 		bl	_ZL26prvInsertBlockIntoFreeListP12A_BLOCK_LINK
 586              	.LVL61:
 338:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			}
 587              		.loc 1 338 0
 588 005e FFF7FEFF 		bl	xTaskResumeAll
 589              	.LVL62:
 350:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 590              		.loc 1 350 0
 591 0062 38BD     		pop	{r3, r4, r5, pc}
 592              	.LVL63:
 593              	.L50:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 25


 594              	.LCFI5:
 595              		.cfi_def_cfa_offset 0
 596              		.cfi_restore 3
 597              		.cfi_restore 4
 598              		.cfi_restore 5
 599              		.cfi_restore 14
 600 0064 7047     		bx	lr
 601              	.L54:
 602 0066 00BF     		.align	2
 603              	.L53:
 604 0068 00000000 		.word	.LANCHOR4
 605 006c 00000000 		.word	.LANCHOR3
 606              		.cfi_endproc
 607              	.LFE136:
 608              		.fnend
 610              		.section	.text.xPortGetFreeHeapSize,"ax",%progbits
 611              		.align	1
 612              		.global	xPortGetFreeHeapSize
 613              		.syntax unified
 614              		.thumb
 615              		.thumb_func
 616              		.fpu fpv4-sp-d16
 618              	xPortGetFreeHeapSize:
 619              		.fnstart
 620              	.LFB137:
 354:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	return xFreeBytesRemaining;
 621              		.loc 1 354 0
 622              		.cfi_startproc
 623              		@ args = 0, pretend = 0, frame = 0
 624              		@ frame_needed = 0, uses_anonymous_args = 0
 625              		@ link register save eliminated.
 356:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 626              		.loc 1 356 0
 627 0000 014B     		ldr	r3, .L56
 628 0002 1868     		ldr	r0, [r3]
 629 0004 7047     		bx	lr
 630              	.L57:
 631 0006 00BF     		.align	2
 632              	.L56:
 633 0008 00000000 		.word	.LANCHOR3
 634              		.cfi_endproc
 635              	.LFE137:
 636              		.cantunwind
 637              		.fnend
 639              		.section	.text.xPortGetMinimumEverFreeHeapSize,"ax",%progbits
 640              		.align	1
 641              		.global	xPortGetMinimumEverFreeHeapSize
 642              		.syntax unified
 643              		.thumb
 644              		.thumb_func
 645              		.fpu fpv4-sp-d16
 647              	xPortGetMinimumEverFreeHeapSize:
 648              		.fnstart
 649              	.LFB138:
 360:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	return xMinimumEverFreeBytesRemaining;
 650              		.loc 1 360 0
 651              		.cfi_startproc
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 26


 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
 654              		@ link register save eliminated.
 362:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 655              		.loc 1 362 0
 656 0000 014B     		ldr	r3, .L59
 657 0002 1868     		ldr	r0, [r3]
 658 0004 7047     		bx	lr
 659              	.L60:
 660 0006 00BF     		.align	2
 661              	.L59:
 662 0008 00000000 		.word	.LANCHOR2
 663              		.cfi_endproc
 664              	.LFE138:
 665              		.cantunwind
 666              		.fnend
 668              		.section	.text.vPortInitialiseBlocks,"ax",%progbits
 669              		.align	1
 670              		.global	vPortInitialiseBlocks
 671              		.syntax unified
 672              		.thumb
 673              		.thumb_func
 674              		.fpu fpv4-sp-d16
 676              	vPortInitialiseBlocks:
 677              		.fnstart
 678              	.LFB139:
 366:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* This just exists to keep the linker quiet. */
 679              		.loc 1 366 0
 680              		.cfi_startproc
 681              		@ args = 0, pretend = 0, frame = 0
 682              		@ frame_needed = 0, uses_anonymous_args = 0
 683              		@ link register save eliminated.
 368:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 684              		.loc 1 368 0
 685 0000 7047     		bx	lr
 686              		.cfi_endproc
 687              	.LFE139:
 688              		.cantunwind
 689              		.fnend
 691              		.section	.bss._ZL18xBlockAllocatedBit,"aw",%nobits
 692              		.align	2
 693              		.set	.LANCHOR4,. + 0
 696              	_ZL18xBlockAllocatedBit:
 697 0000 00000000 		.space	4
 698              		.section	.bss._ZL19xFreeBytesRemaining,"aw",%nobits
 699              		.align	2
 700              		.set	.LANCHOR3,. + 0
 703              	_ZL19xFreeBytesRemaining:
 704 0000 00000000 		.space	4
 705              		.section	.bss._ZL30xMinimumEverFreeBytesRemaining,"aw",%nobits
 706              		.align	2
 707              		.set	.LANCHOR2,. + 0
 710              	_ZL30xMinimumEverFreeBytesRemaining:
 711 0000 00000000 		.space	4
 712              		.section	.bss._ZL5pxEnd,"aw",%nobits
 713              		.align	2
 714              		.set	.LANCHOR1,. + 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 27


 717              	_ZL5pxEnd:
 718 0000 00000000 		.space	4
 719              		.section	.bss._ZL6ucHeap,"aw",%nobits
 720              		.align	2
 723              	_ZL6ucHeap:
 724 0000 00000000 		.space	20480
 724      00000000 
 724      00000000 
 724      00000000 
 724      00000000 
 725              		.section	.bss._ZL6xStart,"aw",%nobits
 726              		.align	2
 727              		.set	.LANCHOR0,. + 0
 730              	_ZL6xStart:
 731 0000 00000000 		.space	8
 731      00000000 
 732              		.text
 733              	.Letext0:
 734              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/cstdlib"
 735              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/arm-none-eab
 736              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 737              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 738              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 739              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 740              		.file 9 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 741              		.file 10 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 742              		.file 11 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/stdlib.h"
 743              		.file 12 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 744              		.file 13 "../Libraries/CMSIS/CM4/CoreSupport/core_cm4.h"
 745              		.file 14 "../Libraries/CMSIS/CM4/DeviceSupport/system_at32f4xx.h"
 746              		.file 15 "../Libraries/CMSIS/CM4/DeviceSupport/at32f4xx.h"
 747              		.file 16 "Inc/FreeRTOSConfig.h"
 748              		.file 17 "../Middlewares/FreeRTOS//Source/include/task.h"
 749              		.file 18 "<built-in>"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s 			page 28


DEFINED SYMBOLS
                            *ABS*:0000000000000000 heap_4.c
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:17     .text._ZL11prvHeapInitv:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:23     .text._ZL11prvHeapInitv:0000000000000000 _ZL11prvHeapInitv
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:103    .text._ZL11prvHeapInitv:000000000000004c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:723    .bss._ZL6ucHeap:0000000000000000 _ZL6ucHeap
.ARM.exidx.text._ZL11prvHeapInitv:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:115    .text._ZL26prvInsertBlockIntoFreeListP12A_BLOCK_LINK:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:121    .text._ZL26prvInsertBlockIntoFreeListP12A_BLOCK_LINK:0000000000000000 _ZL26prvInsertBlockIntoFreeListP12A_BLOCK_LINK
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:211    .text._ZL26prvInsertBlockIntoFreeListP12A_BLOCK_LINK:0000000000000050 $d
.ARM.exidx.text._ZL26prvInsertBlockIntoFreeListP12A_BLOCK_LINK:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:219    .text.pvPortMalloc:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:226    .text.pvPortMalloc:0000000000000000 pvPortMalloc
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:483    .text.pvPortMalloc:0000000000000108 $d
     .ARM.exidx.text.pvPortMalloc:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:493    .text.vPortFree:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:500    .text.vPortFree:0000000000000000 vPortFree
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:604    .text.vPortFree:0000000000000068 $d
        .ARM.exidx.text.vPortFree:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:611    .text.xPortGetFreeHeapSize:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:618    .text.xPortGetFreeHeapSize:0000000000000000 xPortGetFreeHeapSize
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:633    .text.xPortGetFreeHeapSize:0000000000000008 $d
.ARM.exidx.text.xPortGetFreeHeapSize:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:640    .text.xPortGetMinimumEverFreeHeapSize:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:647    .text.xPortGetMinimumEverFreeHeapSize:0000000000000000 xPortGetMinimumEverFreeHeapSize
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:662    .text.xPortGetMinimumEverFreeHeapSize:0000000000000008 $d
.ARM.exidx.text.xPortGetMinimumEverFreeHeapSize:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:669    .text.vPortInitialiseBlocks:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:676    .text.vPortInitialiseBlocks:0000000000000000 vPortInitialiseBlocks
.ARM.exidx.text.vPortInitialiseBlocks:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:692    .bss._ZL18xBlockAllocatedBit:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:696    .bss._ZL18xBlockAllocatedBit:0000000000000000 _ZL18xBlockAllocatedBit
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:699    .bss._ZL19xFreeBytesRemaining:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:703    .bss._ZL19xFreeBytesRemaining:0000000000000000 _ZL19xFreeBytesRemaining
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:706    .bss._ZL30xMinimumEverFreeBytesRemaining:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:710    .bss._ZL30xMinimumEverFreeBytesRemaining:0000000000000000 _ZL30xMinimumEverFreeBytesRemaining
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:713    .bss._ZL5pxEnd:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:717    .bss._ZL5pxEnd:0000000000000000 _ZL5pxEnd
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:720    .bss._ZL6ucHeap:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:726    .bss._ZL6xStart:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccvtc73K.s:730    .bss._ZL6xStart:0000000000000000 _ZL6xStart

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
_Z28vApplicationMallocFailedHookv
__aeabi_unwind_cpp_pr0
