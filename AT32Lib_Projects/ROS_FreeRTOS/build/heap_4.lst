ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"heap_4.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.prvHeapInit,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv4-sp-d16
  23              	prvHeapInit:
  24              	.LFB133:
  25              		.file 1 "../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c"
   1:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*
   2:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
   5:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
   7:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
   9:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  13:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  20:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  25:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****      *                                                                       *
  32:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 2


  34:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****      *                                                                       *
  37:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     ***************************************************************************
  38:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  39:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     defined configASSERT()?
  42:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  43:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  47:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  52:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  56:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  59:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  63:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  67:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** */
  69:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  70:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*
  71:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  * A sample implementation of pvPortMalloc() and vPortFree() that combines
  72:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  * (coalescences) adjacent memory blocks as they are freed, and in so doing
  73:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  * limits memory fragmentation.
  74:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  *
  75:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  * See heap_1.c, heap_2.c and heap_3.c for alternative implementations, and the
  76:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  * memory management pages of http://www.FreeRTOS.org for more information.
  77:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  */
  78:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #include <stdlib.h>
  79:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  80:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  81:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** all the API functions to use the MPU wrappers.  That should only be done when
  82:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** task.h is included from an application file. */
  83:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  84:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  85:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #include "FreeRTOS.h"
  86:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #include "task.h"
  87:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  88:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  89:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  90:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 0 )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 3


  91:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	#error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
  92:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #endif
  93:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  94:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /* Block sizes must not get too small. */
  95:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #define heapMINIMUM_BLOCK_SIZE	( ( size_t ) ( xHeapStructSize << 1 ) )
  96:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  97:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /* Assumes 8bit bytes! */
  98:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #define heapBITS_PER_BYTE		( ( size_t ) 8 )
  99:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 100:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /* Allocate the memory for the heap. */
 101:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #if( configAPPLICATION_ALLOCATED_HEAP == 1 )
 102:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* The application writer has already defined the array used for the RTOS
 103:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	heap - probably so it can be placed in a special segment or address. */
 104:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
 105:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #else
 106:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
 107:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** #endif /* configAPPLICATION_ALLOCATED_HEAP */
 108:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 109:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /* Define the linked list structure.  This is used to link free blocks in order
 110:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** of their memory address. */
 111:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** typedef struct A_BLOCK_LINK
 112:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** {
 113:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	struct A_BLOCK_LINK *pxNextFreeBlock;	/*<< The next free block in the list. */
 114:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	size_t xBlockSize;						/*<< The size of the free block. */
 115:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** } BlockLink_t;
 116:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 117:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 118:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 119:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*
 120:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  * Inserts a block of memory that is being freed into the correct position in
 121:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  * the list of free memory blocks.  The block being freed will be merged with
 122:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  * the block in front it and/or the block behind it if the memory blocks are
 123:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  * adjacent to each other.
 124:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  */
 125:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert );
 126:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 127:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*
 128:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  * Called automatically to setup the required heap structures the first time
 129:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  * pvPortMalloc() is called.
 130:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c ****  */
 131:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** static void prvHeapInit( void );
 132:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 133:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 134:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 135:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /* The size of the structure placed at the beginning of each allocated memory
 136:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** block must by correctly byte aligned. */
 137:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** static const size_t xHeapStructSize	= ( sizeof( BlockLink_t ) + ( ( size_t ) ( portBYTE_ALIGNMENT -
 138:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 139:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /* Create a couple of list links to mark the start and end of the list. */
 140:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** static BlockLink_t xStart, *pxEnd = NULL;
 141:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 142:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /* Keeps track of the number of free bytes remaining, but says nothing about
 143:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** fragmentation. */
 144:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** static size_t xFreeBytesRemaining = 0U;
 145:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** static size_t xMinimumEverFreeBytesRemaining = 0U;
 146:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 147:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /* Gets set to the top bit of an size_t type.  When this bit in the xBlockSize
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 4


 148:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** member of an BlockLink_t structure is set then the block belongs to the
 149:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** application.  When the bit is free the block is still part of the free heap
 150:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** space. */
 151:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** static size_t xBlockAllocatedBit = 0;
 152:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 153:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 154:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 155:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** void *pvPortMalloc( size_t xWantedSize )
 156:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** {
 157:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
 158:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** void *pvReturn = NULL;
 159:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 160:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	vTaskSuspendAll();
 161:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 162:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		/* If this is the first call to malloc then the heap will require
 163:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		initialisation to setup the list of free blocks. */
 164:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		if( pxEnd == NULL )
 165:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 166:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			prvHeapInit();
 167:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 168:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		else
 169:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 170:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 171:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 172:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 173:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		/* Check the requested block size is not so large that the top bit is
 174:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		set.  The top bit of the block size member of the BlockLink_t structure
 175:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		is used to determine who owns the block - the application or the
 176:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		kernel, so it must be free. */
 177:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 178:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 179:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			/* The wanted size is increased so it can contain a BlockLink_t
 180:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			structure in addition to the requested amount of bytes. */
 181:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			if( xWantedSize > 0 )
 182:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			{
 183:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				xWantedSize += xHeapStructSize;
 184:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 185:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				/* Ensure that blocks are always aligned to the required number
 186:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				of bytes. */
 187:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 188:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 189:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					/* Byte alignment required. */
 190:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 191:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 192:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				}
 193:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				else
 194:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 195:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					mtCOVERAGE_TEST_MARKER();
 196:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				}
 197:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			}
 198:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			else
 199:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			{
 200:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				mtCOVERAGE_TEST_MARKER();
 201:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			}
 202:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 203:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 204:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 5


 205:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				/* Traverse the list from the start	(lowest address) block until
 206:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				one	of adequate size is found. */
 207:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				pxPreviousBlock = &xStart;
 208:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				pxBlock = xStart.pxNextFreeBlock;
 209:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 210:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 211:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					pxPreviousBlock = pxBlock;
 212:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					pxBlock = pxBlock->pxNextFreeBlock;
 213:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				}
 214:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 215:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				/* If the end marker was reached then a block of adequate size
 216:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				was	not found. */
 217:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				if( pxBlock != pxEnd )
 218:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 219:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					/* Return the memory space pointed to - jumping over the
 220:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					BlockLink_t structure at its start. */
 221:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize )
 222:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 223:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					/* This block is being returned for use so must be taken out
 224:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					of the list of free blocks. */
 225:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 226:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 227:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					/* If the block is larger than required it can be split into
 228:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					two. */
 229:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 230:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					{
 231:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						/* This block is to be split into two.  Create a new
 232:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						block following the number of bytes requested. The void
 233:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						cast is used to prevent byte alignment warnings from the
 234:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						compiler. */
 235:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 236:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 237:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 238:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						/* Calculate the sizes of two blocks split from the
 239:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						single block. */
 240:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 241:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						pxBlock->xBlockSize = xWantedSize;
 242:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 243:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						/* Insert the new block into the list of free blocks. */
 244:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						prvInsertBlockIntoFreeList( pxNewBlockLink );
 245:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					}
 246:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					else
 247:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					{
 248:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						mtCOVERAGE_TEST_MARKER();
 249:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					}
 250:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 251:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					xFreeBytesRemaining -= pxBlock->xBlockSize;
 252:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 253:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 254:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					{
 255:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 256:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					}
 257:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					else
 258:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					{
 259:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						mtCOVERAGE_TEST_MARKER();
 260:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					}
 261:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 6


 262:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					/* The block is being returned - it is allocated and owned
 263:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					by the application and has no "next" block. */
 264:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					pxBlock->xBlockSize |= xBlockAllocatedBit;
 265:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					pxBlock->pxNextFreeBlock = NULL;
 266:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				}
 267:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				else
 268:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 269:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					mtCOVERAGE_TEST_MARKER();
 270:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				}
 271:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			}
 272:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			else
 273:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			{
 274:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				mtCOVERAGE_TEST_MARKER();
 275:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			}
 276:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 277:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		else
 278:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 279:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 280:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 281:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 282:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		traceMALLOC( pvReturn, xWantedSize );
 283:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 284:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	( void ) xTaskResumeAll();
 285:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 286:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
 287:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 288:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		if( pvReturn == NULL )
 289:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 290:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			extern void vApplicationMallocFailedHook( void );
 291:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			vApplicationMallocFailedHook();
 292:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 293:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		else
 294:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 295:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 296:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 297:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 298:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	#endif
 299:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 300:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 301:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	return pvReturn;
 302:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** }
 303:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 304:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 305:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** void vPortFree( void *pv )
 306:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** {
 307:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** uint8_t *puc = ( uint8_t * ) pv;
 308:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** BlockLink_t *pxLink;
 309:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 310:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	if( pv != NULL )
 311:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 312:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		/* The memory being freed will have an BlockLink_t structure immediately
 313:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		before it. */
 314:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		puc -= xHeapStructSize;
 315:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 316:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		/* This casting is to keep the compiler from issuing warnings. */
 317:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		pxLink = ( void * ) puc;
 318:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 7


 319:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		/* Check the block is actually allocated. */
 320:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 321:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		configASSERT( pxLink->pxNextFreeBlock == NULL );
 322:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 323:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 324:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 325:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			if( pxLink->pxNextFreeBlock == NULL )
 326:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			{
 327:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				/* The block is being returned to the heap - it is no longer
 328:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				allocated. */
 329:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 330:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 331:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				vTaskSuspendAll();
 332:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 333:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					/* Add this block to the list of free blocks. */
 334:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					xFreeBytesRemaining += pxLink->xBlockSize;
 335:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					traceFREE( pv, pxLink->xBlockSize );
 336:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 337:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				}
 338:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				( void ) xTaskResumeAll();
 339:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			}
 340:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			else
 341:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			{
 342:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				mtCOVERAGE_TEST_MARKER();
 343:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			}
 344:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 345:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		else
 346:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 347:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 348:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 349:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 350:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** }
 351:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 352:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 353:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** size_t xPortGetFreeHeapSize( void )
 354:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** {
 355:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	return xFreeBytesRemaining;
 356:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** }
 357:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 358:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 359:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** size_t xPortGetMinimumEverFreeHeapSize( void )
 360:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** {
 361:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	return xMinimumEverFreeBytesRemaining;
 362:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** }
 363:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 364:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 365:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** void vPortInitialiseBlocks( void )
 366:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** {
 367:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* This just exists to keep the linker quiet. */
 368:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** }
 369:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 370:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 371:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** static void prvHeapInit( void )
 372:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** {
  26              		.loc 1 372 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 8


  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 373:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** BlockLink_t *pxFirstFreeBlock;
 374:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** uint8_t *pucAlignedHeap;
 375:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** size_t uxAddress;
 376:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 377:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 378:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* Ensure the heap starts on a correctly aligned boundary. */
 379:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	uxAddress = ( size_t ) ucHeap;
  32              		.loc 1 379 0
  33 0000 124A     		ldr	r2, .L4
  34              	.LVL1:
 380:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 381:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  35              		.loc 1 381 0
  36 0002 12F0070F 		tst	r2, #7
  37 0006 1ED0     		beq	.L3
 382:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 383:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		uxAddress += ( portBYTE_ALIGNMENT - 1 );
  38              		.loc 1 383 0
  39 0008 D11D     		adds	r1, r2, #7
  40              	.LVL2:
 384:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  41              		.loc 1 384 0
  42 000a 21F00701 		bic	r1, r1, #7
  43              	.LVL3:
 385:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
  44              		.loc 1 385 0
  45 000e C1F5A043 		rsb	r3, r1, #20480
  46 0012 1344     		add	r3, r3, r2
  47              	.LVL4:
 384:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  48              		.loc 1 384 0
  49 0014 0A46     		mov	r2, r1
  50              	.LVL5:
  51              	.L2:
 386:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 387:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 388:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	pucAlignedHeap = ( uint8_t * ) uxAddress;
 389:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 390:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* xStart is used to hold a pointer to the first item in the list of free
 391:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	blocks.  The void cast is used to prevent compiler warnings. */
 392:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
  52              		.loc 1 392 0
  53 0016 0E48     		ldr	r0, .L4+4
  54 0018 0260     		str	r2, [r0]
 393:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	xStart.xBlockSize = ( size_t ) 0;
  55              		.loc 1 393 0
  56 001a 0021     		movs	r1, #0
  57 001c 4160     		str	r1, [r0, #4]
 394:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 395:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* pxEnd is used to mark the end of the list of free blocks and is inserted
 396:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	at the end of the heap space. */
 397:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
  58              		.loc 1 397 0
  59 001e 1344     		add	r3, r3, r2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 9


  60              	.LVL6:
 398:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	uxAddress -= xHeapStructSize;
  61              		.loc 1 398 0
  62 0020 083B     		subs	r3, r3, #8
  63              	.LVL7:
 399:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  64              		.loc 1 399 0
  65 0022 23F00703 		bic	r3, r3, #7
  66              	.LVL8:
 400:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	pxEnd = ( void * ) uxAddress;
  67              		.loc 1 400 0
  68 0026 0B48     		ldr	r0, .L4+8
  69 0028 0360     		str	r3, [r0]
 401:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	pxEnd->xBlockSize = 0;
  70              		.loc 1 401 0
  71 002a 5960     		str	r1, [r3, #4]
 402:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	pxEnd->pxNextFreeBlock = NULL;
  72              		.loc 1 402 0
  73 002c 1960     		str	r1, [r3]
  74              	.LVL9:
 403:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 404:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* To start with there is a single free block that is sized to take up the
 405:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	entire heap space, minus the space taken by pxEnd. */
 406:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 407:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
  75              		.loc 1 407 0
  76 002e 991A     		subs	r1, r3, r2
  77 0030 5160     		str	r1, [r2, #4]
 408:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  78              		.loc 1 408 0
  79 0032 1360     		str	r3, [r2]
 409:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 410:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* Only one block exists - and it covers the entire usable heap space. */
 411:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
  80              		.loc 1 411 0
  81 0034 084B     		ldr	r3, .L4+12
  82              	.LVL10:
  83 0036 1960     		str	r1, [r3]
 412:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
  84              		.loc 1 412 0
  85 0038 084B     		ldr	r3, .L4+16
  86 003a 1960     		str	r1, [r3]
 413:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 414:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* Work out the position of the top bit in a size_t variable. */
 415:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
  87              		.loc 1 415 0
  88 003c 084B     		ldr	r3, .L4+20
  89 003e 4FF00042 		mov	r2, #-2147483648
  90              	.LVL11:
  91 0042 1A60     		str	r2, [r3]
 416:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** }
  92              		.loc 1 416 0
  93 0044 7047     		bx	lr
  94              	.LVL12:
  95              	.L3:
 376:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
  96              		.loc 1 376 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 10


  97 0046 4FF4A043 		mov	r3, #20480
  98 004a E4E7     		b	.L2
  99              	.L5:
 100              		.align	2
 101              	.L4:
 102 004c 00000000 		.word	ucHeap
 103 0050 00000000 		.word	.LANCHOR0
 104 0054 00000000 		.word	.LANCHOR1
 105 0058 00000000 		.word	.LANCHOR2
 106 005c 00000000 		.word	.LANCHOR3
 107 0060 00000000 		.word	.LANCHOR4
 108              		.cfi_endproc
 109              	.LFE133:
 111              		.section	.text.prvInsertBlockIntoFreeList,"ax",%progbits
 112              		.align	1
 113              		.syntax unified
 114              		.thumb
 115              		.thumb_func
 116              		.fpu fpv4-sp-d16
 118              	prvInsertBlockIntoFreeList:
 119              	.LFB134:
 417:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 418:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 419:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
 420:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** {
 120              		.loc 1 420 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125              	.LVL13:
 126 0000 10B4     		push	{r4}
 127              	.LCFI0:
 128              		.cfi_def_cfa_offset 4
 129              		.cfi_offset 4, -4
 130              	.LVL14:
 421:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** BlockLink_t *pxIterator;
 422:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** uint8_t *puc;
 423:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 424:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* Iterate through the list until a block is found that has a higher address
 425:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	than the block being inserted. */
 426:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator-
 131              		.loc 1 426 0
 132 0002 134B     		ldr	r3, .L15
 133              	.LVL15:
 134              	.L7:
 135              		.loc 1 426 0 is_stmt 0 discriminator 1
 136 0004 1A68     		ldr	r2, [r3]
 137 0006 8242     		cmp	r2, r0
 138 0008 1BD3     		bcc	.L13
 139              	.LVL16:
 427:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 428:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		/* Nothing to do here, just iterate to the right position. */
 429:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 430:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 431:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* Do the block being inserted, and the block it is being inserted after
 432:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	make a contiguous block of memory? */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 11


 433:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	puc = ( uint8_t * ) pxIterator;
 434:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 140              		.loc 1 434 0 is_stmt 1
 141 000a 5968     		ldr	r1, [r3, #4]
 142 000c 5C18     		adds	r4, r3, r1
 143 000e 8442     		cmp	r4, r0
 144 0010 03D1     		bne	.L8
 435:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 436:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 145              		.loc 1 436 0
 146 0012 4068     		ldr	r0, [r0, #4]
 147              	.LVL17:
 148 0014 0144     		add	r1, r1, r0
 149 0016 5960     		str	r1, [r3, #4]
 150              	.LVL18:
 437:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		pxBlockToInsert = pxIterator;
 151              		.loc 1 437 0
 152 0018 1846     		mov	r0, r3
 153              	.LVL19:
 154              	.L8:
 438:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 439:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	else
 440:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 441:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		mtCOVERAGE_TEST_MARKER();
 442:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 443:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 444:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* Do the block being inserted, and the block it is being inserted before
 445:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	make a contiguous block of memory? */
 446:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	puc = ( uint8_t * ) pxBlockToInsert;
 447:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 155              		.loc 1 447 0
 156 001a 4168     		ldr	r1, [r0, #4]
 157 001c 4418     		adds	r4, r0, r1
 158 001e A242     		cmp	r2, r4
 159 0020 13D1     		bne	.L9
 448:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 449:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		if( pxIterator->pxNextFreeBlock != pxEnd )
 160              		.loc 1 449 0
 161 0022 0C4C     		ldr	r4, .L15+4
 162 0024 2468     		ldr	r4, [r4]
 163 0026 A242     		cmp	r2, r4
 164 0028 0DD0     		beq	.L10
 450:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 451:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			/* Form one big block from the two blocks. */
 452:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 165              		.loc 1 452 0
 166 002a 5268     		ldr	r2, [r2, #4]
 167 002c 1144     		add	r1, r1, r2
 168 002e 4160     		str	r1, [r0, #4]
 453:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 169              		.loc 1 453 0
 170 0030 1A68     		ldr	r2, [r3]
 171 0032 1268     		ldr	r2, [r2]
 172 0034 0260     		str	r2, [r0]
 173              	.L11:
 454:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 455:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		else
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 12


 456:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 457:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 458:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 459:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 460:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	else
 461:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 462:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 463:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 464:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 465:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* If the block being inserted plugged a gab, so was merged with the block
 466:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	before and the block after, then it's pxNextFreeBlock pointer will have
 467:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	already been set, and should not be set here as that would make it point
 468:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	to itself. */
 469:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	if( pxIterator != pxBlockToInsert )
 174              		.loc 1 469 0
 175 0036 9842     		cmp	r0, r3
 176 0038 00D0     		beq	.L6
 470:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 471:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 177              		.loc 1 471 0
 178 003a 1860     		str	r0, [r3]
 179              	.L6:
 472:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 473:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	else
 474:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 475:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		mtCOVERAGE_TEST_MARKER();
 476:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 477:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** }
 180              		.loc 1 477 0
 181 003c 5DF8044B 		ldr	r4, [sp], #4
 182              	.LCFI1:
 183              		.cfi_remember_state
 184              		.cfi_restore 4
 185              		.cfi_def_cfa_offset 0
 186 0040 7047     		bx	lr
 187              	.LVL20:
 188              	.L13:
 189              	.LCFI2:
 190              		.cfi_restore_state
 426:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 191              		.loc 1 426 0
 192 0042 1346     		mov	r3, r2
 193              	.LVL21:
 194 0044 DEE7     		b	.L7
 195              	.LVL22:
 196              	.L10:
 457:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 197              		.loc 1 457 0
 198 0046 0460     		str	r4, [r0]
 199 0048 F5E7     		b	.L11
 200              	.L9:
 462:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	}
 201              		.loc 1 462 0
 202 004a 0260     		str	r2, [r0]
 203 004c F3E7     		b	.L11
 204              	.L16:
 205 004e 00BF     		.align	2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 13


 206              	.L15:
 207 0050 00000000 		.word	.LANCHOR0
 208 0054 00000000 		.word	.LANCHOR1
 209              		.cfi_endproc
 210              	.LFE134:
 212              		.section	.text.pvPortMalloc,"ax",%progbits
 213              		.align	1
 214              		.global	pvPortMalloc
 215              		.syntax unified
 216              		.thumb
 217              		.thumb_func
 218              		.fpu fpv4-sp-d16
 220              	pvPortMalloc:
 221              	.LFB128:
 156:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
 222              		.loc 1 156 0
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 0
 225              		@ frame_needed = 0, uses_anonymous_args = 0
 226              	.LVL23:
 227 0000 70B5     		push	{r4, r5, r6, lr}
 228              	.LCFI3:
 229              		.cfi_def_cfa_offset 16
 230              		.cfi_offset 4, -16
 231              		.cfi_offset 5, -12
 232              		.cfi_offset 6, -8
 233              		.cfi_offset 14, -4
 234 0002 0446     		mov	r4, r0
 235              	.LVL24:
 160:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 236              		.loc 1 160 0
 237 0004 FFF7FEFF 		bl	vTaskSuspendAll
 238              	.LVL25:
 164:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 239              		.loc 1 164 0
 240 0008 3F4B     		ldr	r3, .L41
 241 000a 1B68     		ldr	r3, [r3]
 242 000c A3B1     		cbz	r3, .L37
 243              	.L18:
 177:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 244              		.loc 1 177 0
 245 000e 3F4B     		ldr	r3, .L41+4
 246 0010 1B68     		ldr	r3, [r3]
 247 0012 1C42     		tst	r4, r3
 248 0014 13D0     		beq	.L19
 284:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 249              		.loc 1 284 0
 250 0016 FFF7FEFF 		bl	xTaskResumeAll
 251              	.LVL26:
 158:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 252              		.loc 1 158 0
 253 001a 0026     		movs	r6, #0
 254              	.LVL27:
 255              	.L20:
 256              	.LBB13:
 291:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 257              		.loc 1 291 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 14


 258 001c FFF7FEFF 		bl	vApplicationMallocFailedHook
 259              	.LVL28:
 260              	.L32:
 261              	.LBE13:
 300:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	return pvReturn;
 262              		.loc 1 300 0
 263 0020 16F0070F 		tst	r6, #7
 264 0024 6ED0     		beq	.L17
 265              	.LBB14:
 266              	.LBB15:
 267              		.file 2 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 15


  47:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 16


 104:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 17


 161:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 18


 218:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 268              		.loc 2 237 0
 269              		.syntax unified
 270              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 271 0026 4FF01003 			mov r3, #16												
 272 002a 83F31188 		msr basepri, r3											
 273 002e BFF36F8F 		isb														
 274 0032 BFF34F8F 		dsb														
 275              	
 276              	@ 0 "" 2
 277              	.LVL29:
 278              		.thumb
 279              		.syntax unified
 280              	.L34:
 281 0036 FEE7     		b	.L34
 282              	.LVL30:
 283              	.L37:
 284              	.LBE15:
 285              	.LBE14:
 166:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		}
 286              		.loc 1 166 0
 287 0038 FFF7FEFF 		bl	prvHeapInit
 288              	.LVL31:
 289 003c E7E7     		b	.L18
 290              	.L19:
 181:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			{
 291              		.loc 1 181 0
 292 003e 94B1     		cbz	r4, .L21
 183:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 293              		.loc 1 183 0
 294 0040 0834     		adds	r4, r4, #8
 295              	.LVL32:
 187:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 296              		.loc 1 187 0
 297 0042 14F0070F 		tst	r4, #7
 298 0046 0ED0     		beq	.L21
 190:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 299              		.loc 1 190 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 19


 300 0048 24F00704 		bic	r4, r4, #7
 301              	.LVL33:
 302 004c 0834     		adds	r4, r4, #8
 303              	.LVL34:
 191:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				}
 304              		.loc 1 191 0
 305 004e 04F00703 		and	r3, r4, #7
 306 0052 43B1     		cbz	r3, .L21
 307              	.LBB16:
 308              	.LBB17:
 309              		.loc 2 237 0
 310              		.syntax unified
 311              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 312 0054 4FF01003 			mov r3, #16												
 313 0058 83F31188 		msr basepri, r3											
 314 005c BFF36F8F 		isb														
 315 0060 BFF34F8F 		dsb														
 316              	
 317              	@ 0 "" 2
 318              	.LVL35:
 319              		.thumb
 320              		.syntax unified
 321              	.L22:
 322 0064 FEE7     		b	.L22
 323              	.L21:
 324              	.LBE17:
 325              	.LBE16:
 203:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			{
 326              		.loc 1 203 0
 327 0066 34B1     		cbz	r4, .L38
 203:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			{
 328              		.loc 1 203 0 is_stmt 0 discriminator 1
 329 0068 294B     		ldr	r3, .L41+8
 330 006a 1B68     		ldr	r3, [r3]
 331 006c A342     		cmp	r3, r4
 332 006e 06D3     		bcc	.L39
 333              	.LVL36:
 208:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 334              		.loc 1 208 0 is_stmt 1
 335 0070 284B     		ldr	r3, .L41+12
 336 0072 1D68     		ldr	r5, [r3]
 337              	.LVL37:
 209:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 338              		.loc 1 209 0
 339 0074 09E0     		b	.L26
 340              	.LVL38:
 341              	.L38:
 284:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 342              		.loc 1 284 0
 343 0076 FFF7FEFF 		bl	xTaskResumeAll
 344              	.LVL39:
 158:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 345              		.loc 1 158 0
 346 007a 0026     		movs	r6, #0
 347 007c CEE7     		b	.L20
 348              	.L39:
 284:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 20


 349              		.loc 1 284 0
 350 007e FFF7FEFF 		bl	xTaskResumeAll
 351              	.LVL40:
 158:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 352              		.loc 1 158 0
 353 0082 0026     		movs	r6, #0
 354 0084 CAE7     		b	.L20
 355              	.LVL41:
 356              	.L35:
 211:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					pxBlock = pxBlock->pxNextFreeBlock;
 357              		.loc 1 211 0
 358 0086 2B46     		mov	r3, r5
 359              	.LVL42:
 212:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				}
 360              		.loc 1 212 0
 361 0088 1546     		mov	r5, r2
 362              	.LVL43:
 363              	.L26:
 209:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 364              		.loc 1 209 0
 365 008a 6A68     		ldr	r2, [r5, #4]
 366 008c A242     		cmp	r2, r4
 367 008e 02D2     		bcs	.L25
 209:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 368              		.loc 1 209 0 is_stmt 0 discriminator 1
 369 0090 2A68     		ldr	r2, [r5]
 370 0092 002A     		cmp	r2, #0
 371 0094 F7D1     		bne	.L35
 372              	.L25:
 217:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 373              		.loc 1 217 0 is_stmt 1
 374 0096 1C4A     		ldr	r2, .L41
 375 0098 1268     		ldr	r2, [r2]
 376 009a AA42     		cmp	r2, r5
 377 009c 14D0     		beq	.L40
 221:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 378              		.loc 1 221 0
 379 009e 1E68     		ldr	r6, [r3]
 380 00a0 0836     		adds	r6, r6, #8
 381              	.LVL44:
 225:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 382              		.loc 1 225 0
 383 00a2 2A68     		ldr	r2, [r5]
 384 00a4 1A60     		str	r2, [r3]
 229:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					{
 385              		.loc 1 229 0
 386 00a6 6B68     		ldr	r3, [r5, #4]
 387              	.LVL45:
 388 00a8 1B1B     		subs	r3, r3, r4
 389 00aa 102B     		cmp	r3, #16
 390 00ac 14D9     		bls	.L28
 235:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 391              		.loc 1 235 0
 392 00ae 2819     		adds	r0, r5, r4
 393              	.LVL46:
 236:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 394              		.loc 1 236 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 21


 395 00b0 10F0070F 		tst	r0, #7
 396 00b4 0CD0     		beq	.L29
 397              	.LBB18:
 398              	.LBB19:
 399              		.loc 2 237 0
 400              		.syntax unified
 401              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 402 00b6 4FF01003 			mov r3, #16												
 403 00ba 83F31188 		msr basepri, r3											
 404 00be BFF36F8F 		isb														
 405 00c2 BFF34F8F 		dsb														
 406              	
 407              	@ 0 "" 2
 408              	.LVL47:
 409              		.thumb
 410              		.syntax unified
 411              	.L30:
 412 00c6 FEE7     		b	.L30
 413              	.LVL48:
 414              	.L40:
 415              	.LBE19:
 416              	.LBE18:
 284:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 417              		.loc 1 284 0
 418 00c8 FFF7FEFF 		bl	xTaskResumeAll
 419              	.LVL49:
 158:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 420              		.loc 1 158 0
 421 00cc 0026     		movs	r6, #0
 422 00ce A5E7     		b	.L20
 423              	.LVL50:
 424              	.L29:
 240:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 						pxBlock->xBlockSize = xWantedSize;
 425              		.loc 1 240 0
 426 00d0 4360     		str	r3, [r0, #4]
 241:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 427              		.loc 1 241 0
 428 00d2 6C60     		str	r4, [r5, #4]
 244:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					}
 429              		.loc 1 244 0
 430 00d4 FFF7FEFF 		bl	prvInsertBlockIntoFreeList
 431              	.LVL51:
 432              	.L28:
 251:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 433              		.loc 1 251 0
 434 00d8 6A68     		ldr	r2, [r5, #4]
 435 00da 0D49     		ldr	r1, .L41+8
 436 00dc 0B68     		ldr	r3, [r1]
 437 00de 9B1A     		subs	r3, r3, r2
 438 00e0 0B60     		str	r3, [r1]
 253:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					{
 439              		.loc 1 253 0
 440 00e2 0D49     		ldr	r1, .L41+16
 441 00e4 0968     		ldr	r1, [r1]
 442 00e6 8B42     		cmp	r3, r1
 443 00e8 01D2     		bcs	.L31
 255:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 22


 444              		.loc 1 255 0
 445 00ea 0B49     		ldr	r1, .L41+16
 446 00ec 0B60     		str	r3, [r1]
 447              	.L31:
 264:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					pxBlock->pxNextFreeBlock = NULL;
 448              		.loc 1 264 0
 449 00ee 074B     		ldr	r3, .L41+4
 450 00f0 1B68     		ldr	r3, [r3]
 451 00f2 1343     		orrs	r3, r3, r2
 452 00f4 6B60     		str	r3, [r5, #4]
 265:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				}
 453              		.loc 1 265 0
 454 00f6 0023     		movs	r3, #0
 455 00f8 2B60     		str	r3, [r5]
 284:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 456              		.loc 1 284 0
 457 00fa FFF7FEFF 		bl	xTaskResumeAll
 458              	.LVL52:
 288:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		{
 459              		.loc 1 288 0
 460 00fe 002E     		cmp	r6, #0
 461 0100 8ED1     		bne	.L32
 462 0102 8BE7     		b	.L20
 463              	.LVL53:
 464              	.L17:
 302:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 465              		.loc 1 302 0
 466 0104 3046     		mov	r0, r6
 467 0106 70BD     		pop	{r4, r5, r6, pc}
 468              	.LVL54:
 469              	.L42:
 470              		.align	2
 471              	.L41:
 472 0108 00000000 		.word	.LANCHOR1
 473 010c 00000000 		.word	.LANCHOR4
 474 0110 00000000 		.word	.LANCHOR3
 475 0114 00000000 		.word	.LANCHOR0
 476 0118 00000000 		.word	.LANCHOR2
 477              		.cfi_endproc
 478              	.LFE128:
 480              		.section	.text.vPortFree,"ax",%progbits
 481              		.align	1
 482              		.global	vPortFree
 483              		.syntax unified
 484              		.thumb
 485              		.thumb_func
 486              		.fpu fpv4-sp-d16
 488              	vPortFree:
 489              	.LFB129:
 306:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** uint8_t *puc = ( uint8_t * ) pv;
 490              		.loc 1 306 0
 491              		.cfi_startproc
 492              		@ args = 0, pretend = 0, frame = 0
 493              		@ frame_needed = 0, uses_anonymous_args = 0
 494              	.LVL55:
 310:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	{
 495              		.loc 1 310 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 23


 496 0000 80B3     		cbz	r0, .L50
 306:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** uint8_t *puc = ( uint8_t * ) pv;
 497              		.loc 1 306 0
 498 0002 38B5     		push	{r3, r4, r5, lr}
 499              	.LCFI4:
 500              		.cfi_def_cfa_offset 16
 501              		.cfi_offset 3, -16
 502              		.cfi_offset 4, -12
 503              		.cfi_offset 5, -8
 504              		.cfi_offset 14, -4
 505 0004 0446     		mov	r4, r0
 314:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 506              		.loc 1 314 0
 507 0006 A0F10805 		sub	r5, r0, #8
 508              	.LVL56:
 320:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 		configASSERT( pxLink->pxNextFreeBlock == NULL );
 509              		.loc 1 320 0
 510 000a 50F8042C 		ldr	r2, [r0, #-4]
 511 000e 1649     		ldr	r1, .L53
 512 0010 0968     		ldr	r1, [r1]
 513 0012 0A42     		tst	r2, r1
 514 0014 08D1     		bne	.L45
 515              	.LBB20:
 516              	.LBB21:
 517              		.loc 2 237 0
 518              		.syntax unified
 519              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 520 0016 4FF01003 			mov r3, #16												
 521 001a 83F31188 		msr basepri, r3											
 522 001e BFF36F8F 		isb														
 523 0022 BFF34F8F 		dsb														
 524              	
 525              	@ 0 "" 2
 526              	.LVL57:
 527              		.thumb
 528              		.syntax unified
 529              	.L46:
 530 0026 FEE7     		b	.L46
 531              	.L45:
 532              	.LBE21:
 533              	.LBE20:
 321:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 534              		.loc 1 321 0
 535 0028 50F8080C 		ldr	r0, [r0, #-8]
 536              	.LVL58:
 537 002c 40B1     		cbz	r0, .L47
 538              	.LBB22:
 539              	.LBB23:
 540              		.loc 2 237 0
 541              		.syntax unified
 542              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 543 002e 4FF01003 			mov r3, #16												
 544 0032 83F31188 		msr basepri, r3											
 545 0036 BFF36F8F 		isb														
 546 003a BFF34F8F 		dsb														
 547              	
 548              	@ 0 "" 2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 24


 549              	.LVL59:
 550              		.thumb
 551              		.syntax unified
 552              	.L48:
 553 003e FEE7     		b	.L48
 554              	.L47:
 555              	.LBE23:
 556              	.LBE22:
 329:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 
 557              		.loc 1 329 0
 558 0040 22EA0102 		bic	r2, r2, r1
 559 0044 44F8042C 		str	r2, [r4, #-4]
 331:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				{
 560              		.loc 1 331 0
 561 0048 FFF7FEFF 		bl	vTaskSuspendAll
 562              	.LVL60:
 334:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 					traceFREE( pv, pxLink->xBlockSize );
 563              		.loc 1 334 0
 564 004c 54F8041C 		ldr	r1, [r4, #-4]
 565 0050 064A     		ldr	r2, .L53+4
 566 0052 1368     		ldr	r3, [r2]
 567 0054 0B44     		add	r3, r3, r1
 568 0056 1360     		str	r3, [r2]
 336:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 				}
 569              		.loc 1 336 0
 570 0058 2846     		mov	r0, r5
 571 005a FFF7FEFF 		bl	prvInsertBlockIntoFreeList
 572              	.LVL61:
 338:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 			}
 573              		.loc 1 338 0
 574 005e FFF7FEFF 		bl	xTaskResumeAll
 575              	.LVL62:
 350:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 576              		.loc 1 350 0
 577 0062 38BD     		pop	{r3, r4, r5, pc}
 578              	.LVL63:
 579              	.L50:
 580              	.LCFI5:
 581              		.cfi_def_cfa_offset 0
 582              		.cfi_restore 3
 583              		.cfi_restore 4
 584              		.cfi_restore 5
 585              		.cfi_restore 14
 586 0064 7047     		bx	lr
 587              	.L54:
 588 0066 00BF     		.align	2
 589              	.L53:
 590 0068 00000000 		.word	.LANCHOR4
 591 006c 00000000 		.word	.LANCHOR3
 592              		.cfi_endproc
 593              	.LFE129:
 595              		.section	.text.xPortGetFreeHeapSize,"ax",%progbits
 596              		.align	1
 597              		.global	xPortGetFreeHeapSize
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 25


 601              		.fpu fpv4-sp-d16
 603              	xPortGetFreeHeapSize:
 604              	.LFB130:
 354:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	return xFreeBytesRemaining;
 605              		.loc 1 354 0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 0
 608              		@ frame_needed = 0, uses_anonymous_args = 0
 609              		@ link register save eliminated.
 356:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 610              		.loc 1 356 0
 611 0000 014B     		ldr	r3, .L56
 612 0002 1868     		ldr	r0, [r3]
 613 0004 7047     		bx	lr
 614              	.L57:
 615 0006 00BF     		.align	2
 616              	.L56:
 617 0008 00000000 		.word	.LANCHOR3
 618              		.cfi_endproc
 619              	.LFE130:
 621              		.section	.text.xPortGetMinimumEverFreeHeapSize,"ax",%progbits
 622              		.align	1
 623              		.global	xPortGetMinimumEverFreeHeapSize
 624              		.syntax unified
 625              		.thumb
 626              		.thumb_func
 627              		.fpu fpv4-sp-d16
 629              	xPortGetMinimumEverFreeHeapSize:
 630              	.LFB131:
 360:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	return xMinimumEverFreeBytesRemaining;
 631              		.loc 1 360 0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 0
 634              		@ frame_needed = 0, uses_anonymous_args = 0
 635              		@ link register save eliminated.
 362:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 636              		.loc 1 362 0
 637 0000 014B     		ldr	r3, .L59
 638 0002 1868     		ldr	r0, [r3]
 639 0004 7047     		bx	lr
 640              	.L60:
 641 0006 00BF     		.align	2
 642              	.L59:
 643 0008 00000000 		.word	.LANCHOR2
 644              		.cfi_endproc
 645              	.LFE131:
 647              		.section	.text.vPortInitialiseBlocks,"ax",%progbits
 648              		.align	1
 649              		.global	vPortInitialiseBlocks
 650              		.syntax unified
 651              		.thumb
 652              		.thumb_func
 653              		.fpu fpv4-sp-d16
 655              	vPortInitialiseBlocks:
 656              	.LFB132:
 366:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** 	/* This just exists to keep the linker quiet. */
 657              		.loc 1 366 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 26


 658              		.cfi_startproc
 659              		@ args = 0, pretend = 0, frame = 0
 660              		@ frame_needed = 0, uses_anonymous_args = 0
 661              		@ link register save eliminated.
 368:../Middlewares/FreeRTOS//Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 662              		.loc 1 368 0
 663 0000 7047     		bx	lr
 664              		.cfi_endproc
 665              	.LFE132:
 667              		.section	.bss.pxEnd,"aw",%nobits
 668              		.align	2
 669              		.set	.LANCHOR1,. + 0
 672              	pxEnd:
 673 0000 00000000 		.space	4
 674              		.section	.bss.ucHeap,"aw",%nobits
 675              		.align	2
 678              	ucHeap:
 679 0000 00000000 		.space	20480
 679      00000000 
 679      00000000 
 679      00000000 
 679      00000000 
 680              		.section	.bss.xBlockAllocatedBit,"aw",%nobits
 681              		.align	2
 682              		.set	.LANCHOR4,. + 0
 685              	xBlockAllocatedBit:
 686 0000 00000000 		.space	4
 687              		.section	.bss.xFreeBytesRemaining,"aw",%nobits
 688              		.align	2
 689              		.set	.LANCHOR3,. + 0
 692              	xFreeBytesRemaining:
 693 0000 00000000 		.space	4
 694              		.section	.bss.xMinimumEverFreeBytesRemaining,"aw",%nobits
 695              		.align	2
 696              		.set	.LANCHOR2,. + 0
 699              	xMinimumEverFreeBytesRemaining:
 700 0000 00000000 		.space	4
 701              		.section	.bss.xStart,"aw",%nobits
 702              		.align	2
 703              		.set	.LANCHOR0,. + 0
 706              	xStart:
 707 0000 00000000 		.space	8
 707      00000000 
 708              		.text
 709              	.Letext0:
 710              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 711              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 712              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 713              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 714              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 715              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 716              		.file 9 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 717              		.file 10 "../Libraries/CMSIS/CM4/CoreSupport/core_cm4.h"
 718              		.file 11 "../Libraries/CMSIS/CM4/DeviceSupport/system_at32f4xx.h"
 719              		.file 12 "Inc/FreeRTOSConfig.h"
 720              		.file 13 "../Middlewares/FreeRTOS//Source/include/task.h"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s 			page 27


DEFINED SYMBOLS
                            *ABS*:0000000000000000 heap_4.c
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:17     .text.prvHeapInit:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:23     .text.prvHeapInit:0000000000000000 prvHeapInit
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:102    .text.prvHeapInit:000000000000004c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:678    .bss.ucHeap:0000000000000000 ucHeap
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:112    .text.prvInsertBlockIntoFreeList:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:118    .text.prvInsertBlockIntoFreeList:0000000000000000 prvInsertBlockIntoFreeList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:207    .text.prvInsertBlockIntoFreeList:0000000000000050 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:213    .text.pvPortMalloc:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:220    .text.pvPortMalloc:0000000000000000 pvPortMalloc
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:472    .text.pvPortMalloc:0000000000000108 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:481    .text.vPortFree:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:488    .text.vPortFree:0000000000000000 vPortFree
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:590    .text.vPortFree:0000000000000068 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:596    .text.xPortGetFreeHeapSize:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:603    .text.xPortGetFreeHeapSize:0000000000000000 xPortGetFreeHeapSize
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:617    .text.xPortGetFreeHeapSize:0000000000000008 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:622    .text.xPortGetMinimumEverFreeHeapSize:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:629    .text.xPortGetMinimumEverFreeHeapSize:0000000000000000 xPortGetMinimumEverFreeHeapSize
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:643    .text.xPortGetMinimumEverFreeHeapSize:0000000000000008 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:648    .text.vPortInitialiseBlocks:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:655    .text.vPortInitialiseBlocks:0000000000000000 vPortInitialiseBlocks
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:668    .bss.pxEnd:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:672    .bss.pxEnd:0000000000000000 pxEnd
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:675    .bss.ucHeap:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:681    .bss.xBlockAllocatedBit:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:685    .bss.xBlockAllocatedBit:0000000000000000 xBlockAllocatedBit
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:688    .bss.xFreeBytesRemaining:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:692    .bss.xFreeBytesRemaining:0000000000000000 xFreeBytesRemaining
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:695    .bss.xMinimumEverFreeBytesRemaining:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:699    .bss.xMinimumEverFreeBytesRemaining:0000000000000000 xMinimumEverFreeBytesRemaining
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:702    .bss.xStart:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccSXwEFf.s:706    .bss.xStart:0000000000000000 xStart

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
vApplicationMallocFailedHook
