ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"port.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.prvTaskExitError,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv4-sp-d16
  23              	prvTaskExitError:
  24              	.LFB129:
  25              		.file 1 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c"
   1:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*
   2:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
   5:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
   7:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
   9:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
  13:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
  20:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
  25:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  32:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 2


  34:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  37:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  38:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
  39:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     defined configASSERT()?
  42:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
  43:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
  47:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
  52:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
  56:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
  59:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
  63:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
  67:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** */
  69:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
  70:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------
  71:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  * Implementation of functions defined in portable.h for the ARM CM4F port.
  72:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  *----------------------------------------------------------*/
  73:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
  74:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /* Scheduler includes. */
  75:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #include "FreeRTOS.h"
  76:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #include "task.h"
  77:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
  78:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #ifndef __VFP_FP__
  79:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	#error This port can only be used when the project options are configured to enable hardware float
  80:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #endif
  81:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
  82:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  83:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  84:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  85:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  86:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #else
  87:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  88:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	as the core. */
  89:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  90:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #endif
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 3


  91:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
  92:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the core.  Registers first... */
  93:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  94:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  95:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  96:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
  97:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /* ...then bits in the registers. */
  98:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
  99:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
 100:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
 101:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
 102:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
 103:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 104:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /* Constants used to detect a Cortex-M7 r0p1 core, which should use the ARM_CM7
 105:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** r0p1 port. */
 106:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portCPUID							( * ( ( volatile uint32_t * ) 0xE000ed00 ) )
 107:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portCORTEX_M7_r0p1_ID				( 0x410FC271UL )
 108:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portCORTEX_M7_r0p0_ID				( 0x410FC270UL )
 109:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 110:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
 111:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
 112:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 113:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to check the validity of an interrupt priority. */
 114:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
 115:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
 116:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
 117:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
 118:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
 119:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
 120:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
 121:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
 122:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 123:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
 124:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
 125:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 126:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the VFP. */
 127:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portFPCCR							( ( volatile uint32_t * ) 0xe000ef34 ) /* Floating point context control re
 128:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portASPEN_AND_LSPEN_BITS			( 0x3UL << 30UL )
 129:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 130:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to set up the initial stack. */
 131:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_XPSR					( 0x01000000 )
 132:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_EXEC_RETURN				( 0xfffffffd )
 133:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 134:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /* The systick is a 24-bit counter. */
 135:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
 136:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 137:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
 138:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
 139:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portSTART_ADDRESS_MASK		( ( StackType_t ) 0xfffffffeUL )
 140:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 141:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 142:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** occurred while the SysTick counter is stopped during tickless idle
 143:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** calculations. */
 144:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
 145:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 146:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 147:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 4


 148:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** debugger. */
 149:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #ifdef configTASK_RETURN_ADDRESS
 150:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 151:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #else
 152:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 153:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #endif
 154:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 155:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 156:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** variable. */
 157:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 158:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 159:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*
 160:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 161:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  * file is weak to allow application writers to change the timer used to
 162:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  * generate the tick interrupt.
 163:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  */
 164:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** void vPortSetupTimerInterrupt( void );
 165:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 166:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*
 167:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  * Exception handlers.
 168:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  */
 169:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 170:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void );
 171:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 172:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 173:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*
 174:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 175:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  */
 176:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 177:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 178:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*
 179:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  * Function to enable the VFP.
 180:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  */
 181:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** static void vPortEnableVFP( void ) __attribute__ (( naked ));
 182:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 183:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*
 184:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 185:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  */
 186:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void );
 187:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 188:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 189:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 190:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*
 191:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  * The number of SysTick increments that make up one tick period.
 192:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  */
 193:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 194:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 195:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 196:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 197:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*
 198:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 199:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  * 24 bit resolution of the SysTick timer.
 200:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  */
 201:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 202:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 203:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 204:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 5


 205:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*
 206:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 207:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  * power functionality only.
 208:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  */
 209:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 210:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 211:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 212:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 213:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*
 214:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 215:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 216:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 217:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  */
 218:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #if ( configASSERT_DEFINED == 1 )
 219:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 220:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 221:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 222:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configASSERT_DEFINED */
 223:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 224:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 225:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 226:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*
 227:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 228:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  */
 229:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 230:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** {
 231:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 232:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	interrupt. */
 233:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 234:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* Offset added to account for the way the MCU uses the stack on entry/exit
 235:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	of interrupts, and to ensure alignment. */
 236:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 238:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 239:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 240:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 241:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 242:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 243:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* Save code space by skipping register initialisation. */
 245:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 246:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 247:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 248:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* A save method is being used that requires each task to maintain its
 249:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	own exec return value. */
 250:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 251:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 252:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 253:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 254:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 255:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	return pxTopOfStack;
 256:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** }
 257:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 258:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 259:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void )
 260:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** {
  26              		.loc 1 260 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 6


  27              		.cfi_startproc
  28              		@ Volatile: function does not return.
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 261:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 262:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 263:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	should instead call vTaskDelete( NULL ).
 264:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 265:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 266:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	defined, then stop here so application writers can catch the error. */
 267:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
  32              		.loc 1 267 0
  33 0000 0B4B     		ldr	r3, .L5
  34 0002 1B68     		ldr	r3, [r3]
  35 0004 B3F1FF3F 		cmp	r3, #-1
  36 0008 08D0     		beq	.L2
  37              	.LBB29:
  38              	.LBB30:
  39              		.file 2 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 7


  38:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 8


  95:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 9


 152:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 10


 209:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  40              		.loc 2 237 0
  41              		.syntax unified
  42              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  43 000a 4FF01003 			mov r3, #16												
  44 000e 83F31188 		msr basepri, r3											
  45 0012 BFF36F8F 		isb														
  46 0016 BFF34F8F 		dsb														
  47              	
  48              	@ 0 "" 2
  49              	.LVL0:
  50              		.thumb
  51              		.syntax unified
  52              	.L3:
  53 001a FEE7     		b	.L3
  54              	.L2:
  55              	.LBE30:
  56              	.LBE29:
  57              	.LBB31:
  58              	.LBB32:
  59              		.syntax unified
  60              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  61 001c 4FF01003 			mov r3, #16												
  62 0020 83F31188 		msr basepri, r3											
  63 0024 BFF36F8F 		isb														
  64 0028 BFF34F8F 		dsb														
  65              	
  66              	@ 0 "" 2
  67              	.LVL1:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 11


  68              		.thumb
  69              		.syntax unified
  70              	.L4:
  71 002c FEE7     		b	.L4
  72              	.L6:
  73 002e 00BF     		.align	2
  74              	.L5:
  75 0030 00000000 		.word	.LANCHOR0
  76              	.LBE32:
  77              	.LBE31:
  78              		.cfi_endproc
  79              	.LFE129:
  81              		.section	.text.prvPortStartFirstTask,"ax",%progbits
  82              		.align	1
  83              		.syntax unified
  84              		.thumb
  85              		.thumb_func
  86              		.fpu fpv4-sp-d16
  88              	prvPortStartFirstTask:
  89              	.LFB131:
 268:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 269:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	for( ;; );
 270:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** }
 271:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 272:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 273:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void )
 274:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** {
 275:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile (
 276:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 277:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 278:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 279:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldmia r0!, {r4-r11, r14}		\n" /* Pop the registers that are not automatically saved on excep
 280:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 281:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					"	isb								\n"
 282:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					"	mov r0, #0 						\n"
 283:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr	basepri, r0					\n"
 284:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					"	bx r14							\n"
 285:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					"									\n"
 286:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					"	.align 4						\n"
 287:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 288:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				);
 289:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** }
 290:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 291:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 292:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void )
 293:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** {
  90              		.loc 1 293 0
  91              		.cfi_startproc
  92              		@ Naked Function: prologue and epilogue provided by programmer.
  93              		@ args = 0, pretend = 0, frame = 0
  94              		@ frame_needed = 0, uses_anonymous_args = 0
 294:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile(
  95              		.loc 1 294 0
  96              		.syntax unified
  97              	@ 294 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c" 1
  98 0000 0648     		 ldr r0, =0xE000ED08 	
  99 0002 0068     	 ldr r0, [r0] 			
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 12


 100 0004 0068     	 ldr r0, [r0] 			
 101 0006 80F30888 	 msr msp, r0			
 102 000a 62B6     	 cpsie i				
 103 000c 61B6     	 cpsie f				
 104 000e BFF34F8F 	 dsb					
 105 0012 BFF36F8F 	 isb					
 106 0016 00DF     	 svc 0					
 107 0018 00BF     	 nop					
 108              	
 109              	@ 0 "" 2
 295:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 296:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 297:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 298:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 299:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 300:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					" cpsie f				\n"
 301:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					" dsb					\n"
 302:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					" isb					\n"
 303:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					" svc 0					\n" /* System call to start first task. */
 304:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					" nop					\n"
 305:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				);
 306:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** }
 110              		.loc 1 306 0
 111              		.thumb
 112              		.syntax unified
 113              		.cfi_endproc
 114              	.LFE131:
 116 001a 0000     		.section	.text.vPortEnableVFP,"ax",%progbits
 117              		.align	1
 118              		.syntax unified
 119              		.thumb
 120              		.thumb_func
 121              		.fpu fpv4-sp-d16
 123              	vPortEnableVFP:
 124              	.LFB139:
 307:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 308:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 309:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*
 310:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 311:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  */
 312:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** BaseType_t xPortStartScheduler( void )
 313:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** {
 314:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 315:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 316:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 317:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 318:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* This port can be used on all revisions of the Cortex-M7 core other than
 319:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	the r0p1 parts.  r0p1 parts should use the port from the
 320:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/source/portable/GCC/ARM_CM7/r0p1 directory. */
 321:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 322:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 323:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 324:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	#if( configASSERT_DEFINED == 1 )
 325:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	{
 326:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		volatile uint32_t ulOriginalPriority;
 327:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 328:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		volatile uint8_t ucMaxPriorityValue;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 13


 329:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 330:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 331:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		functions can be called.  ISR safe functions are those that end in
 332:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 333:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 334:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 335:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 336:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 337:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 338:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		/* Determine the number of priority bits available.  First write to all
 339:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		possible bits. */
 340:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 341:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 342:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		/* Read the value back to see how many bits stuck. */
 343:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 344:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 345:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		/* Use the same mask on the maximum system call priority. */
 346:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 347:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 348:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 349:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		of bits read back. */
 350:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 351:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 352:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		{
 353:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			ulMaxPRIGROUPValue--;
 354:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 355:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		}
 356:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 357:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 358:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		register. */
 359:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 360:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 361:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 362:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 363:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		value. */
 364:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 365:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	}
 366:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	#endif /* conifgASSERT_DEFINED */
 367:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 368:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 369:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 370:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 371:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 372:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 373:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	here already. */
 374:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	vPortSetupTimerInterrupt();
 375:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 376:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 377:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting = 0;
 378:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 379:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* Ensure the VFP is enabled - it should be anyway. */
 380:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	vPortEnableVFP();
 381:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 382:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* Lazy save always. */
 383:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 384:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 385:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the first task. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 14


 386:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	prvPortStartFirstTask();
 387:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 388:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 389:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	exit error function to prevent compiler warnings about a static function
 390:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	not being called in the case that the application writer overrides this
 391:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS. */
 392:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	prvTaskExitError();
 393:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 394:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* Should not get here! */
 395:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	return 0;
 396:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** }
 397:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 398:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 399:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** void vPortEndScheduler( void )
 400:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** {
 401:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 402:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	Artificially force an assert. */
 403:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 404:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** }
 405:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 406:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 407:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** void vPortEnterCritical( void )
 408:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** {
 409:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 410:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting++;
 411:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 412:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 413:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 414:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 415:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 416:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	assert function also uses a critical section. */
 417:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 1 )
 418:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	{
 419:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 420:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	}
 421:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** }
 422:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 423:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 424:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** void vPortExitCritical( void )
 425:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** {
 426:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting );
 427:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 428:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 429:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	{
 430:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		portENABLE_INTERRUPTS();
 431:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	}
 432:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** }
 433:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 434:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 435:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void )
 436:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** {
 437:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* This is a naked function. */
 438:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 439:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 440:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	(
 441:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	mrs r0, psp							\n"
 442:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	isb									\n"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 15


 443:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 444:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 445:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r2, [r3]						\n"
 446:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 447:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, push high vfp registers. *
 448:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 449:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	vstmdbeq r0!, {s16-s31}				\n"
 450:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 451:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb r0!, {r4-r11, r14}			\n" /* Save the core registers. */
 452:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 453:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 454:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 455:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb sp!, {r3}						\n"
 456:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, %0 							\n"
 457:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 458:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	dsb									\n"
 459:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	isb									\n"
 460:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	bl vTaskSwitchContext				\n"
 461:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, #0							\n"
 462:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 463:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia sp!, {r3}						\n"
 464:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 465:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r1, [r3]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 466:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r0, [r1]						\n"
 467:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 468:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia r0!, {r4-r11, r14}			\n" /* Pop the core registers. */
 469:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 470:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, pop the high vfp registers
 471:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 472:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	vldmiaeq r0!, {s16-s31}				\n"
 473:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 474:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr psp, r0							\n"
 475:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	isb									\n"
 476:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 477:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	#ifdef WORKAROUND_PMU_CM001 /* XMC4000 specific errata workaround. */
 478:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		#if WORKAROUND_PMU_CM001 == 1
 479:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"			push { r14 }				\n"
 480:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"			pop { pc }					\n"
 481:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		#endif
 482:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	#endif
 483:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 484:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	bx r14								\n"
 485:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 486:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"	.align 4							\n"
 487:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 488:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 489:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	);
 490:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** }
 491:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 492:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 493:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void )
 494:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** {
 495:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 496:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 497:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	save and then restore the interrupt mask value as its value is already
 498:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	known. */
 499:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 16


 500:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	{
 501:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		/* Increment the RTOS tick. */
 502:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 503:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		{
 504:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			/* A context switch is required.  Context switching is performed in
 505:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 506:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 507:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		}
 508:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	}
 509:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	portENABLE_INTERRUPTS();
 510:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** }
 511:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 512:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 513:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 514:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 515:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 516:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	{
 517:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickCTRL;
 518:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	TickType_t xModifiableIdleTime;
 519:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 520:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 521:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 522:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		{
 523:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 524:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		}
 525:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 526:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 527:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 528:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 529:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		kernel with respect to calendar time. */
 530:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 531:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 532:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 533:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		tick periods.  -1 is used because this code will execute part way
 534:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		through one of the tick periods. */
 535:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 536:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 537:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		{
 538:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 539:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		}
 540:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 541:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 542:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 543:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "cpsid i" );
 544:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "dsb" );
 545:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "isb" );
 546:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 547:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 548:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		to be unsuspended then abandon the low power entry. */
 549:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 550:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		{
 551:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart from whatever is left in the count register to complete
 552:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			this tick period. */
 553:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 554:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 555:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick. */
 556:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 17


 557:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 558:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			/* Reset the reload register to the value required for normal tick
 559:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			periods. */
 560:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 561:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 562:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 563:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			above. */
 564:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "cpsie i" );
 565:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		}
 566:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		else
 567:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		{
 568:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			/* Set the new reload value. */
 569:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 570:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 571:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 572:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			zero. */
 573:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 574:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 575:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick. */
 576:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 577:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 578:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 579:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 580:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 581:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			should not be executed again.  However, the original expected idle
 582:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 583:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 584:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 585:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			if( xModifiableIdleTime > 0 )
 586:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			{
 587:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "dsb" );
 588:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "wfi" );
 589:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "isb" );
 590:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			}
 591:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 592:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 593:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			/* Stop SysTick.  Again, the time the SysTick is stopped for is
 594:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			accounted for as best it can be, but using the tickless mode will
 595:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			inevitably result in some tiny drift of the time maintained by the
 596:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			kernel with respect to calendar time. */
 597:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			ulSysTickCTRL = portNVIC_SYSTICK_CTRL_REG;
 598:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( ulSysTickCTRL & ~portNVIC_SYSTICK_ENABLE_BIT );
 599:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 600:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 601:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			above. */
 602:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "cpsie i" );
 603:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 604:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			if( ( ulSysTickCTRL & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 605:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			{
 606:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				uint32_t ulCalculatedLoadValue;
 607:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 608:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				/* The tick interrupt has already executed, and the SysTick
 609:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				count reloaded with ulReloadValue.  Reset the
 610:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 611:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				period. */
 612:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 613:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 18


 614:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 615:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				underflowed because the post sleep hook did something
 616:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				that took too long. */
 617:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 618:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				{
 619:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 620:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				}
 621:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 622:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 623:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 624:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				/* The tick interrupt handler will already have pended the tick
 625:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				processing in the kernel.  As the pending tick will be
 626:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				processed as soon as this function exits, the tick value
 627:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				maintained by the tick is stepped forward by one less than the
 628:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				time spent waiting. */
 629:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 630:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			}
 631:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			else
 632:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			{
 633:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 634:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 635:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				periods (not the ulReload value which accounted for part
 636:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				ticks). */
 637:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 638:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 639:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				/* How many complete tick periods passed while the processor
 640:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				was waiting? */
 641:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 642:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 643:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 644:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				period remains. */
 645:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulC
 646:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			}
 647:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 648:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 649:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 650:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			value.  The critical section is used to ensure the tick interrupt
 651:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			can only execute once in the case that the reload register is near
 652:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			zero. */
 653:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 654:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			portENTER_CRITICAL();
 655:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			{
 656:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 657:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				vTaskStepTick( ulCompleteTickPeriods );
 658:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 659:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			}
 660:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			portEXIT_CRITICAL();
 661:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		}
 662:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	}
 663:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 664:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 665:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 666:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 667:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*
 668:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 669:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  * frequency.
 670:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c ****  */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 19


 671:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 672:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** {
 673:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 674:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	#if configUSE_TICKLESS_IDLE == 1
 675:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	{
 676:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 677:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 678:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 679:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	}
 680:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 681:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 682:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 683:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 684:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 685:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** }
 686:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 687:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 688:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /* This is a naked function. */
 689:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** static void vPortEnableVFP( void )
 690:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** {
 125              		.loc 1 690 0
 126              		.cfi_startproc
 127              		@ Naked Function: prologue and epilogue provided by programmer.
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 691:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 130              		.loc 1 691 0
 131              		.syntax unified
 132              	@ 691 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c" 1
 133 0000 DFF80C00 			ldr.w r0, =0xE000ED88		
 134 0004 0168     		ldr r1, [r0]				
 135              									
 136 0006 41F47001 		orr r1, r1, #( 0xf << 20 )	
 137 000a 0160     		str r1, [r0]				
 138 000c 7047     		bx r14						
 139              	@ 0 "" 2
 692:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	(
 693:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		"	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
 694:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		"	ldr r1, [r0]				\n"
 695:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		"								\n"
 696:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
 697:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		"	str r1, [r0]				\n"
 698:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		"	bx r14						"
 699:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	);
 700:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** }
 140              		.loc 1 700 0
 141              		.thumb
 142              		.syntax unified
 143              		.cfi_endproc
 144              	.LFE139:
 146 000e 0000     		.section	.text.pxPortInitialiseStack,"ax",%progbits
 147              		.align	1
 148              		.global	pxPortInitialiseStack
 149              		.syntax unified
 150              		.thumb
 151              		.thumb_func
 152              		.fpu fpv4-sp-d16
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 20


 154              	pxPortInitialiseStack:
 155              	.LFB128:
 230:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 156              		.loc 1 230 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 0, uses_anonymous_args = 0
 160              		@ link register save eliminated.
 161              	.LVL2:
 238:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 162              		.loc 1 238 0
 163 0000 4FF08073 		mov	r3, #16777216
 164 0004 40F8043C 		str	r3, [r0, #-4]
 165              	.LVL3:
 240:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 166              		.loc 1 240 0
 167 0008 21F00101 		bic	r1, r1, #1
 168              	.LVL4:
 169 000c 40F8081C 		str	r1, [r0, #-8]
 170              	.LVL5:
 242:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 171              		.loc 1 242 0
 172 0010 054B     		ldr	r3, .L10
 173 0012 40F80C3C 		str	r3, [r0, #-12]
 174              	.LVL6:
 246:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 175              		.loc 1 246 0
 176 0016 40F8202C 		str	r2, [r0, #-32]
 177              	.LVL7:
 251:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 178              		.loc 1 251 0
 179 001a 6FF00203 		mvn	r3, #2
 180 001e 40F8243C 		str	r3, [r0, #-36]
 181              	.LVL8:
 256:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 182              		.loc 1 256 0
 183 0022 4438     		subs	r0, r0, #68
 184              	.LVL9:
 185 0024 7047     		bx	lr
 186              	.L11:
 187 0026 00BF     		.align	2
 188              	.L10:
 189 0028 00000000 		.word	prvTaskExitError
 190              		.cfi_endproc
 191              	.LFE128:
 193              		.section	.text.SVC_Handler,"ax",%progbits
 194              		.align	1
 195              		.global	SVC_Handler
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 199              		.fpu fpv4-sp-d16
 201              	SVC_Handler:
 202              	.LFB130:
 274:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile (
 203              		.loc 1 274 0
 204              		.cfi_startproc
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 21


 205              		@ Naked Function: prologue and epilogue provided by programmer.
 206              		@ args = 0, pretend = 0, frame = 0
 207              		@ frame_needed = 0, uses_anonymous_args = 0
 275:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 208              		.loc 1 275 0
 209              		.syntax unified
 210              	@ 275 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c" 1
 211 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 212 0002 1968     		ldr r1, [r3]					
 213 0004 0868     		ldr r0, [r1]					
 214 0006 B0E8F04F 		ldmia r0!, {r4-r11, r14}		
 215 000a 80F30988 		msr psp, r0						
 216 000e BFF36F8F 		isb								
 217 0012 4FF00000 		mov r0, #0 						
 218 0016 80F31188 		msr	basepri, r0					
 219 001a 7047     		bx r14							
 220              										
 221 001c AFF30080 		.align 4						
 222 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 223              	
 224              	@ 0 "" 2
 289:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 225              		.loc 1 289 0
 226              		.thumb
 227              		.syntax unified
 228              		.cfi_endproc
 229              	.LFE130:
 231              		.section	.text.vPortEndScheduler,"ax",%progbits
 232              		.align	1
 233              		.global	vPortEndScheduler
 234              		.syntax unified
 235              		.thumb
 236              		.thumb_func
 237              		.fpu fpv4-sp-d16
 239              	vPortEndScheduler:
 240              	.LFB133:
 400:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 241              		.loc 1 400 0
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 0
 244              		@ frame_needed = 0, uses_anonymous_args = 0
 245              		@ link register save eliminated.
 403:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** }
 246              		.loc 1 403 0
 247 0000 074B     		ldr	r3, .L16
 248 0002 1B68     		ldr	r3, [r3]
 249 0004 B3F57A7F 		cmp	r3, #1000
 250 0008 08D0     		beq	.L13
 251              	.LBB33:
 252              	.LBB34:
 253              		.loc 2 237 0
 254              		.syntax unified
 255              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 256 000a 4FF01003 			mov r3, #16												
 257 000e 83F31188 		msr basepri, r3											
 258 0012 BFF36F8F 		isb														
 259 0016 BFF34F8F 		dsb														
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 22


 260              	
 261              	@ 0 "" 2
 262              	.LVL10:
 263              		.thumb
 264              		.syntax unified
 265              	.L15:
 266 001a FEE7     		b	.L15
 267              	.L13:
 268              	.LBE34:
 269              	.LBE33:
 404:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 270              		.loc 1 404 0
 271 001c 7047     		bx	lr
 272              	.L17:
 273 001e 00BF     		.align	2
 274              	.L16:
 275 0020 00000000 		.word	.LANCHOR0
 276              		.cfi_endproc
 277              	.LFE133:
 279              		.section	.text.vPortEnterCritical,"ax",%progbits
 280              		.align	1
 281              		.global	vPortEnterCritical
 282              		.syntax unified
 283              		.thumb
 284              		.thumb_func
 285              		.fpu fpv4-sp-d16
 287              	vPortEnterCritical:
 288              	.LFB134:
 408:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 289              		.loc 1 408 0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 0, uses_anonymous_args = 0
 293              		@ link register save eliminated.
 294              	.LBB35:
 295              	.LBB36:
 296              		.loc 2 237 0
 297              		.syntax unified
 298              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 299 0000 4FF01003 			mov r3, #16												
 300 0004 83F31188 		msr basepri, r3											
 301 0008 BFF36F8F 		isb														
 302 000c BFF34F8F 		dsb														
 303              	
 304              	@ 0 "" 2
 305              		.thumb
 306              		.syntax unified
 307              	.LBE36:
 308              	.LBE35:
 410:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 309              		.loc 1 410 0
 310 0010 0A4A     		ldr	r2, .L22
 311 0012 1368     		ldr	r3, [r2]
 312 0014 0133     		adds	r3, r3, #1
 313 0016 1360     		str	r3, [r2]
 417:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	{
 314              		.loc 1 417 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 23


 315 0018 012B     		cmp	r3, #1
 316 001a 00D0     		beq	.L21
 317              	.L18:
 421:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 318              		.loc 1 421 0
 319 001c 7047     		bx	lr
 320              	.L21:
 419:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	}
 321              		.loc 1 419 0
 322 001e 084B     		ldr	r3, .L22+4
 323 0020 1B68     		ldr	r3, [r3]
 324 0022 13F0FF0F 		tst	r3, #255
 325 0026 F9D0     		beq	.L18
 326              	.LBB37:
 327              	.LBB38:
 328              		.loc 2 237 0
 329              		.syntax unified
 330              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 331 0028 4FF01003 			mov r3, #16												
 332 002c 83F31188 		msr basepri, r3											
 333 0030 BFF36F8F 		isb														
 334 0034 BFF34F8F 		dsb														
 335              	
 336              	@ 0 "" 2
 337              	.LVL11:
 338              		.thumb
 339              		.syntax unified
 340              	.L20:
 341 0038 FEE7     		b	.L20
 342              	.L23:
 343 003a 00BF     		.align	2
 344              	.L22:
 345 003c 00000000 		.word	.LANCHOR0
 346 0040 04ED00E0 		.word	-536810236
 347              	.LBE38:
 348              	.LBE37:
 349              		.cfi_endproc
 350              	.LFE134:
 352              		.section	.text.vPortExitCritical,"ax",%progbits
 353              		.align	1
 354              		.global	vPortExitCritical
 355              		.syntax unified
 356              		.thumb
 357              		.thumb_func
 358              		.fpu fpv4-sp-d16
 360              	vPortExitCritical:
 361              	.LFB135:
 425:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting );
 362              		.loc 1 425 0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 0
 365              		@ frame_needed = 0, uses_anonymous_args = 0
 366              		@ link register save eliminated.
 426:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 367              		.loc 1 426 0
 368 0000 094B     		ldr	r3, .L28
 369 0002 1B68     		ldr	r3, [r3]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 24


 370 0004 43B9     		cbnz	r3, .L25
 371              	.LBB39:
 372              	.LBB40:
 373              		.loc 2 237 0
 374              		.syntax unified
 375              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 376 0006 4FF01003 			mov r3, #16												
 377 000a 83F31188 		msr basepri, r3											
 378 000e BFF36F8F 		isb														
 379 0012 BFF34F8F 		dsb														
 380              	
 381              	@ 0 "" 2
 382              	.LVL12:
 383              		.thumb
 384              		.syntax unified
 385              	.L26:
 386 0016 FEE7     		b	.L26
 387              	.L25:
 388              	.LBE40:
 389              	.LBE39:
 427:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 390              		.loc 1 427 0
 391 0018 013B     		subs	r3, r3, #1
 392 001a 034A     		ldr	r2, .L28
 393 001c 1360     		str	r3, [r2]
 428:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	{
 394              		.loc 1 428 0
 395 001e 0BB9     		cbnz	r3, .L24
 396              	.LVL13:
 397              	.LBB41:
 398              	.LBB42:
 238:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 245:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 254:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 262:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 25


 264:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 266:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 399              		.loc 2 271 0
 400              		.syntax unified
 401              	@ 271 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 402 0020 83F31188 			msr basepri, r3	
 403              	@ 0 "" 2
 404              	.LVL14:
 405              		.thumb
 406              		.syntax unified
 407              	.L24:
 408              	.LBE42:
 409              	.LBE41:
 432:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 410              		.loc 1 432 0
 411 0024 7047     		bx	lr
 412              	.L29:
 413 0026 00BF     		.align	2
 414              	.L28:
 415 0028 00000000 		.word	.LANCHOR0
 416              		.cfi_endproc
 417              	.LFE135:
 419              		.section	.text.PendSV_Handler,"ax",%progbits
 420              		.align	1
 421              		.global	PendSV_Handler
 422              		.syntax unified
 423              		.thumb
 424              		.thumb_func
 425              		.fpu fpv4-sp-d16
 427              	PendSV_Handler:
 428              	.LFB136:
 436:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* This is a naked function. */
 429              		.loc 1 436 0
 430              		.cfi_startproc
 431              		@ Naked Function: prologue and epilogue provided by programmer.
 432              		@ args = 0, pretend = 0, frame = 0
 433              		@ frame_needed = 0, uses_anonymous_args = 0
 439:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	(
 434              		.loc 1 439 0
 435              		.syntax unified
 436              	@ 439 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c" 1
 437 0000 EFF30980 			mrs r0, psp							
 438 0004 BFF36F8F 		isb									
 439              											
 440 0008 154B     		ldr	r3, pxCurrentTCBConst			
 441 000a 1A68     		ldr	r2, [r3]						
 442              											
 443 000c 1EF0100F 		tst r14, #0x10						
 444 0010 08BF     		it eq								
 445 0012 20ED108A 		vstmdbeq r0!, {s16-s31}				
 446              											
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 26


 447 0016 20E9F04F 		stmdb r0!, {r4-r11, r14}			
 448              											
 449 001a 1060     		str r0, [r2]						
 450              											
 451 001c 4DF8043D 		stmdb sp!, {r3}						
 452 0020 4FF01000 		mov r0, #16 							
 453 0024 80F31188 		msr basepri, r0						
 454 0028 BFF34F8F 		dsb									
 455 002c BFF36F8F 		isb									
 456 0030 FFF7FEFF 		bl vTaskSwitchContext				
 457 0034 4FF00000 		mov r0, #0							
 458 0038 80F31188 		msr basepri, r0						
 459 003c 08BC     		ldmia sp!, {r3}						
 460              											
 461 003e 1968     		ldr r1, [r3]						
 462 0040 0868     		ldr r0, [r1]						
 463              											
 464 0042 B0E8F04F 		ldmia r0!, {r4-r11, r14}			
 465              											
 466 0046 1EF0100F 		tst r14, #0x10						
 467 004a 08BF     		it eq								
 468 004c B0EC108A 		vldmiaeq r0!, {s16-s31}				
 469              											
 470 0050 80F30988 		msr psp, r0							
 471 0054 BFF36F8F 		isb									
 472              											
 473              											
 474 0058 7047     		bx r14								
 475              											
 476 005a 00BFAFF3 		.align 4							
 476      0080
 477 0060 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 478              	
 479              	@ 0 "" 2
 490:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 480              		.loc 1 490 0
 481              		.thumb
 482              		.syntax unified
 483              		.cfi_endproc
 484              	.LFE136:
 486              		.section	.text.SysTick_Handler,"ax",%progbits
 487              		.align	1
 488              		.global	SysTick_Handler
 489              		.syntax unified
 490              		.thumb
 491              		.thumb_func
 492              		.fpu fpv4-sp-d16
 494              	SysTick_Handler:
 495              	.LFB137:
 494:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 496              		.loc 1 494 0
 497              		.cfi_startproc
 498              		@ args = 0, pretend = 0, frame = 0
 499              		@ frame_needed = 0, uses_anonymous_args = 0
 500 0000 08B5     		push	{r3, lr}
 501              	.LCFI0:
 502              		.cfi_def_cfa_offset 8
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 27


 503              		.cfi_offset 3, -8
 504              		.cfi_offset 14, -4
 505              	.LBB43:
 506              	.LBB44:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 507              		.loc 2 237 0
 508              		.syntax unified
 509              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 510 0002 4FF01003 			mov r3, #16												
 511 0006 83F31188 		msr basepri, r3											
 512 000a BFF36F8F 		isb														
 513 000e BFF34F8F 		dsb														
 514              	
 515              	@ 0 "" 2
 516              		.thumb
 517              		.syntax unified
 518              	.LBE44:
 519              	.LBE43:
 502:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		{
 520              		.loc 1 502 0
 521 0012 FFF7FEFF 		bl	xTaskIncrementTick
 522              	.LVL15:
 523 0016 18B1     		cbz	r0, .L32
 506:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		}
 524              		.loc 1 506 0
 525 0018 034B     		ldr	r3, .L34
 526 001a 4FF08052 		mov	r2, #268435456
 527 001e 1A60     		str	r2, [r3]
 528              	.L32:
 529              	.LVL16:
 530              	.LBB45:
 531              	.LBB46:
 532              		.loc 2 271 0
 533 0020 0023     		movs	r3, #0
 534              		.syntax unified
 535              	@ 271 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 536 0022 83F31188 			msr basepri, r3	
 537              	@ 0 "" 2
 538              	.LVL17:
 539              		.thumb
 540              		.syntax unified
 541              	.LBE46:
 542              	.LBE45:
 510:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 543              		.loc 1 510 0
 544 0026 08BD     		pop	{r3, pc}
 545              	.L35:
 546              		.align	2
 547              	.L34:
 548 0028 04ED00E0 		.word	-536810236
 549              		.cfi_endproc
 550              	.LFE137:
 552              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 553              		.align	1
 554              		.weak	vPortSetupTimerInterrupt
 555              		.syntax unified
 556              		.thumb
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 28


 557              		.thumb_func
 558              		.fpu fpv4-sp-d16
 560              	vPortSetupTimerInterrupt:
 561              	.LFB138:
 672:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 562              		.loc 1 672 0
 563              		.cfi_startproc
 564              		@ args = 0, pretend = 0, frame = 0
 565              		@ frame_needed = 0, uses_anonymous_args = 0
 566              		@ link register save eliminated.
 683:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 567              		.loc 1 683 0
 568 0000 034B     		ldr	r3, .L37
 569 0002 41F63F72 		movw	r2, #7999
 570 0006 1A60     		str	r2, [r3]
 684:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** }
 571              		.loc 1 684 0
 572 0008 043B     		subs	r3, r3, #4
 573 000a 0722     		movs	r2, #7
 574 000c 1A60     		str	r2, [r3]
 685:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 575              		.loc 1 685 0
 576 000e 7047     		bx	lr
 577              	.L38:
 578              		.align	2
 579              	.L37:
 580 0010 14E000E0 		.word	-536813548
 581              		.cfi_endproc
 582              	.LFE138:
 584              		.section	.text.xPortStartScheduler,"ax",%progbits
 585              		.align	1
 586              		.global	xPortStartScheduler
 587              		.syntax unified
 588              		.thumb
 589              		.thumb_func
 590              		.fpu fpv4-sp-d16
 592              	xPortStartScheduler:
 593              	.LFB132:
 313:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 594              		.loc 1 313 0
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 8
 597              		@ frame_needed = 0, uses_anonymous_args = 0
 321:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 598              		.loc 1 321 0
 599 0000 314B     		ldr	r3, .L50
 600 0002 1A68     		ldr	r2, [r3]
 601 0004 314B     		ldr	r3, .L50+4
 602 0006 9A42     		cmp	r2, r3
 603 0008 0DD0     		beq	.L48
 322:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 604              		.loc 1 322 0
 605 000a 2F4B     		ldr	r3, .L50
 606 000c 1A68     		ldr	r2, [r3]
 607 000e 304B     		ldr	r3, .L50+8
 608 0010 9A42     		cmp	r2, r3
 609 0012 11D1     		bne	.L42
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 29


 610              	.LBB47:
 611              	.LBB48:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 612              		.loc 2 237 0
 613              		.syntax unified
 614              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 615 0014 4FF01003 			mov r3, #16												
 616 0018 83F31188 		msr basepri, r3											
 617 001c BFF36F8F 		isb														
 618 0020 BFF34F8F 		dsb														
 619              	
 620              	@ 0 "" 2
 621              	.LVL18:
 622              		.thumb
 623              		.syntax unified
 624              	.L43:
 625 0024 FEE7     		b	.L43
 626              	.L48:
 627              	.LBE48:
 628              	.LBE47:
 629              	.LBB49:
 630              	.LBB50:
 631              		.syntax unified
 632              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 633 0026 4FF01003 			mov r3, #16												
 634 002a 83F31188 		msr basepri, r3											
 635 002e BFF36F8F 		isb														
 636 0032 BFF34F8F 		dsb														
 637              	
 638              	@ 0 "" 2
 639              	.LVL19:
 640              		.thumb
 641              		.syntax unified
 642              	.L41:
 643 0036 FEE7     		b	.L41
 644              	.L42:
 645              	.LBE50:
 646              	.LBE49:
 313:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 647              		.loc 1 313 0
 648 0038 00B5     		push	{lr}
 649              	.LCFI1:
 650              		.cfi_def_cfa_offset 4
 651              		.cfi_offset 14, -4
 652 003a 83B0     		sub	sp, sp, #12
 653              	.LCFI2:
 654              		.cfi_def_cfa_offset 16
 655              	.LVL20:
 656              	.LBB51:
 336:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 657              		.loc 1 336 0
 658 003c 254B     		ldr	r3, .L50+12
 659 003e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 660 0040 D2B2     		uxtb	r2, r2
 661 0042 0192     		str	r2, [sp, #4]
 340:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 662              		.loc 1 340 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 30


 663 0044 FF22     		movs	r2, #255
 664 0046 1A70     		strb	r2, [r3]
 343:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 665              		.loc 1 343 0
 666 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 667 004a DBB2     		uxtb	r3, r3
 668 004c 8DF80330 		strb	r3, [sp, #3]
 346:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 669              		.loc 1 346 0
 670 0050 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 671 0054 03F01003 		and	r3, r3, #16
 672 0058 1F4A     		ldr	r2, .L50+16
 673 005a 1370     		strb	r3, [r2]
 350:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 674              		.loc 1 350 0
 675 005c 1F4B     		ldr	r3, .L50+20
 676 005e 0722     		movs	r2, #7
 677 0060 1A60     		str	r2, [r3]
 678              	.L44:
 351:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		{
 679              		.loc 1 351 0
 680 0062 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 681 0066 13F0800F 		tst	r3, #128
 682 006a 0AD0     		beq	.L49
 353:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 683              		.loc 1 353 0
 684 006c 1B4A     		ldr	r2, .L50+20
 685 006e 1368     		ldr	r3, [r2]
 686 0070 013B     		subs	r3, r3, #1
 687 0072 1360     		str	r3, [r2]
 354:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		}
 688              		.loc 1 354 0
 689 0074 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 690 0078 5B00     		lsls	r3, r3, #1
 691 007a DBB2     		uxtb	r3, r3
 692 007c 8DF80330 		strb	r3, [sp, #3]
 693 0080 EFE7     		b	.L44
 694              	.L49:
 359:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 695              		.loc 1 359 0
 696 0082 164A     		ldr	r2, .L50+20
 697 0084 1368     		ldr	r3, [r2]
 698 0086 1B02     		lsls	r3, r3, #8
 360:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 699              		.loc 1 360 0
 700 0088 03F4E063 		and	r3, r3, #1792
 701 008c 1360     		str	r3, [r2]
 364:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	}
 702              		.loc 1 364 0
 703 008e 019B     		ldr	r3, [sp, #4]
 704 0090 DBB2     		uxtb	r3, r3
 705 0092 104A     		ldr	r2, .L50+12
 706 0094 1370     		strb	r3, [r2]
 707              	.LBE51:
 369:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 708              		.loc 1 369 0
 709 0096 124B     		ldr	r3, .L50+24
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 31


 710 0098 1A68     		ldr	r2, [r3]
 711 009a 42F47002 		orr	r2, r2, #15728640
 712 009e 1A60     		str	r2, [r3]
 370:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 713              		.loc 1 370 0
 714 00a0 1A68     		ldr	r2, [r3]
 715 00a2 42F07042 		orr	r2, r2, #-268435456
 716 00a6 1A60     		str	r2, [r3]
 374:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 717              		.loc 1 374 0
 718 00a8 FFF7FEFF 		bl	vPortSetupTimerInterrupt
 719              	.LVL21:
 377:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 720              		.loc 1 377 0
 721 00ac 0D4B     		ldr	r3, .L50+28
 722 00ae 0022     		movs	r2, #0
 723 00b0 1A60     		str	r2, [r3]
 380:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 724              		.loc 1 380 0
 725 00b2 FFF7FEFF 		bl	vPortEnableVFP
 726              	.LVL22:
 383:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 727              		.loc 1 383 0
 728 00b6 0C4A     		ldr	r2, .L50+32
 729 00b8 1368     		ldr	r3, [r2]
 730 00ba 43F04043 		orr	r3, r3, #-1073741824
 731 00be 1360     		str	r3, [r2]
 386:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 732              		.loc 1 386 0
 733 00c0 FFF7FEFF 		bl	prvPortStartFirstTask
 734              	.LVL23:
 392:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 735              		.loc 1 392 0
 736 00c4 FFF7FEFF 		bl	prvTaskExitError
 737              	.LVL24:
 738              	.L51:
 739              		.align	2
 740              	.L50:
 741 00c8 00ED00E0 		.word	-536810240
 742 00cc 71C20F41 		.word	1091551857
 743 00d0 70C20F41 		.word	1091551856
 744 00d4 00E400E0 		.word	-536812544
 745 00d8 00000000 		.word	.LANCHOR1
 746 00dc 00000000 		.word	.LANCHOR2
 747 00e0 20ED00E0 		.word	-536810208
 748 00e4 00000000 		.word	.LANCHOR0
 749 00e8 34EF00E0 		.word	-536809676
 750              		.cfi_endproc
 751              	.LFE132:
 753              		.section	.text.vPortValidateInterruptPriority,"ax",%progbits
 754              		.align	1
 755              		.global	vPortValidateInterruptPriority
 756              		.syntax unified
 757              		.thumb
 758              		.thumb_func
 759              		.fpu fpv4-sp-d16
 761              	vPortValidateInterruptPriority:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 32


 762              	.LFB140:
 701:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 702:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 703:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** #if( configASSERT_DEFINED == 1 )
 704:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 705:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	void vPortValidateInterruptPriority( void )
 706:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	{
 763              		.loc 1 706 0
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 0
 766              		@ frame_needed = 0, uses_anonymous_args = 0
 767              		@ link register save eliminated.
 707:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	uint32_t ulCurrentInterrupt;
 708:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	uint8_t ucCurrentPriority;
 709:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 710:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		/* Obtain the number of the currently executing interrupt. */
 711:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 768              		.loc 1 711 0
 769              		.syntax unified
 770              	@ 711 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c" 1
 771 0000 EFF30583 		mrs r3, ipsr
 772              	@ 0 "" 2
 773              	.LVL25:
 712:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 713:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		/* Is the interrupt number a user defined interrupt? */
 714:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 774              		.loc 1 714 0
 775              		.thumb
 776              		.syntax unified
 777 0004 0F2B     		cmp	r3, #15
 778 0006 0FD9     		bls	.L53
 715:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		{
 716:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			/* Look up the interrupt's priority. */
 717:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 779              		.loc 1 717 0
 780 0008 104A     		ldr	r2, .L57
 781 000a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 782              	.LVL26:
 783 000c DBB2     		uxtb	r3, r3
 784              	.LVL27:
 718:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 719:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			/* The following assertion will fail if a service routine (ISR) for
 720:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			an interrupt that has been assigned a priority above
 721:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
 722:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			function.  ISR safe FreeRTOS API functions must *only* be called
 723:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			from interrupts that have been assigned a priority at or below
 724:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 725:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 726:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			Numerically low interrupt priority numbers represent logically high
 727:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			interrupt priorities, therefore the priority of the interrupt must
 728:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			be set to a value equal to or numerically *higher* than
 729:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 730:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 731:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			Interrupts that	use the FreeRTOS API must not be left at their
 732:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			default priority of	zero as that is the highest possible priority,
 733:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			which is guaranteed to be above configMAX_SYSCALL_INTERRUPT_PRIORITY,
 734:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			and	therefore also guaranteed to be invalid.
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 33


 735:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 736:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			FreeRTOS maintains separate thread and ISR API functions to ensure
 737:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			interrupt entry is as fast and simple as possible.
 738:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 739:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			The following links provide detailed information:
 740:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			http://www.freertos.org/RTOS-Cortex-M3-M4.html
 741:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			http://www.freertos.org/FAQHelp.html */
 742:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 785              		.loc 1 742 0
 786 000e 104A     		ldr	r2, .L57+4
 787 0010 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 788 0012 9A42     		cmp	r2, r3
 789 0014 08D9     		bls	.L53
 790              	.LBB52:
 791              	.LBB53:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 792              		.loc 2 237 0
 793              		.syntax unified
 794              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 795 0016 4FF01003 			mov r3, #16												
 796 001a 83F31188 		msr basepri, r3											
 797 001e BFF36F8F 		isb														
 798 0022 BFF34F8F 		dsb														
 799              	
 800              	@ 0 "" 2
 801              	.LVL28:
 802              		.thumb
 803              		.syntax unified
 804              	.L54:
 805 0026 FEE7     		b	.L54
 806              	.L53:
 807              	.LBE53:
 808              	.LBE52:
 743:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		}
 744:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 745:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		/* Priority grouping:  The interrupt controller (NVIC) allows the bits
 746:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		that define each interrupt's priority to be split between bits that
 747:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		define the interrupt's pre-emption priority bits and bits that define
 748:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		the interrupt's sub-priority.  For simplicity all bits must be defined
 749:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		to be pre-emption priority bits.  The following assertion will fail if
 750:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		this is not the case (if some bits represent a sub-priority).
 751:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 
 752:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		If the application only uses CMSIS libraries for interrupt
 753:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		configuration then the correct setting can be achieved on all Cortex-M
 754:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
 755:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		scheduler.  Note however that some vendor specific peripheral libraries
 756:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		assume a non-zero priority group setting, in which cases using a value
 757:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		of zero will result in unpredicable behaviour. */
 758:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 809              		.loc 1 758 0
 810 0028 0A4B     		ldr	r3, .L57+8
 811 002a 1B68     		ldr	r3, [r3]
 812 002c 03F4E063 		and	r3, r3, #1792
 813 0030 094A     		ldr	r2, .L57+12
 814 0032 1268     		ldr	r2, [r2]
 815 0034 9342     		cmp	r3, r2
 816 0036 08D9     		bls	.L52
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 34


 817              	.LBB54:
 818              	.LBB55:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 819              		.loc 2 237 0
 820              		.syntax unified
 821              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 822 0038 4FF01003 			mov r3, #16												
 823 003c 83F31188 		msr basepri, r3											
 824 0040 BFF36F8F 		isb														
 825 0044 BFF34F8F 		dsb														
 826              	
 827              	@ 0 "" 2
 828              	.LVL29:
 829              		.thumb
 830              		.syntax unified
 831              	.L56:
 832 0048 FEE7     		b	.L56
 833              	.L52:
 834              	.LBE55:
 835              	.LBE54:
 759:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/port.c **** 	}
 836              		.loc 1 759 0
 837 004a 7047     		bx	lr
 838              	.L58:
 839              		.align	2
 840              	.L57:
 841 004c F0E300E0 		.word	-536812560
 842 0050 00000000 		.word	.LANCHOR1
 843 0054 0CED00E0 		.word	-536810228
 844 0058 00000000 		.word	.LANCHOR2
 845              		.cfi_endproc
 846              	.LFE140:
 848              		.section	.bss.ucMaxSysCallPriority,"aw",%nobits
 849              		.set	.LANCHOR1,. + 0
 852              	ucMaxSysCallPriority:
 853 0000 00       		.space	1
 854              		.section	.bss.ulMaxPRIGROUPValue,"aw",%nobits
 855              		.align	2
 856              		.set	.LANCHOR2,. + 0
 859              	ulMaxPRIGROUPValue:
 860 0000 00000000 		.space	4
 861              		.section	.data.uxCriticalNesting,"aw",%progbits
 862              		.align	2
 863              		.set	.LANCHOR0,. + 0
 866              	uxCriticalNesting:
 867 0000 AAAAAAAA 		.word	-1431655766
 868              		.text
 869              	.Letext0:
 870              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 871              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 872              		.file 5 "../Libraries/CMSIS/CM4/CoreSupport/core_cm4.h"
 873              		.file 6 "../Libraries/CMSIS/CM4/DeviceSupport/system_at32f4xx.h"
 874              		.file 7 "Inc/FreeRTOSConfig.h"
 875              		.file 8 "../Middlewares/FreeRTOS//Source/include/projdefs.h"
 876              		.file 9 "../Middlewares/FreeRTOS//Source/include/task.h"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s 			page 35


DEFINED SYMBOLS
                            *ABS*:0000000000000000 port.c
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:17     .text.prvTaskExitError:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:23     .text.prvTaskExitError:0000000000000000 prvTaskExitError
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:75     .text.prvTaskExitError:0000000000000030 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:82     .text.prvPortStartFirstTask:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:88     .text.prvPortStartFirstTask:0000000000000000 prvPortStartFirstTask
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:117    .text.vPortEnableVFP:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:123    .text.vPortEnableVFP:0000000000000000 vPortEnableVFP
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:147    .text.pxPortInitialiseStack:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:154    .text.pxPortInitialiseStack:0000000000000000 pxPortInitialiseStack
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:189    .text.pxPortInitialiseStack:0000000000000028 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:194    .text.SVC_Handler:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:201    .text.SVC_Handler:0000000000000000 SVC_Handler
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:222    .text.SVC_Handler:0000000000000020 pxCurrentTCBConst2
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:222    .text.SVC_Handler:0000000000000020 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:232    .text.vPortEndScheduler:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:239    .text.vPortEndScheduler:0000000000000000 vPortEndScheduler
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:275    .text.vPortEndScheduler:0000000000000020 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:280    .text.vPortEnterCritical:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:287    .text.vPortEnterCritical:0000000000000000 vPortEnterCritical
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:345    .text.vPortEnterCritical:000000000000003c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:353    .text.vPortExitCritical:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:360    .text.vPortExitCritical:0000000000000000 vPortExitCritical
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:415    .text.vPortExitCritical:0000000000000028 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:420    .text.PendSV_Handler:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:427    .text.PendSV_Handler:0000000000000000 PendSV_Handler
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:477    .text.PendSV_Handler:0000000000000060 pxCurrentTCBConst
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:477    .text.PendSV_Handler:0000000000000060 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:487    .text.SysTick_Handler:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:494    .text.SysTick_Handler:0000000000000000 SysTick_Handler
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:548    .text.SysTick_Handler:0000000000000028 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:553    .text.vPortSetupTimerInterrupt:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:560    .text.vPortSetupTimerInterrupt:0000000000000000 vPortSetupTimerInterrupt
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:580    .text.vPortSetupTimerInterrupt:0000000000000010 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:585    .text.xPortStartScheduler:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:592    .text.xPortStartScheduler:0000000000000000 xPortStartScheduler
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:741    .text.xPortStartScheduler:00000000000000c8 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:754    .text.vPortValidateInterruptPriority:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:761    .text.vPortValidateInterruptPriority:0000000000000000 vPortValidateInterruptPriority
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:841    .text.vPortValidateInterruptPriority:000000000000004c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:852    .bss.ucMaxSysCallPriority:0000000000000000 ucMaxSysCallPriority
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:853    .bss.ucMaxSysCallPriority:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:855    .bss.ulMaxPRIGROUPValue:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:859    .bss.ulMaxPRIGROUPValue:0000000000000000 ulMaxPRIGROUPValue
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:862    .data.uxCriticalNesting:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:866    .data.uxCriticalNesting:0000000000000000 uxCriticalNesting
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:146    .text.vPortEnableVFP:000000000000000e $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:2408   .text.vPortEnableVFP:0000000000000010 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:116    .text.prvPortStartFirstTask:000000000000001a $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccR29kul.s:2408   .text.prvPortStartFirstTask:000000000000001c $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
