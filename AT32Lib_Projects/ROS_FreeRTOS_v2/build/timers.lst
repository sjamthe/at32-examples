ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"timers.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.prvGetNextExpireTime,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv4-sp-d16
  23              	prvGetNextExpireTime:
  24              	.LFB139:
  25              		.file 1 "../Middlewares/FreeRTOS//Source/timers.c"
   1:../Middlewares/FreeRTOS//Source/timers.c **** /*
   2:../Middlewares/FreeRTOS//Source/timers.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/timers.c ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/timers.c **** 
   5:../Middlewares/FreeRTOS//Source/timers.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/timers.c **** 
   7:../Middlewares/FreeRTOS//Source/timers.c ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/timers.c **** 
   9:../Middlewares/FreeRTOS//Source/timers.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/timers.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/timers.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/timers.c **** 
  13:../Middlewares/FreeRTOS//Source/timers.c ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/timers.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Middlewares/FreeRTOS//Source/timers.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/timers.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/timers.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/timers.c ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/timers.c **** 
  20:../Middlewares/FreeRTOS//Source/timers.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/timers.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/timers.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/timers.c ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/timers.c **** 
  25:../Middlewares/FreeRTOS//Source/timers.c ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/timers.c ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/timers.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/timers.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/timers.c ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/timers.c ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/timers.c ****      *                                                                       *
  32:../Middlewares/FreeRTOS//Source/timers.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Middlewares/FreeRTOS//Source/timers.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 2


  34:../Middlewares/FreeRTOS//Source/timers.c ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/timers.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/timers.c ****      *                                                                       *
  37:../Middlewares/FreeRTOS//Source/timers.c ****     ***************************************************************************
  38:../Middlewares/FreeRTOS//Source/timers.c **** 
  39:../Middlewares/FreeRTOS//Source/timers.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/timers.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/timers.c ****     defined configASSERT()?
  42:../Middlewares/FreeRTOS//Source/timers.c **** 
  43:../Middlewares/FreeRTOS//Source/timers.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Middlewares/FreeRTOS//Source/timers.c ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/timers.c ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/timers.c **** 
  47:../Middlewares/FreeRTOS//Source/timers.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/timers.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/timers.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Middlewares/FreeRTOS//Source/timers.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/timers.c **** 
  52:../Middlewares/FreeRTOS//Source/timers.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/timers.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/timers.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/timers.c **** 
  56:../Middlewares/FreeRTOS//Source/timers.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Middlewares/FreeRTOS//Source/timers.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/timers.c **** 
  59:../Middlewares/FreeRTOS//Source/timers.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/timers.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/timers.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/timers.c **** 
  63:../Middlewares/FreeRTOS//Source/timers.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/timers.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/timers.c ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/timers.c **** 
  67:../Middlewares/FreeRTOS//Source/timers.c ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/timers.c **** */
  69:../Middlewares/FreeRTOS//Source/timers.c **** 
  70:../Middlewares/FreeRTOS//Source/timers.c **** /* Standard includes. */
  71:../Middlewares/FreeRTOS//Source/timers.c **** #include <stdlib.h>
  72:../Middlewares/FreeRTOS//Source/timers.c **** 
  73:../Middlewares/FreeRTOS//Source/timers.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:../Middlewares/FreeRTOS//Source/timers.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:../Middlewares/FreeRTOS//Source/timers.c **** task.h is included from an application file. */
  76:../Middlewares/FreeRTOS//Source/timers.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:../Middlewares/FreeRTOS//Source/timers.c **** 
  78:../Middlewares/FreeRTOS//Source/timers.c **** #include "FreeRTOS.h"
  79:../Middlewares/FreeRTOS//Source/timers.c **** #include "task.h"
  80:../Middlewares/FreeRTOS//Source/timers.c **** #include "queue.h"
  81:../Middlewares/FreeRTOS//Source/timers.c **** #include "timers.h"
  82:../Middlewares/FreeRTOS//Source/timers.c **** 
  83:../Middlewares/FreeRTOS//Source/timers.c **** #if ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 0 )
  84:../Middlewares/FreeRTOS//Source/timers.c **** 	#error configUSE_TIMERS must be set to 1 to make the xTimerPendFunctionCall() function available.
  85:../Middlewares/FreeRTOS//Source/timers.c **** #endif
  86:../Middlewares/FreeRTOS//Source/timers.c **** 
  87:../Middlewares/FreeRTOS//Source/timers.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  88:../Middlewares/FreeRTOS//Source/timers.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  89:../Middlewares/FreeRTOS//Source/timers.c **** header files above, but not in this file, in order to generate the correct
  90:../Middlewares/FreeRTOS//Source/timers.c **** privileged Vs unprivileged linkage and placement. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 3


  91:../Middlewares/FreeRTOS//Source/timers.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  92:../Middlewares/FreeRTOS//Source/timers.c **** 
  93:../Middlewares/FreeRTOS//Source/timers.c **** 
  94:../Middlewares/FreeRTOS//Source/timers.c **** /* This entire source file will be skipped if the application is not configured
  95:../Middlewares/FreeRTOS//Source/timers.c **** to include software timer functionality.  This #if is closed at the very bottom
  96:../Middlewares/FreeRTOS//Source/timers.c **** of this file.  If you want to include software timer functionality then ensure
  97:../Middlewares/FreeRTOS//Source/timers.c **** configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
  98:../Middlewares/FreeRTOS//Source/timers.c **** #if ( configUSE_TIMERS == 1 )
  99:../Middlewares/FreeRTOS//Source/timers.c **** 
 100:../Middlewares/FreeRTOS//Source/timers.c **** /* Misc definitions. */
 101:../Middlewares/FreeRTOS//Source/timers.c **** #define tmrNO_DELAY		( TickType_t ) 0U
 102:../Middlewares/FreeRTOS//Source/timers.c **** 
 103:../Middlewares/FreeRTOS//Source/timers.c **** /* The definition of the timers themselves. */
 104:../Middlewares/FreeRTOS//Source/timers.c **** typedef struct tmrTimerControl
 105:../Middlewares/FreeRTOS//Source/timers.c **** {
 106:../Middlewares/FreeRTOS//Source/timers.c **** 	const char				*pcTimerName;		/*<< Text name.  This is not used by the kernel, it is included simpl
 107:../Middlewares/FreeRTOS//Source/timers.c **** 	ListItem_t				xTimerListItem;		/*<< Standard linked list item as used by all kernel features for e
 108:../Middlewares/FreeRTOS//Source/timers.c **** 	TickType_t				xTimerPeriodInTicks;/*<< How quickly and often the timer expires. */
 109:../Middlewares/FreeRTOS//Source/timers.c **** 	UBaseType_t				uxAutoReload;		/*<< Set to pdTRUE if the timer should be automatically restarted on
 110:../Middlewares/FreeRTOS//Source/timers.c **** 	void 					*pvTimerID;			/*<< An ID to identify the timer.  This allows the timer to be identified 
 111:../Middlewares/FreeRTOS//Source/timers.c **** 	TimerCallbackFunction_t	pxCallbackFunction;	/*<< The function that will be called when the timer e
 112:../Middlewares/FreeRTOS//Source/timers.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
 113:../Middlewares/FreeRTOS//Source/timers.c **** 		UBaseType_t			uxTimerNumber;		/*<< An ID assigned by trace tools such as FreeRTOS+Trace */
 114:../Middlewares/FreeRTOS//Source/timers.c **** 	#endif
 115:../Middlewares/FreeRTOS//Source/timers.c **** 
 116:../Middlewares/FreeRTOS//Source/timers.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 117:../Middlewares/FreeRTOS//Source/timers.c **** 		uint8_t 			ucStaticallyAllocated; /*<< Set to pdTRUE if the timer was created statically so no at
 118:../Middlewares/FreeRTOS//Source/timers.c **** 	#endif
 119:../Middlewares/FreeRTOS//Source/timers.c **** } xTIMER;
 120:../Middlewares/FreeRTOS//Source/timers.c **** 
 121:../Middlewares/FreeRTOS//Source/timers.c **** /* The old xTIMER name is maintained above then typedefed to the new Timer_t
 122:../Middlewares/FreeRTOS//Source/timers.c **** name below to enable the use of older kernel aware debuggers. */
 123:../Middlewares/FreeRTOS//Source/timers.c **** typedef xTIMER Timer_t;
 124:../Middlewares/FreeRTOS//Source/timers.c **** 
 125:../Middlewares/FreeRTOS//Source/timers.c **** /* The definition of messages that can be sent and received on the timer queue.
 126:../Middlewares/FreeRTOS//Source/timers.c **** Two types of message can be queued - messages that manipulate a software timer,
 127:../Middlewares/FreeRTOS//Source/timers.c **** and messages that request the execution of a non-timer related callback.  The
 128:../Middlewares/FreeRTOS//Source/timers.c **** two message types are defined in two separate structures, xTimerParametersType
 129:../Middlewares/FreeRTOS//Source/timers.c **** and xCallbackParametersType respectively. */
 130:../Middlewares/FreeRTOS//Source/timers.c **** typedef struct tmrTimerParameters
 131:../Middlewares/FreeRTOS//Source/timers.c **** {
 132:../Middlewares/FreeRTOS//Source/timers.c **** 	TickType_t			xMessageValue;		/*<< An optional value used by a subset of commands, for example, whe
 133:../Middlewares/FreeRTOS//Source/timers.c **** 	Timer_t *			pxTimer;			/*<< The timer to which the command will be applied. */
 134:../Middlewares/FreeRTOS//Source/timers.c **** } TimerParameter_t;
 135:../Middlewares/FreeRTOS//Source/timers.c **** 
 136:../Middlewares/FreeRTOS//Source/timers.c **** 
 137:../Middlewares/FreeRTOS//Source/timers.c **** typedef struct tmrCallbackParameters
 138:../Middlewares/FreeRTOS//Source/timers.c **** {
 139:../Middlewares/FreeRTOS//Source/timers.c **** 	PendedFunction_t	pxCallbackFunction;	/* << The callback function to execute. */
 140:../Middlewares/FreeRTOS//Source/timers.c **** 	void *pvParameter1;						/* << The value that will be used as the callback functions first paramet
 141:../Middlewares/FreeRTOS//Source/timers.c **** 	uint32_t ulParameter2;					/* << The value that will be used as the callback functions second para
 142:../Middlewares/FreeRTOS//Source/timers.c **** } CallbackParameters_t;
 143:../Middlewares/FreeRTOS//Source/timers.c **** 
 144:../Middlewares/FreeRTOS//Source/timers.c **** /* The structure that contains the two message types, along with an identifier
 145:../Middlewares/FreeRTOS//Source/timers.c **** that is used to determine which message type is valid. */
 146:../Middlewares/FreeRTOS//Source/timers.c **** typedef struct tmrTimerQueueMessage
 147:../Middlewares/FreeRTOS//Source/timers.c **** {
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 4


 148:../Middlewares/FreeRTOS//Source/timers.c **** 	BaseType_t			xMessageID;			/*<< The command being sent to the timer service task. */
 149:../Middlewares/FreeRTOS//Source/timers.c **** 	union
 150:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 151:../Middlewares/FreeRTOS//Source/timers.c **** 		TimerParameter_t xTimerParameters;
 152:../Middlewares/FreeRTOS//Source/timers.c **** 
 153:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Don't include xCallbackParameters if it is not going to be used as
 154:../Middlewares/FreeRTOS//Source/timers.c **** 		it makes the structure (and therefore the timer queue) larger. */
 155:../Middlewares/FreeRTOS//Source/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 156:../Middlewares/FreeRTOS//Source/timers.c **** 			CallbackParameters_t xCallbackParameters;
 157:../Middlewares/FreeRTOS//Source/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 158:../Middlewares/FreeRTOS//Source/timers.c **** 	} u;
 159:../Middlewares/FreeRTOS//Source/timers.c **** } DaemonTaskMessage_t;
 160:../Middlewares/FreeRTOS//Source/timers.c **** 
 161:../Middlewares/FreeRTOS//Source/timers.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 162:../Middlewares/FreeRTOS//Source/timers.c **** static variables must be declared volatile. */
 163:../Middlewares/FreeRTOS//Source/timers.c **** 
 164:../Middlewares/FreeRTOS//Source/timers.c **** /* The list in which active timers are stored.  Timers are referenced in expire
 165:../Middlewares/FreeRTOS//Source/timers.c **** time order, with the nearest expiry time at the front of the list.  Only the
 166:../Middlewares/FreeRTOS//Source/timers.c **** timer service task is allowed to access these lists. */
 167:../Middlewares/FreeRTOS//Source/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList1;
 168:../Middlewares/FreeRTOS//Source/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList2;
 169:../Middlewares/FreeRTOS//Source/timers.c **** PRIVILEGED_DATA static List_t *pxCurrentTimerList;
 170:../Middlewares/FreeRTOS//Source/timers.c **** PRIVILEGED_DATA static List_t *pxOverflowTimerList;
 171:../Middlewares/FreeRTOS//Source/timers.c **** 
 172:../Middlewares/FreeRTOS//Source/timers.c **** /* A queue that is used to send commands to the timer service task. */
 173:../Middlewares/FreeRTOS//Source/timers.c **** PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;
 174:../Middlewares/FreeRTOS//Source/timers.c **** PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;
 175:../Middlewares/FreeRTOS//Source/timers.c **** 
 176:../Middlewares/FreeRTOS//Source/timers.c **** /*lint +e956 */
 177:../Middlewares/FreeRTOS//Source/timers.c **** 
 178:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 179:../Middlewares/FreeRTOS//Source/timers.c **** 
 180:../Middlewares/FreeRTOS//Source/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 181:../Middlewares/FreeRTOS//Source/timers.c **** 
 182:../Middlewares/FreeRTOS//Source/timers.c **** 	/* If static allocation is supported then the application must provide the
 183:../Middlewares/FreeRTOS//Source/timers.c **** 	following callback function - which enables the application to optionally
 184:../Middlewares/FreeRTOS//Source/timers.c **** 	provide the memory that will be used by the timer task as the task's stack
 185:../Middlewares/FreeRTOS//Source/timers.c **** 	and TCB. */
 186:../Middlewares/FreeRTOS//Source/timers.c **** 	extern void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **pp
 187:../Middlewares/FreeRTOS//Source/timers.c **** 
 188:../Middlewares/FreeRTOS//Source/timers.c **** #endif
 189:../Middlewares/FreeRTOS//Source/timers.c **** 
 190:../Middlewares/FreeRTOS//Source/timers.c **** /*
 191:../Middlewares/FreeRTOS//Source/timers.c ****  * Initialise the infrastructure used by the timer service task if it has not
 192:../Middlewares/FreeRTOS//Source/timers.c ****  * been initialised already.
 193:../Middlewares/FreeRTOS//Source/timers.c ****  */
 194:../Middlewares/FreeRTOS//Source/timers.c **** static void prvCheckForValidListAndQueue( void ) PRIVILEGED_FUNCTION;
 195:../Middlewares/FreeRTOS//Source/timers.c **** 
 196:../Middlewares/FreeRTOS//Source/timers.c **** /*
 197:../Middlewares/FreeRTOS//Source/timers.c ****  * The timer service task (daemon).  Timer functionality is controlled by this
 198:../Middlewares/FreeRTOS//Source/timers.c ****  * task.  Other tasks communicate with the timer service task using the
 199:../Middlewares/FreeRTOS//Source/timers.c ****  * xTimerQueue queue.
 200:../Middlewares/FreeRTOS//Source/timers.c ****  */
 201:../Middlewares/FreeRTOS//Source/timers.c **** static void prvTimerTask( void *pvParameters ) PRIVILEGED_FUNCTION;
 202:../Middlewares/FreeRTOS//Source/timers.c **** 
 203:../Middlewares/FreeRTOS//Source/timers.c **** /*
 204:../Middlewares/FreeRTOS//Source/timers.c ****  * Called by the timer service task to interpret and process a command it
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 5


 205:../Middlewares/FreeRTOS//Source/timers.c ****  * received on the timer queue.
 206:../Middlewares/FreeRTOS//Source/timers.c ****  */
 207:../Middlewares/FreeRTOS//Source/timers.c **** static void prvProcessReceivedCommands( void ) PRIVILEGED_FUNCTION;
 208:../Middlewares/FreeRTOS//Source/timers.c **** 
 209:../Middlewares/FreeRTOS//Source/timers.c **** /*
 210:../Middlewares/FreeRTOS//Source/timers.c ****  * Insert the timer into either xActiveTimerList1, or xActiveTimerList2,
 211:../Middlewares/FreeRTOS//Source/timers.c ****  * depending on if the expire time causes a timer counter overflow.
 212:../Middlewares/FreeRTOS//Source/timers.c ****  */
 213:../Middlewares/FreeRTOS//Source/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 214:../Middlewares/FreeRTOS//Source/timers.c **** 
 215:../Middlewares/FreeRTOS//Source/timers.c **** /*
 216:../Middlewares/FreeRTOS//Source/timers.c ****  * An active timer has reached its expire time.  Reload the timer if it is an
 217:../Middlewares/FreeRTOS//Source/timers.c ****  * auto reload timer, then call its callback.
 218:../Middlewares/FreeRTOS//Source/timers.c ****  */
 219:../Middlewares/FreeRTOS//Source/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow ) P
 220:../Middlewares/FreeRTOS//Source/timers.c **** 
 221:../Middlewares/FreeRTOS//Source/timers.c **** /*
 222:../Middlewares/FreeRTOS//Source/timers.c ****  * The tick count has overflowed.  Switch the timer lists after ensuring the
 223:../Middlewares/FreeRTOS//Source/timers.c ****  * current timer list does not still reference some timers.
 224:../Middlewares/FreeRTOS//Source/timers.c ****  */
 225:../Middlewares/FreeRTOS//Source/timers.c **** static void prvSwitchTimerLists( void ) PRIVILEGED_FUNCTION;
 226:../Middlewares/FreeRTOS//Source/timers.c **** 
 227:../Middlewares/FreeRTOS//Source/timers.c **** /*
 228:../Middlewares/FreeRTOS//Source/timers.c ****  * Obtain the current tick count, setting *pxTimerListsWereSwitched to pdTRUE
 229:../Middlewares/FreeRTOS//Source/timers.c ****  * if a tick count overflow occurred since prvSampleTimeNow() was last called.
 230:../Middlewares/FreeRTOS//Source/timers.c ****  */
 231:../Middlewares/FreeRTOS//Source/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched ) PRIVILEGED_FUNCTI
 232:../Middlewares/FreeRTOS//Source/timers.c **** 
 233:../Middlewares/FreeRTOS//Source/timers.c **** /*
 234:../Middlewares/FreeRTOS//Source/timers.c ****  * If the timer list contains any active timers then return the expire time of
 235:../Middlewares/FreeRTOS//Source/timers.c ****  * the timer that will expire first and set *pxListWasEmpty to false.  If the
 236:../Middlewares/FreeRTOS//Source/timers.c ****  * timer list does not contain any timers then return 0 and set *pxListWasEmpty
 237:../Middlewares/FreeRTOS//Source/timers.c ****  * to pdTRUE.
 238:../Middlewares/FreeRTOS//Source/timers.c ****  */
 239:../Middlewares/FreeRTOS//Source/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty ) PRIVILEGED_FUNCTION;
 240:../Middlewares/FreeRTOS//Source/timers.c **** 
 241:../Middlewares/FreeRTOS//Source/timers.c **** /*
 242:../Middlewares/FreeRTOS//Source/timers.c ****  * If a timer has expired, process it.  Otherwise, block the timer service task
 243:../Middlewares/FreeRTOS//Source/timers.c ****  * until either a timer does expire or a command is received.
 244:../Middlewares/FreeRTOS//Source/timers.c ****  */
 245:../Middlewares/FreeRTOS//Source/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 246:../Middlewares/FreeRTOS//Source/timers.c **** 
 247:../Middlewares/FreeRTOS//Source/timers.c **** /*
 248:../Middlewares/FreeRTOS//Source/timers.c ****  * Called after a Timer_t structure has been allocated either statically or
 249:../Middlewares/FreeRTOS//Source/timers.c ****  * dynamically to fill in the structure's members.
 250:../Middlewares/FreeRTOS//Source/timers.c ****  */
 251:../Middlewares/FreeRTOS//Source/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,
 252:../Middlewares/FreeRTOS//Source/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 253:../Middlewares/FreeRTOS//Source/timers.c **** 									const UBaseType_t uxAutoReload,
 254:../Middlewares/FreeRTOS//Source/timers.c **** 									void * const pvTimerID,
 255:../Middlewares/FreeRTOS//Source/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 256:../Middlewares/FreeRTOS//Source/timers.c **** 									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed
 257:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 258:../Middlewares/FreeRTOS//Source/timers.c **** 
 259:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xTimerCreateTimerTask( void )
 260:../Middlewares/FreeRTOS//Source/timers.c **** {
 261:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xReturn = pdFAIL;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 6


 262:../Middlewares/FreeRTOS//Source/timers.c **** 
 263:../Middlewares/FreeRTOS//Source/timers.c **** 	/* This function is called when the scheduler is started if
 264:../Middlewares/FreeRTOS//Source/timers.c **** 	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
 265:../Middlewares/FreeRTOS//Source/timers.c **** 	timer service task has been created/initialised.  If timers have already
 266:../Middlewares/FreeRTOS//Source/timers.c **** 	been created then the initialisation will already have been performed. */
 267:../Middlewares/FreeRTOS//Source/timers.c **** 	prvCheckForValidListAndQueue();
 268:../Middlewares/FreeRTOS//Source/timers.c **** 
 269:../Middlewares/FreeRTOS//Source/timers.c **** 	if( xTimerQueue != NULL )
 270:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 271:../Middlewares/FreeRTOS//Source/timers.c **** 		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 272:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 273:../Middlewares/FreeRTOS//Source/timers.c **** 			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 274:../Middlewares/FreeRTOS//Source/timers.c **** 			StackType_t *pxTimerTaskStackBuffer = NULL;
 275:../Middlewares/FreeRTOS//Source/timers.c **** 			uint32_t ulTimerTaskStackSize;
 276:../Middlewares/FreeRTOS//Source/timers.c **** 
 277:../Middlewares/FreeRTOS//Source/timers.c **** 			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStac
 278:../Middlewares/FreeRTOS//Source/timers.c **** 			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 279:../Middlewares/FreeRTOS//Source/timers.c **** 													"Tmr Svc",
 280:../Middlewares/FreeRTOS//Source/timers.c **** 													ulTimerTaskStackSize,
 281:../Middlewares/FreeRTOS//Source/timers.c **** 													NULL,
 282:../Middlewares/FreeRTOS//Source/timers.c **** 													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 283:../Middlewares/FreeRTOS//Source/timers.c **** 													pxTimerTaskStackBuffer,
 284:../Middlewares/FreeRTOS//Source/timers.c **** 													pxTimerTaskTCBBuffer );
 285:../Middlewares/FreeRTOS//Source/timers.c **** 
 286:../Middlewares/FreeRTOS//Source/timers.c **** 			if( xTimerTaskHandle != NULL )
 287:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 288:../Middlewares/FreeRTOS//Source/timers.c **** 				xReturn = pdPASS;
 289:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 290:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 291:../Middlewares/FreeRTOS//Source/timers.c **** 		#else
 292:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 293:../Middlewares/FreeRTOS//Source/timers.c **** 			xReturn = xTaskCreate(	prvTimerTask,
 294:../Middlewares/FreeRTOS//Source/timers.c **** 									"Tmr Svc",
 295:../Middlewares/FreeRTOS//Source/timers.c **** 									configTIMER_TASK_STACK_DEPTH,
 296:../Middlewares/FreeRTOS//Source/timers.c **** 									NULL,
 297:../Middlewares/FreeRTOS//Source/timers.c **** 									( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 298:../Middlewares/FreeRTOS//Source/timers.c **** 									&xTimerTaskHandle );
 299:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 300:../Middlewares/FreeRTOS//Source/timers.c **** 		#endif /* configSUPPORT_STATIC_ALLOCATION */
 301:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 302:../Middlewares/FreeRTOS//Source/timers.c **** 	else
 303:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 304:../Middlewares/FreeRTOS//Source/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 305:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 306:../Middlewares/FreeRTOS//Source/timers.c **** 
 307:../Middlewares/FreeRTOS//Source/timers.c **** 	configASSERT( xReturn );
 308:../Middlewares/FreeRTOS//Source/timers.c **** 	return xReturn;
 309:../Middlewares/FreeRTOS//Source/timers.c **** }
 310:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 311:../Middlewares/FreeRTOS//Source/timers.c **** 
 312:../Middlewares/FreeRTOS//Source/timers.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 313:../Middlewares/FreeRTOS//Source/timers.c **** 
 314:../Middlewares/FreeRTOS//Source/timers.c **** 	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
 315:../Middlewares/FreeRTOS//Source/timers.c **** 								const TickType_t xTimerPeriodInTicks,
 316:../Middlewares/FreeRTOS//Source/timers.c **** 								const UBaseType_t uxAutoReload,
 317:../Middlewares/FreeRTOS//Source/timers.c **** 								void * const pvTimerID,
 318:../Middlewares/FreeRTOS//Source/timers.c **** 								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowe
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 7


 319:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 320:../Middlewares/FreeRTOS//Source/timers.c **** 	Timer_t *pxNewTimer;
 321:../Middlewares/FreeRTOS//Source/timers.c **** 
 322:../Middlewares/FreeRTOS//Source/timers.c **** 		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 323:../Middlewares/FreeRTOS//Source/timers.c **** 
 324:../Middlewares/FreeRTOS//Source/timers.c **** 		if( pxNewTimer != NULL )
 325:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 326:../Middlewares/FreeRTOS//Source/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 327:../Middlewares/FreeRTOS//Source/timers.c **** 
 328:../Middlewares/FreeRTOS//Source/timers.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 329:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 330:../Middlewares/FreeRTOS//Source/timers.c **** 				/* Timers can be created statically or dynamically, so note this
 331:../Middlewares/FreeRTOS//Source/timers.c **** 				timer was created dynamically in case the timer is later
 332:../Middlewares/FreeRTOS//Source/timers.c **** 				deleted. */
 333:../Middlewares/FreeRTOS//Source/timers.c **** 				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 334:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 335:../Middlewares/FreeRTOS//Source/timers.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 336:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 337:../Middlewares/FreeRTOS//Source/timers.c **** 
 338:../Middlewares/FreeRTOS//Source/timers.c **** 		return pxNewTimer;
 339:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 340:../Middlewares/FreeRTOS//Source/timers.c **** 
 341:../Middlewares/FreeRTOS//Source/timers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 342:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 343:../Middlewares/FreeRTOS//Source/timers.c **** 
 344:../Middlewares/FreeRTOS//Source/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 345:../Middlewares/FreeRTOS//Source/timers.c **** 
 346:../Middlewares/FreeRTOS//Source/timers.c **** 	TimerHandle_t xTimerCreateStatic(	const char * const pcTimerName,
 347:../Middlewares/FreeRTOS//Source/timers.c **** 										const TickType_t xTimerPeriodInTicks,
 348:../Middlewares/FreeRTOS//Source/timers.c **** 										const UBaseType_t uxAutoReload,
 349:../Middlewares/FreeRTOS//Source/timers.c **** 										void * const pvTimerID,
 350:../Middlewares/FreeRTOS//Source/timers.c **** 										TimerCallbackFunction_t pxCallbackFunction,
 351:../Middlewares/FreeRTOS//Source/timers.c **** 										StaticTimer_t *pxTimerBuffer ) /*lint !e971 Unqualified char types are allowed for string
 352:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 353:../Middlewares/FreeRTOS//Source/timers.c **** 	Timer_t *pxNewTimer;
 354:../Middlewares/FreeRTOS//Source/timers.c **** 
 355:../Middlewares/FreeRTOS//Source/timers.c **** 		#if( configASSERT_DEFINED == 1 )
 356:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 357:../Middlewares/FreeRTOS//Source/timers.c **** 			/* Sanity check that the size of the structure used to declare a
 358:../Middlewares/FreeRTOS//Source/timers.c **** 			variable of type StaticTimer_t equals the size of the real timer
 359:../Middlewares/FreeRTOS//Source/timers.c **** 			structures. */
 360:../Middlewares/FreeRTOS//Source/timers.c **** 			volatile size_t xSize = sizeof( StaticTimer_t );
 361:../Middlewares/FreeRTOS//Source/timers.c **** 			configASSERT( xSize == sizeof( Timer_t ) );
 362:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 363:../Middlewares/FreeRTOS//Source/timers.c **** 		#endif /* configASSERT_DEFINED */
 364:../Middlewares/FreeRTOS//Source/timers.c **** 
 365:../Middlewares/FreeRTOS//Source/timers.c **** 		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
 366:../Middlewares/FreeRTOS//Source/timers.c **** 		configASSERT( pxTimerBuffer );
 367:../Middlewares/FreeRTOS//Source/timers.c **** 		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are d
 368:../Middlewares/FreeRTOS//Source/timers.c **** 
 369:../Middlewares/FreeRTOS//Source/timers.c **** 		if( pxNewTimer != NULL )
 370:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 371:../Middlewares/FreeRTOS//Source/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 372:../Middlewares/FreeRTOS//Source/timers.c **** 
 373:../Middlewares/FreeRTOS//Source/timers.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 374:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 375:../Middlewares/FreeRTOS//Source/timers.c **** 				/* Timers can be created statically or dynamically so note this
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 8


 376:../Middlewares/FreeRTOS//Source/timers.c **** 				timer was created statically in case it is later deleted. */
 377:../Middlewares/FreeRTOS//Source/timers.c **** 				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 378:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 379:../Middlewares/FreeRTOS//Source/timers.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 380:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 381:../Middlewares/FreeRTOS//Source/timers.c **** 
 382:../Middlewares/FreeRTOS//Source/timers.c **** 		return pxNewTimer;
 383:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 384:../Middlewares/FreeRTOS//Source/timers.c **** 
 385:../Middlewares/FreeRTOS//Source/timers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 386:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 387:../Middlewares/FreeRTOS//Source/timers.c **** 
 388:../Middlewares/FreeRTOS//Source/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,
 389:../Middlewares/FreeRTOS//Source/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 390:../Middlewares/FreeRTOS//Source/timers.c **** 									const UBaseType_t uxAutoReload,
 391:../Middlewares/FreeRTOS//Source/timers.c **** 									void * const pvTimerID,
 392:../Middlewares/FreeRTOS//Source/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 393:../Middlewares/FreeRTOS//Source/timers.c **** 									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and sing
 394:../Middlewares/FreeRTOS//Source/timers.c **** {
 395:../Middlewares/FreeRTOS//Source/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 396:../Middlewares/FreeRTOS//Source/timers.c **** 	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 397:../Middlewares/FreeRTOS//Source/timers.c **** 
 398:../Middlewares/FreeRTOS//Source/timers.c **** 	if( pxNewTimer != NULL )
 399:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 400:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Ensure the infrastructure used by the timer service task has been
 401:../Middlewares/FreeRTOS//Source/timers.c **** 		created/initialised. */
 402:../Middlewares/FreeRTOS//Source/timers.c **** 		prvCheckForValidListAndQueue();
 403:../Middlewares/FreeRTOS//Source/timers.c **** 
 404:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Initialise the timer structure members using the function
 405:../Middlewares/FreeRTOS//Source/timers.c **** 		parameters. */
 406:../Middlewares/FreeRTOS//Source/timers.c **** 		pxNewTimer->pcTimerName = pcTimerName;
 407:../Middlewares/FreeRTOS//Source/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 408:../Middlewares/FreeRTOS//Source/timers.c **** 		pxNewTimer->uxAutoReload = uxAutoReload;
 409:../Middlewares/FreeRTOS//Source/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 410:../Middlewares/FreeRTOS//Source/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 411:../Middlewares/FreeRTOS//Source/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 412:../Middlewares/FreeRTOS//Source/timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 413:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 414:../Middlewares/FreeRTOS//Source/timers.c **** }
 415:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 416:../Middlewares/FreeRTOS//Source/timers.c **** 
 417:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_
 418:../Middlewares/FreeRTOS//Source/timers.c **** {
 419:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xReturn = pdFAIL;
 420:../Middlewares/FreeRTOS//Source/timers.c **** DaemonTaskMessage_t xMessage;
 421:../Middlewares/FreeRTOS//Source/timers.c **** 
 422:../Middlewares/FreeRTOS//Source/timers.c **** 	configASSERT( xTimer );
 423:../Middlewares/FreeRTOS//Source/timers.c **** 
 424:../Middlewares/FreeRTOS//Source/timers.c **** 	/* Send a message to the timer service task to perform a particular action
 425:../Middlewares/FreeRTOS//Source/timers.c **** 	on a particular timer definition. */
 426:../Middlewares/FreeRTOS//Source/timers.c **** 	if( xTimerQueue != NULL )
 427:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 428:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Send a command to the timer service task to start the xTimer timer. */
 429:../Middlewares/FreeRTOS//Source/timers.c **** 		xMessage.xMessageID = xCommandID;
 430:../Middlewares/FreeRTOS//Source/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 431:../Middlewares/FreeRTOS//Source/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 432:../Middlewares/FreeRTOS//Source/timers.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 9


 433:../Middlewares/FreeRTOS//Source/timers.c **** 		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 434:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 435:../Middlewares/FreeRTOS//Source/timers.c **** 			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 436:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 437:../Middlewares/FreeRTOS//Source/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 438:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 439:../Middlewares/FreeRTOS//Source/timers.c **** 			else
 440:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 441:../Middlewares/FreeRTOS//Source/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 442:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 443:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 444:../Middlewares/FreeRTOS//Source/timers.c **** 		else
 445:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 446:../Middlewares/FreeRTOS//Source/timers.c **** 			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 447:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 448:../Middlewares/FreeRTOS//Source/timers.c **** 
 449:../Middlewares/FreeRTOS//Source/timers.c **** 		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 450:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 451:../Middlewares/FreeRTOS//Source/timers.c **** 	else
 452:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 453:../Middlewares/FreeRTOS//Source/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 454:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 455:../Middlewares/FreeRTOS//Source/timers.c **** 
 456:../Middlewares/FreeRTOS//Source/timers.c **** 	return xReturn;
 457:../Middlewares/FreeRTOS//Source/timers.c **** }
 458:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 459:../Middlewares/FreeRTOS//Source/timers.c **** 
 460:../Middlewares/FreeRTOS//Source/timers.c **** TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
 461:../Middlewares/FreeRTOS//Source/timers.c **** {
 462:../Middlewares/FreeRTOS//Source/timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 463:../Middlewares/FreeRTOS//Source/timers.c **** 	started, then xTimerTaskHandle will be NULL. */
 464:../Middlewares/FreeRTOS//Source/timers.c **** 	configASSERT( ( xTimerTaskHandle != NULL ) );
 465:../Middlewares/FreeRTOS//Source/timers.c **** 	return xTimerTaskHandle;
 466:../Middlewares/FreeRTOS//Source/timers.c **** }
 467:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 468:../Middlewares/FreeRTOS//Source/timers.c **** 
 469:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
 470:../Middlewares/FreeRTOS//Source/timers.c **** {
 471:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 472:../Middlewares/FreeRTOS//Source/timers.c **** 
 473:../Middlewares/FreeRTOS//Source/timers.c **** 	configASSERT( xTimer );
 474:../Middlewares/FreeRTOS//Source/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 475:../Middlewares/FreeRTOS//Source/timers.c **** }
 476:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 477:../Middlewares/FreeRTOS//Source/timers.c **** 
 478:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
 479:../Middlewares/FreeRTOS//Source/timers.c **** {
 480:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t * pxTimer = ( Timer_t * ) xTimer;
 481:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xReturn;
 482:../Middlewares/FreeRTOS//Source/timers.c **** 
 483:../Middlewares/FreeRTOS//Source/timers.c **** 	configASSERT( xTimer );
 484:../Middlewares/FreeRTOS//Source/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 485:../Middlewares/FreeRTOS//Source/timers.c **** 	return xReturn;
 486:../Middlewares/FreeRTOS//Source/timers.c **** }
 487:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 488:../Middlewares/FreeRTOS//Source/timers.c **** 
 489:../Middlewares/FreeRTOS//Source/timers.c **** const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 10


 490:../Middlewares/FreeRTOS//Source/timers.c **** {
 491:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 492:../Middlewares/FreeRTOS//Source/timers.c **** 
 493:../Middlewares/FreeRTOS//Source/timers.c **** 	configASSERT( xTimer );
 494:../Middlewares/FreeRTOS//Source/timers.c **** 	return pxTimer->pcTimerName;
 495:../Middlewares/FreeRTOS//Source/timers.c **** }
 496:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 497:../Middlewares/FreeRTOS//Source/timers.c **** 
 498:../Middlewares/FreeRTOS//Source/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
 499:../Middlewares/FreeRTOS//Source/timers.c **** {
 500:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xResult;
 501:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 502:../Middlewares/FreeRTOS//Source/timers.c **** 
 503:../Middlewares/FreeRTOS//Source/timers.c **** 	/* Remove the timer from the list of active timers.  A check has already
 504:../Middlewares/FreeRTOS//Source/timers.c **** 	been performed to ensure the list is not empty. */
 505:../Middlewares/FreeRTOS//Source/timers.c **** 	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 506:../Middlewares/FreeRTOS//Source/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 507:../Middlewares/FreeRTOS//Source/timers.c **** 
 508:../Middlewares/FreeRTOS//Source/timers.c **** 	/* If the timer is an auto reload timer then calculate the next
 509:../Middlewares/FreeRTOS//Source/timers.c **** 	expiry time and re-insert the timer in the list of active timers. */
 510:../Middlewares/FreeRTOS//Source/timers.c **** 	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 511:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 512:../Middlewares/FreeRTOS//Source/timers.c **** 		/* The timer is inserted into a list using a time relative to anything
 513:../Middlewares/FreeRTOS//Source/timers.c **** 		other than the current time.  It will therefore be inserted into the
 514:../Middlewares/FreeRTOS//Source/timers.c **** 		correct list relative to the time this task thinks it is now. */
 515:../Middlewares/FreeRTOS//Source/timers.c **** 		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTim
 516:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 517:../Middlewares/FreeRTOS//Source/timers.c **** 			/* The timer expired before it was added to the active timer
 518:../Middlewares/FreeRTOS//Source/timers.c **** 			list.  Reload it now.  */
 519:../Middlewares/FreeRTOS//Source/timers.c **** 			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmr
 520:../Middlewares/FreeRTOS//Source/timers.c **** 			configASSERT( xResult );
 521:../Middlewares/FreeRTOS//Source/timers.c **** 			( void ) xResult;
 522:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 523:../Middlewares/FreeRTOS//Source/timers.c **** 		else
 524:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 525:../Middlewares/FreeRTOS//Source/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 526:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 527:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 528:../Middlewares/FreeRTOS//Source/timers.c **** 	else
 529:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 530:../Middlewares/FreeRTOS//Source/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 531:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 532:../Middlewares/FreeRTOS//Source/timers.c **** 
 533:../Middlewares/FreeRTOS//Source/timers.c **** 	/* Call the timer callback. */
 534:../Middlewares/FreeRTOS//Source/timers.c **** 	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 535:../Middlewares/FreeRTOS//Source/timers.c **** }
 536:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 537:../Middlewares/FreeRTOS//Source/timers.c **** 
 538:../Middlewares/FreeRTOS//Source/timers.c **** static void prvTimerTask( void *pvParameters )
 539:../Middlewares/FreeRTOS//Source/timers.c **** {
 540:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xNextExpireTime;
 541:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xListWasEmpty;
 542:../Middlewares/FreeRTOS//Source/timers.c **** 
 543:../Middlewares/FreeRTOS//Source/timers.c **** 	/* Just to avoid compiler warnings. */
 544:../Middlewares/FreeRTOS//Source/timers.c **** 	( void ) pvParameters;
 545:../Middlewares/FreeRTOS//Source/timers.c **** 
 546:../Middlewares/FreeRTOS//Source/timers.c **** 	#if( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 11


 547:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 548:../Middlewares/FreeRTOS//Source/timers.c **** 		extern void vApplicationDaemonTaskStartupHook( void );
 549:../Middlewares/FreeRTOS//Source/timers.c **** 
 550:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Allow the application writer to execute some code in the context of
 551:../Middlewares/FreeRTOS//Source/timers.c **** 		this task at the point the task starts executing.  This is useful if the
 552:../Middlewares/FreeRTOS//Source/timers.c **** 		application includes initialisation code that would benefit from
 553:../Middlewares/FreeRTOS//Source/timers.c **** 		executing after the scheduler has been started. */
 554:../Middlewares/FreeRTOS//Source/timers.c **** 		vApplicationDaemonTaskStartupHook();
 555:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 556:../Middlewares/FreeRTOS//Source/timers.c **** 	#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */
 557:../Middlewares/FreeRTOS//Source/timers.c **** 
 558:../Middlewares/FreeRTOS//Source/timers.c **** 	for( ;; )
 559:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 560:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Query the timers list to see if it contains any timers, and if so,
 561:../Middlewares/FreeRTOS//Source/timers.c **** 		obtain the time at which the next timer will expire. */
 562:../Middlewares/FreeRTOS//Source/timers.c **** 		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 563:../Middlewares/FreeRTOS//Source/timers.c **** 
 564:../Middlewares/FreeRTOS//Source/timers.c **** 		/* If a timer has expired, process it.  Otherwise, block this task
 565:../Middlewares/FreeRTOS//Source/timers.c **** 		until either a timer does expire, or a command is received. */
 566:../Middlewares/FreeRTOS//Source/timers.c **** 		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 567:../Middlewares/FreeRTOS//Source/timers.c **** 
 568:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Empty the command queue. */
 569:../Middlewares/FreeRTOS//Source/timers.c **** 		prvProcessReceivedCommands();
 570:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 571:../Middlewares/FreeRTOS//Source/timers.c **** }
 572:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 573:../Middlewares/FreeRTOS//Source/timers.c **** 
 574:../Middlewares/FreeRTOS//Source/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 575:../Middlewares/FreeRTOS//Source/timers.c **** {
 576:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xTimeNow;
 577:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xTimerListsWereSwitched;
 578:../Middlewares/FreeRTOS//Source/timers.c **** 
 579:../Middlewares/FreeRTOS//Source/timers.c **** 	vTaskSuspendAll();
 580:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 581:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Obtain the time now to make an assessment as to whether the timer
 582:../Middlewares/FreeRTOS//Source/timers.c **** 		has expired or not.  If obtaining the time causes the lists to switch
 583:../Middlewares/FreeRTOS//Source/timers.c **** 		then don't process this timer as any timers that remained in the list
 584:../Middlewares/FreeRTOS//Source/timers.c **** 		when the lists were switched will have been processed within the
 585:../Middlewares/FreeRTOS//Source/timers.c **** 		prvSampleTimeNow() function. */
 586:../Middlewares/FreeRTOS//Source/timers.c **** 		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 587:../Middlewares/FreeRTOS//Source/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 588:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 589:../Middlewares/FreeRTOS//Source/timers.c **** 			/* The tick count has not overflowed, has the timer expired? */
 590:../Middlewares/FreeRTOS//Source/timers.c **** 			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 591:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 592:../Middlewares/FreeRTOS//Source/timers.c **** 				( void ) xTaskResumeAll();
 593:../Middlewares/FreeRTOS//Source/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 594:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 595:../Middlewares/FreeRTOS//Source/timers.c **** 			else
 596:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 597:../Middlewares/FreeRTOS//Source/timers.c **** 				/* The tick count has not overflowed, and the next expire
 598:../Middlewares/FreeRTOS//Source/timers.c **** 				time has not been reached yet.  This task should therefore
 599:../Middlewares/FreeRTOS//Source/timers.c **** 				block to wait for the next expire time or a command to be
 600:../Middlewares/FreeRTOS//Source/timers.c **** 				received - whichever comes first.  The following line cannot
 601:../Middlewares/FreeRTOS//Source/timers.c **** 				be reached unless xNextExpireTime > xTimeNow, except in the
 602:../Middlewares/FreeRTOS//Source/timers.c **** 				case when the current timer list is empty. */
 603:../Middlewares/FreeRTOS//Source/timers.c **** 				if( xListWasEmpty != pdFALSE )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 12


 604:../Middlewares/FreeRTOS//Source/timers.c **** 				{
 605:../Middlewares/FreeRTOS//Source/timers.c **** 					/* The current timer list is empty - is the overflow list
 606:../Middlewares/FreeRTOS//Source/timers.c **** 					also empty? */
 607:../Middlewares/FreeRTOS//Source/timers.c **** 					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 608:../Middlewares/FreeRTOS//Source/timers.c **** 				}
 609:../Middlewares/FreeRTOS//Source/timers.c **** 
 610:../Middlewares/FreeRTOS//Source/timers.c **** 				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 611:../Middlewares/FreeRTOS//Source/timers.c **** 
 612:../Middlewares/FreeRTOS//Source/timers.c **** 				if( xTaskResumeAll() == pdFALSE )
 613:../Middlewares/FreeRTOS//Source/timers.c **** 				{
 614:../Middlewares/FreeRTOS//Source/timers.c **** 					/* Yield to wait for either a command to arrive, or the
 615:../Middlewares/FreeRTOS//Source/timers.c **** 					block time to expire.  If a command arrived between the
 616:../Middlewares/FreeRTOS//Source/timers.c **** 					critical section being exited and this yield then the yield
 617:../Middlewares/FreeRTOS//Source/timers.c **** 					will not cause the task to block. */
 618:../Middlewares/FreeRTOS//Source/timers.c **** 					portYIELD_WITHIN_API();
 619:../Middlewares/FreeRTOS//Source/timers.c **** 				}
 620:../Middlewares/FreeRTOS//Source/timers.c **** 				else
 621:../Middlewares/FreeRTOS//Source/timers.c **** 				{
 622:../Middlewares/FreeRTOS//Source/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 623:../Middlewares/FreeRTOS//Source/timers.c **** 				}
 624:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 625:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 626:../Middlewares/FreeRTOS//Source/timers.c **** 		else
 627:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 628:../Middlewares/FreeRTOS//Source/timers.c **** 			( void ) xTaskResumeAll();
 629:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 630:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 631:../Middlewares/FreeRTOS//Source/timers.c **** }
 632:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 633:../Middlewares/FreeRTOS//Source/timers.c **** 
 634:../Middlewares/FreeRTOS//Source/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
 635:../Middlewares/FreeRTOS//Source/timers.c **** {
  26              		.loc 1 635 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 636:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xNextExpireTime;
 637:../Middlewares/FreeRTOS//Source/timers.c **** 
 638:../Middlewares/FreeRTOS//Source/timers.c **** 	/* Timers are listed in expiry time order, with the head of the list
 639:../Middlewares/FreeRTOS//Source/timers.c **** 	referencing the task that will expire first.  Obtain the time at which
 640:../Middlewares/FreeRTOS//Source/timers.c **** 	the timer with the nearest expiry time will expire.  If there are no
 641:../Middlewares/FreeRTOS//Source/timers.c **** 	active timers then just set the next expire time to 0.  That will cause
 642:../Middlewares/FreeRTOS//Source/timers.c **** 	this task to unblock when the tick count overflows, at which point the
 643:../Middlewares/FreeRTOS//Source/timers.c **** 	timer lists will be switched and the next expiry time can be
 644:../Middlewares/FreeRTOS//Source/timers.c **** 	re-assessed.  */
 645:../Middlewares/FreeRTOS//Source/timers.c **** 	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  32              		.loc 1 645 0
  33 0000 064B     		ldr	r3, .L4
  34 0002 1A68     		ldr	r2, [r3]
  35 0004 1368     		ldr	r3, [r2]
  36 0006 B3FA83F3 		clz	r3, r3
  37 000a 5B09     		lsrs	r3, r3, #5
  38 000c 0360     		str	r3, [r0]
 646:../Middlewares/FreeRTOS//Source/timers.c **** 	if( *pxListWasEmpty == pdFALSE )
  39              		.loc 1 646 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 13


  40 000e 13B9     		cbnz	r3, .L3
 647:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 648:../Middlewares/FreeRTOS//Source/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  41              		.loc 1 648 0
  42 0010 D368     		ldr	r3, [r2, #12]
  43 0012 1868     		ldr	r0, [r3]
  44              	.LVL1:
  45 0014 7047     		bx	lr
  46              	.LVL2:
  47              	.L3:
 649:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 650:../Middlewares/FreeRTOS//Source/timers.c **** 	else
 651:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 652:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Ensure the task unblocks when the tick count rolls over. */
 653:../Middlewares/FreeRTOS//Source/timers.c **** 		xNextExpireTime = ( TickType_t ) 0U;
  48              		.loc 1 653 0
  49 0016 0020     		movs	r0, #0
  50              	.LVL3:
 654:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 655:../Middlewares/FreeRTOS//Source/timers.c **** 
 656:../Middlewares/FreeRTOS//Source/timers.c **** 	return xNextExpireTime;
 657:../Middlewares/FreeRTOS//Source/timers.c **** }
  51              		.loc 1 657 0
  52 0018 7047     		bx	lr
  53              	.L5:
  54 001a 00BF     		.align	2
  55              	.L4:
  56 001c 00000000 		.word	.LANCHOR0
  57              		.cfi_endproc
  58              	.LFE139:
  60              		.section	.text.prvInsertTimerInActiveList,"ax",%progbits
  61              		.align	1
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  65              		.fpu fpv4-sp-d16
  67              	prvInsertTimerInActiveList:
  68              	.LFB141:
 658:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 659:../Middlewares/FreeRTOS//Source/timers.c **** 
 660:../Middlewares/FreeRTOS//Source/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
 661:../Middlewares/FreeRTOS//Source/timers.c **** {
 662:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xTimeNow;
 663:../Middlewares/FreeRTOS//Source/timers.c **** PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only acce
 664:../Middlewares/FreeRTOS//Source/timers.c **** 
 665:../Middlewares/FreeRTOS//Source/timers.c **** 	xTimeNow = xTaskGetTickCount();
 666:../Middlewares/FreeRTOS//Source/timers.c **** 
 667:../Middlewares/FreeRTOS//Source/timers.c **** 	if( xTimeNow < xLastTime )
 668:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 669:../Middlewares/FreeRTOS//Source/timers.c **** 		prvSwitchTimerLists();
 670:../Middlewares/FreeRTOS//Source/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 671:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 672:../Middlewares/FreeRTOS//Source/timers.c **** 	else
 673:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 674:../Middlewares/FreeRTOS//Source/timers.c **** 		*pxTimerListsWereSwitched = pdFALSE;
 675:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 676:../Middlewares/FreeRTOS//Source/timers.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 14


 677:../Middlewares/FreeRTOS//Source/timers.c **** 	xLastTime = xTimeNow;
 678:../Middlewares/FreeRTOS//Source/timers.c **** 
 679:../Middlewares/FreeRTOS//Source/timers.c **** 	return xTimeNow;
 680:../Middlewares/FreeRTOS//Source/timers.c **** }
 681:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 682:../Middlewares/FreeRTOS//Source/timers.c **** 
 683:../Middlewares/FreeRTOS//Source/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 684:../Middlewares/FreeRTOS//Source/timers.c **** {
  69              		.loc 1 684 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73              	.LVL4:
  74 0000 08B5     		push	{r3, lr}
  75              	.LCFI0:
  76              		.cfi_def_cfa_offset 8
  77              		.cfi_offset 3, -8
  78              		.cfi_offset 14, -4
  79              	.LVL5:
 685:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xProcessTimerNow = pdFALSE;
 686:../Middlewares/FreeRTOS//Source/timers.c **** 
 687:../Middlewares/FreeRTOS//Source/timers.c **** 	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  80              		.loc 1 687 0
  81 0002 4160     		str	r1, [r0, #4]
 688:../Middlewares/FreeRTOS//Source/timers.c **** 	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  82              		.loc 1 688 0
  83 0004 0061     		str	r0, [r0, #16]
 689:../Middlewares/FreeRTOS//Source/timers.c **** 
 690:../Middlewares/FreeRTOS//Source/timers.c **** 	if( xNextExpiryTime <= xTimeNow )
  84              		.loc 1 690 0
  85 0006 9142     		cmp	r1, r2
  86 0008 0CD8     		bhi	.L7
 691:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 692:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Has the expiry time elapsed between the command to start/reset a
 693:../Middlewares/FreeRTOS//Source/timers.c **** 		timer was issued, and the time the command was processed? */
 694:../Middlewares/FreeRTOS//Source/timers.c **** 		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961
  87              		.loc 1 694 0
  88 000a D21A     		subs	r2, r2, r3
  89              	.LVL6:
  90 000c 8369     		ldr	r3, [r0, #24]
  91              	.LVL7:
  92 000e 9A42     		cmp	r2, r3
  93 0010 01D3     		bcc	.L13
 695:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 696:../Middlewares/FreeRTOS//Source/timers.c **** 			/* The time between a command being issued and the command being
 697:../Middlewares/FreeRTOS//Source/timers.c **** 			processed actually exceeds the timers period.  */
 698:../Middlewares/FreeRTOS//Source/timers.c **** 			xProcessTimerNow = pdTRUE;
  94              		.loc 1 698 0
  95 0012 0120     		movs	r0, #1
  96              	.LVL8:
  97 0014 10E0     		b	.L6
  98              	.LVL9:
  99              	.L13:
 699:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 700:../Middlewares/FreeRTOS//Source/timers.c **** 		else
 701:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 702:../Middlewares/FreeRTOS//Source/timers.c **** 			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 15


 100              		.loc 1 702 0
 101 0016 011D     		adds	r1, r0, #4
 102              	.LVL10:
 103 0018 094B     		ldr	r3, .L14
 104 001a 1868     		ldr	r0, [r3]
 105              	.LVL11:
 106 001c FFF7FEFF 		bl	vListInsert
 107              	.LVL12:
 685:../Middlewares/FreeRTOS//Source/timers.c **** 
 108              		.loc 1 685 0
 109 0020 0020     		movs	r0, #0
 110 0022 09E0     		b	.L6
 111              	.LVL13:
 112              	.L7:
 703:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 704:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 705:../Middlewares/FreeRTOS//Source/timers.c **** 	else
 706:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 707:../Middlewares/FreeRTOS//Source/timers.c **** 		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 113              		.loc 1 707 0
 114 0024 9A42     		cmp	r2, r3
 115 0026 01D2     		bcs	.L9
 116              		.loc 1 707 0 is_stmt 0 discriminator 1
 117 0028 9942     		cmp	r1, r3
 118 002a 06D2     		bcs	.L11
 119              	.L9:
 708:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 709:../Middlewares/FreeRTOS//Source/timers.c **** 			/* If, since the command was issued, the tick count has overflowed
 710:../Middlewares/FreeRTOS//Source/timers.c **** 			but the expiry time has not, then the timer must have already passed
 711:../Middlewares/FreeRTOS//Source/timers.c **** 			its expiry time and should be processed immediately. */
 712:../Middlewares/FreeRTOS//Source/timers.c **** 			xProcessTimerNow = pdTRUE;
 713:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 714:../Middlewares/FreeRTOS//Source/timers.c **** 		else
 715:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 716:../Middlewares/FreeRTOS//Source/timers.c **** 			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 120              		.loc 1 716 0 is_stmt 1
 121 002c 011D     		adds	r1, r0, #4
 122              	.LVL14:
 123 002e 054B     		ldr	r3, .L14+4
 124              	.LVL15:
 125 0030 1868     		ldr	r0, [r3]
 126              	.LVL16:
 127 0032 FFF7FEFF 		bl	vListInsert
 128              	.LVL17:
 685:../Middlewares/FreeRTOS//Source/timers.c **** 
 129              		.loc 1 685 0
 130 0036 0020     		movs	r0, #0
 131              	.LVL18:
 132              	.L6:
 717:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 718:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 719:../Middlewares/FreeRTOS//Source/timers.c **** 
 720:../Middlewares/FreeRTOS//Source/timers.c **** 	return xProcessTimerNow;
 721:../Middlewares/FreeRTOS//Source/timers.c **** }
 133              		.loc 1 721 0
 134 0038 08BD     		pop	{r3, pc}
 135              	.LVL19:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 16


 136              	.L11:
 712:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 137              		.loc 1 712 0
 138 003a 0120     		movs	r0, #1
 139              	.LVL20:
 720:../Middlewares/FreeRTOS//Source/timers.c **** }
 140              		.loc 1 720 0
 141 003c FCE7     		b	.L6
 142              	.L15:
 143 003e 00BF     		.align	2
 144              	.L14:
 145 0040 00000000 		.word	.LANCHOR1
 146 0044 00000000 		.word	.LANCHOR0
 147              		.cfi_endproc
 148              	.LFE141:
 150              		.section	.text.prvCheckForValidListAndQueue,"ax",%progbits
 151              		.align	1
 152              		.syntax unified
 153              		.thumb
 154              		.thumb_func
 155              		.fpu fpv4-sp-d16
 157              	prvCheckForValidListAndQueue:
 158              	.LFB144:
 722:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 723:../Middlewares/FreeRTOS//Source/timers.c **** 
 724:../Middlewares/FreeRTOS//Source/timers.c **** static void	prvProcessReceivedCommands( void )
 725:../Middlewares/FreeRTOS//Source/timers.c **** {
 726:../Middlewares/FreeRTOS//Source/timers.c **** DaemonTaskMessage_t xMessage;
 727:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t *pxTimer;
 728:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xTimerListsWereSwitched, xResult;
 729:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xTimeNow;
 730:../Middlewares/FreeRTOS//Source/timers.c **** 
 731:../Middlewares/FreeRTOS//Source/timers.c **** 	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does
 732:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 733:../Middlewares/FreeRTOS//Source/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 734:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 735:../Middlewares/FreeRTOS//Source/timers.c **** 			/* Negative commands are pended function calls rather than timer
 736:../Middlewares/FreeRTOS//Source/timers.c **** 			commands. */
 737:../Middlewares/FreeRTOS//Source/timers.c **** 			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 738:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 739:../Middlewares/FreeRTOS//Source/timers.c **** 				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 740:../Middlewares/FreeRTOS//Source/timers.c **** 
 741:../Middlewares/FreeRTOS//Source/timers.c **** 				/* The timer uses the xCallbackParameters member to request a
 742:../Middlewares/FreeRTOS//Source/timers.c **** 				callback be executed.  Check the callback is not NULL. */
 743:../Middlewares/FreeRTOS//Source/timers.c **** 				configASSERT( pxCallback );
 744:../Middlewares/FreeRTOS//Source/timers.c **** 
 745:../Middlewares/FreeRTOS//Source/timers.c **** 				/* Call the function. */
 746:../Middlewares/FreeRTOS//Source/timers.c **** 				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 747:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 748:../Middlewares/FreeRTOS//Source/timers.c **** 			else
 749:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 750:../Middlewares/FreeRTOS//Source/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 751:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 752:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 753:../Middlewares/FreeRTOS//Source/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 754:../Middlewares/FreeRTOS//Source/timers.c **** 
 755:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Commands that are positive are timer commands rather than pended
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 17


 756:../Middlewares/FreeRTOS//Source/timers.c **** 		function calls. */
 757:../Middlewares/FreeRTOS//Source/timers.c **** 		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 758:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 759:../Middlewares/FreeRTOS//Source/timers.c **** 			/* The messages uses the xTimerParameters member to work on a
 760:../Middlewares/FreeRTOS//Source/timers.c **** 			software timer. */
 761:../Middlewares/FreeRTOS//Source/timers.c **** 			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 762:../Middlewares/FreeRTOS//Source/timers.c **** 
 763:../Middlewares/FreeRTOS//Source/timers.c **** 			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 764:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 765:../Middlewares/FreeRTOS//Source/timers.c **** 				/* The timer is in a list, remove it. */
 766:../Middlewares/FreeRTOS//Source/timers.c **** 				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 767:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 768:../Middlewares/FreeRTOS//Source/timers.c **** 			else
 769:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 770:../Middlewares/FreeRTOS//Source/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 771:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 772:../Middlewares/FreeRTOS//Source/timers.c **** 
 773:../Middlewares/FreeRTOS//Source/timers.c **** 			traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParameters.xMessageV
 774:../Middlewares/FreeRTOS//Source/timers.c **** 
 775:../Middlewares/FreeRTOS//Source/timers.c **** 			/* In this case the xTimerListsWereSwitched parameter is not used, but
 776:../Middlewares/FreeRTOS//Source/timers.c **** 			it must be present in the function call.  prvSampleTimeNow() must be
 777:../Middlewares/FreeRTOS//Source/timers.c **** 			called after the message is received from xTimerQueue so there is no
 778:../Middlewares/FreeRTOS//Source/timers.c **** 			possibility of a higher priority task adding a message to the message
 779:../Middlewares/FreeRTOS//Source/timers.c **** 			queue with a time that is ahead of the timer daemon task (because it
 780:../Middlewares/FreeRTOS//Source/timers.c **** 			pre-empted the timer daemon task after the xTimeNow value was set). */
 781:../Middlewares/FreeRTOS//Source/timers.c **** 			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 782:../Middlewares/FreeRTOS//Source/timers.c **** 
 783:../Middlewares/FreeRTOS//Source/timers.c **** 			switch( xMessage.xMessageID )
 784:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 785:../Middlewares/FreeRTOS//Source/timers.c **** 				case tmrCOMMAND_START :
 786:../Middlewares/FreeRTOS//Source/timers.c **** 			    case tmrCOMMAND_START_FROM_ISR :
 787:../Middlewares/FreeRTOS//Source/timers.c **** 			    case tmrCOMMAND_RESET :
 788:../Middlewares/FreeRTOS//Source/timers.c **** 			    case tmrCOMMAND_RESET_FROM_ISR :
 789:../Middlewares/FreeRTOS//Source/timers.c **** 				case tmrCOMMAND_START_DONT_TRACE :
 790:../Middlewares/FreeRTOS//Source/timers.c **** 					/* Start or restart a timer. */
 791:../Middlewares/FreeRTOS//Source/timers.c **** 					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer-
 792:../Middlewares/FreeRTOS//Source/timers.c **** 					{
 793:../Middlewares/FreeRTOS//Source/timers.c **** 						/* The timer expired before it was added to the active
 794:../Middlewares/FreeRTOS//Source/timers.c **** 						timer list.  Process it now. */
 795:../Middlewares/FreeRTOS//Source/timers.c **** 						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 796:../Middlewares/FreeRTOS//Source/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 797:../Middlewares/FreeRTOS//Source/timers.c **** 
 798:../Middlewares/FreeRTOS//Source/timers.c **** 						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 799:../Middlewares/FreeRTOS//Source/timers.c **** 						{
 800:../Middlewares/FreeRTOS//Source/timers.c **** 							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParam
 801:../Middlewares/FreeRTOS//Source/timers.c **** 							configASSERT( xResult );
 802:../Middlewares/FreeRTOS//Source/timers.c **** 							( void ) xResult;
 803:../Middlewares/FreeRTOS//Source/timers.c **** 						}
 804:../Middlewares/FreeRTOS//Source/timers.c **** 						else
 805:../Middlewares/FreeRTOS//Source/timers.c **** 						{
 806:../Middlewares/FreeRTOS//Source/timers.c **** 							mtCOVERAGE_TEST_MARKER();
 807:../Middlewares/FreeRTOS//Source/timers.c **** 						}
 808:../Middlewares/FreeRTOS//Source/timers.c **** 					}
 809:../Middlewares/FreeRTOS//Source/timers.c **** 					else
 810:../Middlewares/FreeRTOS//Source/timers.c **** 					{
 811:../Middlewares/FreeRTOS//Source/timers.c **** 						mtCOVERAGE_TEST_MARKER();
 812:../Middlewares/FreeRTOS//Source/timers.c **** 					}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 18


 813:../Middlewares/FreeRTOS//Source/timers.c **** 					break;
 814:../Middlewares/FreeRTOS//Source/timers.c **** 
 815:../Middlewares/FreeRTOS//Source/timers.c **** 				case tmrCOMMAND_STOP :
 816:../Middlewares/FreeRTOS//Source/timers.c **** 				case tmrCOMMAND_STOP_FROM_ISR :
 817:../Middlewares/FreeRTOS//Source/timers.c **** 					/* The timer has already been removed from the active list.
 818:../Middlewares/FreeRTOS//Source/timers.c **** 					There is nothing to do here. */
 819:../Middlewares/FreeRTOS//Source/timers.c **** 					break;
 820:../Middlewares/FreeRTOS//Source/timers.c **** 
 821:../Middlewares/FreeRTOS//Source/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD :
 822:../Middlewares/FreeRTOS//Source/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
 823:../Middlewares/FreeRTOS//Source/timers.c **** 					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 824:../Middlewares/FreeRTOS//Source/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 825:../Middlewares/FreeRTOS//Source/timers.c **** 
 826:../Middlewares/FreeRTOS//Source/timers.c **** 					/* The new period does not really have a reference, and can
 827:../Middlewares/FreeRTOS//Source/timers.c **** 					be longer or shorter than the old one.  The command time is
 828:../Middlewares/FreeRTOS//Source/timers.c **** 					therefore set to the current time, and as the period cannot
 829:../Middlewares/FreeRTOS//Source/timers.c **** 					be zero the next expiry time can only be in the future,
 830:../Middlewares/FreeRTOS//Source/timers.c **** 					meaning (unlike for the xTimerStart() case above) there is
 831:../Middlewares/FreeRTOS//Source/timers.c **** 					no fail case that needs to be handled here. */
 832:../Middlewares/FreeRTOS//Source/timers.c **** 					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTi
 833:../Middlewares/FreeRTOS//Source/timers.c **** 					break;
 834:../Middlewares/FreeRTOS//Source/timers.c **** 
 835:../Middlewares/FreeRTOS//Source/timers.c **** 				case tmrCOMMAND_DELETE :
 836:../Middlewares/FreeRTOS//Source/timers.c **** 					/* The timer has already been removed from the active list,
 837:../Middlewares/FreeRTOS//Source/timers.c **** 					just free up the memory if the memory was dynamically
 838:../Middlewares/FreeRTOS//Source/timers.c **** 					allocated. */
 839:../Middlewares/FreeRTOS//Source/timers.c **** 					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 840:../Middlewares/FreeRTOS//Source/timers.c **** 					{
 841:../Middlewares/FreeRTOS//Source/timers.c **** 						/* The timer can only have been allocated dynamically -
 842:../Middlewares/FreeRTOS//Source/timers.c **** 						free it again. */
 843:../Middlewares/FreeRTOS//Source/timers.c **** 						vPortFree( pxTimer );
 844:../Middlewares/FreeRTOS//Source/timers.c **** 					}
 845:../Middlewares/FreeRTOS//Source/timers.c **** 					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 846:../Middlewares/FreeRTOS//Source/timers.c **** 					{
 847:../Middlewares/FreeRTOS//Source/timers.c **** 						/* The timer could have been allocated statically or
 848:../Middlewares/FreeRTOS//Source/timers.c **** 						dynamically, so check before attempting to free the
 849:../Middlewares/FreeRTOS//Source/timers.c **** 						memory. */
 850:../Middlewares/FreeRTOS//Source/timers.c **** 						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 851:../Middlewares/FreeRTOS//Source/timers.c **** 						{
 852:../Middlewares/FreeRTOS//Source/timers.c **** 							vPortFree( pxTimer );
 853:../Middlewares/FreeRTOS//Source/timers.c **** 						}
 854:../Middlewares/FreeRTOS//Source/timers.c **** 						else
 855:../Middlewares/FreeRTOS//Source/timers.c **** 						{
 856:../Middlewares/FreeRTOS//Source/timers.c **** 							mtCOVERAGE_TEST_MARKER();
 857:../Middlewares/FreeRTOS//Source/timers.c **** 						}
 858:../Middlewares/FreeRTOS//Source/timers.c **** 					}
 859:../Middlewares/FreeRTOS//Source/timers.c **** 					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 860:../Middlewares/FreeRTOS//Source/timers.c **** 					break;
 861:../Middlewares/FreeRTOS//Source/timers.c **** 
 862:../Middlewares/FreeRTOS//Source/timers.c **** 				default	:
 863:../Middlewares/FreeRTOS//Source/timers.c **** 					/* Don't expect to get here. */
 864:../Middlewares/FreeRTOS//Source/timers.c **** 					break;
 865:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 866:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 867:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 868:../Middlewares/FreeRTOS//Source/timers.c **** }
 869:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 19


 870:../Middlewares/FreeRTOS//Source/timers.c **** 
 871:../Middlewares/FreeRTOS//Source/timers.c **** static void prvSwitchTimerLists( void )
 872:../Middlewares/FreeRTOS//Source/timers.c **** {
 873:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xNextExpireTime, xReloadTime;
 874:../Middlewares/FreeRTOS//Source/timers.c **** List_t *pxTemp;
 875:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t *pxTimer;
 876:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xResult;
 877:../Middlewares/FreeRTOS//Source/timers.c **** 
 878:../Middlewares/FreeRTOS//Source/timers.c **** 	/* The tick count has overflowed.  The timer lists must be switched.
 879:../Middlewares/FreeRTOS//Source/timers.c **** 	If there are any timers still referenced from the current timer list
 880:../Middlewares/FreeRTOS//Source/timers.c **** 	then they must have expired and should be processed before the lists
 881:../Middlewares/FreeRTOS//Source/timers.c **** 	are switched. */
 882:../Middlewares/FreeRTOS//Source/timers.c **** 	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 883:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 884:../Middlewares/FreeRTOS//Source/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 885:../Middlewares/FreeRTOS//Source/timers.c **** 
 886:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Remove the timer from the list. */
 887:../Middlewares/FreeRTOS//Source/timers.c **** 		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 888:../Middlewares/FreeRTOS//Source/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 889:../Middlewares/FreeRTOS//Source/timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 890:../Middlewares/FreeRTOS//Source/timers.c **** 
 891:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Execute its callback, then send a command to restart the timer if
 892:../Middlewares/FreeRTOS//Source/timers.c **** 		it is an auto-reload timer.  It cannot be restarted here as the lists
 893:../Middlewares/FreeRTOS//Source/timers.c **** 		have not yet been switched. */
 894:../Middlewares/FreeRTOS//Source/timers.c **** 		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 895:../Middlewares/FreeRTOS//Source/timers.c **** 
 896:../Middlewares/FreeRTOS//Source/timers.c **** 		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 897:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 898:../Middlewares/FreeRTOS//Source/timers.c **** 			/* Calculate the reload value, and if the reload value results in
 899:../Middlewares/FreeRTOS//Source/timers.c **** 			the timer going into the same timer list then it has already expired
 900:../Middlewares/FreeRTOS//Source/timers.c **** 			and the timer should be re-inserted into the current list so it is
 901:../Middlewares/FreeRTOS//Source/timers.c **** 			processed again within this loop.  Otherwise a command should be sent
 902:../Middlewares/FreeRTOS//Source/timers.c **** 			to restart the timer to ensure it is only inserted into a list after
 903:../Middlewares/FreeRTOS//Source/timers.c **** 			the lists have been swapped. */
 904:../Middlewares/FreeRTOS//Source/timers.c **** 			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 905:../Middlewares/FreeRTOS//Source/timers.c **** 			if( xReloadTime > xNextExpireTime )
 906:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 907:../Middlewares/FreeRTOS//Source/timers.c **** 				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 908:../Middlewares/FreeRTOS//Source/timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 909:../Middlewares/FreeRTOS//Source/timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 910:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 911:../Middlewares/FreeRTOS//Source/timers.c **** 			else
 912:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 913:../Middlewares/FreeRTOS//Source/timers.c **** 				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tm
 914:../Middlewares/FreeRTOS//Source/timers.c **** 				configASSERT( xResult );
 915:../Middlewares/FreeRTOS//Source/timers.c **** 				( void ) xResult;
 916:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 917:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 918:../Middlewares/FreeRTOS//Source/timers.c **** 		else
 919:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 920:../Middlewares/FreeRTOS//Source/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 921:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 922:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 923:../Middlewares/FreeRTOS//Source/timers.c **** 
 924:../Middlewares/FreeRTOS//Source/timers.c **** 	pxTemp = pxCurrentTimerList;
 925:../Middlewares/FreeRTOS//Source/timers.c **** 	pxCurrentTimerList = pxOverflowTimerList;
 926:../Middlewares/FreeRTOS//Source/timers.c **** 	pxOverflowTimerList = pxTemp;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 20


 927:../Middlewares/FreeRTOS//Source/timers.c **** }
 928:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 929:../Middlewares/FreeRTOS//Source/timers.c **** 
 930:../Middlewares/FreeRTOS//Source/timers.c **** static void prvCheckForValidListAndQueue( void )
 931:../Middlewares/FreeRTOS//Source/timers.c **** {
 159              		.loc 1 931 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 0
 162              		@ frame_needed = 0, uses_anonymous_args = 0
 163 0000 38B5     		push	{r3, r4, r5, lr}
 164              	.LCFI1:
 165              		.cfi_def_cfa_offset 16
 166              		.cfi_offset 3, -16
 167              		.cfi_offset 4, -12
 168              		.cfi_offset 5, -8
 169              		.cfi_offset 14, -4
 932:../Middlewares/FreeRTOS//Source/timers.c **** 	/* Check that the list from which active timers are referenced, and the
 933:../Middlewares/FreeRTOS//Source/timers.c **** 	queue used to communicate with the timer service, have been
 934:../Middlewares/FreeRTOS//Source/timers.c **** 	initialised. */
 935:../Middlewares/FreeRTOS//Source/timers.c **** 	taskENTER_CRITICAL();
 170              		.loc 1 935 0
 171 0002 FFF7FEFF 		bl	vPortEnterCritical
 172              	.LVL21:
 936:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 937:../Middlewares/FreeRTOS//Source/timers.c **** 		if( xTimerQueue == NULL )
 173              		.loc 1 937 0
 174 0006 0F4B     		ldr	r3, .L20
 175 0008 1B68     		ldr	r3, [r3]
 176 000a 13B1     		cbz	r3, .L19
 177              	.L17:
 938:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 939:../Middlewares/FreeRTOS//Source/timers.c **** 			vListInitialise( &xActiveTimerList1 );
 940:../Middlewares/FreeRTOS//Source/timers.c **** 			vListInitialise( &xActiveTimerList2 );
 941:../Middlewares/FreeRTOS//Source/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
 942:../Middlewares/FreeRTOS//Source/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 943:../Middlewares/FreeRTOS//Source/timers.c **** 
 944:../Middlewares/FreeRTOS//Source/timers.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 945:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 946:../Middlewares/FreeRTOS//Source/timers.c **** 				/* The timer queue is allocated statically in case
 947:../Middlewares/FreeRTOS//Source/timers.c **** 				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
 948:../Middlewares/FreeRTOS//Source/timers.c **** 				static StaticQueue_t xStaticTimerQueue;
 949:../Middlewares/FreeRTOS//Source/timers.c **** 				static uint8_t ucStaticTimerQueueStorage[ configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_
 950:../Middlewares/FreeRTOS//Source/timers.c **** 
 951:../Middlewares/FreeRTOS//Source/timers.c **** 				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskM
 952:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 953:../Middlewares/FreeRTOS//Source/timers.c **** 			#else
 954:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 955:../Middlewares/FreeRTOS//Source/timers.c **** 				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage
 956:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 957:../Middlewares/FreeRTOS//Source/timers.c **** 			#endif
 958:../Middlewares/FreeRTOS//Source/timers.c **** 
 959:../Middlewares/FreeRTOS//Source/timers.c **** 			#if ( configQUEUE_REGISTRY_SIZE > 0 )
 960:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 961:../Middlewares/FreeRTOS//Source/timers.c **** 				if( xTimerQueue != NULL )
 962:../Middlewares/FreeRTOS//Source/timers.c **** 				{
 963:../Middlewares/FreeRTOS//Source/timers.c **** 					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 964:../Middlewares/FreeRTOS//Source/timers.c **** 				}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 21


 965:../Middlewares/FreeRTOS//Source/timers.c **** 				else
 966:../Middlewares/FreeRTOS//Source/timers.c **** 				{
 967:../Middlewares/FreeRTOS//Source/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 968:../Middlewares/FreeRTOS//Source/timers.c **** 				}
 969:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 970:../Middlewares/FreeRTOS//Source/timers.c **** 			#endif /* configQUEUE_REGISTRY_SIZE */
 971:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 972:../Middlewares/FreeRTOS//Source/timers.c **** 		else
 973:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 974:../Middlewares/FreeRTOS//Source/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 975:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 976:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 977:../Middlewares/FreeRTOS//Source/timers.c **** 	taskEXIT_CRITICAL();
 178              		.loc 1 977 0
 179 000c FFF7FEFF 		bl	vPortExitCritical
 180              	.LVL22:
 978:../Middlewares/FreeRTOS//Source/timers.c **** }
 181              		.loc 1 978 0
 182 0010 38BD     		pop	{r3, r4, r5, pc}
 183              	.L19:
 939:../Middlewares/FreeRTOS//Source/timers.c **** 			vListInitialise( &xActiveTimerList2 );
 184              		.loc 1 939 0
 185 0012 0D4D     		ldr	r5, .L20+4
 186 0014 2846     		mov	r0, r5
 187 0016 FFF7FEFF 		bl	vListInitialise
 188              	.LVL23:
 940:../Middlewares/FreeRTOS//Source/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
 189              		.loc 1 940 0
 190 001a 0C4C     		ldr	r4, .L20+8
 191 001c 2046     		mov	r0, r4
 192 001e FFF7FEFF 		bl	vListInitialise
 193              	.LVL24:
 941:../Middlewares/FreeRTOS//Source/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 194              		.loc 1 941 0
 195 0022 0B4B     		ldr	r3, .L20+12
 196 0024 1D60     		str	r5, [r3]
 942:../Middlewares/FreeRTOS//Source/timers.c **** 
 197              		.loc 1 942 0
 198 0026 0B4B     		ldr	r3, .L20+16
 199 0028 1C60     		str	r4, [r3]
 955:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 200              		.loc 1 955 0
 201 002a 0022     		movs	r2, #0
 202 002c 0C21     		movs	r1, #12
 203 002e 0A20     		movs	r0, #10
 204 0030 FFF7FEFF 		bl	xQueueGenericCreate
 205              	.LVL25:
 206 0034 034B     		ldr	r3, .L20
 207 0036 1860     		str	r0, [r3]
 961:../Middlewares/FreeRTOS//Source/timers.c **** 				{
 208              		.loc 1 961 0
 209 0038 0028     		cmp	r0, #0
 210 003a E7D0     		beq	.L17
 963:../Middlewares/FreeRTOS//Source/timers.c **** 				}
 211              		.loc 1 963 0
 212 003c 0649     		ldr	r1, .L20+20
 213 003e FFF7FEFF 		bl	vQueueAddToRegistry
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 22


 214              	.LVL26:
 215 0042 E3E7     		b	.L17
 216              	.L21:
 217              		.align	2
 218              	.L20:
 219 0044 00000000 		.word	.LANCHOR2
 220 0048 00000000 		.word	.LANCHOR3
 221 004c 00000000 		.word	.LANCHOR4
 222 0050 00000000 		.word	.LANCHOR0
 223 0054 00000000 		.word	.LANCHOR1
 224 0058 00000000 		.word	.LC0
 225              		.cfi_endproc
 226              	.LFE144:
 228              		.section	.text.prvInitialiseNewTimer,"ax",%progbits
 229              		.align	1
 230              		.syntax unified
 231              		.thumb
 232              		.thumb_func
 233              		.fpu fpv4-sp-d16
 235              	prvInitialiseNewTimer:
 236              	.LFB130:
 394:../Middlewares/FreeRTOS//Source/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 237              		.loc 1 394 0
 238              		.cfi_startproc
 239              		@ args = 8, pretend = 0, frame = 0
 240              		@ frame_needed = 0, uses_anonymous_args = 0
 241              	.LVL27:
 242 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 243              	.LCFI2:
 244              		.cfi_def_cfa_offset 24
 245              		.cfi_offset 4, -24
 246              		.cfi_offset 5, -20
 247              		.cfi_offset 6, -16
 248              		.cfi_offset 7, -12
 249              		.cfi_offset 8, -8
 250              		.cfi_offset 14, -4
 251 0004 079C     		ldr	r4, [sp, #28]
 396:../Middlewares/FreeRTOS//Source/timers.c **** 
 252              		.loc 1 396 0
 253 0006 41B9     		cbnz	r1, .L23
 254              	.LBB30:
 255              	.LBB31:
 256              		.file 2 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 23


  15:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 24


  72:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 25


 129:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 26


 186:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 257              		.loc 2 237 0
 258              		.syntax unified
 259              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 260 0008 4FF01003 			mov r3, #16												
 261 000c 83F31188 		msr basepri, r3											
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 27


 262 0010 BFF36F8F 		isb														
 263 0014 BFF34F8F 		dsb														
 264              	
 265              	@ 0 "" 2
 266              	.LVL28:
 267              		.thumb
 268              		.syntax unified
 269              	.L24:
 270 0018 FEE7     		b	.L24
 271              	.LVL29:
 272              	.L23:
 273 001a 0F46     		mov	r7, r1
 274              	.LBE31:
 275              	.LBE30:
 398:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 276              		.loc 1 398 0
 277 001c 74B1     		cbz	r4, .L22
 278 001e 1D46     		mov	r5, r3
 279 0020 1646     		mov	r6, r2
 280 0022 8046     		mov	r8, r0
 402:../Middlewares/FreeRTOS//Source/timers.c **** 
 281              		.loc 1 402 0
 282 0024 FFF7FEFF 		bl	prvCheckForValidListAndQueue
 283              	.LVL30:
 406:../Middlewares/FreeRTOS//Source/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 284              		.loc 1 406 0
 285 0028 C4F80080 		str	r8, [r4]
 407:../Middlewares/FreeRTOS//Source/timers.c **** 		pxNewTimer->uxAutoReload = uxAutoReload;
 286              		.loc 1 407 0
 287 002c A761     		str	r7, [r4, #24]
 408:../Middlewares/FreeRTOS//Source/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 288              		.loc 1 408 0
 289 002e E661     		str	r6, [r4, #28]
 409:../Middlewares/FreeRTOS//Source/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 290              		.loc 1 409 0
 291 0030 2562     		str	r5, [r4, #32]
 410:../Middlewares/FreeRTOS//Source/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 292              		.loc 1 410 0
 293 0032 069B     		ldr	r3, [sp, #24]
 294 0034 6362     		str	r3, [r4, #36]
 411:../Middlewares/FreeRTOS//Source/timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 295              		.loc 1 411 0
 296 0036 201D     		adds	r0, r4, #4
 297 0038 FFF7FEFF 		bl	vListInitialiseItem
 298              	.LVL31:
 299              	.L22:
 414:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 300              		.loc 1 414 0
 301 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 302              		.cfi_endproc
 303              	.LFE130:
 305              		.section	.text.xTimerCreateTimerTask,"ax",%progbits
 306              		.align	1
 307              		.global	xTimerCreateTimerTask
 308              		.syntax unified
 309              		.thumb
 310              		.thumb_func
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 28


 311              		.fpu fpv4-sp-d16
 313              	xTimerCreateTimerTask:
 314              	.LFB128:
 260:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xReturn = pdFAIL;
 315              		.loc 1 260 0
 316              		.cfi_startproc
 317              		@ args = 0, pretend = 0, frame = 0
 318              		@ frame_needed = 0, uses_anonymous_args = 0
 319 0000 00B5     		push	{lr}
 320              	.LCFI3:
 321              		.cfi_def_cfa_offset 4
 322              		.cfi_offset 14, -4
 323 0002 83B0     		sub	sp, sp, #12
 324              	.LCFI4:
 325              		.cfi_def_cfa_offset 16
 326              	.LVL32:
 267:../Middlewares/FreeRTOS//Source/timers.c **** 
 327              		.loc 1 267 0
 328 0004 FFF7FEFF 		bl	prvCheckForValidListAndQueue
 329              	.LVL33:
 269:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 330              		.loc 1 269 0
 331 0008 0D4B     		ldr	r3, .L32
 332 000a 1B68     		ldr	r3, [r3]
 333 000c 5BB1     		cbz	r3, .L28
 293:../Middlewares/FreeRTOS//Source/timers.c **** 									"Tmr Svc",
 334              		.loc 1 293 0
 335 000e 0D4B     		ldr	r3, .L32+4
 336 0010 0193     		str	r3, [sp, #4]
 337 0012 0123     		movs	r3, #1
 338 0014 0093     		str	r3, [sp]
 339 0016 0023     		movs	r3, #0
 340 0018 4FF48272 		mov	r2, #260
 341 001c 0A49     		ldr	r1, .L32+8
 342 001e 0B48     		ldr	r0, .L32+12
 343 0020 FFF7FEFF 		bl	xTaskCreate
 344              	.LVL34:
 307:../Middlewares/FreeRTOS//Source/timers.c **** 	return xReturn;
 345              		.loc 1 307 0
 346 0024 40B9     		cbnz	r0, .L27
 347              	.LVL35:
 348              	.L28:
 349              	.LBB32:
 350              	.LBB33:
 351              		.loc 2 237 0
 352              		.syntax unified
 353              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 354 0026 4FF01003 			mov r3, #16												
 355 002a 83F31188 		msr basepri, r3											
 356 002e BFF36F8F 		isb														
 357 0032 BFF34F8F 		dsb														
 358              	
 359              	@ 0 "" 2
 360              	.LVL36:
 361              		.thumb
 362              		.syntax unified
 363              	.L30:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 29


 364 0036 FEE7     		b	.L30
 365              	.LVL37:
 366              	.L27:
 367              	.LBE33:
 368              	.LBE32:
 309:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 369              		.loc 1 309 0
 370 0038 03B0     		add	sp, sp, #12
 371              	.LCFI5:
 372              		.cfi_def_cfa_offset 4
 373              		@ sp needed
 374 003a 5DF804FB 		ldr	pc, [sp], #4
 375              	.L33:
 376 003e 00BF     		.align	2
 377              	.L32:
 378 0040 00000000 		.word	.LANCHOR2
 379 0044 00000000 		.word	.LANCHOR5
 380 0048 00000000 		.word	.LC1
 381 004c 00000000 		.word	prvTimerTask
 382              		.cfi_endproc
 383              	.LFE128:
 385              		.section	.text.xTimerCreate,"ax",%progbits
 386              		.align	1
 387              		.global	xTimerCreate
 388              		.syntax unified
 389              		.thumb
 390              		.thumb_func
 391              		.fpu fpv4-sp-d16
 393              	xTimerCreate:
 394              	.LFB129:
 319:../Middlewares/FreeRTOS//Source/timers.c **** 	Timer_t *pxNewTimer;
 395              		.loc 1 319 0
 396              		.cfi_startproc
 397              		@ args = 4, pretend = 0, frame = 0
 398              		@ frame_needed = 0, uses_anonymous_args = 0
 399              	.LVL38:
 400 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 401              	.LCFI6:
 402              		.cfi_def_cfa_offset 24
 403              		.cfi_offset 4, -24
 404              		.cfi_offset 5, -20
 405              		.cfi_offset 6, -16
 406              		.cfi_offset 7, -12
 407              		.cfi_offset 8, -8
 408              		.cfi_offset 14, -4
 409 0004 82B0     		sub	sp, sp, #8
 410              	.LCFI7:
 411              		.cfi_def_cfa_offset 32
 412 0006 0546     		mov	r5, r0
 413 0008 0E46     		mov	r6, r1
 414 000a 1746     		mov	r7, r2
 415 000c 9846     		mov	r8, r3
 322:../Middlewares/FreeRTOS//Source/timers.c **** 
 416              		.loc 1 322 0
 417 000e 2C20     		movs	r0, #44
 418              	.LVL39:
 419 0010 FFF7FEFF 		bl	pvPortMalloc
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 30


 420              	.LVL40:
 324:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 421              		.loc 1 324 0
 422 0014 0446     		mov	r4, r0
 423 0016 40B1     		cbz	r0, .L34
 326:../Middlewares/FreeRTOS//Source/timers.c **** 
 424              		.loc 1 326 0
 425 0018 0190     		str	r0, [sp, #4]
 426 001a 089B     		ldr	r3, [sp, #32]
 427 001c 0093     		str	r3, [sp]
 428 001e 4346     		mov	r3, r8
 429 0020 3A46     		mov	r2, r7
 430 0022 3146     		mov	r1, r6
 431 0024 2846     		mov	r0, r5
 432              	.LVL41:
 433 0026 FFF7FEFF 		bl	prvInitialiseNewTimer
 434              	.LVL42:
 435              	.L34:
 339:../Middlewares/FreeRTOS//Source/timers.c **** 
 436              		.loc 1 339 0
 437 002a 2046     		mov	r0, r4
 438 002c 02B0     		add	sp, sp, #8
 439              	.LCFI8:
 440              		.cfi_def_cfa_offset 24
 441              		@ sp needed
 442 002e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 443              		.cfi_endproc
 444              	.LFE129:
 446              		.section	.text.xTimerGenericCommand,"ax",%progbits
 447              		.align	1
 448              		.global	xTimerGenericCommand
 449              		.syntax unified
 450              		.thumb
 451              		.thumb_func
 452              		.fpu fpv4-sp-d16
 454              	xTimerGenericCommand:
 455              	.LFB131:
 418:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xReturn = pdFAIL;
 456              		.loc 1 418 0
 457              		.cfi_startproc
 458              		@ args = 4, pretend = 0, frame = 16
 459              		@ frame_needed = 0, uses_anonymous_args = 0
 460              	.LVL43:
 422:../Middlewares/FreeRTOS//Source/timers.c **** 
 461              		.loc 1 422 0
 462 0000 C8B1     		cbz	r0, .L46
 418:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xReturn = pdFAIL;
 463              		.loc 1 418 0
 464 0002 30B5     		push	{r4, r5, lr}
 465              	.LCFI9:
 466              		.cfi_def_cfa_offset 12
 467              		.cfi_offset 4, -12
 468              		.cfi_offset 5, -8
 469              		.cfi_offset 14, -4
 470 0004 85B0     		sub	sp, sp, #20
 471              	.LCFI10:
 472              		.cfi_def_cfa_offset 32
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 31


 473 0006 1546     		mov	r5, r2
 474 0008 0446     		mov	r4, r0
 426:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 475              		.loc 1 426 0
 476 000a 174A     		ldr	r2, .L48
 477              	.LVL44:
 478 000c 1068     		ldr	r0, [r2]
 479              	.LVL45:
 480 000e 40B3     		cbz	r0, .L43
 481 0010 1A46     		mov	r2, r3
 429:../Middlewares/FreeRTOS//Source/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 482              		.loc 1 429 0
 483 0012 0191     		str	r1, [sp, #4]
 430:../Middlewares/FreeRTOS//Source/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 484              		.loc 1 430 0
 485 0014 0295     		str	r5, [sp, #8]
 431:../Middlewares/FreeRTOS//Source/timers.c **** 
 486              		.loc 1 431 0
 487 0016 0394     		str	r4, [sp, #12]
 433:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 488              		.loc 1 433 0
 489 0018 0529     		cmp	r1, #5
 490 001a 1DDC     		bgt	.L41
 435:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 491              		.loc 1 435 0
 492 001c FFF7FEFF 		bl	xTaskGetSchedulerState
 493              	.LVL46:
 494 0020 0228     		cmp	r0, #2
 495 0022 11D0     		beq	.L47
 441:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 496              		.loc 1 441 0
 497 0024 0023     		movs	r3, #0
 498 0026 1A46     		mov	r2, r3
 499 0028 01A9     		add	r1, sp, #4
 500 002a 0F48     		ldr	r0, .L48
 501 002c 0068     		ldr	r0, [r0]
 502 002e FFF7FEFF 		bl	xQueueGenericSend
 503              	.LVL47:
 504              	.L37:
 457:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 505              		.loc 1 457 0
 506 0032 05B0     		add	sp, sp, #20
 507              	.LCFI11:
 508              		.cfi_def_cfa_offset 12
 509              		@ sp needed
 510 0034 30BD     		pop	{r4, r5, pc}
 511              	.LVL48:
 512              	.L46:
 513              	.LCFI12:
 514              		.cfi_def_cfa_offset 0
 515              		.cfi_restore 4
 516              		.cfi_restore 5
 517              		.cfi_restore 14
 518              	.LBB34:
 519              	.LBB35:
 520              		.loc 2 237 0
 521              		.syntax unified
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 32


 522              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 523 0036 4FF01003 			mov r3, #16												
 524 003a 83F31188 		msr basepri, r3											
 525 003e BFF36F8F 		isb														
 526 0042 BFF34F8F 		dsb														
 527              	
 528              	@ 0 "" 2
 529              	.LVL49:
 530              		.thumb
 531              		.syntax unified
 532              	.L39:
 533 0046 FEE7     		b	.L39
 534              	.LVL50:
 535              	.L47:
 536              	.LCFI13:
 537              		.cfi_def_cfa_offset 32
 538              		.cfi_offset 4, -12
 539              		.cfi_offset 5, -8
 540              		.cfi_offset 14, -4
 541              	.LBE35:
 542              	.LBE34:
 437:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 543              		.loc 1 437 0
 544 0048 0023     		movs	r3, #0
 545 004a 089A     		ldr	r2, [sp, #32]
 546 004c 01A9     		add	r1, sp, #4
 547 004e 0648     		ldr	r0, .L48
 548 0050 0068     		ldr	r0, [r0]
 549 0052 FFF7FEFF 		bl	xQueueGenericSend
 550              	.LVL51:
 551 0056 ECE7     		b	.L37
 552              	.LVL52:
 553              	.L41:
 446:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 554              		.loc 1 446 0
 555 0058 0023     		movs	r3, #0
 556 005a 01A9     		add	r1, sp, #4
 557              	.LVL53:
 558 005c FFF7FEFF 		bl	xQueueGenericSendFromISR
 559              	.LVL54:
 560 0060 E7E7     		b	.L37
 561              	.LVL55:
 562              	.L43:
 419:../Middlewares/FreeRTOS//Source/timers.c **** DaemonTaskMessage_t xMessage;
 563              		.loc 1 419 0
 564 0062 0020     		movs	r0, #0
 456:../Middlewares/FreeRTOS//Source/timers.c **** }
 565              		.loc 1 456 0
 566 0064 E5E7     		b	.L37
 567              	.L49:
 568 0066 00BF     		.align	2
 569              	.L48:
 570 0068 00000000 		.word	.LANCHOR2
 571              		.cfi_endproc
 572              	.LFE131:
 574              		.section	.text.prvSwitchTimerLists,"ax",%progbits
 575              		.align	1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 33


 576              		.syntax unified
 577              		.thumb
 578              		.thumb_func
 579              		.fpu fpv4-sp-d16
 581              	prvSwitchTimerLists:
 582              	.LFB143:
 872:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xNextExpireTime, xReloadTime;
 583              		.loc 1 872 0
 584              		.cfi_startproc
 585              		@ args = 0, pretend = 0, frame = 0
 586              		@ frame_needed = 0, uses_anonymous_args = 0
 587 0000 70B5     		push	{r4, r5, r6, lr}
 588              	.LCFI14:
 589              		.cfi_def_cfa_offset 16
 590              		.cfi_offset 4, -16
 591              		.cfi_offset 5, -12
 592              		.cfi_offset 6, -8
 593              		.cfi_offset 14, -4
 594 0002 82B0     		sub	sp, sp, #8
 595              	.LCFI15:
 596              		.cfi_def_cfa_offset 24
 597              	.L52:
 882:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 598              		.loc 1 882 0
 599 0004 1A4B     		ldr	r3, .L59
 600 0006 1B68     		ldr	r3, [r3]
 601 0008 1A68     		ldr	r2, [r3]
 602 000a 52B3     		cbz	r2, .L58
 884:../Middlewares/FreeRTOS//Source/timers.c **** 
 603              		.loc 1 884 0
 604 000c DB68     		ldr	r3, [r3, #12]
 605 000e 1E68     		ldr	r6, [r3]
 606              	.LVL56:
 887:../Middlewares/FreeRTOS//Source/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 607              		.loc 1 887 0
 608 0010 DC68     		ldr	r4, [r3, #12]
 609              	.LVL57:
 888:../Middlewares/FreeRTOS//Source/timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 610              		.loc 1 888 0
 611 0012 251D     		adds	r5, r4, #4
 612 0014 2846     		mov	r0, r5
 613 0016 FFF7FEFF 		bl	uxListRemove
 614              	.LVL58:
 894:../Middlewares/FreeRTOS//Source/timers.c **** 
 615              		.loc 1 894 0
 616 001a 636A     		ldr	r3, [r4, #36]
 617 001c 2046     		mov	r0, r4
 618 001e 9847     		blx	r3
 619              	.LVL59:
 896:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 620              		.loc 1 896 0
 621 0020 E369     		ldr	r3, [r4, #28]
 622 0022 012B     		cmp	r3, #1
 623 0024 EED1     		bne	.L52
 904:../Middlewares/FreeRTOS//Source/timers.c **** 			if( xReloadTime > xNextExpireTime )
 624              		.loc 1 904 0
 625 0026 A369     		ldr	r3, [r4, #24]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 34


 626 0028 3344     		add	r3, r3, r6
 627              	.LVL60:
 905:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 628              		.loc 1 905 0
 629 002a 9E42     		cmp	r6, r3
 630 002c 07D2     		bcs	.L53
 907:../Middlewares/FreeRTOS//Source/timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 631              		.loc 1 907 0
 632 002e 6360     		str	r3, [r4, #4]
 908:../Middlewares/FreeRTOS//Source/timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 633              		.loc 1 908 0
 634 0030 2461     		str	r4, [r4, #16]
 909:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 635              		.loc 1 909 0
 636 0032 2946     		mov	r1, r5
 637 0034 0E4B     		ldr	r3, .L59
 638              	.LVL61:
 639 0036 1868     		ldr	r0, [r3]
 640 0038 FFF7FEFF 		bl	vListInsert
 641              	.LVL62:
 642 003c E2E7     		b	.L52
 643              	.LVL63:
 644              	.L53:
 913:../Middlewares/FreeRTOS//Source/timers.c **** 				configASSERT( xResult );
 645              		.loc 1 913 0
 646 003e 0021     		movs	r1, #0
 647 0040 0091     		str	r1, [sp]
 648 0042 0B46     		mov	r3, r1
 649              	.LVL64:
 650 0044 3246     		mov	r2, r6
 651 0046 2046     		mov	r0, r4
 652 0048 FFF7FEFF 		bl	xTimerGenericCommand
 653              	.LVL65:
 914:../Middlewares/FreeRTOS//Source/timers.c **** 				( void ) xResult;
 654              		.loc 1 914 0
 655 004c 0028     		cmp	r0, #0
 656 004e D9D1     		bne	.L52
 657              	.LBB36:
 658              	.LBB37:
 659              		.loc 2 237 0
 660              		.syntax unified
 661              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 662 0050 4FF01003 			mov r3, #16												
 663 0054 83F31188 		msr basepri, r3											
 664 0058 BFF36F8F 		isb														
 665 005c BFF34F8F 		dsb														
 666              	
 667              	@ 0 "" 2
 668              	.LVL66:
 669              		.thumb
 670              		.syntax unified
 671              	.L55:
 672 0060 FEE7     		b	.L55
 673              	.LVL67:
 674              	.L58:
 675              	.LBE37:
 676              	.LBE36:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 35


 925:../Middlewares/FreeRTOS//Source/timers.c **** 	pxOverflowTimerList = pxTemp;
 677              		.loc 1 925 0
 678 0062 044A     		ldr	r2, .L59+4
 679 0064 1068     		ldr	r0, [r2]
 680 0066 0249     		ldr	r1, .L59
 681 0068 0860     		str	r0, [r1]
 926:../Middlewares/FreeRTOS//Source/timers.c **** }
 682              		.loc 1 926 0
 683 006a 1360     		str	r3, [r2]
 927:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 684              		.loc 1 927 0
 685 006c 02B0     		add	sp, sp, #8
 686              	.LCFI16:
 687              		.cfi_def_cfa_offset 16
 688              		@ sp needed
 689 006e 70BD     		pop	{r4, r5, r6, pc}
 690              	.L60:
 691              		.align	2
 692              	.L59:
 693 0070 00000000 		.word	.LANCHOR0
 694 0074 00000000 		.word	.LANCHOR1
 695              		.cfi_endproc
 696              	.LFE143:
 698              		.section	.text.prvSampleTimeNow,"ax",%progbits
 699              		.align	1
 700              		.syntax unified
 701              		.thumb
 702              		.thumb_func
 703              		.fpu fpv4-sp-d16
 705              	prvSampleTimeNow:
 706              	.LFB140:
 661:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xTimeNow;
 707              		.loc 1 661 0
 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 0
 710              		@ frame_needed = 0, uses_anonymous_args = 0
 711              	.LVL68:
 712 0000 38B5     		push	{r3, r4, r5, lr}
 713              	.LCFI17:
 714              		.cfi_def_cfa_offset 16
 715              		.cfi_offset 3, -16
 716              		.cfi_offset 4, -12
 717              		.cfi_offset 5, -8
 718              		.cfi_offset 14, -4
 719 0002 0546     		mov	r5, r0
 665:../Middlewares/FreeRTOS//Source/timers.c **** 
 720              		.loc 1 665 0
 721 0004 FFF7FEFF 		bl	xTaskGetTickCount
 722              	.LVL69:
 723 0008 0446     		mov	r4, r0
 724              	.LVL70:
 667:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 725              		.loc 1 667 0
 726 000a 074B     		ldr	r3, .L66
 727 000c 1B68     		ldr	r3, [r3]
 728 000e 8342     		cmp	r3, r0
 729 0010 05D8     		bhi	.L65
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 36


 674:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 730              		.loc 1 674 0
 731 0012 0023     		movs	r3, #0
 732 0014 2B60     		str	r3, [r5]
 733              	.LVL71:
 734              	.L63:
 677:../Middlewares/FreeRTOS//Source/timers.c **** 
 735              		.loc 1 677 0
 736 0016 044B     		ldr	r3, .L66
 737 0018 1C60     		str	r4, [r3]
 680:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 738              		.loc 1 680 0
 739 001a 2046     		mov	r0, r4
 740 001c 38BD     		pop	{r3, r4, r5, pc}
 741              	.LVL72:
 742              	.L65:
 669:../Middlewares/FreeRTOS//Source/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 743              		.loc 1 669 0
 744 001e FFF7FEFF 		bl	prvSwitchTimerLists
 745              	.LVL73:
 670:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 746              		.loc 1 670 0
 747 0022 0123     		movs	r3, #1
 748 0024 2B60     		str	r3, [r5]
 749 0026 F6E7     		b	.L63
 750              	.L67:
 751              		.align	2
 752              	.L66:
 753 0028 00000000 		.word	.LANCHOR6
 754              		.cfi_endproc
 755              	.LFE140:
 757              		.section	.text.prvProcessExpiredTimer,"ax",%progbits
 758              		.align	1
 759              		.syntax unified
 760              		.thumb
 761              		.thumb_func
 762              		.fpu fpv4-sp-d16
 764              	prvProcessExpiredTimer:
 765              	.LFB136:
 499:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xResult;
 766              		.loc 1 499 0
 767              		.cfi_startproc
 768              		@ args = 0, pretend = 0, frame = 0
 769              		@ frame_needed = 0, uses_anonymous_args = 0
 770              	.LVL74:
 771 0000 70B5     		push	{r4, r5, r6, lr}
 772              	.LCFI18:
 773              		.cfi_def_cfa_offset 16
 774              		.cfi_offset 4, -16
 775              		.cfi_offset 5, -12
 776              		.cfi_offset 6, -8
 777              		.cfi_offset 14, -4
 778 0002 82B0     		sub	sp, sp, #8
 779              	.LCFI19:
 780              		.cfi_def_cfa_offset 24
 781 0004 0546     		mov	r5, r0
 782 0006 0E46     		mov	r6, r1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 37


 501:../Middlewares/FreeRTOS//Source/timers.c **** 
 783              		.loc 1 501 0
 784 0008 144B     		ldr	r3, .L73
 785 000a 1B68     		ldr	r3, [r3]
 786 000c DB68     		ldr	r3, [r3, #12]
 787 000e DC68     		ldr	r4, [r3, #12]
 788              	.LVL75:
 505:../Middlewares/FreeRTOS//Source/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 789              		.loc 1 505 0
 790 0010 201D     		adds	r0, r4, #4
 791              	.LVL76:
 792 0012 FFF7FEFF 		bl	uxListRemove
 793              	.LVL77:
 510:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 794              		.loc 1 510 0
 795 0016 E369     		ldr	r3, [r4, #28]
 796 0018 012B     		cmp	r3, #1
 797 001a 04D0     		beq	.L72
 798              	.L69:
 534:../Middlewares/FreeRTOS//Source/timers.c **** }
 799              		.loc 1 534 0
 800 001c 636A     		ldr	r3, [r4, #36]
 801 001e 2046     		mov	r0, r4
 802 0020 9847     		blx	r3
 803              	.LVL78:
 535:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 804              		.loc 1 535 0
 805 0022 02B0     		add	sp, sp, #8
 806              	.LCFI20:
 807              		.cfi_remember_state
 808              		.cfi_def_cfa_offset 16
 809              		@ sp needed
 810 0024 70BD     		pop	{r4, r5, r6, pc}
 811              	.LVL79:
 812              	.L72:
 813              	.LCFI21:
 814              		.cfi_restore_state
 515:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 815              		.loc 1 515 0
 816 0026 A169     		ldr	r1, [r4, #24]
 817 0028 2B46     		mov	r3, r5
 818 002a 3246     		mov	r2, r6
 819 002c 2944     		add	r1, r1, r5
 820 002e 2046     		mov	r0, r4
 821 0030 FFF7FEFF 		bl	prvInsertTimerInActiveList
 822              	.LVL80:
 823 0034 0028     		cmp	r0, #0
 824 0036 F1D0     		beq	.L69
 519:../Middlewares/FreeRTOS//Source/timers.c **** 			configASSERT( xResult );
 825              		.loc 1 519 0
 826 0038 0021     		movs	r1, #0
 827 003a 0091     		str	r1, [sp]
 828 003c 0B46     		mov	r3, r1
 829 003e 2A46     		mov	r2, r5
 830 0040 2046     		mov	r0, r4
 831 0042 FFF7FEFF 		bl	xTimerGenericCommand
 832              	.LVL81:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 38


 520:../Middlewares/FreeRTOS//Source/timers.c **** 			( void ) xResult;
 833              		.loc 1 520 0
 834 0046 0028     		cmp	r0, #0
 835 0048 E8D1     		bne	.L69
 836              	.LBB38:
 837              	.LBB39:
 838              		.loc 2 237 0
 839              		.syntax unified
 840              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 841 004a 4FF01003 			mov r3, #16												
 842 004e 83F31188 		msr basepri, r3											
 843 0052 BFF36F8F 		isb														
 844 0056 BFF34F8F 		dsb														
 845              	
 846              	@ 0 "" 2
 847              	.LVL82:
 848              		.thumb
 849              		.syntax unified
 850              	.L70:
 851 005a FEE7     		b	.L70
 852              	.L74:
 853              		.align	2
 854              	.L73:
 855 005c 00000000 		.word	.LANCHOR0
 856              	.LBE39:
 857              	.LBE38:
 858              		.cfi_endproc
 859              	.LFE136:
 861              		.section	.text.prvProcessTimerOrBlockTask,"ax",%progbits
 862              		.align	1
 863              		.syntax unified
 864              		.thumb
 865              		.thumb_func
 866              		.fpu fpv4-sp-d16
 868              	prvProcessTimerOrBlockTask:
 869              	.LFB138:
 575:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xTimeNow;
 870              		.loc 1 575 0
 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 8
 873              		@ frame_needed = 0, uses_anonymous_args = 0
 874              	.LVL83:
 875 0000 70B5     		push	{r4, r5, r6, lr}
 876              	.LCFI22:
 877              		.cfi_def_cfa_offset 16
 878              		.cfi_offset 4, -16
 879              		.cfi_offset 5, -12
 880              		.cfi_offset 6, -8
 881              		.cfi_offset 14, -4
 882 0002 82B0     		sub	sp, sp, #8
 883              	.LCFI23:
 884              		.cfi_def_cfa_offset 24
 885 0004 0646     		mov	r6, r0
 886 0006 0C46     		mov	r4, r1
 579:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 887              		.loc 1 579 0
 888 0008 FFF7FEFF 		bl	vTaskSuspendAll
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 39


 889              	.LVL84:
 586:../Middlewares/FreeRTOS//Source/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 890              		.loc 1 586 0
 891 000c 01A8     		add	r0, sp, #4
 892 000e FFF7FEFF 		bl	prvSampleTimeNow
 893              	.LVL85:
 587:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 894              		.loc 1 587 0
 895 0012 019B     		ldr	r3, [sp, #4]
 896 0014 1BBB     		cbnz	r3, .L76
 897 0016 0546     		mov	r5, r0
 590:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 898              		.loc 1 590 0
 899 0018 0CB9     		cbnz	r4, .L77
 590:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 900              		.loc 1 590 0 is_stmt 0 discriminator 1
 901 001a B042     		cmp	r0, r6
 902 001c 18D2     		bcs	.L81
 903              	.L77:
 603:../Middlewares/FreeRTOS//Source/timers.c **** 				{
 904              		.loc 1 603 0 is_stmt 1
 905 001e 2CB1     		cbz	r4, .L79
 607:../Middlewares/FreeRTOS//Source/timers.c **** 				}
 906              		.loc 1 607 0
 907 0020 114B     		ldr	r3, .L82
 908 0022 1B68     		ldr	r3, [r3]
 909 0024 1C68     		ldr	r4, [r3]
 910              	.LVL86:
 911 0026 B4FA84F4 		clz	r4, r4
 912 002a 6409     		lsrs	r4, r4, #5
 913              	.LVL87:
 914              	.L79:
 610:../Middlewares/FreeRTOS//Source/timers.c **** 
 915              		.loc 1 610 0
 916 002c 2246     		mov	r2, r4
 917 002e 711B     		subs	r1, r6, r5
 918 0030 0E4B     		ldr	r3, .L82+4
 919 0032 1868     		ldr	r0, [r3]
 920              	.LVL88:
 921 0034 FFF7FEFF 		bl	vQueueWaitForMessageRestricted
 922              	.LVL89:
 612:../Middlewares/FreeRTOS//Source/timers.c **** 				{
 923              		.loc 1 612 0
 924 0038 FFF7FEFF 		bl	xTaskResumeAll
 925              	.LVL90:
 926 003c 88B9     		cbnz	r0, .L75
 618:../Middlewares/FreeRTOS//Source/timers.c **** 				}
 927              		.loc 1 618 0
 928 003e 0C4B     		ldr	r3, .L82+8
 929 0040 4FF08052 		mov	r2, #268435456
 930 0044 1A60     		str	r2, [r3]
 931              		.syntax unified
 932              	@ 618 "../Middlewares/FreeRTOS//Source/timers.c" 1
 933 0046 BFF34F8F 		dsb
 934              	@ 0 "" 2
 935              	@ 618 "../Middlewares/FreeRTOS//Source/timers.c" 1
 936 004a BFF36F8F 		isb
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 40


 937              	@ 0 "" 2
 938              		.thumb
 939              		.syntax unified
 940 004e 08E0     		b	.L75
 941              	.LVL91:
 942              	.L81:
 592:../Middlewares/FreeRTOS//Source/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 943              		.loc 1 592 0
 944 0050 FFF7FEFF 		bl	xTaskResumeAll
 945              	.LVL92:
 593:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 946              		.loc 1 593 0
 947 0054 2946     		mov	r1, r5
 948 0056 3046     		mov	r0, r6
 949 0058 FFF7FEFF 		bl	prvProcessExpiredTimer
 950              	.LVL93:
 951 005c 01E0     		b	.L75
 952              	.LVL94:
 953              	.L76:
 628:../Middlewares/FreeRTOS//Source/timers.c **** 		}
 954              		.loc 1 628 0
 955 005e FFF7FEFF 		bl	xTaskResumeAll
 956              	.LVL95:
 957              	.L75:
 631:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 958              		.loc 1 631 0
 959 0062 02B0     		add	sp, sp, #8
 960              	.LCFI24:
 961              		.cfi_def_cfa_offset 16
 962              		@ sp needed
 963 0064 70BD     		pop	{r4, r5, r6, pc}
 964              	.LVL96:
 965              	.L83:
 966 0066 00BF     		.align	2
 967              	.L82:
 968 0068 00000000 		.word	.LANCHOR1
 969 006c 00000000 		.word	.LANCHOR2
 970 0070 04ED00E0 		.word	-536810236
 971              		.cfi_endproc
 972              	.LFE138:
 974              		.section	.text.prvProcessReceivedCommands,"ax",%progbits
 975              		.align	1
 976              		.syntax unified
 977              		.thumb
 978              		.thumb_func
 979              		.fpu fpv4-sp-d16
 981              	prvProcessReceivedCommands:
 982              	.LFB142:
 725:../Middlewares/FreeRTOS//Source/timers.c **** DaemonTaskMessage_t xMessage;
 983              		.loc 1 725 0
 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 16
 986              		@ frame_needed = 0, uses_anonymous_args = 0
 987 0000 30B5     		push	{r4, r5, lr}
 988              	.LCFI25:
 989              		.cfi_def_cfa_offset 12
 990              		.cfi_offset 4, -12
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 41


 991              		.cfi_offset 5, -8
 992              		.cfi_offset 14, -4
 993 0002 87B0     		sub	sp, sp, #28
 994              	.LCFI26:
 995              		.cfi_def_cfa_offset 40
 996              	.L86:
 731:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 997              		.loc 1 731 0
 998 0004 0023     		movs	r3, #0
 999 0006 1A46     		mov	r2, r3
 1000 0008 03A9     		add	r1, sp, #12
 1001 000a 3548     		ldr	r0, .L101
 1002 000c 0068     		ldr	r0, [r0]
 1003 000e FFF7FEFF 		bl	xQueueGenericReceive
 1004              	.LVL97:
 1005 0012 0028     		cmp	r0, #0
 1006 0014 61D0     		beq	.L99
 757:../Middlewares/FreeRTOS//Source/timers.c **** 		{
 1007              		.loc 1 757 0
 1008 0016 039B     		ldr	r3, [sp, #12]
 1009 0018 002B     		cmp	r3, #0
 1010 001a F3DB     		blt	.L86
 761:../Middlewares/FreeRTOS//Source/timers.c **** 
 1011              		.loc 1 761 0
 1012 001c 059C     		ldr	r4, [sp, #20]
 1013              	.LVL98:
 763:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 1014              		.loc 1 763 0
 1015 001e 6369     		ldr	r3, [r4, #20]
 1016 0020 13B1     		cbz	r3, .L87
 766:../Middlewares/FreeRTOS//Source/timers.c **** 			}
 1017              		.loc 1 766 0
 1018 0022 201D     		adds	r0, r4, #4
 1019 0024 FFF7FEFF 		bl	uxListRemove
 1020              	.LVL99:
 1021              	.L87:
 781:../Middlewares/FreeRTOS//Source/timers.c **** 
 1022              		.loc 1 781 0
 1023 0028 02A8     		add	r0, sp, #8
 1024 002a FFF7FEFF 		bl	prvSampleTimeNow
 1025              	.LVL100:
 783:../Middlewares/FreeRTOS//Source/timers.c **** 			{
 1026              		.loc 1 783 0
 1027 002e 039B     		ldr	r3, [sp, #12]
 1028 0030 092B     		cmp	r3, #9
 1029 0032 E7D8     		bhi	.L86
 1030 0034 01A2     		adr	r2, .L90
 1031 0036 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1032 003a 00BF     		.p2align 2
 1033              	.L90:
 1034 003c 65000000 		.word	.L89+1
 1035 0040 65000000 		.word	.L89+1
 1036 0044 65000000 		.word	.L89+1
 1037 0048 05000000 		.word	.L86+1
 1038 004c AD000000 		.word	.L91+1
 1039 0050 D3000000 		.word	.L92+1
 1040 0054 65000000 		.word	.L89+1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 42


 1041 0058 65000000 		.word	.L89+1
 1042 005c 05000000 		.word	.L86+1
 1043 0060 AD000000 		.word	.L91+1
 1044              		.p2align 1
 1045              	.L89:
 791:../Middlewares/FreeRTOS//Source/timers.c **** 					{
 1046              		.loc 1 791 0
 1047 0064 0499     		ldr	r1, [sp, #16]
 1048 0066 A569     		ldr	r5, [r4, #24]
 1049 0068 0B46     		mov	r3, r1
 1050 006a 0246     		mov	r2, r0
 1051 006c 2944     		add	r1, r1, r5
 1052 006e 2046     		mov	r0, r4
 1053              	.LVL101:
 1054 0070 FFF7FEFF 		bl	prvInsertTimerInActiveList
 1055              	.LVL102:
 1056 0074 0028     		cmp	r0, #0
 1057 0076 C5D0     		beq	.L86
 795:../Middlewares/FreeRTOS//Source/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 1058              		.loc 1 795 0
 1059 0078 636A     		ldr	r3, [r4, #36]
 1060 007a 2046     		mov	r0, r4
 1061 007c 9847     		blx	r3
 1062              	.LVL103:
 798:../Middlewares/FreeRTOS//Source/timers.c **** 						{
 1063              		.loc 1 798 0
 1064 007e E369     		ldr	r3, [r4, #28]
 1065 0080 012B     		cmp	r3, #1
 1066 0082 BFD1     		bne	.L86
 800:../Middlewares/FreeRTOS//Source/timers.c **** 							configASSERT( xResult );
 1067              		.loc 1 800 0
 1068 0084 A269     		ldr	r2, [r4, #24]
 1069 0086 0021     		movs	r1, #0
 1070 0088 0091     		str	r1, [sp]
 1071 008a 0B46     		mov	r3, r1
 1072 008c 0498     		ldr	r0, [sp, #16]
 1073 008e 0244     		add	r2, r2, r0
 1074 0090 2046     		mov	r0, r4
 1075 0092 FFF7FEFF 		bl	xTimerGenericCommand
 1076              	.LVL104:
 801:../Middlewares/FreeRTOS//Source/timers.c **** 							( void ) xResult;
 1077              		.loc 1 801 0
 1078 0096 0028     		cmp	r0, #0
 1079 0098 B4D1     		bne	.L86
 1080              	.LBB40:
 1081              	.LBB41:
 1082              		.loc 2 237 0
 1083              		.syntax unified
 1084              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1085 009a 4FF01003 			mov r3, #16												
 1086 009e 83F31188 		msr basepri, r3											
 1087 00a2 BFF36F8F 		isb														
 1088 00a6 BFF34F8F 		dsb														
 1089              	
 1090              	@ 0 "" 2
 1091              	.LVL105:
 1092              		.thumb
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 43


 1093              		.syntax unified
 1094              	.L94:
 1095 00aa FEE7     		b	.L94
 1096              	.LVL106:
 1097              	.L91:
 1098              	.LBE41:
 1099              	.LBE40:
 823:../Middlewares/FreeRTOS//Source/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1100              		.loc 1 823 0
 1101 00ac 0499     		ldr	r1, [sp, #16]
 1102 00ae A161     		str	r1, [r4, #24]
 824:../Middlewares/FreeRTOS//Source/timers.c **** 
 1103              		.loc 1 824 0
 1104 00b0 31B1     		cbz	r1, .L100
 832:../Middlewares/FreeRTOS//Source/timers.c **** 					break;
 1105              		.loc 1 832 0
 1106 00b2 0346     		mov	r3, r0
 1107 00b4 0246     		mov	r2, r0
 1108 00b6 0144     		add	r1, r1, r0
 1109 00b8 2046     		mov	r0, r4
 1110              	.LVL107:
 1111 00ba FFF7FEFF 		bl	prvInsertTimerInActiveList
 1112              	.LVL108:
 833:../Middlewares/FreeRTOS//Source/timers.c **** 
 1113              		.loc 1 833 0
 1114 00be A1E7     		b	.L86
 1115              	.LVL109:
 1116              	.L100:
 1117              	.LBB42:
 1118              	.LBB43:
 1119              		.loc 2 237 0
 1120              		.syntax unified
 1121              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1122 00c0 4FF01003 			mov r3, #16												
 1123 00c4 83F31188 		msr basepri, r3											
 1124 00c8 BFF36F8F 		isb														
 1125 00cc BFF34F8F 		dsb														
 1126              	
 1127              	@ 0 "" 2
 1128              	.LVL110:
 1129              		.thumb
 1130              		.syntax unified
 1131              	.L96:
 1132 00d0 FEE7     		b	.L96
 1133              	.L92:
 1134              	.LBE43:
 1135              	.LBE42:
 843:../Middlewares/FreeRTOS//Source/timers.c **** 					}
 1136              		.loc 1 843 0
 1137 00d2 2046     		mov	r0, r4
 1138              	.LVL111:
 1139 00d4 FFF7FEFF 		bl	vPortFree
 1140              	.LVL112:
 860:../Middlewares/FreeRTOS//Source/timers.c **** 
 1141              		.loc 1 860 0
 1142 00d8 94E7     		b	.L86
 1143              	.LVL113:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 44


 1144              	.L99:
 868:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 1145              		.loc 1 868 0
 1146 00da 07B0     		add	sp, sp, #28
 1147              	.LCFI27:
 1148              		.cfi_def_cfa_offset 12
 1149              		@ sp needed
 1150 00dc 30BD     		pop	{r4, r5, pc}
 1151              	.L102:
 1152 00de 00BF     		.align	2
 1153              	.L101:
 1154 00e0 00000000 		.word	.LANCHOR2
 1155              		.cfi_endproc
 1156              	.LFE142:
 1158              		.section	.text.prvTimerTask,"ax",%progbits
 1159              		.align	1
 1160              		.syntax unified
 1161              		.thumb
 1162              		.thumb_func
 1163              		.fpu fpv4-sp-d16
 1165              	prvTimerTask:
 1166              	.LFB137:
 539:../Middlewares/FreeRTOS//Source/timers.c **** TickType_t xNextExpireTime;
 1167              		.loc 1 539 0
 1168              		.cfi_startproc
 1169              		@ args = 0, pretend = 0, frame = 8
 1170              		@ frame_needed = 0, uses_anonymous_args = 0
 1171              	.LVL114:
 1172 0000 00B5     		push	{lr}
 1173              	.LCFI28:
 1174              		.cfi_def_cfa_offset 4
 1175              		.cfi_offset 14, -4
 1176 0002 83B0     		sub	sp, sp, #12
 1177              	.LCFI29:
 1178              		.cfi_def_cfa_offset 16
 1179              	.LVL115:
 1180              	.L104:
 562:../Middlewares/FreeRTOS//Source/timers.c **** 
 1181              		.loc 1 562 0 discriminator 1
 1182 0004 01A8     		add	r0, sp, #4
 1183 0006 FFF7FEFF 		bl	prvGetNextExpireTime
 1184              	.LVL116:
 566:../Middlewares/FreeRTOS//Source/timers.c **** 
 1185              		.loc 1 566 0 discriminator 1
 1186 000a 0199     		ldr	r1, [sp, #4]
 1187 000c FFF7FEFF 		bl	prvProcessTimerOrBlockTask
 1188              	.LVL117:
 569:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 1189              		.loc 1 569 0 discriminator 1
 1190 0010 FFF7FEFF 		bl	prvProcessReceivedCommands
 1191              	.LVL118:
 1192 0014 F6E7     		b	.L104
 1193              		.cfi_endproc
 1194              	.LFE137:
 1196              		.section	.text.xTimerGetTimerDaemonTaskHandle,"ax",%progbits
 1197              		.align	1
 1198              		.global	xTimerGetTimerDaemonTaskHandle
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 45


 1199              		.syntax unified
 1200              		.thumb
 1201              		.thumb_func
 1202              		.fpu fpv4-sp-d16
 1204              	xTimerGetTimerDaemonTaskHandle:
 1205              	.LFB132:
 461:../Middlewares/FreeRTOS//Source/timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 1206              		.loc 1 461 0
 1207              		.cfi_startproc
 1208              		@ args = 0, pretend = 0, frame = 0
 1209              		@ frame_needed = 0, uses_anonymous_args = 0
 1210              		@ link register save eliminated.
 464:../Middlewares/FreeRTOS//Source/timers.c **** 	return xTimerTaskHandle;
 1211              		.loc 1 464 0
 1212 0000 064B     		ldr	r3, .L110
 1213 0002 1868     		ldr	r0, [r3]
 1214 0004 00B1     		cbz	r0, .L109
 466:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 1215              		.loc 1 466 0
 1216 0006 7047     		bx	lr
 1217              	.L109:
 1218              	.LBB44:
 1219              	.LBB45:
 1220              		.loc 2 237 0
 1221              		.syntax unified
 1222              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1223 0008 4FF01003 			mov r3, #16												
 1224 000c 83F31188 		msr basepri, r3											
 1225 0010 BFF36F8F 		isb														
 1226 0014 BFF34F8F 		dsb														
 1227              	
 1228              	@ 0 "" 2
 1229              	.LVL119:
 1230              		.thumb
 1231              		.syntax unified
 1232              	.L108:
 1233 0018 FEE7     		b	.L108
 1234              	.L111:
 1235 001a 00BF     		.align	2
 1236              	.L110:
 1237 001c 00000000 		.word	.LANCHOR5
 1238              	.LBE45:
 1239              	.LBE44:
 1240              		.cfi_endproc
 1241              	.LFE132:
 1243              		.section	.text.xTimerGetPeriod,"ax",%progbits
 1244              		.align	1
 1245              		.global	xTimerGetPeriod
 1246              		.syntax unified
 1247              		.thumb
 1248              		.thumb_func
 1249              		.fpu fpv4-sp-d16
 1251              	xTimerGetPeriod:
 1252              	.LFB133:
 470:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 1253              		.loc 1 470 0
 1254              		.cfi_startproc
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 46


 1255              		@ args = 0, pretend = 0, frame = 0
 1256              		@ frame_needed = 0, uses_anonymous_args = 0
 1257              		@ link register save eliminated.
 1258              	.LVL120:
 473:../Middlewares/FreeRTOS//Source/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 1259              		.loc 1 473 0
 1260 0000 08B1     		cbz	r0, .L115
 475:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 1261              		.loc 1 475 0
 1262 0002 8069     		ldr	r0, [r0, #24]
 1263              	.LVL121:
 1264 0004 7047     		bx	lr
 1265              	.LVL122:
 1266              	.L115:
 1267              	.LBB46:
 1268              	.LBB47:
 1269              		.loc 2 237 0
 1270              		.syntax unified
 1271              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1272 0006 4FF01003 			mov r3, #16												
 1273 000a 83F31188 		msr basepri, r3											
 1274 000e BFF36F8F 		isb														
 1275 0012 BFF34F8F 		dsb														
 1276              	
 1277              	@ 0 "" 2
 1278              	.LVL123:
 1279              		.thumb
 1280              		.syntax unified
 1281              	.L114:
 1282 0016 FEE7     		b	.L114
 1283              	.LBE47:
 1284              	.LBE46:
 1285              		.cfi_endproc
 1286              	.LFE133:
 1288              		.section	.text.xTimerGetExpiryTime,"ax",%progbits
 1289              		.align	1
 1290              		.global	xTimerGetExpiryTime
 1291              		.syntax unified
 1292              		.thumb
 1293              		.thumb_func
 1294              		.fpu fpv4-sp-d16
 1296              	xTimerGetExpiryTime:
 1297              	.LFB134:
 479:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t * pxTimer = ( Timer_t * ) xTimer;
 1298              		.loc 1 479 0
 1299              		.cfi_startproc
 1300              		@ args = 0, pretend = 0, frame = 0
 1301              		@ frame_needed = 0, uses_anonymous_args = 0
 1302              		@ link register save eliminated.
 1303              	.LVL124:
 483:../Middlewares/FreeRTOS//Source/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1304              		.loc 1 483 0
 1305 0000 08B1     		cbz	r0, .L119
 1306              	.LVL125:
 486:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 1307              		.loc 1 486 0
 1308 0002 4068     		ldr	r0, [r0, #4]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 47


 1309              	.LVL126:
 1310 0004 7047     		bx	lr
 1311              	.LVL127:
 1312              	.L119:
 1313              	.LBB48:
 1314              	.LBB49:
 1315              		.loc 2 237 0
 1316              		.syntax unified
 1317              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1318 0006 4FF01003 			mov r3, #16												
 1319 000a 83F31188 		msr basepri, r3											
 1320 000e BFF36F8F 		isb														
 1321 0012 BFF34F8F 		dsb														
 1322              	
 1323              	@ 0 "" 2
 1324              	.LVL128:
 1325              		.thumb
 1326              		.syntax unified
 1327              	.L118:
 1328 0016 FEE7     		b	.L118
 1329              	.LBE49:
 1330              	.LBE48:
 1331              		.cfi_endproc
 1332              	.LFE134:
 1334              		.section	.text.pcTimerGetName,"ax",%progbits
 1335              		.align	1
 1336              		.global	pcTimerGetName
 1337              		.syntax unified
 1338              		.thumb
 1339              		.thumb_func
 1340              		.fpu fpv4-sp-d16
 1342              	pcTimerGetName:
 1343              	.LFB135:
 490:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 1344              		.loc 1 490 0
 1345              		.cfi_startproc
 1346              		@ args = 0, pretend = 0, frame = 0
 1347              		@ frame_needed = 0, uses_anonymous_args = 0
 1348              		@ link register save eliminated.
 1349              	.LVL129:
 493:../Middlewares/FreeRTOS//Source/timers.c **** 	return pxTimer->pcTimerName;
 1350              		.loc 1 493 0
 1351 0000 08B1     		cbz	r0, .L123
 495:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 1352              		.loc 1 495 0
 1353 0002 0068     		ldr	r0, [r0]
 1354              	.LVL130:
 1355 0004 7047     		bx	lr
 1356              	.LVL131:
 1357              	.L123:
 1358              	.LBB50:
 1359              	.LBB51:
 1360              		.loc 2 237 0
 1361              		.syntax unified
 1362              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1363 0006 4FF01003 			mov r3, #16												
 1364 000a 83F31188 		msr basepri, r3											
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 48


 1365 000e BFF36F8F 		isb														
 1366 0012 BFF34F8F 		dsb														
 1367              	
 1368              	@ 0 "" 2
 1369              	.LVL132:
 1370              		.thumb
 1371              		.syntax unified
 1372              	.L122:
 1373 0016 FEE7     		b	.L122
 1374              	.LBE51:
 1375              	.LBE50:
 1376              		.cfi_endproc
 1377              	.LFE135:
 1379              		.section	.text.xTimerIsTimerActive,"ax",%progbits
 1380              		.align	1
 1381              		.global	xTimerIsTimerActive
 1382              		.syntax unified
 1383              		.thumb
 1384              		.thumb_func
 1385              		.fpu fpv4-sp-d16
 1387              	xTimerIsTimerActive:
 1388              	.LFB145:
 979:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
 980:../Middlewares/FreeRTOS//Source/timers.c **** 
 981:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
 982:../Middlewares/FreeRTOS//Source/timers.c **** {
 1389              		.loc 1 982 0
 1390              		.cfi_startproc
 1391              		@ args = 0, pretend = 0, frame = 0
 1392              		@ frame_needed = 0, uses_anonymous_args = 0
 1393              	.LVL133:
 983:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xTimerIsInActiveList;
 984:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 985:../Middlewares/FreeRTOS//Source/timers.c **** 
 986:../Middlewares/FreeRTOS//Source/timers.c **** 	configASSERT( xTimer );
 1394              		.loc 1 986 0
 1395 0000 40B9     		cbnz	r0, .L125
 1396              	.LBB52:
 1397              	.LBB53:
 1398              		.loc 2 237 0
 1399              		.syntax unified
 1400              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1401 0002 4FF01003 			mov r3, #16												
 1402 0006 83F31188 		msr basepri, r3											
 1403 000a BFF36F8F 		isb														
 1404 000e BFF34F8F 		dsb														
 1405              	
 1406              	@ 0 "" 2
 1407              	.LVL134:
 1408              		.thumb
 1409              		.syntax unified
 1410              	.L126:
 1411 0012 FEE7     		b	.L126
 1412              	.L125:
 1413              	.LBE53:
 1414              	.LBE52:
 982:../Middlewares/FreeRTOS//Source/timers.c **** BaseType_t xTimerIsInActiveList;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 49


 1415              		.loc 1 982 0
 1416 0014 10B5     		push	{r4, lr}
 1417              	.LCFI30:
 1418              		.cfi_def_cfa_offset 8
 1419              		.cfi_offset 4, -8
 1420              		.cfi_offset 14, -4
 1421 0016 0446     		mov	r4, r0
 987:../Middlewares/FreeRTOS//Source/timers.c **** 
 988:../Middlewares/FreeRTOS//Source/timers.c **** 	/* Is the timer in the list of active timers? */
 989:../Middlewares/FreeRTOS//Source/timers.c **** 	taskENTER_CRITICAL();
 1422              		.loc 1 989 0
 1423 0018 FFF7FEFF 		bl	vPortEnterCritical
 1424              	.LVL135:
 990:../Middlewares/FreeRTOS//Source/timers.c **** 	{
 991:../Middlewares/FreeRTOS//Source/timers.c **** 		/* Checking to see if it is in the NULL list in effect checks to see if
 992:../Middlewares/FreeRTOS//Source/timers.c **** 		it is referenced from either the current or the overflow timer lists in
 993:../Middlewares/FreeRTOS//Source/timers.c **** 		one go, but the logic has to be reversed, hence the '!'. */
 994:../Middlewares/FreeRTOS//Source/timers.c **** 		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListIte
 1425              		.loc 1 994 0
 1426 001c 6469     		ldr	r4, [r4, #20]
 1427              	.LVL136:
 1428 001e 0034     		adds	r4, r4, #0
 1429 0020 18BF     		it	ne
 1430 0022 0124     		movne	r4, #1
 1431              	.LVL137:
 995:../Middlewares/FreeRTOS//Source/timers.c **** 	}
 996:../Middlewares/FreeRTOS//Source/timers.c **** 	taskEXIT_CRITICAL();
 1432              		.loc 1 996 0
 1433 0024 FFF7FEFF 		bl	vPortExitCritical
 1434              	.LVL138:
 997:../Middlewares/FreeRTOS//Source/timers.c **** 
 998:../Middlewares/FreeRTOS//Source/timers.c **** 	return xTimerIsInActiveList;
 999:../Middlewares/FreeRTOS//Source/timers.c **** } /*lint !e818 Can't be pointer to const due to the typedef. */
 1435              		.loc 1 999 0
 1436 0028 2046     		mov	r0, r4
 1437 002a 10BD     		pop	{r4, pc}
 1438              		.cfi_endproc
 1439              	.LFE145:
 1441              		.section	.text.pvTimerGetTimerID,"ax",%progbits
 1442              		.align	1
 1443              		.global	pvTimerGetTimerID
 1444              		.syntax unified
 1445              		.thumb
 1446              		.thumb_func
 1447              		.fpu fpv4-sp-d16
 1449              	pvTimerGetTimerID:
 1450              	.LFB146:
1000:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
1001:../Middlewares/FreeRTOS//Source/timers.c **** 
1002:../Middlewares/FreeRTOS//Source/timers.c **** void *pvTimerGetTimerID( const TimerHandle_t xTimer )
1003:../Middlewares/FreeRTOS//Source/timers.c **** {
 1451              		.loc 1 1003 0
 1452              		.cfi_startproc
 1453              		@ args = 0, pretend = 0, frame = 0
 1454              		@ frame_needed = 0, uses_anonymous_args = 0
 1455              	.LVL139:
1004:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) xTimer;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 50


1005:../Middlewares/FreeRTOS//Source/timers.c **** void *pvReturn;
1006:../Middlewares/FreeRTOS//Source/timers.c **** 
1007:../Middlewares/FreeRTOS//Source/timers.c **** 	configASSERT( xTimer );
 1456              		.loc 1 1007 0
 1457 0000 40B9     		cbnz	r0, .L130
 1458              	.LBB54:
 1459              	.LBB55:
 1460              		.loc 2 237 0
 1461              		.syntax unified
 1462              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1463 0002 4FF01003 			mov r3, #16												
 1464 0006 83F31188 		msr basepri, r3											
 1465 000a BFF36F8F 		isb														
 1466 000e BFF34F8F 		dsb														
 1467              	
 1468              	@ 0 "" 2
 1469              	.LVL140:
 1470              		.thumb
 1471              		.syntax unified
 1472              	.L131:
 1473 0012 FEE7     		b	.L131
 1474              	.L130:
 1475              	.LBE55:
 1476              	.LBE54:
1003:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 1477              		.loc 1 1003 0
 1478 0014 10B5     		push	{r4, lr}
 1479              	.LCFI31:
 1480              		.cfi_def_cfa_offset 8
 1481              		.cfi_offset 4, -8
 1482              		.cfi_offset 14, -4
 1483 0016 0446     		mov	r4, r0
1008:../Middlewares/FreeRTOS//Source/timers.c **** 
1009:../Middlewares/FreeRTOS//Source/timers.c **** 	taskENTER_CRITICAL();
 1484              		.loc 1 1009 0
 1485 0018 FFF7FEFF 		bl	vPortEnterCritical
 1486              	.LVL141:
1010:../Middlewares/FreeRTOS//Source/timers.c **** 	{
1011:../Middlewares/FreeRTOS//Source/timers.c **** 		pvReturn = pxTimer->pvTimerID;
 1487              		.loc 1 1011 0
 1488 001c 246A     		ldr	r4, [r4, #32]
 1489              	.LVL142:
1012:../Middlewares/FreeRTOS//Source/timers.c **** 	}
1013:../Middlewares/FreeRTOS//Source/timers.c **** 	taskEXIT_CRITICAL();
 1490              		.loc 1 1013 0
 1491 001e FFF7FEFF 		bl	vPortExitCritical
 1492              	.LVL143:
1014:../Middlewares/FreeRTOS//Source/timers.c **** 
1015:../Middlewares/FreeRTOS//Source/timers.c **** 	return pvReturn;
1016:../Middlewares/FreeRTOS//Source/timers.c **** }
 1493              		.loc 1 1016 0
 1494 0022 2046     		mov	r0, r4
 1495 0024 10BD     		pop	{r4, pc}
 1496              		.cfi_endproc
 1497              	.LFE146:
 1499              		.section	.text.vTimerSetTimerID,"ax",%progbits
 1500              		.align	1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 51


 1501              		.global	vTimerSetTimerID
 1502              		.syntax unified
 1503              		.thumb
 1504              		.thumb_func
 1505              		.fpu fpv4-sp-d16
 1507              	vTimerSetTimerID:
 1508              	.LFB147:
1017:../Middlewares/FreeRTOS//Source/timers.c **** /*-----------------------------------------------------------*/
1018:../Middlewares/FreeRTOS//Source/timers.c **** 
1019:../Middlewares/FreeRTOS//Source/timers.c **** void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
1020:../Middlewares/FreeRTOS//Source/timers.c **** {
 1509              		.loc 1 1020 0
 1510              		.cfi_startproc
 1511              		@ args = 0, pretend = 0, frame = 0
 1512              		@ frame_needed = 0, uses_anonymous_args = 0
 1513              	.LVL144:
 1514 0000 38B5     		push	{r3, r4, r5, lr}
 1515              	.LCFI32:
 1516              		.cfi_def_cfa_offset 16
 1517              		.cfi_offset 3, -16
 1518              		.cfi_offset 4, -12
 1519              		.cfi_offset 5, -8
 1520              		.cfi_offset 14, -4
 1521              	.LVL145:
1021:../Middlewares/FreeRTOS//Source/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) xTimer;
1022:../Middlewares/FreeRTOS//Source/timers.c **** 
1023:../Middlewares/FreeRTOS//Source/timers.c **** 	configASSERT( xTimer );
 1522              		.loc 1 1023 0
 1523 0002 40B9     		cbnz	r0, .L135
 1524              	.LBB56:
 1525              	.LBB57:
 1526              		.loc 2 237 0
 1527              		.syntax unified
 1528              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1529 0004 4FF01003 			mov r3, #16												
 1530 0008 83F31188 		msr basepri, r3											
 1531 000c BFF36F8F 		isb														
 1532 0010 BFF34F8F 		dsb														
 1533              	
 1534              	@ 0 "" 2
 1535              	.LVL146:
 1536              		.thumb
 1537              		.syntax unified
 1538              	.L136:
 1539 0014 FEE7     		b	.L136
 1540              	.L135:
 1541 0016 0446     		mov	r4, r0
 1542 0018 0D46     		mov	r5, r1
 1543              	.LBE57:
 1544              	.LBE56:
1024:../Middlewares/FreeRTOS//Source/timers.c **** 
1025:../Middlewares/FreeRTOS//Source/timers.c **** 	taskENTER_CRITICAL();
 1545              		.loc 1 1025 0
 1546 001a FFF7FEFF 		bl	vPortEnterCritical
 1547              	.LVL147:
1026:../Middlewares/FreeRTOS//Source/timers.c **** 	{
1027:../Middlewares/FreeRTOS//Source/timers.c **** 		pxTimer->pvTimerID = pvNewID;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 52


 1548              		.loc 1 1027 0
 1549 001e 2562     		str	r5, [r4, #32]
1028:../Middlewares/FreeRTOS//Source/timers.c **** 	}
1029:../Middlewares/FreeRTOS//Source/timers.c **** 	taskEXIT_CRITICAL();
 1550              		.loc 1 1029 0
 1551 0020 FFF7FEFF 		bl	vPortExitCritical
 1552              	.LVL148:
1030:../Middlewares/FreeRTOS//Source/timers.c **** }
 1553              		.loc 1 1030 0
 1554 0024 38BD     		pop	{r3, r4, r5, pc}
 1555              		.cfi_endproc
 1556              	.LFE147:
 1558              		.section	.bss.pxCurrentTimerList,"aw",%nobits
 1559              		.align	2
 1560              		.set	.LANCHOR0,. + 0
 1563              	pxCurrentTimerList:
 1564 0000 00000000 		.space	4
 1565              		.section	.bss.pxOverflowTimerList,"aw",%nobits
 1566              		.align	2
 1567              		.set	.LANCHOR1,. + 0
 1570              	pxOverflowTimerList:
 1571 0000 00000000 		.space	4
 1572              		.section	.bss.xActiveTimerList1,"aw",%nobits
 1573              		.align	2
 1574              		.set	.LANCHOR3,. + 0
 1577              	xActiveTimerList1:
 1578 0000 00000000 		.space	20
 1578      00000000 
 1578      00000000 
 1578      00000000 
 1578      00000000 
 1579              		.section	.bss.xActiveTimerList2,"aw",%nobits
 1580              		.align	2
 1581              		.set	.LANCHOR4,. + 0
 1584              	xActiveTimerList2:
 1585 0000 00000000 		.space	20
 1585      00000000 
 1585      00000000 
 1585      00000000 
 1585      00000000 
 1586              		.section	.bss.xLastTime.9537,"aw",%nobits
 1587              		.align	2
 1588              		.set	.LANCHOR6,. + 0
 1591              	xLastTime.9537:
 1592 0000 00000000 		.space	4
 1593              		.section	.bss.xTimerQueue,"aw",%nobits
 1594              		.align	2
 1595              		.set	.LANCHOR2,. + 0
 1598              	xTimerQueue:
 1599 0000 00000000 		.space	4
 1600              		.section	.bss.xTimerTaskHandle,"aw",%nobits
 1601              		.align	2
 1602              		.set	.LANCHOR5,. + 0
 1605              	xTimerTaskHandle:
 1606 0000 00000000 		.space	4
 1607              		.section	.rodata.prvCheckForValidListAndQueue.str1.4,"aMS",%progbits,1
 1608              		.align	2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 53


 1609              	.LC0:
 1610 0000 546D7251 		.ascii	"TmrQ\000"
 1610      00
 1611              		.section	.rodata.xTimerCreateTimerTask.str1.4,"aMS",%progbits,1
 1612              		.align	2
 1613              	.LC1:
 1614 0000 546D7220 		.ascii	"Tmr Svc\000"
 1614      53766300 
 1615              		.text
 1616              	.Letext0:
 1617              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 1618              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 1619              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 1620              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 1621              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 1622              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 1623              		.file 9 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 1624              		.file 10 "../Libraries/CMSIS/CM4/CoreSupport/core_cm4.h"
 1625              		.file 11 "../Libraries/CMSIS/CM4/DeviceSupport/system_at32f4xx.h"
 1626              		.file 12 "Inc/FreeRTOSConfig.h"
 1627              		.file 13 "../Middlewares/FreeRTOS//Source/include/list.h"
 1628              		.file 14 "../Middlewares/FreeRTOS//Source/include/task.h"
 1629              		.file 15 "../Middlewares/FreeRTOS//Source/include/queue.h"
 1630              		.file 16 "../Middlewares/FreeRTOS//Source/include/timers.h"
 1631              		.file 17 "../Middlewares/FreeRTOS//Source/include/portable.h"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 54


DEFINED SYMBOLS
                            *ABS*:0000000000000000 timers.c
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:17     .text.prvGetNextExpireTime:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:23     .text.prvGetNextExpireTime:0000000000000000 prvGetNextExpireTime
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:56     .text.prvGetNextExpireTime:000000000000001c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:61     .text.prvInsertTimerInActiveList:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:67     .text.prvInsertTimerInActiveList:0000000000000000 prvInsertTimerInActiveList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:145    .text.prvInsertTimerInActiveList:0000000000000040 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:151    .text.prvCheckForValidListAndQueue:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:157    .text.prvCheckForValidListAndQueue:0000000000000000 prvCheckForValidListAndQueue
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:219    .text.prvCheckForValidListAndQueue:0000000000000044 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:229    .text.prvInitialiseNewTimer:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:235    .text.prvInitialiseNewTimer:0000000000000000 prvInitialiseNewTimer
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:306    .text.xTimerCreateTimerTask:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:313    .text.xTimerCreateTimerTask:0000000000000000 xTimerCreateTimerTask
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:378    .text.xTimerCreateTimerTask:0000000000000040 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1165   .text.prvTimerTask:0000000000000000 prvTimerTask
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:386    .text.xTimerCreate:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:393    .text.xTimerCreate:0000000000000000 xTimerCreate
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:447    .text.xTimerGenericCommand:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:454    .text.xTimerGenericCommand:0000000000000000 xTimerGenericCommand
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:570    .text.xTimerGenericCommand:0000000000000068 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:575    .text.prvSwitchTimerLists:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:581    .text.prvSwitchTimerLists:0000000000000000 prvSwitchTimerLists
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:693    .text.prvSwitchTimerLists:0000000000000070 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:699    .text.prvSampleTimeNow:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:705    .text.prvSampleTimeNow:0000000000000000 prvSampleTimeNow
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:753    .text.prvSampleTimeNow:0000000000000028 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:758    .text.prvProcessExpiredTimer:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:764    .text.prvProcessExpiredTimer:0000000000000000 prvProcessExpiredTimer
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:855    .text.prvProcessExpiredTimer:000000000000005c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:862    .text.prvProcessTimerOrBlockTask:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:868    .text.prvProcessTimerOrBlockTask:0000000000000000 prvProcessTimerOrBlockTask
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:968    .text.prvProcessTimerOrBlockTask:0000000000000068 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:975    .text.prvProcessReceivedCommands:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:981    .text.prvProcessReceivedCommands:0000000000000000 prvProcessReceivedCommands
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1034   .text.prvProcessReceivedCommands:000000000000003c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1044   .text.prvProcessReceivedCommands:0000000000000064 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1154   .text.prvProcessReceivedCommands:00000000000000e0 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1159   .text.prvTimerTask:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1197   .text.xTimerGetTimerDaemonTaskHandle:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1204   .text.xTimerGetTimerDaemonTaskHandle:0000000000000000 xTimerGetTimerDaemonTaskHandle
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1237   .text.xTimerGetTimerDaemonTaskHandle:000000000000001c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1244   .text.xTimerGetPeriod:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1251   .text.xTimerGetPeriod:0000000000000000 xTimerGetPeriod
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1289   .text.xTimerGetExpiryTime:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1296   .text.xTimerGetExpiryTime:0000000000000000 xTimerGetExpiryTime
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1335   .text.pcTimerGetName:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1342   .text.pcTimerGetName:0000000000000000 pcTimerGetName
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1380   .text.xTimerIsTimerActive:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1387   .text.xTimerIsTimerActive:0000000000000000 xTimerIsTimerActive
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1442   .text.pvTimerGetTimerID:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1449   .text.pvTimerGetTimerID:0000000000000000 pvTimerGetTimerID
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1500   .text.vTimerSetTimerID:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1507   .text.vTimerSetTimerID:0000000000000000 vTimerSetTimerID
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1559   .bss.pxCurrentTimerList:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1563   .bss.pxCurrentTimerList:0000000000000000 pxCurrentTimerList
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s 			page 55


/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1566   .bss.pxOverflowTimerList:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1570   .bss.pxOverflowTimerList:0000000000000000 pxOverflowTimerList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1573   .bss.xActiveTimerList1:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1577   .bss.xActiveTimerList1:0000000000000000 xActiveTimerList1
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1580   .bss.xActiveTimerList2:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1584   .bss.xActiveTimerList2:0000000000000000 xActiveTimerList2
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1587   .bss.xLastTime.9537:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1591   .bss.xLastTime.9537:0000000000000000 xLastTime.9537
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1594   .bss.xTimerQueue:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1598   .bss.xTimerQueue:0000000000000000 xTimerQueue
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1601   .bss.xTimerTaskHandle:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1605   .bss.xTimerTaskHandle:0000000000000000 xTimerTaskHandle
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1608   .rodata.prvCheckForValidListAndQueue.str1.4:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccTQxG4j.s:1612   .rodata.xTimerCreateTimerTask.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
vListInsert
vPortEnterCritical
vPortExitCritical
vListInitialise
xQueueGenericCreate
vQueueAddToRegistry
vListInitialiseItem
xTaskCreate
pvPortMalloc
xTaskGetSchedulerState
xQueueGenericSend
xQueueGenericSendFromISR
uxListRemove
xTaskGetTickCount
vTaskSuspendAll
vQueueWaitForMessageRestricted
xTaskResumeAll
xQueueGenericReceive
vPortFree
