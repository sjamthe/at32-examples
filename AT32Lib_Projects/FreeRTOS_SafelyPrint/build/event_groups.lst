ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"event_groups.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.prvTestWaitCondition,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv4-sp-d16
  23              	prvTestWaitCondition:
  24              	.LFB137:
  25              		.file 1 "../Middlewares/FreeRTOS//Source/event_groups.c"
   1:../Middlewares/FreeRTOS//Source/event_groups.c **** /*
   2:../Middlewares/FreeRTOS//Source/event_groups.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/event_groups.c ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/event_groups.c **** 
   5:../Middlewares/FreeRTOS//Source/event_groups.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/event_groups.c **** 
   7:../Middlewares/FreeRTOS//Source/event_groups.c ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/event_groups.c **** 
   9:../Middlewares/FreeRTOS//Source/event_groups.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/event_groups.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/event_groups.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  13:../Middlewares/FreeRTOS//Source/event_groups.c ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/event_groups.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Middlewares/FreeRTOS//Source/event_groups.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/event_groups.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/event_groups.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/event_groups.c ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  20:../Middlewares/FreeRTOS//Source/event_groups.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/event_groups.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/event_groups.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/event_groups.c ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  25:../Middlewares/FreeRTOS//Source/event_groups.c ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/event_groups.c ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/event_groups.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/event_groups.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/event_groups.c ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/event_groups.c ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/event_groups.c ****      *                                                                       *
  32:../Middlewares/FreeRTOS//Source/event_groups.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Middlewares/FreeRTOS//Source/event_groups.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 2


  34:../Middlewares/FreeRTOS//Source/event_groups.c ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/event_groups.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/event_groups.c ****      *                                                                       *
  37:../Middlewares/FreeRTOS//Source/event_groups.c ****     ***************************************************************************
  38:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  39:../Middlewares/FreeRTOS//Source/event_groups.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/event_groups.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/event_groups.c ****     defined configASSERT()?
  42:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  43:../Middlewares/FreeRTOS//Source/event_groups.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Middlewares/FreeRTOS//Source/event_groups.c ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/event_groups.c ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  47:../Middlewares/FreeRTOS//Source/event_groups.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/event_groups.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/event_groups.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Middlewares/FreeRTOS//Source/event_groups.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  52:../Middlewares/FreeRTOS//Source/event_groups.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/event_groups.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/event_groups.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  56:../Middlewares/FreeRTOS//Source/event_groups.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Middlewares/FreeRTOS//Source/event_groups.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  59:../Middlewares/FreeRTOS//Source/event_groups.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/event_groups.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/event_groups.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  63:../Middlewares/FreeRTOS//Source/event_groups.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/event_groups.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/event_groups.c ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  67:../Middlewares/FreeRTOS//Source/event_groups.c ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/event_groups.c **** */
  69:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  70:../Middlewares/FreeRTOS//Source/event_groups.c **** /* Standard includes. */
  71:../Middlewares/FreeRTOS//Source/event_groups.c **** #include <stdlib.h>
  72:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  73:../Middlewares/FreeRTOS//Source/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:../Middlewares/FreeRTOS//Source/event_groups.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:../Middlewares/FreeRTOS//Source/event_groups.c **** task.h is included from an application file. */
  76:../Middlewares/FreeRTOS//Source/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  78:../Middlewares/FreeRTOS//Source/event_groups.c **** /* FreeRTOS includes. */
  79:../Middlewares/FreeRTOS//Source/event_groups.c **** #include "FreeRTOS.h"
  80:../Middlewares/FreeRTOS//Source/event_groups.c **** #include "task.h"
  81:../Middlewares/FreeRTOS//Source/event_groups.c **** #include "timers.h"
  82:../Middlewares/FreeRTOS//Source/event_groups.c **** #include "event_groups.h"
  83:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  84:../Middlewares/FreeRTOS//Source/event_groups.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  85:../Middlewares/FreeRTOS//Source/event_groups.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  86:../Middlewares/FreeRTOS//Source/event_groups.c **** header files above, but not in this file, in order to generate the correct
  87:../Middlewares/FreeRTOS//Source/event_groups.c **** privileged Vs unprivileged linkage and placement. */
  88:../Middlewares/FreeRTOS//Source/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  89:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  90:../Middlewares/FreeRTOS//Source/event_groups.c **** /* The following bit fields convey control information in a task's event list
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 3


  91:../Middlewares/FreeRTOS//Source/event_groups.c **** item value.  It is important they don't clash with the
  92:../Middlewares/FreeRTOS//Source/event_groups.c **** taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  93:../Middlewares/FreeRTOS//Source/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  94:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x0100U
  95:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x0200U
  96:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x0400U
  97:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff00U
  98:../Middlewares/FreeRTOS//Source/event_groups.c **** #else
  99:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x01000000UL
 100:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x02000000UL
 101:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x04000000UL
 102:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff000000UL
 103:../Middlewares/FreeRTOS//Source/event_groups.c **** #endif
 104:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 105:../Middlewares/FreeRTOS//Source/event_groups.c **** typedef struct xEventGroupDefinition
 106:../Middlewares/FreeRTOS//Source/event_groups.c **** {
 107:../Middlewares/FreeRTOS//Source/event_groups.c **** 	EventBits_t uxEventBits;
 108:../Middlewares/FreeRTOS//Source/event_groups.c **** 	List_t xTasksWaitingForBits;		/*< List of tasks waiting for a bit to be set. */
 109:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 110:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
 111:../Middlewares/FreeRTOS//Source/event_groups.c **** 		UBaseType_t uxEventGroupNumber;
 112:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#endif
 113:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 114:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 115:../Middlewares/FreeRTOS//Source/event_groups.c **** 		uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated to en
 116:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#endif
 117:../Middlewares/FreeRTOS//Source/event_groups.c **** } EventGroup_t;
 118:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 119:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 120:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 121:../Middlewares/FreeRTOS//Source/event_groups.c **** /*
 122:../Middlewares/FreeRTOS//Source/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
 123:../Middlewares/FreeRTOS//Source/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
 124:../Middlewares/FreeRTOS//Source/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
 125:../Middlewares/FreeRTOS//Source/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
 126:../Middlewares/FreeRTOS//Source/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
 127:../Middlewares/FreeRTOS//Source/event_groups.c ****  * in uxCurrentEventBits.
 128:../Middlewares/FreeRTOS//Source/event_groups.c ****  */
 129:../Middlewares/FreeRTOS//Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 130:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 131:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 132:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 133:../Middlewares/FreeRTOS//Source/event_groups.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 134:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 135:../Middlewares/FreeRTOS//Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
 136:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 137:../Middlewares/FreeRTOS//Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 138:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 139:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* A StaticEventGroup_t object must be provided. */
 140:../Middlewares/FreeRTOS//Source/event_groups.c **** 		configASSERT( pxEventGroupBuffer );
 141:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 142:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* The user has provided a statically allocated event group - use it. */
 143:../Middlewares/FreeRTOS//Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGro
 144:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 145:../Middlewares/FreeRTOS//Source/event_groups.c **** 		if( pxEventBits != NULL )
 146:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 147:../Middlewares/FreeRTOS//Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 4


 148:../Middlewares/FreeRTOS//Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 149:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 150:../Middlewares/FreeRTOS//Source/event_groups.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 151:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 152:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note that
 153:../Middlewares/FreeRTOS//Source/event_groups.c **** 				this event group was created statically in case the event group
 154:../Middlewares/FreeRTOS//Source/event_groups.c **** 				is later deleted. */
 155:../Middlewares/FreeRTOS//Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdTRUE;
 156:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 157:../Middlewares/FreeRTOS//Source/event_groups.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 158:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 159:../Middlewares/FreeRTOS//Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 160:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 161:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else
 162:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 163:../Middlewares/FreeRTOS//Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 164:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 165:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 166:../Middlewares/FreeRTOS//Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 167:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 168:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 169:../Middlewares/FreeRTOS//Source/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 170:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 171:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 172:../Middlewares/FreeRTOS//Source/event_groups.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 173:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 174:../Middlewares/FreeRTOS//Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreate( void )
 175:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 176:../Middlewares/FreeRTOS//Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 177:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 178:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* Allocate the event group. */
 179:../Middlewares/FreeRTOS//Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 180:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 181:../Middlewares/FreeRTOS//Source/event_groups.c **** 		if( pxEventBits != NULL )
 182:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 183:../Middlewares/FreeRTOS//Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 184:../Middlewares/FreeRTOS//Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 185:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 186:../Middlewares/FreeRTOS//Source/event_groups.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 187:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 188:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note this
 189:../Middlewares/FreeRTOS//Source/event_groups.c **** 				event group was allocated statically in case the event group is
 190:../Middlewares/FreeRTOS//Source/event_groups.c **** 				later deleted. */
 191:../Middlewares/FreeRTOS//Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdFALSE;
 192:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 193:../Middlewares/FreeRTOS//Source/event_groups.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 194:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 195:../Middlewares/FreeRTOS//Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 196:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 197:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else
 198:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 199:../Middlewares/FreeRTOS//Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 200:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 201:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 202:../Middlewares/FreeRTOS//Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 203:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 204:../Middlewares/FreeRTOS//Source/event_groups.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 5


 205:../Middlewares/FreeRTOS//Source/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 206:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 207:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 208:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const E
 209:../Middlewares/FreeRTOS//Source/event_groups.c **** {
 210:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 211:../Middlewares/FreeRTOS//Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 212:../Middlewares/FreeRTOS//Source/event_groups.c **** BaseType_t xAlreadyYielded;
 213:../Middlewares/FreeRTOS//Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 214:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 215:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 216:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 217:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 218:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 219:../Middlewares/FreeRTOS//Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 220:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 221:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#endif
 222:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 223:../Middlewares/FreeRTOS//Source/event_groups.c **** 	vTaskSuspendAll();
 224:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 225:../Middlewares/FreeRTOS//Source/event_groups.c **** 		uxOriginalBitValue = pxEventBits->uxEventBits;
 226:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 227:../Middlewares/FreeRTOS//Source/event_groups.c **** 		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 228:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 229:../Middlewares/FreeRTOS//Source/event_groups.c **** 		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 230:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 231:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* All the rendezvous bits are now set - no need to block. */
 232:../Middlewares/FreeRTOS//Source/event_groups.c **** 			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 233:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 234:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* Rendezvous always clear the bits.  They will have been cleared
 235:../Middlewares/FreeRTOS//Source/event_groups.c **** 			already unless this is the only task in the rendezvous. */
 236:../Middlewares/FreeRTOS//Source/event_groups.c **** 			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 237:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 238:../Middlewares/FreeRTOS//Source/event_groups.c **** 			xTicksToWait = 0;
 239:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 240:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else
 241:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 242:../Middlewares/FreeRTOS//Source/event_groups.c **** 			if( xTicksToWait != ( TickType_t ) 0 )
 243:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 244:../Middlewares/FreeRTOS//Source/event_groups.c **** 				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 245:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 246:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* Store the bits that the calling task is waiting for in the
 247:../Middlewares/FreeRTOS//Source/event_groups.c **** 				task's event list item so the kernel knows when a match is
 248:../Middlewares/FreeRTOS//Source/event_groups.c **** 				found.  Then enter the blocked state. */
 249:../Middlewares/FreeRTOS//Source/event_groups.c **** 				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eve
 250:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 251:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* This assignment is obsolete as uxReturn will get set after
 252:../Middlewares/FreeRTOS//Source/event_groups.c **** 				the task unblocks, but some compilers mistakenly generate a
 253:../Middlewares/FreeRTOS//Source/event_groups.c **** 				warning about uxReturn being returned without being set if the
 254:../Middlewares/FreeRTOS//Source/event_groups.c **** 				assignment is omitted. */
 255:../Middlewares/FreeRTOS//Source/event_groups.c **** 				uxReturn = 0;
 256:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 257:../Middlewares/FreeRTOS//Source/event_groups.c **** 			else
 258:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 259:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* The rendezvous bits were not set, but no block time was
 260:../Middlewares/FreeRTOS//Source/event_groups.c **** 				specified - just return the current event bit value. */
 261:../Middlewares/FreeRTOS//Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 6


 262:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 263:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 264:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 265:../Middlewares/FreeRTOS//Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 266:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 267:../Middlewares/FreeRTOS//Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 268:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 269:../Middlewares/FreeRTOS//Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 270:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 271:../Middlewares/FreeRTOS//Source/event_groups.c **** 			portYIELD_WITHIN_API();
 272:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 273:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else
 274:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 275:../Middlewares/FreeRTOS//Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 276:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 277:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 278:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 279:../Middlewares/FreeRTOS//Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 280:../Middlewares/FreeRTOS//Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 281:../Middlewares/FreeRTOS//Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 282:../Middlewares/FreeRTOS//Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 283:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 284:../Middlewares/FreeRTOS//Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 285:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 286:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* The task timed out, just return the current event bit value. */
 287:../Middlewares/FreeRTOS//Source/event_groups.c **** 			taskENTER_CRITICAL();
 288:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 289:../Middlewares/FreeRTOS//Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 290:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 291:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* Although the task got here because it timed out before the
 292:../Middlewares/FreeRTOS//Source/event_groups.c **** 				bits it was waiting for were set, it is possible that since it
 293:../Middlewares/FreeRTOS//Source/event_groups.c **** 				unblocked another task has set the bits.  If this is the case
 294:../Middlewares/FreeRTOS//Source/event_groups.c **** 				then it needs to clear the bits before exiting. */
 295:../Middlewares/FreeRTOS//Source/event_groups.c **** 				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 296:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 297:../Middlewares/FreeRTOS//Source/event_groups.c **** 					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 298:../Middlewares/FreeRTOS//Source/event_groups.c **** 				}
 299:../Middlewares/FreeRTOS//Source/event_groups.c **** 				else
 300:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 301:../Middlewares/FreeRTOS//Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 302:../Middlewares/FreeRTOS//Source/event_groups.c **** 				}
 303:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 304:../Middlewares/FreeRTOS//Source/event_groups.c **** 			taskEXIT_CRITICAL();
 305:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 306:../Middlewares/FreeRTOS//Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 307:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 308:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else
 309:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 310:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 311:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 312:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 313:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* Control bits might be set as the task had blocked should not be
 314:../Middlewares/FreeRTOS//Source/event_groups.c **** 		returned. */
 315:../Middlewares/FreeRTOS//Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 316:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 317:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 318:../Middlewares/FreeRTOS//Source/event_groups.c **** 	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 7


 319:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 320:../Middlewares/FreeRTOS//Source/event_groups.c **** 	return uxReturn;
 321:../Middlewares/FreeRTOS//Source/event_groups.c **** }
 322:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 323:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 324:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor,
 325:../Middlewares/FreeRTOS//Source/event_groups.c **** {
 326:../Middlewares/FreeRTOS//Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 327:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 328:../Middlewares/FreeRTOS//Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 329:../Middlewares/FreeRTOS//Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 330:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 331:../Middlewares/FreeRTOS//Source/event_groups.c **** 	/* Check the user is not attempting to wait on the bits used by the kernel
 332:../Middlewares/FreeRTOS//Source/event_groups.c **** 	itself, and that at least one bit is being requested. */
 333:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( xEventGroup );
 334:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 335:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 336:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 337:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 338:../Middlewares/FreeRTOS//Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 339:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 340:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#endif
 341:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 342:../Middlewares/FreeRTOS//Source/event_groups.c **** 	vTaskSuspendAll();
 343:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 344:../Middlewares/FreeRTOS//Source/event_groups.c **** 		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 345:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 346:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* Check to see if the wait condition is already met or not. */
 347:../Middlewares/FreeRTOS//Source/event_groups.c **** 		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 348:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 349:../Middlewares/FreeRTOS//Source/event_groups.c **** 		if( xWaitConditionMet != pdFALSE )
 350:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 351:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* The wait condition has already been met so there is no need to
 352:../Middlewares/FreeRTOS//Source/event_groups.c **** 			block. */
 353:../Middlewares/FreeRTOS//Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 354:../Middlewares/FreeRTOS//Source/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 355:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 356:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* Clear the wait bits if requested to do so. */
 357:../Middlewares/FreeRTOS//Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 358:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 359:../Middlewares/FreeRTOS//Source/event_groups.c **** 				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 360:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 361:../Middlewares/FreeRTOS//Source/event_groups.c **** 			else
 362:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 363:../Middlewares/FreeRTOS//Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 364:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 365:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 366:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else if( xTicksToWait == ( TickType_t ) 0 )
 367:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 368:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* The wait condition has not been met, but no block time was
 369:../Middlewares/FreeRTOS//Source/event_groups.c **** 			specified, so just return the current value. */
 370:../Middlewares/FreeRTOS//Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 371:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 372:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else
 373:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 374:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* The task is going to block to wait for its required bits to be
 375:../Middlewares/FreeRTOS//Source/event_groups.c **** 			set.  uxControlBits are used to remember the specified behaviour of
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 8


 376:../Middlewares/FreeRTOS//Source/event_groups.c **** 			this call to xEventGroupWaitBits() - for use when the event bits
 377:../Middlewares/FreeRTOS//Source/event_groups.c **** 			unblock the task. */
 378:../Middlewares/FreeRTOS//Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 379:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 380:../Middlewares/FreeRTOS//Source/event_groups.c **** 				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 381:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 382:../Middlewares/FreeRTOS//Source/event_groups.c **** 			else
 383:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 384:../Middlewares/FreeRTOS//Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 385:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 386:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 387:../Middlewares/FreeRTOS//Source/event_groups.c **** 			if( xWaitForAllBits != pdFALSE )
 388:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 389:../Middlewares/FreeRTOS//Source/event_groups.c **** 				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 390:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 391:../Middlewares/FreeRTOS//Source/event_groups.c **** 			else
 392:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 393:../Middlewares/FreeRTOS//Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 394:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 395:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 396:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* Store the bits that the calling task is waiting for in the
 397:../Middlewares/FreeRTOS//Source/event_groups.c **** 			task's event list item so the kernel knows when a match is
 398:../Middlewares/FreeRTOS//Source/event_groups.c **** 			found.  Then enter the blocked state. */
 399:../Middlewares/FreeRTOS//Source/event_groups.c **** 			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxCo
 400:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 401:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* This is obsolete as it will get set after the task unblocks, but
 402:../Middlewares/FreeRTOS//Source/event_groups.c **** 			some compilers mistakenly generate a warning about the variable
 403:../Middlewares/FreeRTOS//Source/event_groups.c **** 			being returned without being set if it is not done. */
 404:../Middlewares/FreeRTOS//Source/event_groups.c **** 			uxReturn = 0;
 405:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 406:../Middlewares/FreeRTOS//Source/event_groups.c **** 			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 407:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 408:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 409:../Middlewares/FreeRTOS//Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 410:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 411:../Middlewares/FreeRTOS//Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 412:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 413:../Middlewares/FreeRTOS//Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 414:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 415:../Middlewares/FreeRTOS//Source/event_groups.c **** 			portYIELD_WITHIN_API();
 416:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 417:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else
 418:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 419:../Middlewares/FreeRTOS//Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 420:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 421:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 422:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 423:../Middlewares/FreeRTOS//Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 424:../Middlewares/FreeRTOS//Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 425:../Middlewares/FreeRTOS//Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 426:../Middlewares/FreeRTOS//Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 427:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 428:../Middlewares/FreeRTOS//Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 429:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 430:../Middlewares/FreeRTOS//Source/event_groups.c **** 			taskENTER_CRITICAL();
 431:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 432:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* The task timed out, just return the current event bit value. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 9


 433:../Middlewares/FreeRTOS//Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 434:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 435:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* It is possible that the event bits were updated between this
 436:../Middlewares/FreeRTOS//Source/event_groups.c **** 				task leaving the Blocked state and running again. */
 437:../Middlewares/FreeRTOS//Source/event_groups.c **** 				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 438:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 439:../Middlewares/FreeRTOS//Source/event_groups.c **** 					if( xClearOnExit != pdFALSE )
 440:../Middlewares/FreeRTOS//Source/event_groups.c **** 					{
 441:../Middlewares/FreeRTOS//Source/event_groups.c **** 						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 442:../Middlewares/FreeRTOS//Source/event_groups.c **** 					}
 443:../Middlewares/FreeRTOS//Source/event_groups.c **** 					else
 444:../Middlewares/FreeRTOS//Source/event_groups.c **** 					{
 445:../Middlewares/FreeRTOS//Source/event_groups.c **** 						mtCOVERAGE_TEST_MARKER();
 446:../Middlewares/FreeRTOS//Source/event_groups.c **** 					}
 447:../Middlewares/FreeRTOS//Source/event_groups.c **** 				}
 448:../Middlewares/FreeRTOS//Source/event_groups.c **** 				else
 449:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 450:../Middlewares/FreeRTOS//Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 451:../Middlewares/FreeRTOS//Source/event_groups.c **** 				}
 452:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 453:../Middlewares/FreeRTOS//Source/event_groups.c **** 			taskEXIT_CRITICAL();
 454:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 455:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* Prevent compiler warnings when trace macros are not used. */
 456:../Middlewares/FreeRTOS//Source/event_groups.c **** 			xTimeoutOccurred = pdFALSE;
 457:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 458:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else
 459:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 460:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 461:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 462:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 463:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* The task blocked so control bits may have been set. */
 464:../Middlewares/FreeRTOS//Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 465:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 466:../Middlewares/FreeRTOS//Source/event_groups.c **** 	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 467:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 468:../Middlewares/FreeRTOS//Source/event_groups.c **** 	return uxReturn;
 469:../Middlewares/FreeRTOS//Source/event_groups.c **** }
 470:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 471:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 472:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
 473:../Middlewares/FreeRTOS//Source/event_groups.c **** {
 474:../Middlewares/FreeRTOS//Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 475:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t uxReturn;
 476:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 477:../Middlewares/FreeRTOS//Source/event_groups.c **** 	/* Check the user is not attempting to clear the bits used by the kernel
 478:../Middlewares/FreeRTOS//Source/event_groups.c **** 	itself. */
 479:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( xEventGroup );
 480:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 481:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 482:../Middlewares/FreeRTOS//Source/event_groups.c **** 	taskENTER_CRITICAL();
 483:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 484:../Middlewares/FreeRTOS//Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 485:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 486:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* The value returned is the event group value prior to the bits being
 487:../Middlewares/FreeRTOS//Source/event_groups.c **** 		cleared. */
 488:../Middlewares/FreeRTOS//Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 489:../Middlewares/FreeRTOS//Source/event_groups.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 10


 490:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* Clear the bits. */
 491:../Middlewares/FreeRTOS//Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 492:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 493:../Middlewares/FreeRTOS//Source/event_groups.c **** 	taskEXIT_CRITICAL();
 494:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 495:../Middlewares/FreeRTOS//Source/event_groups.c **** 	return uxReturn;
 496:../Middlewares/FreeRTOS//Source/event_groups.c **** }
 497:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 498:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 499:../Middlewares/FreeRTOS//Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 500:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 501:../Middlewares/FreeRTOS//Source/event_groups.c **** 	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsTo
 502:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 503:../Middlewares/FreeRTOS//Source/event_groups.c **** 		BaseType_t xReturn;
 504:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 505:../Middlewares/FreeRTOS//Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 506:../Middlewares/FreeRTOS//Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( 
 507:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 508:../Middlewares/FreeRTOS//Source/event_groups.c **** 		return xReturn;
 509:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 510:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 511:../Middlewares/FreeRTOS//Source/event_groups.c **** #endif
 512:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 513:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 514:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 515:../Middlewares/FreeRTOS//Source/event_groups.c **** {
 516:../Middlewares/FreeRTOS//Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 517:../Middlewares/FreeRTOS//Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 518:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t uxReturn;
 519:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 520:../Middlewares/FreeRTOS//Source/event_groups.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 521:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 522:../Middlewares/FreeRTOS//Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 523:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 524:../Middlewares/FreeRTOS//Source/event_groups.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 525:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 526:../Middlewares/FreeRTOS//Source/event_groups.c **** 	return uxReturn;
 527:../Middlewares/FreeRTOS//Source/event_groups.c **** }
 528:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 529:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 530:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 531:../Middlewares/FreeRTOS//Source/event_groups.c **** {
 532:../Middlewares/FreeRTOS//Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 533:../Middlewares/FreeRTOS//Source/event_groups.c **** ListItem_t const *pxListEnd;
 534:../Middlewares/FreeRTOS//Source/event_groups.c **** List_t *pxList;
 535:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 536:../Middlewares/FreeRTOS//Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 537:../Middlewares/FreeRTOS//Source/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 538:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 539:../Middlewares/FreeRTOS//Source/event_groups.c **** 	/* Check the user is not attempting to set the bits used by the kernel
 540:../Middlewares/FreeRTOS//Source/event_groups.c **** 	itself. */
 541:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( xEventGroup );
 542:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 543:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 544:../Middlewares/FreeRTOS//Source/event_groups.c **** 	pxList = &( pxEventBits->xTasksWaitingForBits );
 545:../Middlewares/FreeRTOS//Source/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as th
 546:../Middlewares/FreeRTOS//Source/event_groups.c **** 	vTaskSuspendAll();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 11


 547:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 548:../Middlewares/FreeRTOS//Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 549:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 550:../Middlewares/FreeRTOS//Source/event_groups.c **** 		pxListItem = listGET_HEAD_ENTRY( pxList );
 551:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 552:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* Set the bits. */
 553:../Middlewares/FreeRTOS//Source/event_groups.c **** 		pxEventBits->uxEventBits |= uxBitsToSet;
 554:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 555:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* See if the new bit value should unblock any tasks. */
 556:../Middlewares/FreeRTOS//Source/event_groups.c **** 		while( pxListItem != pxListEnd )
 557:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 558:../Middlewares/FreeRTOS//Source/event_groups.c **** 			pxNext = listGET_NEXT( pxListItem );
 559:../Middlewares/FreeRTOS//Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 560:../Middlewares/FreeRTOS//Source/event_groups.c **** 			xMatchFound = pdFALSE;
 561:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 562:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* Split the bits waited for from the control bits. */
 563:../Middlewares/FreeRTOS//Source/event_groups.c **** 			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 564:../Middlewares/FreeRTOS//Source/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 565:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 566:../Middlewares/FreeRTOS//Source/event_groups.c **** 			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 567:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 568:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* Just looking for single bit being set. */
 569:../Middlewares/FreeRTOS//Source/event_groups.c **** 				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 570:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 571:../Middlewares/FreeRTOS//Source/event_groups.c **** 					xMatchFound = pdTRUE;
 572:../Middlewares/FreeRTOS//Source/event_groups.c **** 				}
 573:../Middlewares/FreeRTOS//Source/event_groups.c **** 				else
 574:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 575:../Middlewares/FreeRTOS//Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 576:../Middlewares/FreeRTOS//Source/event_groups.c **** 				}
 577:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 578:../Middlewares/FreeRTOS//Source/event_groups.c **** 			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 579:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 580:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* All bits are set. */
 581:../Middlewares/FreeRTOS//Source/event_groups.c **** 				xMatchFound = pdTRUE;
 582:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 583:../Middlewares/FreeRTOS//Source/event_groups.c **** 			else
 584:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 585:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* Need all bits to be set, but not all the bits were set. */
 586:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 587:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 588:../Middlewares/FreeRTOS//Source/event_groups.c **** 			if( xMatchFound != pdFALSE )
 589:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 590:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* The bits match.  Should the bits be cleared on exit? */
 591:../Middlewares/FreeRTOS//Source/event_groups.c **** 				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 592:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 593:../Middlewares/FreeRTOS//Source/event_groups.c **** 					uxBitsToClear |= uxBitsWaitedFor;
 594:../Middlewares/FreeRTOS//Source/event_groups.c **** 				}
 595:../Middlewares/FreeRTOS//Source/event_groups.c **** 				else
 596:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 597:../Middlewares/FreeRTOS//Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 598:../Middlewares/FreeRTOS//Source/event_groups.c **** 				}
 599:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 600:../Middlewares/FreeRTOS//Source/event_groups.c **** 				/* Store the actual event flag value in the task's event list
 601:../Middlewares/FreeRTOS//Source/event_groups.c **** 				item before removing the task from the event list.  The
 602:../Middlewares/FreeRTOS//Source/event_groups.c **** 				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 603:../Middlewares/FreeRTOS//Source/event_groups.c **** 				that is was unblocked due to its required bits matching, rather
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 12


 604:../Middlewares/FreeRTOS//Source/event_groups.c **** 				than because it timed out. */
 605:../Middlewares/FreeRTOS//Source/event_groups.c **** 				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCK
 606:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 607:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 608:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* Move onto the next list item.  Note pxListItem->pxNext is not
 609:../Middlewares/FreeRTOS//Source/event_groups.c **** 			used here as the list item may have been removed from the event list
 610:../Middlewares/FreeRTOS//Source/event_groups.c **** 			and inserted into the ready/pending reading list. */
 611:../Middlewares/FreeRTOS//Source/event_groups.c **** 			pxListItem = pxNext;
 612:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 613:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 614:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 615:../Middlewares/FreeRTOS//Source/event_groups.c **** 		bit was set in the control word. */
 616:../Middlewares/FreeRTOS//Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 617:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 618:../Middlewares/FreeRTOS//Source/event_groups.c **** 	( void ) xTaskResumeAll();
 619:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 620:../Middlewares/FreeRTOS//Source/event_groups.c **** 	return pxEventBits->uxEventBits;
 621:../Middlewares/FreeRTOS//Source/event_groups.c **** }
 622:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 623:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 624:../Middlewares/FreeRTOS//Source/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 625:../Middlewares/FreeRTOS//Source/event_groups.c **** {
 626:../Middlewares/FreeRTOS//Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 627:../Middlewares/FreeRTOS//Source/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 628:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 629:../Middlewares/FreeRTOS//Source/event_groups.c **** 	vTaskSuspendAll();
 630:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 631:../Middlewares/FreeRTOS//Source/event_groups.c **** 		traceEVENT_GROUP_DELETE( xEventGroup );
 632:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 633:../Middlewares/FreeRTOS//Source/event_groups.c **** 		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 634:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 635:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* Unblock the task, returning 0 as the event list is being deleted
 636:../Middlewares/FreeRTOS//Source/event_groups.c **** 			and	cannot therefore have any bits set. */
 637:../Middlewares/FreeRTOS//Source/event_groups.c **** 			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBit
 638:../Middlewares/FreeRTOS//Source/event_groups.c **** 			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 639:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 640:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 641:../Middlewares/FreeRTOS//Source/event_groups.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 642:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 643:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* The event group can only have been allocated dynamically - free
 644:../Middlewares/FreeRTOS//Source/event_groups.c **** 			it again. */
 645:../Middlewares/FreeRTOS//Source/event_groups.c **** 			vPortFree( pxEventBits );
 646:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 647:../Middlewares/FreeRTOS//Source/event_groups.c **** 		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 648:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 649:../Middlewares/FreeRTOS//Source/event_groups.c **** 			/* The event group could have been allocated statically or
 650:../Middlewares/FreeRTOS//Source/event_groups.c **** 			dynamically, so check before attempting to free the memory. */
 651:../Middlewares/FreeRTOS//Source/event_groups.c **** 			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 652:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 653:../Middlewares/FreeRTOS//Source/event_groups.c **** 				vPortFree( pxEventBits );
 654:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 655:../Middlewares/FreeRTOS//Source/event_groups.c **** 			else
 656:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 657:../Middlewares/FreeRTOS//Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 658:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 659:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 660:../Middlewares/FreeRTOS//Source/event_groups.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 13


 661:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 662:../Middlewares/FreeRTOS//Source/event_groups.c **** 	( void ) xTaskResumeAll();
 663:../Middlewares/FreeRTOS//Source/event_groups.c **** }
 664:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 665:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 666:../Middlewares/FreeRTOS//Source/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 667:../Middlewares/FreeRTOS//Source/event_groups.c **** an interrupt. */
 668:../Middlewares/FreeRTOS//Source/event_groups.c **** void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
 669:../Middlewares/FreeRTOS//Source/event_groups.c **** {
 670:../Middlewares/FreeRTOS//Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 671:../Middlewares/FreeRTOS//Source/event_groups.c **** }
 672:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 673:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 674:../Middlewares/FreeRTOS//Source/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 675:../Middlewares/FreeRTOS//Source/event_groups.c **** an interrupt. */
 676:../Middlewares/FreeRTOS//Source/event_groups.c **** void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
 677:../Middlewares/FreeRTOS//Source/event_groups.c **** {
 678:../Middlewares/FreeRTOS//Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 679:../Middlewares/FreeRTOS//Source/event_groups.c **** }
 680:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 681:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 682:../Middlewares/FreeRTOS//Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 683:../Middlewares/FreeRTOS//Source/event_groups.c **** {
  26              		.loc 1 683 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 684:../Middlewares/FreeRTOS//Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
 685:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 686:../Middlewares/FreeRTOS//Source/event_groups.c **** 	if( xWaitForAllBits == pdFALSE )
  32              		.loc 1 686 0
  33 0000 1AB9     		cbnz	r2, .L2
 687:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 688:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* Task only has to wait for one bit within uxBitsToWaitFor to be
 689:../Middlewares/FreeRTOS//Source/event_groups.c **** 		set.  Is one already set? */
 690:../Middlewares/FreeRTOS//Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
  34              		.loc 1 690 0
  35 0002 0842     		tst	r0, r1
  36 0004 06D1     		bne	.L4
 684:../Middlewares/FreeRTOS//Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
  37              		.loc 1 684 0
  38 0006 0020     		movs	r0, #0
  39              	.LVL1:
  40 0008 7047     		bx	lr
  41              	.LVL2:
  42              	.L2:
 691:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 692:../Middlewares/FreeRTOS//Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 693:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 694:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else
 695:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 696:../Middlewares/FreeRTOS//Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 697:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 698:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 699:../Middlewares/FreeRTOS//Source/event_groups.c **** 	else
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 14


 700:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 701:../Middlewares/FreeRTOS//Source/event_groups.c **** 		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 702:../Middlewares/FreeRTOS//Source/event_groups.c **** 		Are they set already? */
 703:../Middlewares/FreeRTOS//Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
  43              		.loc 1 703 0
  44 000a 31EA0003 		bics	r3, r1, r0
  45 000e 03D0     		beq	.L5
 684:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  46              		.loc 1 684 0
  47 0010 0020     		movs	r0, #0
  48              	.LVL3:
  49 0012 7047     		bx	lr
  50              	.LVL4:
  51              	.L4:
 692:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
  52              		.loc 1 692 0
  53 0014 0120     		movs	r0, #1
  54              	.LVL5:
  55 0016 7047     		bx	lr
  56              	.LVL6:
  57              	.L5:
 704:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 705:../Middlewares/FreeRTOS//Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
  58              		.loc 1 705 0
  59 0018 0120     		movs	r0, #1
  60              	.LVL7:
 706:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 707:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else
 708:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 709:../Middlewares/FreeRTOS//Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 710:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 711:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 712:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 713:../Middlewares/FreeRTOS//Source/event_groups.c **** 	return xWaitConditionMet;
 714:../Middlewares/FreeRTOS//Source/event_groups.c **** }
  61              		.loc 1 714 0
  62 001a 7047     		bx	lr
  63              		.cfi_endproc
  64              	.LFE137:
  66              		.section	.text.xEventGroupCreate,"ax",%progbits
  67              		.align	1
  68              		.global	xEventGroupCreate
  69              		.syntax unified
  70              		.thumb
  71              		.thumb_func
  72              		.fpu fpv4-sp-d16
  74              	xEventGroupCreate:
  75              	.LFB128:
 175:../Middlewares/FreeRTOS//Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  76              		.loc 1 175 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80 0000 10B5     		push	{r4, lr}
  81              	.LCFI0:
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 4, -8
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 15


  84              		.cfi_offset 14, -4
 179:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  85              		.loc 1 179 0
  86 0002 1C20     		movs	r0, #28
  87 0004 FFF7FEFF 		bl	pvPortMalloc
  88              	.LVL8:
 181:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
  89              		.loc 1 181 0
  90 0008 0446     		mov	r4, r0
  91 000a 20B1     		cbz	r0, .L6
 183:../Middlewares/FreeRTOS//Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
  92              		.loc 1 183 0
  93 000c 0023     		movs	r3, #0
  94 000e 40F8043B 		str	r3, [r0], #4
  95              	.LVL9:
 184:../Middlewares/FreeRTOS//Source/event_groups.c **** 
  96              		.loc 1 184 0
  97 0012 FFF7FEFF 		bl	vListInitialise
  98              	.LVL10:
  99              	.L6:
 203:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 100              		.loc 1 203 0
 101 0016 2046     		mov	r0, r4
 102 0018 10BD     		pop	{r4, pc}
 103              		.cfi_endproc
 104              	.LFE128:
 106              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 107              		.align	1
 108              		.global	xEventGroupWaitBits
 109              		.syntax unified
 110              		.thumb
 111              		.thumb_func
 112              		.fpu fpv4-sp-d16
 114              	xEventGroupWaitBits:
 115              	.LFB130:
 325:../Middlewares/FreeRTOS//Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 116              		.loc 1 325 0
 117              		.cfi_startproc
 118              		@ args = 4, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              	.LVL11:
 121 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 122              	.LCFI1:
 123              		.cfi_def_cfa_offset 32
 124              		.cfi_offset 4, -32
 125              		.cfi_offset 5, -28
 126              		.cfi_offset 6, -24
 127              		.cfi_offset 7, -20
 128              		.cfi_offset 8, -16
 129              		.cfi_offset 9, -12
 130              		.cfi_offset 10, -8
 131              		.cfi_offset 14, -4
 132 0004 DDF82090 		ldr	r9, [sp, #32]
 133              	.LVL12:
 333:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 134              		.loc 1 333 0
 135 0008 60B1     		cbz	r0, .L29
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 16


 136 000a 0646     		mov	r6, r0
 334:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 137              		.loc 1 334 0
 138 000c 11F07F4A 		ands	r10, r1, #-16777216
 139 0010 11D0     		beq	.L12
 140              	.LBB31:
 141              	.LBB32:
 142              		.file 2 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 17


  50:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 18


 107:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 19


 164:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 20


 221:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 143              		.loc 2 237 0
 144              		.syntax unified
 145              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 146 0012 4FF01003 			mov r3, #16												
 147 0016 83F31188 		msr basepri, r3											
 148 001a BFF36F8F 		isb														
 149 001e BFF34F8F 		dsb														
 150              	
 151              	@ 0 "" 2
 152              	.LVL13:
 153              		.thumb
 154              		.syntax unified
 155              	.L13:
 156 0022 FEE7     		b	.L13
 157              	.LVL14:
 158              	.L29:
 159              	.LBE32:
 160              	.LBE31:
 161              	.LBB33:
 162              	.LBB34:
 163              		.syntax unified
 164              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 165 0024 4FF01003 			mov r3, #16												
 166 0028 83F31188 		msr basepri, r3											
 167 002c BFF36F8F 		isb														
 168 0030 BFF34F8F 		dsb														
 169              	
 170              	@ 0 "" 2
 171              	.LVL15:
 172              		.thumb
 173              		.syntax unified
 174              	.L11:
 175 0034 FEE7     		b	.L11
 176              	.LVL16:
 177              	.L12:
 178              	.LBE34:
 179              	.LBE33:
 335:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 180              		.loc 1 335 0
 181 0036 41B9     		cbnz	r1, .L14
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 21


 182              	.LBB35:
 183              	.LBB36:
 184              		.loc 2 237 0
 185              		.syntax unified
 186              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 187 0038 4FF01003 			mov r3, #16												
 188 003c 83F31188 		msr basepri, r3											
 189 0040 BFF36F8F 		isb														
 190 0044 BFF34F8F 		dsb														
 191              	
 192              	@ 0 "" 2
 193              	.LVL17:
 194              		.thumb
 195              		.syntax unified
 196              	.L15:
 197 0048 FEE7     		b	.L15
 198              	.LVL18:
 199              	.L14:
 200 004a 9846     		mov	r8, r3
 201 004c 1746     		mov	r7, r2
 202 004e 0C46     		mov	r4, r1
 203              	.LBE36:
 204              	.LBE35:
 338:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 205              		.loc 1 338 0
 206 0050 FFF7FEFF 		bl	xTaskGetSchedulerState
 207              	.LVL19:
 208 0054 58B9     		cbnz	r0, .L16
 338:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 209              		.loc 1 338 0 is_stmt 0 discriminator 2
 210 0056 B9F1000F 		cmp	r9, #0
 211 005a 08D0     		beq	.L16
 212              	.LBB37:
 213              	.LBB38:
 214              		.loc 2 237 0 is_stmt 1
 215              		.syntax unified
 216              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 217 005c 4FF01003 			mov r3, #16												
 218 0060 83F31188 		msr basepri, r3											
 219 0064 BFF36F8F 		isb														
 220 0068 BFF34F8F 		dsb														
 221              	
 222              	@ 0 "" 2
 223              	.LVL20:
 224              		.thumb
 225              		.syntax unified
 226              	.L17:
 227 006c FEE7     		b	.L17
 228              	.L16:
 229              	.LBE38:
 230              	.LBE37:
 342:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 231              		.loc 1 342 0
 232 006e FFF7FEFF 		bl	vTaskSuspendAll
 233              	.LVL21:
 234              	.LBB39:
 344:../Middlewares/FreeRTOS//Source/event_groups.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 22


 235              		.loc 1 344 0
 236 0072 3568     		ldr	r5, [r6]
 237              	.LVL22:
 347:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 238              		.loc 1 347 0
 239 0074 4246     		mov	r2, r8
 240 0076 2146     		mov	r1, r4
 241 0078 2846     		mov	r0, r5
 242 007a FFF7FEFF 		bl	prvTestWaitCondition
 243              	.LVL23:
 349:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 244              		.loc 1 349 0
 245 007e 58B3     		cbz	r0, .L18
 246              	.LVL24:
 357:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 247              		.loc 1 357 0
 248 0080 17B1     		cbz	r7, .L19
 359:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 249              		.loc 1 359 0
 250 0082 25EA0403 		bic	r3, r5, r4
 251 0086 3360     		str	r3, [r6]
 252              	.LVL25:
 253              	.L19:
 254              	.LBE39:
 409:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 255              		.loc 1 409 0
 256 0088 FFF7FEFF 		bl	xTaskResumeAll
 257              	.LVL26:
 411:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 258              		.loc 1 411 0
 259 008c BAF1000F 		cmp	r10, #0
 260 0090 1FD0     		beq	.L9
 413:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 261              		.loc 1 413 0
 262 0092 38B9     		cbnz	r0, .L23
 415:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 263              		.loc 1 415 0
 264 0094 1C4B     		ldr	r3, .L30
 265 0096 4FF08052 		mov	r2, #268435456
 266 009a 1A60     		str	r2, [r3]
 267              		.syntax unified
 268              	@ 415 "../Middlewares/FreeRTOS//Source/event_groups.c" 1
 269 009c BFF34F8F 		dsb
 270              	@ 0 "" 2
 271              	@ 415 "../Middlewares/FreeRTOS//Source/event_groups.c" 1
 272 00a0 BFF36F8F 		isb
 273              	@ 0 "" 2
 274              		.thumb
 275              		.syntax unified
 276              	.L23:
 426:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 277              		.loc 1 426 0
 278 00a4 FFF7FEFF 		bl	uxTaskResetEventItemValue
 279              	.LVL27:
 280 00a8 0546     		mov	r5, r0
 281              	.LVL28:
 428:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 23


 282              		.loc 1 428 0
 283 00aa 10F0007F 		tst	r0, #33554432
 284 00ae 0ED1     		bne	.L24
 430:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 285              		.loc 1 430 0
 286 00b0 FFF7FEFF 		bl	vPortEnterCritical
 287              	.LVL29:
 433:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 288              		.loc 1 433 0
 289 00b4 3568     		ldr	r5, [r6]
 290              	.LVL30:
 437:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 291              		.loc 1 437 0
 292 00b6 4246     		mov	r2, r8
 293 00b8 2146     		mov	r1, r4
 294 00ba 2846     		mov	r0, r5
 295 00bc FFF7FEFF 		bl	prvTestWaitCondition
 296              	.LVL31:
 297 00c0 18B1     		cbz	r0, .L25
 439:../Middlewares/FreeRTOS//Source/event_groups.c **** 					{
 298              		.loc 1 439 0
 299 00c2 17B1     		cbz	r7, .L25
 441:../Middlewares/FreeRTOS//Source/event_groups.c **** 					}
 300              		.loc 1 441 0
 301 00c4 25EA0404 		bic	r4, r5, r4
 302              	.LVL32:
 303 00c8 3460     		str	r4, [r6]
 304              	.L25:
 453:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 305              		.loc 1 453 0
 306 00ca FFF7FEFF 		bl	vPortExitCritical
 307              	.LVL33:
 308              	.L24:
 464:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 309              		.loc 1 464 0
 310 00ce 25F07F45 		bic	r5, r5, #-16777216
 311              	.LVL34:
 312              	.L9:
 469:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 313              		.loc 1 469 0
 314 00d2 2846     		mov	r0, r5
 315 00d4 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 316              	.LVL35:
 317              	.L18:
 318              	.LBB40:
 366:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 319              		.loc 1 366 0
 320 00d8 B9F1000F 		cmp	r9, #0
 321 00dc 11D0     		beq	.L26
 378:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 322              		.loc 1 378 0
 323 00de 6FB9     		cbnz	r7, .L27
 324              	.LBE40:
 327:../Middlewares/FreeRTOS//Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 325              		.loc 1 327 0
 326 00e0 0021     		movs	r1, #0
 327              	.L20:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 24


 328              	.LVL36:
 329              	.LBB41:
 387:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 330              		.loc 1 387 0
 331 00e2 B8F1000F 		cmp	r8, #0
 332 00e6 01D0     		beq	.L21
 389:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 333              		.loc 1 389 0
 334 00e8 41F08061 		orr	r1, r1, #67108864
 335              	.LVL37:
 336              	.L21:
 399:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 337              		.loc 1 399 0
 338 00ec 4A46     		mov	r2, r9
 339 00ee 2143     		orrs	r1, r1, r4
 340              	.LVL38:
 341 00f0 301D     		adds	r0, r6, #4
 342              	.LVL39:
 343 00f2 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 344              	.LVL40:
 345 00f6 CA46     		mov	r10, r9
 404:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 346              		.loc 1 404 0
 347 00f8 0025     		movs	r5, #0
 348              	.LVL41:
 349 00fa C5E7     		b	.L19
 350              	.LVL42:
 351              	.L27:
 380:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 352              		.loc 1 380 0
 353 00fc 4FF08071 		mov	r1, #16777216
 354 0100 EFE7     		b	.L20
 355              	.L26:
 356 0102 CA46     		mov	r10, r9
 357 0104 C0E7     		b	.L19
 358              	.L31:
 359 0106 00BF     		.align	2
 360              	.L30:
 361 0108 04ED00E0 		.word	-536810236
 362              	.LBE41:
 363              		.cfi_endproc
 364              	.LFE130:
 366              		.section	.text.xEventGroupClearBits,"ax",%progbits
 367              		.align	1
 368              		.global	xEventGroupClearBits
 369              		.syntax unified
 370              		.thumb
 371              		.thumb_func
 372              		.fpu fpv4-sp-d16
 374              	xEventGroupClearBits:
 375              	.LFB131:
 473:../Middlewares/FreeRTOS//Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 376              		.loc 1 473 0
 377              		.cfi_startproc
 378              		@ args = 0, pretend = 0, frame = 0
 379              		@ frame_needed = 0, uses_anonymous_args = 0
 380              	.LVL43:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 25


 479:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 381              		.loc 1 479 0
 382 0000 40B9     		cbnz	r0, .L33
 383              	.LBB42:
 384              	.LBB43:
 385              		.loc 2 237 0
 386              		.syntax unified
 387              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 388 0002 4FF01003 			mov r3, #16												
 389 0006 83F31188 		msr basepri, r3											
 390 000a BFF36F8F 		isb														
 391 000e BFF34F8F 		dsb														
 392              	
 393              	@ 0 "" 2
 394              	.LVL44:
 395              		.thumb
 396              		.syntax unified
 397              	.L34:
 398 0012 FEE7     		b	.L34
 399              	.L33:
 400              	.LBE43:
 401              	.LBE42:
 473:../Middlewares/FreeRTOS//Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 402              		.loc 1 473 0
 403 0014 70B5     		push	{r4, r5, r6, lr}
 404              	.LCFI2:
 405              		.cfi_def_cfa_offset 16
 406              		.cfi_offset 4, -16
 407              		.cfi_offset 5, -12
 408              		.cfi_offset 6, -8
 409              		.cfi_offset 14, -4
 410 0016 0546     		mov	r5, r0
 480:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 411              		.loc 1 480 0
 412 0018 11F07F4F 		tst	r1, #-16777216
 413 001c 08D0     		beq	.L35
 414              	.LBB44:
 415              	.LBB45:
 416              		.loc 2 237 0
 417              		.syntax unified
 418              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 419 001e 4FF01003 			mov r3, #16												
 420 0022 83F31188 		msr basepri, r3											
 421 0026 BFF36F8F 		isb														
 422 002a BFF34F8F 		dsb														
 423              	
 424              	@ 0 "" 2
 425              	.LVL45:
 426              		.thumb
 427              		.syntax unified
 428              	.L36:
 429 002e FEE7     		b	.L36
 430              	.L35:
 431 0030 0C46     		mov	r4, r1
 432              	.LBE45:
 433              	.LBE44:
 482:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 26


 434              		.loc 1 482 0
 435 0032 FFF7FEFF 		bl	vPortEnterCritical
 436              	.LVL46:
 488:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 437              		.loc 1 488 0
 438 0036 2E68     		ldr	r6, [r5]
 439              	.LVL47:
 491:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 440              		.loc 1 491 0
 441 0038 26EA0404 		bic	r4, r6, r4
 442              	.LVL48:
 443 003c 2C60     		str	r4, [r5]
 493:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 444              		.loc 1 493 0
 445 003e FFF7FEFF 		bl	vPortExitCritical
 446              	.LVL49:
 496:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 447              		.loc 1 496 0
 448 0042 3046     		mov	r0, r6
 449 0044 70BD     		pop	{r4, r5, r6, pc}
 450              		.cfi_endproc
 451              	.LFE131:
 453              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 454              		.align	1
 455              		.global	xEventGroupGetBitsFromISR
 456              		.syntax unified
 457              		.thumb
 458              		.thumb_func
 459              		.fpu fpv4-sp-d16
 461              	xEventGroupGetBitsFromISR:
 462              	.LFB132:
 515:../Middlewares/FreeRTOS//Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 463              		.loc 1 515 0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 0
 466              		@ frame_needed = 0, uses_anonymous_args = 0
 467              		@ link register save eliminated.
 468              	.LVL50:
 469              	.LBB46:
 470              	.LBB47:
 238:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 245:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 471              		.loc 2 253 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 27


 472              		.syntax unified
 473              	@ 253 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 474 0000 EFF31183 			mrs r3, basepri											
 475 0004 4FF01002 		mov r2, #16												
 476 0008 82F31188 		msr basepri, r2											
 477 000c BFF36F8F 		isb														
 478 0010 BFF34F8F 		dsb														
 479              	
 480              	@ 0 "" 2
 481              		.thumb
 482              		.syntax unified
 483              	.LBE47:
 484              	.LBE46:
 522:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 485              		.loc 1 522 0
 486 0014 0068     		ldr	r0, [r0]
 487              	.LVL51:
 488              	.LBB48:
 489              	.LBB49:
 254:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 262:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 266:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 490              		.loc 2 271 0
 491              		.syntax unified
 492              	@ 271 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 493 0016 83F31188 			msr basepri, r3	
 494              	@ 0 "" 2
 495              		.thumb
 496              		.syntax unified
 497              	.LBE49:
 498              	.LBE48:
 527:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 499              		.loc 1 527 0
 500 001a 7047     		bx	lr
 501              		.cfi_endproc
 502              	.LFE132:
 504              		.section	.text.xEventGroupSetBits,"ax",%progbits
 505              		.align	1
 506              		.global	xEventGroupSetBits
 507              		.syntax unified
 508              		.thumb
 509              		.thumb_func
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 28


 510              		.fpu fpv4-sp-d16
 512              	xEventGroupSetBits:
 513              	.LFB133:
 531:../Middlewares/FreeRTOS//Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 514              		.loc 1 531 0
 515              		.cfi_startproc
 516              		@ args = 0, pretend = 0, frame = 0
 517              		@ frame_needed = 0, uses_anonymous_args = 0
 518              	.LVL52:
 519 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 520              	.LCFI3:
 521              		.cfi_def_cfa_offset 24
 522              		.cfi_offset 3, -24
 523              		.cfi_offset 4, -20
 524              		.cfi_offset 5, -16
 525              		.cfi_offset 6, -12
 526              		.cfi_offset 7, -8
 527              		.cfi_offset 14, -4
 528              	.LVL53:
 541:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 529              		.loc 1 541 0
 530 0002 40B9     		cbnz	r0, .L41
 531              	.LBB50:
 532              	.LBB51:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 533              		.loc 2 237 0
 534              		.syntax unified
 535              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 536 0004 4FF01003 			mov r3, #16												
 537 0008 83F31188 		msr basepri, r3											
 538 000c BFF36F8F 		isb														
 539 0010 BFF34F8F 		dsb														
 540              	
 541              	@ 0 "" 2
 542              	.LVL54:
 543              		.thumb
 544              		.syntax unified
 545              	.L42:
 546 0014 FEE7     		b	.L42
 547              	.L41:
 548 0016 0446     		mov	r4, r0
 549              	.LBE51:
 550              	.LBE50:
 542:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 551              		.loc 1 542 0
 552 0018 11F07F4F 		tst	r1, #-16777216
 553 001c 08D0     		beq	.L43
 554              	.LBB52:
 555              	.LBB53:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 556              		.loc 2 237 0
 557              		.syntax unified
 558              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 559 001e 4FF01003 			mov r3, #16												
 560 0022 83F31188 		msr basepri, r3											
 561 0026 BFF36F8F 		isb														
 562 002a BFF34F8F 		dsb														
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 29


 563              	
 564              	@ 0 "" 2
 565              	.LVL55:
 566              		.thumb
 567              		.syntax unified
 568              	.L44:
 569 002e FEE7     		b	.L44
 570              	.L43:
 571 0030 0D46     		mov	r5, r1
 572              	.LVL56:
 573              	.LBE53:
 574              	.LBE52:
 545:../Middlewares/FreeRTOS//Source/event_groups.c **** 	vTaskSuspendAll();
 575              		.loc 1 545 0
 576 0032 00F10C06 		add	r6, r0, #12
 577              	.LVL57:
 546:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 578              		.loc 1 546 0
 579 0036 FFF7FEFF 		bl	vTaskSuspendAll
 580              	.LVL58:
 550:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 581              		.loc 1 550 0
 582 003a 2069     		ldr	r0, [r4, #16]
 583              	.LVL59:
 553:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 584              		.loc 1 553 0
 585 003c 2368     		ldr	r3, [r4]
 586 003e 2B43     		orrs	r3, r3, r5
 587 0040 2360     		str	r3, [r4]
 535:../Middlewares/FreeRTOS//Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 588              		.loc 1 535 0
 589 0042 0025     		movs	r5, #0
 590              	.LVL60:
 556:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 591              		.loc 1 556 0
 592 0044 04E0     		b	.L45
 593              	.LVL61:
 594              	.L46:
 578:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 595              		.loc 1 578 0
 596 0046 2168     		ldr	r1, [r4]
 597 0048 33EA0101 		bics	r1, r3, r1
 598 004c 0CD0     		beq	.L47
 599              	.LVL62:
 600              	.L48:
 531:../Middlewares/FreeRTOS//Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 601              		.loc 1 531 0
 602 004e 3846     		mov	r0, r7
 603              	.LVL63:
 604              	.L45:
 556:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 605              		.loc 1 556 0
 606 0050 B042     		cmp	r0, r6
 607 0052 13D0     		beq	.L52
 558:../Middlewares/FreeRTOS//Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 608              		.loc 1 558 0
 609 0054 4768     		ldr	r7, [r0, #4]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 30


 610              	.LVL64:
 559:../Middlewares/FreeRTOS//Source/event_groups.c **** 			xMatchFound = pdFALSE;
 611              		.loc 1 559 0
 612 0056 0268     		ldr	r2, [r0]
 613              	.LVL65:
 564:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 614              		.loc 1 564 0
 615 0058 22F07F43 		bic	r3, r2, #-16777216
 616              	.LVL66:
 566:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 617              		.loc 1 566 0
 618 005c 12F0806F 		tst	r2, #67108864
 619 0060 F1D1     		bne	.L46
 569:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 620              		.loc 1 569 0
 621 0062 2168     		ldr	r1, [r4]
 622 0064 1942     		tst	r1, r3
 623 0066 F2D0     		beq	.L48
 624              	.L47:
 591:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 625              		.loc 1 591 0
 626 0068 12F0807F 		tst	r2, #16777216
 627 006c 00D0     		beq	.L49
 593:../Middlewares/FreeRTOS//Source/event_groups.c **** 				}
 628              		.loc 1 593 0
 629 006e 1D43     		orrs	r5, r5, r3
 630              	.LVL67:
 631              	.L49:
 605:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 632              		.loc 1 605 0
 633 0070 2168     		ldr	r1, [r4]
 634 0072 41F00071 		orr	r1, r1, #33554432
 635 0076 FFF7FEFF 		bl	xTaskRemoveFromUnorderedEventList
 636              	.LVL68:
 637 007a E8E7     		b	.L48
 638              	.LVL69:
 639              	.L52:
 616:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 640              		.loc 1 616 0
 641 007c 2368     		ldr	r3, [r4]
 642 007e 23EA0503 		bic	r3, r3, r5
 643 0082 2360     		str	r3, [r4]
 618:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 644              		.loc 1 618 0
 645 0084 FFF7FEFF 		bl	xTaskResumeAll
 646              	.LVL70:
 621:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 647              		.loc 1 621 0
 648 0088 2068     		ldr	r0, [r4]
 649 008a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 650              		.cfi_endproc
 651              	.LFE133:
 653              		.section	.text.xEventGroupSync,"ax",%progbits
 654              		.align	1
 655              		.global	xEventGroupSync
 656              		.syntax unified
 657              		.thumb
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 31


 658              		.thumb_func
 659              		.fpu fpv4-sp-d16
 661              	xEventGroupSync:
 662              	.LFB129:
 209:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 663              		.loc 1 209 0
 664              		.cfi_startproc
 665              		@ args = 0, pretend = 0, frame = 0
 666              		@ frame_needed = 0, uses_anonymous_args = 0
 667              	.LVL71:
 215:../Middlewares/FreeRTOS//Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 668              		.loc 1 215 0
 669 0000 12F07F4F 		tst	r2, #-16777216
 670 0004 08D0     		beq	.L54
 671              	.LBB54:
 672              	.LBB55:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 673              		.loc 2 237 0
 674              		.syntax unified
 675              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 676 0006 4FF01003 			mov r3, #16												
 677 000a 83F31188 		msr basepri, r3											
 678 000e BFF36F8F 		isb														
 679 0012 BFF34F8F 		dsb														
 680              	
 681              	@ 0 "" 2
 682              	.LVL72:
 683              		.thumb
 684              		.syntax unified
 685              	.L55:
 686 0016 FEE7     		b	.L55
 687              	.LVL73:
 688              	.L54:
 689              	.LBE55:
 690              	.LBE54:
 209:../Middlewares/FreeRTOS//Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 691              		.loc 1 209 0
 692 0018 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 693              	.LCFI4:
 694              		.cfi_def_cfa_offset 24
 695              		.cfi_offset 4, -24
 696              		.cfi_offset 5, -20
 697              		.cfi_offset 6, -16
 698              		.cfi_offset 7, -12
 699              		.cfi_offset 8, -8
 700              		.cfi_offset 14, -4
 701 001c 0646     		mov	r6, r0
 702 001e 8846     		mov	r8, r1
 703 0020 1546     		mov	r5, r2
 704 0022 1F46     		mov	r7, r3
 216:../Middlewares/FreeRTOS//Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 705              		.loc 1 216 0
 706 0024 42B9     		cbnz	r2, .L56
 707              	.LBB56:
 708              	.LBB57:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 709              		.loc 2 237 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 32


 710              		.syntax unified
 711              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 712 0026 4FF01003 			mov r3, #16												
 713 002a 83F31188 		msr basepri, r3											
 714 002e BFF36F8F 		isb														
 715 0032 BFF34F8F 		dsb														
 716              	
 717              	@ 0 "" 2
 718              	.LVL74:
 719              		.thumb
 720              		.syntax unified
 721              	.L57:
 722 0036 FEE7     		b	.L57
 723              	.LVL75:
 724              	.L56:
 725              	.LBE57:
 726              	.LBE56:
 219:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 727              		.loc 1 219 0
 728 0038 FFF7FEFF 		bl	xTaskGetSchedulerState
 729              	.LVL76:
 730 003c 48B9     		cbnz	r0, .L58
 219:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 731              		.loc 1 219 0 is_stmt 0 discriminator 2
 732 003e 47B1     		cbz	r7, .L58
 733              	.LBB58:
 734              	.LBB59:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 735              		.loc 2 237 0 is_stmt 1
 736              		.syntax unified
 737              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 738 0040 4FF01003 			mov r3, #16												
 739 0044 83F31188 		msr basepri, r3											
 740 0048 BFF36F8F 		isb														
 741 004c BFF34F8F 		dsb														
 742              	
 743              	@ 0 "" 2
 744              	.LVL77:
 745              		.thumb
 746              		.syntax unified
 747              	.L59:
 748 0050 FEE7     		b	.L59
 749              	.L58:
 750              	.LBE59:
 751              	.LBE58:
 223:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 752              		.loc 1 223 0
 753 0052 FFF7FEFF 		bl	vTaskSuspendAll
 754              	.LVL78:
 225:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 755              		.loc 1 225 0
 756 0056 3468     		ldr	r4, [r6]
 757              	.LVL79:
 227:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 758              		.loc 1 227 0
 759 0058 4146     		mov	r1, r8
 760 005a 3046     		mov	r0, r6
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 33


 761 005c FFF7FEFF 		bl	xEventGroupSetBits
 762              	.LVL80:
 229:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 763              		.loc 1 229 0
 764 0060 44EA0804 		orr	r4, r4, r8
 765              	.LVL81:
 766 0064 35EA0403 		bics	r3, r5, r4
 767 0068 26D1     		bne	.L60
 768              	.LVL82:
 236:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 769              		.loc 1 236 0
 770 006a 3368     		ldr	r3, [r6]
 771 006c 23EA0503 		bic	r3, r3, r5
 772 0070 3360     		str	r3, [r6]
 773              	.LVL83:
 238:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 774              		.loc 1 238 0
 775 0072 0027     		movs	r7, #0
 776              	.LVL84:
 777              	.L61:
 265:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 778              		.loc 1 265 0
 779 0074 FFF7FEFF 		bl	xTaskResumeAll
 780              	.LVL85:
 267:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 781              		.loc 1 267 0
 782 0078 DFB1     		cbz	r7, .L53
 269:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 783              		.loc 1 269 0
 784 007a 38B9     		cbnz	r0, .L64
 271:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 785              		.loc 1 271 0
 786 007c 144B     		ldr	r3, .L69
 787 007e 4FF08052 		mov	r2, #268435456
 788 0082 1A60     		str	r2, [r3]
 789              		.syntax unified
 790              	@ 271 "../Middlewares/FreeRTOS//Source/event_groups.c" 1
 791 0084 BFF34F8F 		dsb
 792              	@ 0 "" 2
 793              	@ 271 "../Middlewares/FreeRTOS//Source/event_groups.c" 1
 794 0088 BFF36F8F 		isb
 795              	@ 0 "" 2
 796              		.thumb
 797              		.syntax unified
 798              	.L64:
 282:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 799              		.loc 1 282 0
 800 008c FFF7FEFF 		bl	uxTaskResetEventItemValue
 801              	.LVL86:
 802 0090 0446     		mov	r4, r0
 803              	.LVL87:
 284:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 804              		.loc 1 284 0
 805 0092 10F0007F 		tst	r0, #33554432
 806 0096 0AD1     		bne	.L65
 287:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 807              		.loc 1 287 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 34


 808 0098 FFF7FEFF 		bl	vPortEnterCritical
 809              	.LVL88:
 289:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 810              		.loc 1 289 0
 811 009c 3468     		ldr	r4, [r6]
 812              	.LVL89:
 295:../Middlewares/FreeRTOS//Source/event_groups.c **** 				{
 813              		.loc 1 295 0
 814 009e 35EA0403 		bics	r3, r5, r4
 815 00a2 02D1     		bne	.L66
 297:../Middlewares/FreeRTOS//Source/event_groups.c **** 				}
 816              		.loc 1 297 0
 817 00a4 24EA0505 		bic	r5, r4, r5
 818              	.LVL90:
 819 00a8 3560     		str	r5, [r6]
 820              	.L66:
 304:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 821              		.loc 1 304 0
 822 00aa FFF7FEFF 		bl	vPortExitCritical
 823              	.LVL91:
 824              	.L65:
 315:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 825              		.loc 1 315 0
 826 00ae 24F07F44 		bic	r4, r4, #-16777216
 827              	.LVL92:
 828              	.L53:
 321:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 829              		.loc 1 321 0
 830 00b2 2046     		mov	r0, r4
 831 00b4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 832              	.LVL93:
 833              	.L60:
 242:../Middlewares/FreeRTOS//Source/event_groups.c **** 			{
 834              		.loc 1 242 0
 835 00b8 3FB1     		cbz	r7, .L62
 249:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 836              		.loc 1 249 0
 837 00ba 3A46     		mov	r2, r7
 838 00bc 45F0A061 		orr	r1, r5, #83886080
 839 00c0 301D     		adds	r0, r6, #4
 840 00c2 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 841              	.LVL94:
 255:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 842              		.loc 1 255 0
 843 00c6 0024     		movs	r4, #0
 844 00c8 D4E7     		b	.L61
 845              	.LVL95:
 846              	.L62:
 261:../Middlewares/FreeRTOS//Source/event_groups.c **** 			}
 847              		.loc 1 261 0
 848 00ca 3468     		ldr	r4, [r6]
 849              	.LVL96:
 850 00cc D2E7     		b	.L61
 851              	.L70:
 852 00ce 00BF     		.align	2
 853              	.L69:
 854 00d0 04ED00E0 		.word	-536810236
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 35


 855              		.cfi_endproc
 856              	.LFE129:
 858              		.section	.text.vEventGroupDelete,"ax",%progbits
 859              		.align	1
 860              		.global	vEventGroupDelete
 861              		.syntax unified
 862              		.thumb
 863              		.thumb_func
 864              		.fpu fpv4-sp-d16
 866              	vEventGroupDelete:
 867              	.LFB134:
 625:../Middlewares/FreeRTOS//Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 868              		.loc 1 625 0
 869              		.cfi_startproc
 870              		@ args = 0, pretend = 0, frame = 0
 871              		@ frame_needed = 0, uses_anonymous_args = 0
 872              	.LVL97:
 873 0000 10B5     		push	{r4, lr}
 874              	.LCFI5:
 875              		.cfi_def_cfa_offset 8
 876              		.cfi_offset 4, -8
 877              		.cfi_offset 14, -4
 878 0002 0446     		mov	r4, r0
 879              	.LVL98:
 629:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 880              		.loc 1 629 0
 881 0004 FFF7FEFF 		bl	vTaskSuspendAll
 882              	.LVL99:
 883              	.L72:
 633:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 884              		.loc 1 633 0
 885 0008 6368     		ldr	r3, [r4, #4]
 886 000a 93B1     		cbz	r3, .L77
 637:../Middlewares/FreeRTOS//Source/event_groups.c **** 			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 887              		.loc 1 637 0
 888 000c 2069     		ldr	r0, [r4, #16]
 889 000e 04F10C03 		add	r3, r4, #12
 890 0012 9842     		cmp	r0, r3
 891 0014 04D0     		beq	.L78
 638:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 892              		.loc 1 638 0
 893 0016 4FF00071 		mov	r1, #33554432
 894 001a FFF7FEFF 		bl	xTaskRemoveFromUnorderedEventList
 895              	.LVL100:
 896 001e F3E7     		b	.L72
 897              	.L78:
 898              	.LBB60:
 899              	.LBB61:
 237:../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 900              		.loc 2 237 0
 901              		.syntax unified
 902              	@ 237 "../Middlewares/FreeRTOS//Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 903 0020 4FF01003 			mov r3, #16												
 904 0024 83F31188 		msr basepri, r3											
 905 0028 BFF36F8F 		isb														
 906 002c BFF34F8F 		dsb														
 907              	
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 36


 908              	@ 0 "" 2
 909              	.LVL101:
 910              		.thumb
 911              		.syntax unified
 912              	.L74:
 913 0030 FEE7     		b	.L74
 914              	.L77:
 915              	.LBE61:
 916              	.LBE60:
 645:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 917              		.loc 1 645 0
 918 0032 2046     		mov	r0, r4
 919 0034 FFF7FEFF 		bl	vPortFree
 920              	.LVL102:
 662:../Middlewares/FreeRTOS//Source/event_groups.c **** }
 921              		.loc 1 662 0
 922 0038 FFF7FEFF 		bl	xTaskResumeAll
 923              	.LVL103:
 663:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 924              		.loc 1 663 0
 925 003c 10BD     		pop	{r4, pc}
 926              		.cfi_endproc
 927              	.LFE134:
 929              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 930              		.align	1
 931              		.global	vEventGroupSetBitsCallback
 932              		.syntax unified
 933              		.thumb
 934              		.thumb_func
 935              		.fpu fpv4-sp-d16
 937              	vEventGroupSetBitsCallback:
 938              	.LFB135:
 669:../Middlewares/FreeRTOS//Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 939              		.loc 1 669 0
 940              		.cfi_startproc
 941              		@ args = 0, pretend = 0, frame = 0
 942              		@ frame_needed = 0, uses_anonymous_args = 0
 943              	.LVL104:
 944 0000 08B5     		push	{r3, lr}
 945              	.LCFI6:
 946              		.cfi_def_cfa_offset 8
 947              		.cfi_offset 3, -8
 948              		.cfi_offset 14, -4
 670:../Middlewares/FreeRTOS//Source/event_groups.c **** }
 949              		.loc 1 670 0
 950 0002 FFF7FEFF 		bl	xEventGroupSetBits
 951              	.LVL105:
 671:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 952              		.loc 1 671 0
 953 0006 08BD     		pop	{r3, pc}
 954              		.cfi_endproc
 955              	.LFE135:
 957              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 958              		.align	1
 959              		.global	vEventGroupClearBitsCallback
 960              		.syntax unified
 961              		.thumb
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 37


 962              		.thumb_func
 963              		.fpu fpv4-sp-d16
 965              	vEventGroupClearBitsCallback:
 966              	.LFB136:
 677:../Middlewares/FreeRTOS//Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 967              		.loc 1 677 0
 968              		.cfi_startproc
 969              		@ args = 0, pretend = 0, frame = 0
 970              		@ frame_needed = 0, uses_anonymous_args = 0
 971              	.LVL106:
 972 0000 08B5     		push	{r3, lr}
 973              	.LCFI7:
 974              		.cfi_def_cfa_offset 8
 975              		.cfi_offset 3, -8
 976              		.cfi_offset 14, -4
 678:../Middlewares/FreeRTOS//Source/event_groups.c **** }
 977              		.loc 1 678 0
 978 0002 FFF7FEFF 		bl	xEventGroupClearBits
 979              	.LVL107:
 679:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 980              		.loc 1 679 0
 981 0006 08BD     		pop	{r3, pc}
 982              		.cfi_endproc
 983              	.LFE136:
 985              		.section	.text.uxEventGroupGetNumber,"ax",%progbits
 986              		.align	1
 987              		.global	uxEventGroupGetNumber
 988              		.syntax unified
 989              		.thumb
 990              		.thumb_func
 991              		.fpu fpv4-sp-d16
 993              	uxEventGroupGetNumber:
 994              	.LFB138:
 715:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 716:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 717:../Middlewares/FreeRTOS//Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 718:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 719:../Middlewares/FreeRTOS//Source/event_groups.c **** 	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSe
 720:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 721:../Middlewares/FreeRTOS//Source/event_groups.c **** 	BaseType_t xReturn;
 722:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 723:../Middlewares/FreeRTOS//Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
 724:../Middlewares/FreeRTOS//Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( ui
 725:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 726:../Middlewares/FreeRTOS//Source/event_groups.c **** 		return xReturn;
 727:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 728:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 729:../Middlewares/FreeRTOS//Source/event_groups.c **** #endif
 730:../Middlewares/FreeRTOS//Source/event_groups.c **** /*-----------------------------------------------------------*/
 731:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 732:../Middlewares/FreeRTOS//Source/event_groups.c **** #if (configUSE_TRACE_FACILITY == 1)
 733:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 734:../Middlewares/FreeRTOS//Source/event_groups.c **** 	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
 735:../Middlewares/FreeRTOS//Source/event_groups.c **** 	{
 995              		.loc 1 735 0
 996              		.cfi_startproc
 997              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 38


 998              		@ frame_needed = 0, uses_anonymous_args = 0
 999              		@ link register save eliminated.
 1000              	.LVL108:
 736:../Middlewares/FreeRTOS//Source/event_groups.c **** 	UBaseType_t xReturn;
 737:../Middlewares/FreeRTOS//Source/event_groups.c **** 	EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 738:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 739:../Middlewares/FreeRTOS//Source/event_groups.c **** 		if( xEventGroup == NULL )
 1001              		.loc 1 739 0
 1002 0000 08B1     		cbz	r0, .L85
 740:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 741:../Middlewares/FreeRTOS//Source/event_groups.c **** 			xReturn = 0;
 742:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 743:../Middlewares/FreeRTOS//Source/event_groups.c **** 		else
 744:../Middlewares/FreeRTOS//Source/event_groups.c **** 		{
 745:../Middlewares/FreeRTOS//Source/event_groups.c **** 			xReturn = pxEventBits->uxEventGroupNumber;
 1003              		.loc 1 745 0
 1004 0002 8069     		ldr	r0, [r0, #24]
 1005              	.LVL109:
 1006 0004 7047     		bx	lr
 1007              	.LVL110:
 1008              	.L85:
 741:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 1009              		.loc 1 741 0
 1010 0006 0020     		movs	r0, #0
 1011              	.LVL111:
 746:../Middlewares/FreeRTOS//Source/event_groups.c **** 		}
 747:../Middlewares/FreeRTOS//Source/event_groups.c **** 
 748:../Middlewares/FreeRTOS//Source/event_groups.c **** 		return xReturn;
 749:../Middlewares/FreeRTOS//Source/event_groups.c **** 	}
 1012              		.loc 1 749 0
 1013 0008 7047     		bx	lr
 1014              		.cfi_endproc
 1015              	.LFE138:
 1017              		.text
 1018              	.Letext0:
 1019              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 1020              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 1021              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 1022              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 1023              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 1024              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 1025              		.file 9 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 1026              		.file 10 "../Libraries/CMSIS/CM4/CoreSupport/core_cm4.h"
 1027              		.file 11 "../Libraries/CMSIS/CM4/DeviceSupport/system_at32f4xx.h"
 1028              		.file 12 "Inc/FreeRTOSConfig.h"
 1029              		.file 13 "../Middlewares/FreeRTOS//Source/include/list.h"
 1030              		.file 14 "../Middlewares/FreeRTOS//Source/include/event_groups.h"
 1031              		.file 15 "../Middlewares/FreeRTOS//Source/include/task.h"
 1032              		.file 16 "../Middlewares/FreeRTOS//Source/include/portable.h"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s 			page 39


DEFINED SYMBOLS
                            *ABS*:0000000000000000 event_groups.c
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:17     .text.prvTestWaitCondition:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:23     .text.prvTestWaitCondition:0000000000000000 prvTestWaitCondition
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:67     .text.xEventGroupCreate:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:74     .text.xEventGroupCreate:0000000000000000 xEventGroupCreate
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:107    .text.xEventGroupWaitBits:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:114    .text.xEventGroupWaitBits:0000000000000000 xEventGroupWaitBits
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:361    .text.xEventGroupWaitBits:0000000000000108 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:367    .text.xEventGroupClearBits:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:374    .text.xEventGroupClearBits:0000000000000000 xEventGroupClearBits
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:454    .text.xEventGroupGetBitsFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:461    .text.xEventGroupGetBitsFromISR:0000000000000000 xEventGroupGetBitsFromISR
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:505    .text.xEventGroupSetBits:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:512    .text.xEventGroupSetBits:0000000000000000 xEventGroupSetBits
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:654    .text.xEventGroupSync:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:661    .text.xEventGroupSync:0000000000000000 xEventGroupSync
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:854    .text.xEventGroupSync:00000000000000d0 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:859    .text.vEventGroupDelete:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:866    .text.vEventGroupDelete:0000000000000000 vEventGroupDelete
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:930    .text.vEventGroupSetBitsCallback:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:937    .text.vEventGroupSetBitsCallback:0000000000000000 vEventGroupSetBitsCallback
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:958    .text.vEventGroupClearBitsCallback:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:965    .text.vEventGroupClearBitsCallback:0000000000000000 vEventGroupClearBitsCallback
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:986    .text.uxEventGroupGetNumber:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cce5w88a.s:993    .text.uxEventGroupGetNumber:0000000000000000 uxEventGroupGetNumber

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialise
xTaskGetSchedulerState
vTaskSuspendAll
xTaskResumeAll
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
vTaskPlaceOnUnorderedEventList
xTaskRemoveFromUnorderedEventList
vPortFree
